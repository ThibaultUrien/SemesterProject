var vertexes = [
{"name" : "cec6467c7a430395e19d24d2700bda72ffab5d36", "time" : 1464012539, "y" : 0, "branches" : [0, 11], "comment" : "Merge pull request #1249 from dotty-staging/change-early-annots\n\nEvaluate annotations before completing tree of definitions", "author" : "PersonIdent[odersky, odersky@gmail.com, Mon May 23 16:08:59 2016 +0200]"},
{"name" : "3e3df656a53ae66434bea94ae7c3a834369e2c39", "time" : 1463997631, "y" : 0, "branches" : [0, 11], "comment" : "Merge pull request #1243 from dotty-staging/fix-#1240\n\nFix overriding problems", "author" : "PersonIdent[odersky, odersky@gmail.com, Mon May 23 12:00:31 2016 +0200]"},
{"name" : "77642b925cdea436755ce6e26e794e48c37b3b1a", "time" : 1463670957, "y" : 2, "branches" : [0, 11], "comment" : "Two more tests\n\nUnrelated to other commits but useful to get in.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu May 19 17:15:57 2016 +0200]"},
{"name" : "c87c0303e40ef7e0103b2606c744bc7a2b61ece4", "time" : 1463670918, "y" : 2, "branches" : [0, 11], "comment" : "Better doc comment\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu May 19 17:15:18 2016 +0200]"},
{"name" : "f1d95c286c802504b00b469bc924a39760fc9e73", "time" : 1463670851, "y" : 2, "branches" : [0, 11], "comment" : "Fix test\n\nThe previous additional test messed up partest in that file Types.scala\nwas copied twice into the partest-generated directory and then the\npos/core tests would compile both copies. This gave a double definition\nwhich manifested itself under -Yno-double-bindings as an assertion error.\n\nIdeally, partest generation would guard against this situation. For now I avoid\nthe problem by compiling the whole of core without -Ycheck, not jst Types.scala.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu May 19 17:14:11 2016 +0200]"},
{"name" : "c29e9754b94cc352337791c9e36131f5b8be385d", "time" : 1463650364, "y" : 2, "branches" : [0, 11], "comment" : "Fix dotc bootstrap failure\n\nDuring an attempted dotty bootstrap it was noted that Types.scala did not compile\nanymore, because `checkUnique` threw a `TypeError` during erasure. The issue was an\noverloaded member `name` in TermrefWithSig. In NamedType:\n\n    def name: Name\n\nIn TermRef:\n\n    def name: TermName\n\nBefore erasure, there's one member `name`, after erasure there are two (because after\nerasure result type counts). The error arose when trying to recompute a member\nof a `TermRefWithSig` where the name is `name` and the expected signature is `(Nil, ?)`.\nSince there are two members that match the name and the signature, `checkUnique`\ntriggered a `TypeError`. Before adding `checkUnique`, the previous `atSignature`\ncall would just have returned an arbitrary choice among the two alternative definitions\nof `name`.\n\nThe fix is not to use `checkUnique` but to fall back to `d.current` in the case where\nseveral alternatives appear.\n\nInterestingly, the failure only triggers when -Ycheck options are *disabled*. I added a new\ntest that compiles Types.scala without checks, so we catch this and possibly  similar bugs\nin the future.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu May 19 11:32:44 2016 +0200]"},
{"name" : "c9ac3d7267fe53dfbd3f57658049637ab218b3d5", "time" : 1463639569, "y" : 2, "branches" : [0, 11], "comment" : "Remove stray test\n\nReal test is in neg/customargs\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu May 19 08:32:49 2016 +0200]"},
{"name" : "b26b725ef25a55a325b2c8a44c1ac67272632f14", "time" : 1463639568, "y" : 2, "branches" : [0, 11], "comment" : "Handle MergeErrors in RefChecks\n\nUsed to throw an uncaught merge error in checkAllOverrides\nwhen compiling i1240c.scala.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu May 19 08:32:48 2016 +0200]"},
{"name" : "3a97b3fb546bc57afb8cbfadb27eb9e66b0842d1", "time" : 1463593402, "y" : 2, "branches" : [0, 11], "comment" : "Another test case involving super accessors\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed May 18 19:43:22 2016 +0200]"},
{"name" : "9aa800f8a9905de059b6e34554cb166a9776dff3", "time" : 1463593402, "y" : 2, "branches" : [0, 11], "comment" : "Refined handling of atSignature\n\nWe cannot throw a merge error if atSignature does not give\na unique single denotation. Counter example is compiling dotty itself,\nwhere we get a false negative during bridge generation.\n\nInstead, atSigature needs to return a normal denotation, and we\nneed to check separately where required that a denotation is in\nfact a SingleDenotation.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed May 18 19:43:22 2016 +0200]"},
{"name" : "fe5f4f3963d2d6b2f6514a362fb312bc2e7d7f94", "time" : 1463593402, "y" : 2, "branches" : [0, 11], "comment" : "Revert: ResolveOverloaded should handle alternatives that are the same TermRef\n\nThis happens once we do not merge methods with the same signature coming\nfrom the same class. (reverted from commit 83262d090a98e2374c9b3e5a1480892397d695d3)\n\nThis case no longer applies as such a situation will now give a MergeError instead.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed May 18 19:43:22 2016 +0200]"},
{"name" : "f722de7c6131b544345dbc6745b5d219de5831e7", "time" : 1463593402, "y" : 2, "branches" : [0, 11], "comment" : "A test case for overloading/overriding interactions\n\nThis showcases a tricky interaction between overloading and overriding.\nSee discussion of #1240 for context.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed May 18 19:43:22 2016 +0200]"},
{"name" : "48b716012bd72486dbf4a2bd3b293ef212f4addd", "time" : 1463593402, "y" : 2, "branches" : [0, 11], "comment" : "Issue MergeError exception for double def situations\n\nWhen finding two symbols in the same class that have the same signature\nas seen from some prefix, issue a merge error.\n\nThis is simpler and more robust than the alternative of producing an overloaded\ndenotation and dealing with it afterwards.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed May 18 19:43:22 2016 +0200]"},
{"name" : "968f1ab0cd706de8833112741407f94a6a0b2677", "time" : 1463593401, "y" : 2, "branches" : [0, 11], "comment" : "Fix test case\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed May 18 19:43:21 2016 +0200]"},
{"name" : "2dd6a7ae07cca7b03372d6b9f1fb30e0fcc975b7", "time" : 1463593401, "y" : 2, "branches" : [0, 11], "comment" : "Test case\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed May 18 19:43:21 2016 +0200]"},
{"name" : "d0f05ad6c756355bb6ea863e10a554f54f145907", "time" : 1463593401, "y" : 2, "branches" : [0, 11], "comment" : "ResolveOverloaded should handle alternatives that are the same TermRef\n\nThis happens once we do not merge methods with the same signature coming\nfrom the same class.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed May 18 19:43:21 2016 +0200]"},
{"name" : "cc0f62954e814200f47f978b857abf6ab039c9f0", "time" : 1463593401, "y" : 2, "branches" : [0, 11], "comment" : "Don't copy Any constructor to Object in Erasure\n\nOnce we do not merge methods with same signature anymore\nwe got an ambiguous overload between the constructors of\nAny and Object after erasure (when all Any methods are\nmoved to Object). To avoid this, we map the Any constructor\nto the Object constructor after erasure.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed May 18 19:43:21 2016 +0200]"},
{"name" : "f36c21ed9f79a1fc41e36d7c5221a070d83e61a7", "time" : 1463593401, "y" : 2, "branches" : [0, 11], "comment" : "Avoid merging denotations of different symbols in same class\n\n#1240 shows that we need to detect ambiguous overloads of methods\ncoming from the same base class (with different signatures there)\nthat have the same signature in some deriving class. This was\nundetected before because the two methods were simply merged into\none overloaded alternative.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed May 18 19:43:21 2016 +0200]"},
{"name" : "a5ae15e2943bd5319c86c1fc01753fc2ceeb36d6", "time" : 1463153763, "y" : 18, "branches" : [0, 11], "comment" : "Add class annotations as first step of completing the class.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri May 13 17:36:03 2016 +0200]"},
{"name" : "428642afa331fafaffa90880fc9352d6fb366a84", "time" : 1463067179, "y" : 18, "branches" : [0, 11], "comment" : "Explain specific changes in later strawman proposals\n\n... relative to CollectionStrawman1.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu May 12 17:32:59 2016 +0200]"},
{"name" : "298a3e87823ab83a807ba80cc6563e50088c16da", "time" : 1462915696, "y" : 18, "branches" : [0, 11], "comment" : "Evaluate annotations before completing tree of definitions\n\nMotive: That way we can identify annotation macros without special\nname resolution rules.\n\nThis was surprisingly easy.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue May 10 23:28:16 2016 +0200]"},
{"name" : "134ad7a6a172fec97dc438dd0aff3766a0f0944a", "time" : 1462878270, "y" : 0, "branches" : [0, 11], "comment" : "Merge pull request #1233 from felixmulder/topic/repl-syntax-highlighting\n\nSyntax highlighting for REPL using ammonite as base instead of JLine", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Tue May 10 07:04:30 2016 -0400]"},
{"name" : "181d7e41894f0e06af140dc355a7891ba737681c", "time" : 1462878216, "y" : 0, "branches" : [0, 11], "comment" : "Merge pull request #1248 from lampepfl/DarkDimius-patch-6\n\nUpdate Readme.md for ScalaDays", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Tue May 10 07:03:36 2016 -0400]"},
{"name" : "f18e27b360c15b2cb4d73a67a504e369601a898a", "time" : 1462878169, "y" : 23, "branches" : [0, 6, 11], "comment" : "Update README.md", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Tue May 10 07:02:49 2016 -0400]"},
{"name" : "c9be68e03940919a977f799d9d64c2600c30585f", "time" : 1462827327, "y" : 23, "branches" : [0, 6, 11], "comment" : "Update README.md", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon May 9 16:55:27 2016 -0400]"},
{"name" : "b3232de77b9d6890eee630ff546732b473fedf92", "time" : 1462805812, "y" : 23, "branches" : [0, 6, 11], "comment" : "Update README.md", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon May 9 10:56:52 2016 -0400]"},
{"name" : "7124da9606a3d780366bb06a89a56ebc347144dc", "time" : 1462804894, "y" : 23, "branches" : [0, 6, 11], "comment" : "Update README.md", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon May 9 10:41:34 2016 -0400]"},
{"name" : "b321c3c039a57f0d696a83748cba0e5b5a3ff533", "time" : 1462803152, "y" : 23, "branches" : [0, 6, 11], "comment" : "Update README.md", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon May 9 10:12:32 2016 -0400]"},
{"name" : "4e9fecf01cf3589f464bc1a05d9c9228aaa94cfe", "time" : 1462801993, "y" : 23, "branches" : [0, 6, 11], "comment" : "Update README.md", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon May 9 09:53:13 2016 -0400]"},
{"name" : "8baa279bac94e67d2427c21bf0294a0951fe3ab4", "time" : 1462801922, "y" : 23, "branches" : [0, 6, 11], "comment" : "Update Readme.md for ScalaDays\n\n@odersky please review", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon May 9 09:52:02 2016 -0400]"},
{"name" : "04993c7ec132b47e4241b7a89221d83c202dd95c", "time" : 1462358131, "y" : 0, "branches" : [0, 6, 11], "comment" : "Merge pull request #1245 from dotty-staging/elimself\n\neliminate self symbol in Template and ClassInfo", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed May 4 12:35:31 2016 +0200]"},
{"name" : "0900f1195b22b4a3551841e1e449fcedc752ed03", "time" : 1462191336, "y" : 31, "branches" : [0, 6, 11], "comment" : "eliminate self symbol in Template and ClassInfo\n", "author" : "PersonIdent[liu fengyun, liufengyunchina@gmail.com, Mon May 2 14:15:36 2016 +0200]"},
{"name" : "f9858a402db9a38ac0beae8bb30a36e7656386aa", "time" : 1461936510, "y" : 0, "branches" : [0, 6, 11], "comment" : "Merge pull request #1241 from dotty-staging/fix-#1222\n\nTransform annotations only if defined in current run", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri Apr 29 15:28:30 2016 +0200]"},
{"name" : "1582959b3ed6c676e5e3265282046363d2c06cec", "time" : 1461919933, "y" : 33, "branches" : [0, 11], "comment" : "Fix keywords sometimes not highlighted in multiln\n\nWhen enter pressed immediately after keyword, the highlighting would be\naborted\n", "author" : "PersonIdent[Felix Mulder, felix.mulder@gmail.com, Fri Apr 29 10:52:13 2016 +0200]"},
{"name" : "29fc55a67349145cbb23edf3f0fc0307bf9d515e", "time" : 1461919322, "y" : 33, "branches" : [0, 11], "comment" : "Add Ammonite's MIT license\n", "author" : "PersonIdent[Felix Mulder, felix.mulder@gmail.com, Fri Apr 29 10:42:02 2016 +0200]"},
{"name" : "4fadce464b2ecf0d35f1d6ff00283d6ada2ff0be", "time" : 1461919299, "y" : 33, "branches" : [0, 11], "comment" : "Rename old DottyRepl (used for power mode) using ILoop to TypeStealer\n", "author" : "PersonIdent[Felix Mulder, felix.mulder@gmail.com, Fri Apr 29 10:41:39 2016 +0200]"},
{"name" : "1c7c738a148390ffb2072fc97a81646031fb49b2", "time" : 1461918328, "y" : 36, "branches" : [0, 6, 11], "comment" : "Ensure more things are completed\n\nAs noticed by @smarter we need to ensure that classes owning\nderived type params are completed, so that trees get the\nproper symbol attachments. This triggered when I changed annotation\ntransformers - I have no idea whether how two could be related, though.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 29 10:25:28 2016 +0200]"},
{"name" : "fb959f7f7b1938ba0d3f833b4d2713fda6b904f9", "time" : 1461918204, "y" : 36, "branches" : [0, 6, 11], "comment" : "Refine todo comment\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 29 10:23:24 2016 +0200]"},
{"name" : "e64c5610ac90d2e360bc3b1e7a5409e0a3547e67", "time" : 1461916650, "y" : 36, "branches" : [0, 6, 11], "comment" : "Transform annotations only if defined in current run\n\nThere's no point transforming annotations that come from\nclassfiles. It's inefficient to do so and it's also risky\nbecause it means we'd have to make sense of Scala-2 generated trees.\n\nThis should avoid the error in #1222.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 29 09:57:30 2016 +0200]"},
{"name" : "43f3916e149aa0c17b34d39b39193620415f2664", "time" : 1461834040, "y" : 33, "branches" : [0, 11], "comment" : "Fix stdin/out for repl launched by SBT\n\nLaunching the repl with: `runMain dotty.tools.dotc.repl.Main` is now\nworking correctly\n", "author" : "PersonIdent[Felix Mulder, felix.mulder@gmail.com, Thu Apr 28 11:00:40 2016 +0200]"},
{"name" : "f010c62b8dc8baaaa9b87784d8664997bee95fa4", "time" : 1461834040, "y" : 33, "branches" : [0, 11], "comment" : "Revert Scanners and Tokens to their original form\n\nSince we decided to go with the non dotty-scanner approach these are\nunnecessary to have altered, might just as well revert them.\n", "author" : "PersonIdent[Felix Mulder, felix.mulder@gmail.com, Thu Apr 28 11:00:40 2016 +0200]"},
{"name" : "b5d6df22ab6bae982b6c840e1563d4bcbadd384b", "time" : 1461834040, "y" : 33, "branches" : [0, 11], "comment" : "Fix `:...` commands printing erroneous messages on next newline\n", "author" : "PersonIdent[Felix Mulder, felix.mulder@gmail.com, Thu Apr 28 11:00:40 2016 +0200]"},
{"name" : "4d53d338e59beb240716508e0b6d32c182a17df6", "time" : 1461834040, "y" : 33, "branches" : [0, 11], "comment" : "Fix error messages not being doubled and being on a new line\n", "author" : "PersonIdent[Felix Mulder, felix.mulder@gmail.com, Thu Apr 28 11:00:40 2016 +0200]"},
{"name" : "d1ec1407b88f70f4172ad48163f6c7e677a38958", "time" : 1461834040, "y" : 33, "branches" : [0, 11], "comment" : "Fix highlighting tokens after newline predated by '='\n", "author" : "PersonIdent[Felix Mulder, felix.mulder@gmail.com, Thu Apr 28 11:00:40 2016 +0200]"},
{"name" : "0f91408cb2d616c0ee0332b80e0d006bae3f9e9d", "time" : 1461834040, "y" : 33, "branches" : [0, 11], "comment" : "Fix interpret dummy line before prompt displayed\n", "author" : "PersonIdent[Felix Mulder, felix.mulder@gmail.com, Thu Apr 28 11:00:40 2016 +0200]"},
{"name" : "57670a38ca55cc04c9d765bdf04584cad5581d41", "time" : 1461834039, "y" : 33, "branches" : [0, 11], "comment" : "Stop interpreter from interpreting twice on enter\n", "author" : "PersonIdent[Felix Mulder, felix.mulder@gmail.com, Thu Apr 28 11:00:39 2016 +0200]"},
{"name" : "d04984596c6abfa27b217b12a42caca26f0c269f", "time" : 1461834039, "y" : 33, "branches" : [0, 11], "comment" : "Add multiline support using ammonite multilineFilter\n", "author" : "PersonIdent[Felix Mulder, felix.mulder@gmail.com, Thu Apr 28 11:00:39 2016 +0200]"},
{"name" : "96cedcdcd82148f091989836eb4959b2c3ec3382", "time" : 1461834039, "y" : 33, "branches" : [0, 11], "comment" : "Highlight comments, remove scanner wrapping syntax highlighter\n", "author" : "PersonIdent[Felix Mulder, felix.mulder@gmail.com, Thu Apr 28 11:00:39 2016 +0200]"},
{"name" : "53bd25f7e2082a787936ae833b14f873a07ff22c", "time" : 1461834039, "y" : 33, "branches" : [0, 11], "comment" : "Initial implementation featuring two different highlighters\n\nOne was implemted by hand and the other by using dotty's parser. The one\nbuilt by hand is shorter, and behaves correctly.\n\nThe scanner one is unfortunately not ready for testing - there are too\nmany things that are workarounds for it to be a good solution as of now\n\nThe code added from Ammonite is licensed under MIT, not sure where to\nput the license - but will add it once I know.\n", "author" : "PersonIdent[Felix Mulder, felix.mulder@gmail.com, Thu Apr 28 11:00:39 2016 +0200]"},
{"name" : "96fcdd9da51e1febe9e320f774424b5ac3f8ff3d", "time" : 1461833039, "y" : 0, "branches" : [0, 6, 11], "comment" : "Merge pull request #1238 from dotty-staging/fix-#1235\n\nThree fixes prompted by #1235", "author" : "PersonIdent[odersky, odersky@gmail.com, Thu Apr 28 10:43:59 2016 +0200]"},
{"name" : "d7c1c27b0765b33811326e3cf02dcd4aa12b6cd8", "time" : 1461773253, "y" : 50, "branches" : [0, 6, 11], "comment" : "Allow dependent method type for unapply.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Apr 27 18:07:33 2016 +0200]"},
{"name" : "3129c1c136d5fa8b1549ec940ea1856c135bfe85", "time" : 1461773068, "y" : 50, "branches" : [0, 6, 11], "comment" : "Revert: Better error diagnostics for \"not an extractor\" errors.\n\nNo longer needed because we are going to allow dependent method types\nin extractors, and the unary requirement is kind of obvious.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Apr 27 18:04:28 2016 +0200]"},
{"name" : "ed8e2ba6623e755662ef503c0dbda72b40c9e27f", "time" : 1461767919, "y" : 50, "branches" : [0, 6, 11], "comment" : "Dealias more types in resultType\n\nSince we now recognize more false dependencies,\nwe have to dealias the new dependencies accordingly.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Apr 27 16:38:39 2016 +0200]"},
{"name" : "89b68608dda803398e16fa2146a1b94b7e59e04e", "time" : 1461767839, "y" : 50, "branches" : [0, 6, 11], "comment" : "Add FurtureDefsOK for isBottomType\n\nTriggered by change in TypeComparer. I guess we should think of\ndropping the NotDefiendHere tests, for a long time they gave us only false\nnegatives.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Apr 27 16:37:19 2016 +0200]"},
{"name" : "42b20d7143eb3da8dbe536ef990ceef4ec861b25", "time" : 1461758502, "y" : 50, "branches" : [0, 6, 11], "comment" : "Better error diagnostics for \"not an extractor\" errors.\n\nNow explains in detail why an possibly found unapply or\nunapplySeq is ineligible.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Apr 27 14:01:42 2016 +0200]"},
{"name" : "6c0184b157dd218d4b6f854e7142efdf074e596c", "time" : 1461758502, "y" : 50, "branches" : [0, 6, 11], "comment" : "Test case\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Apr 27 14:01:42 2016 +0200]"},
{"name" : "06e76c80f01a54be53391cf74d22f4b6e226c7a0", "time" : 1461758502, "y" : 50, "branches" : [0, 6, 11], "comment" : "Fix misprediction of dependent method type status.\n\n#1235.scala contains a case of a method type of the form\n\n      (x: T) ... x.tail.N ...\n\nwhere N is an alias. We need to follow the alias to prevent\na mischaracterization that this is a dependent method type.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Apr 27 14:01:42 2016 +0200]"},
{"name" : "c653a95ad4cfcaf881f77a6ab698945480b716e4", "time" : 1461758501, "y" : 50, "branches" : [0, 6, 11], "comment" : "Avoid forming ???.T type.\n\nMore generally, avoid forming a type selection on a term prefix which\nhas a bottom class as a type. There might be other places where we have\nto take similar measures. For now, this one fixes #1235.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Apr 27 14:01:41 2016 +0200]"},
{"name" : "5e599cc14ac0dfe9f7b7605e537808c927e7a6a3", "time" : 1461758501, "y" : 50, "branches" : [0, 6, 11], "comment" : "Rename Reporting#println -> Reporting#echo\n\nThere's a trap otherwise that, when in a class inheriting\nfrom Context (and with it Reporting) a call to println will\ngo to this.println and therefore might not print at all, if\nthe current context buffers messages. I lost a lot of time\non this on several occasions when I scratched my head why\na simple debug println would not show. Better avoid this in\nthe future for myself and others.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Apr 27 14:01:41 2016 +0200]"},
{"name" : "4d7aaf637edafa1305602fc9f63b4c2ed4288ad5", "time" : 1461680096, "y" : 0, "branches" : [0, 6, 11], "comment" : "Merge pull request #1237 from dotty-staging/vc-ofDim\n\narrayConstructors: do not rewrite ofDim for arrays of value classes", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Tue Apr 26 16:14:56 2016 +0200]"},
{"name" : "ef2c479a752e3811c3a7f76bf355ddce955bb464", "time" : 1461670535, "y" : 0, "branches" : [0, 6, 11], "comment" : "Merge pull request #1231 from dotty-staging/fix-equality\n\nFixes related to equality strawman", "author" : "PersonIdent[odersky, odersky@gmail.com, Tue Apr 26 13:35:35 2016 +0200]"},
{"name" : "6b0ae0b16d7799da478771ff9368ea241013f43b", "time" : 1461670530, "y" : 61, "branches" : [0, 6, 11], "comment" : "Merge branch 'master' into fix-equality", "author" : "PersonIdent[odersky, odersky@gmail.com, Tue Apr 26 13:35:30 2016 +0200]"},
{"name" : "02f1ec90f02d347da8d9cafff8782906699cac66", "time" : 1461670504, "y" : 0, "branches" : [0, 6, 11], "comment" : "Merge pull request #1227 from dotty-staging/implement-1221\n\nAllow to specify per-callsite @tailrec annotation.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Tue Apr 26 13:35:04 2016 +0200]"},
{"name" : "769f8a080ec7513cb59c74813de6b562f6b641bb", "time" : 1461623200, "y" : 63, "branches" : [0, 6, 11], "comment" : "arrayConstructors: do not rewrite ofDim for arrays of value classes\n", "author" : "PersonIdent[VladimirNik, vladimir.nikolaev9@gmail.com, Tue Apr 26 00:26:40 2016 +0200]"},
{"name" : "d5dfd16083728d6d4afdf58a224a4bd2829969b1", "time" : 1461339802, "y" : 61, "branches" : [0, 6, 11], "comment" : "Add test that demonstrate that #878 is fixed\n\nIt was fixed by 2460f9603b0f0ed1d73dfea99edcee9ba6261d36\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Fri Apr 22 17:43:22 2016 +0200]"},
{"name" : "05bfe78c6f881884272e31cfd1eea993a1ad9f8a", "time" : 1461339295, "y" : 61, "branches" : [0, 6, 11], "comment" : "Comment out debug println\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 22 17:34:55 2016 +0200]"},
{"name" : "89f9091c2d10aa23c5d6259694df104fc14c60f7", "time" : 1461319591, "y" : 61, "branches" : [0, 6, 11], "comment" : "Support implicitNotFound annotation\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 22 12:06:31 2016 +0200]"},
{"name" : "320ca51f0226cf61dfa6d882d30de15ab221f07b", "time" : 1461246058, "y" : 61, "branches" : [0, 6, 11], "comment" : "Avoid propagating unresolved implicits\n\nWhen an implicit argument is not found, we should in any case\nassume the result type of the implicit method as the type of\nthe tree (after reporting an error, of course). If we don't\ndo that, we get implicit errors on weird positions when we try\nto find an implicit argument for the same tree again. This\ncaused a spurious error in subtyping.scala, and also caused\nan additional error at the end of EqualityStrawman1.scala.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Apr 21 15:40:58 2016 +0200]"},
{"name" : "f320ac848ae418b0ed9a1870c0afd7b6420d31c1", "time" : 1461245922, "y" : 61, "branches" : [0, 6, 11], "comment" : "Straw man for multiversal equality.\n\nThis test shows how we can make equality non-universal in Scala. It also\nexhibited the two bugs fixed in the previous two commits.\n\nAlso related: SI-9763.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Apr 21 15:38:42 2016 +0200]"},
{"name" : "3c38a6baccc5343f55985347c0f58d184d6becee", "time" : 1461245743, "y" : 61, "branches" : [0, 6, 11], "comment" : "Fix constraint handling in eitherIsSubtype\n\nThe logic in typeComparer#eitherIsSubtype was flawed.\n\nIn the case of A & B <: C, if A <: C but not B <: C\nwe need to return with the constraint of A <: C, but\nwe returned with the initial constraint instead.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Apr 21 15:35:43 2016 +0200]"},
{"name" : "2460f9603b0f0ed1d73dfea99edcee9ba6261d36", "time" : 1461245557, "y" : 61, "branches" : [0, 6, 11], "comment" : "Always minimize type variables when interpolating an expected type of an implicit.\n\nThis was suggested in #878.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Apr 21 15:32:37 2016 +0200]"},
{"name" : "d20314fd9a741e1a3203dbacf0080e9e923559ca", "time" : 1461228827, "y" : 71, "branches" : [0, 6, 11], "comment" : "Fix test failures in tailcall due to name clashes.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 21 10:53:47 2016 +0200]"},
{"name" : "0514d0efcdf159ea0ffdb51ac1e9a59d3ee429c0", "time" : 1461158978, "y" : 0, "branches" : [0, 6, 11], "comment" : "Merge pull request #1219 from dotty-staging/fix-strawmans\n\nFix strawmans", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed Apr 20 15:29:38 2016 +0200]"},
{"name" : "7cd8257730563d4b8671b2d342d35a5952119205", "time" : 1461010778, "y" : 71, "branches" : [0, 6, 11], "comment" : "Add neg-test for method with @tailrec callsites that is not final.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Apr 18 22:19:38 2016 +0200]"},
{"name" : "d8bad7adaba9af5083bf8b92454fb50dfb48b925", "time" : 1461010750, "y" : 71, "branches" : [0, 6, 11], "comment" : "Tailrec:report error if method containing @tailrec callsite isn't final\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Apr 18 22:19:10 2016 +0200]"},
{"name" : "ca47bea3eed87eaa6005161c831805cd68fd6e59", "time" : 1461010326, "y" : 71, "branches" : [0, 6, 11], "comment" : "Test #1221.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Apr 18 22:12:06 2016 +0200]"},
{"name" : "d4589a4c337a37fbac29449c3a8fb6a7dad85c66", "time" : 1461010306, "y" : 71, "branches" : [0, 6, 11], "comment" : "Implement #1221. Allow to specify per-callsite @tailrec annotation.\n\nSee examples in following commit.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Apr 18 22:11:46 2016 +0200]"},
{"name" : "247e91365f06cd482bf5fc456bd643d89acca157", "time" : 1460987769, "y" : 0, "branches" : [0, 6, 11], "comment" : "Merge pull request #1188 from dotty-staging/remove-newarray-magic\n\nFix #1167: Reduce the magic in Arrays.newRefArray. Implement multidimensional arrays", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon Apr 18 15:56:09 2016 +0200]"},
{"name" : "5399fbed6d33dca132ca27314f2eba414aea4415", "time" : 1460984489, "y" : 78, "branches" : [0, 6, 11], "comment" : "Address review comments of #1188\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Apr 18 15:01:29 2016 +0200]"},
{"name" : "0b1ca2d823ba0eac5558c3bcd1750c84a250cd18", "time" : 1460983617, "y" : 78, "branches" : [0, 6, 11], "comment" : "Address review comments.\n\nhttps://github.com/lampepfl/dotty/pull/1188\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Apr 18 14:46:57 2016 +0200]"},
{"name" : "55e2ae676e32eb21c9e0c2eabc2867704c93d34c", "time" : 1460983617, "y" : 78, "branches" : [0, 6, 11], "comment" : "ArrayConstructors: don't optimise creating of multi-dim generic arrays.\n\nThey need to be created through their class tag.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Apr 18 14:46:57 2016 +0200]"},
{"name" : "c74bb42251eb233c858810d83300ba78876a2b2c", "time" : 1460983617, "y" : 78, "branches" : [0, 6, 11], "comment" : "Separate handling of genericArray creation from normal ones.\n\nThis allowed to simplify the code in both Applications and tpd.newArray.\nNow, only creation of generic arrays is handled by typer.\nAll other arrays are handled in ArrayConstructors phase.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Apr 18 14:46:57 2016 +0200]"},
{"name" : "9d7db0c2fff12420f7ef37119746860622e40387", "time" : 1460983617, "y" : 78, "branches" : [0, 6, 11], "comment" : "Bring back convertNewArray into typer.\n\nIt's needed in order to create calls to newGenricArray\nas it needs to infer the ClassTag.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Apr 18 14:46:57 2016 +0200]"},
{"name" : "2c370bdec8d2a8a2c4b339d4e7f18e6215b03244", "time" : 1460983617, "y" : 78, "branches" : [0, 6, 11], "comment" : "make tpd.JavaSeqLiteral return JavaSeqLiteral\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Apr 18 14:46:57 2016 +0200]"},
{"name" : "3fc2b6e022a9ca38f93aa778999516d8e67576cf", "time" : 1460983617, "y" : 78, "branches" : [0, 6, 11], "comment" : "Add a test to check multidimenstionall arrays.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Apr 18 14:46:57 2016 +0200]"},
{"name" : "57fcea6ee648164d7fd7597b34d50709ddaf4952", "time" : 1460983617, "y" : 78, "branches" : [0, 6, 11], "comment" : "Erasure: Erase constant literals.\n\nThe problem comes from JavaArrayTypes.\nThey are invalid before erasure, and cannot be pickled,\nwhile Array[T] is invalid after erasure and should be erased.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Apr 18 14:46:57 2016 +0200]"},
{"name" : "3f41bd6a4c525eb7c40fd96aba7997c4dcfb8b86", "time" : 1460983617, "y" : 78, "branches" : [0, 6, 11], "comment" : "Update to new version of DottyBackendInterface.\n\nThat knows that there exists only single magical array method.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Apr 18 14:46:57 2016 +0200]"},
{"name" : "7e2352ac7a5968958156c5fdab54b3e9e9f2808f", "time" : 1460983617, "y" : 78, "branches" : [0, 6, 11], "comment" : "Decouple handling array constructors from typer.\n\nIt's done in a separate ArrayConstructors phase now.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Apr 18 14:46:57 2016 +0200]"},
{"name" : "0211e56d104934188007e3c02eac131b81460100", "time" : 1460983463, "y" : 78, "branches" : [0, 6, 11], "comment" : "Get rid of all new***Array methods expect one.\n\nThis one is able to encode creation of array of any type and any dimension.\nNote, it does not handle value classes.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Apr 18 14:44:23 2016 +0200]"},
{"name" : "27deb1e0d41a4dfc24a4cac8a311c30471d454e5", "time" : 1460983463, "y" : 78, "branches" : [0, 6, 11], "comment" : "Fix #1167: Remove the magic from Arrays.newRefArray.\n\nPreviously, the method `Arrays.newRefArray` was one of the only 3\nmethods that are kept generic after erasure. This commit removes\nthis magic, by making it take an actual `j.l.Class[T]` as\nparameter.\n\nMoreover, the methods `newXArray` all receive an actual body,\nimplemented on top of Java reflection, which means that a back-end\ndoes not *have to* special-case those methods for correctness.\nIt might still be required for performance, though, depending on\nthe back-end.\n\nThe JVM back-end is made non-optimal in this commit, precisely\nbecause it does not specialize that method anymore. Doing so\nrequires modifying the fork of scalac that we use, which should\nbe done separately.\n\nThe JS back-end is adapted simply by doing nothing at all on any\nof the newXArray methods. It will normally call the user-space\nimplementations which use reflection. The Scala.js optimizer will\ninline and intrinsify the reflective calls, producing optimal\ncode, at the end of the day.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Apr 18 14:44:23 2016 +0200]"},
{"name" : "88baa04f2bc6b89d3e65226973d7b72fdf715095", "time" : 1460983463, "y" : 78, "branches" : [0, 6, 11], "comment" : "Implement loading static fields in the Scala.js back-end.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Apr 18 14:44:23 2016 +0200]"},
{"name" : "8c9a3f7ce5fa7548f9611dc2a14900a5bd42c105", "time" : 1460983429, "y" : 0, "branches" : [0, 6, 11], "comment" : "Merge pull request #1205 from dotty-staging/method-check\n\nYcheck that all methods have method type", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon Apr 18 14:43:49 2016 +0200]"},
{"name" : "16b90f7ca501dc87f2c3a12ac2cac1c98da6b7b6", "time" : 1460983386, "y" : 0, "branches" : [0, 6, 11], "comment" : "Merge pull request #1218 from dotty-staging/benchmarks\n\nWorkaround for ScalaMeter incorrect report path", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon Apr 18 14:43:06 2016 +0200]"},
{"name" : "79a284fe9229adecebffb29d48687fe96b292746", "time" : 1460907736, "y" : 93, "branches" : [0, 6, 11], "comment" : "Fix check files\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Apr 17 17:42:16 2016 +0200]"},
{"name" : "b8472d8c6e6c9a267088817eb8e05577e5eda60b", "time" : 1460904160, "y" : 93, "branches" : [0, 6, 11], "comment" : "Updates of strawman\n\nBring strawman-4 and strawman-5 to feature-parity.\nTest also strawman-4.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Apr 17 16:42:40 2016 +0200]"},
{"name" : "8cb73c0f5ca8bd809d0b9d7549951678f2240a61", "time" : 1460807749, "y" : 93, "branches" : [0, 6, 11], "comment" : "Drop type annotation in collection test\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Apr 16 13:55:49 2016 +0200]"},
{"name" : "997afcbc9d8598496bcf6a4d1f0bed11c757243a", "time" : 1460807734, "y" : 93, "branches" : [0, 6, 11], "comment" : "Strawman polishing\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Apr 16 13:55:34 2016 +0200]"},
{"name" : "b98e6bfe13fbb7383fd1860df349bfa67ee96c91", "time" : 1460806986, "y" : 0, "branches" : [0, 6, 11], "comment" : "Merge pull request #1200 from dotty-staging/docs-denotations\n\nDocs and polishing for denotation insertions", "author" : "PersonIdent[odersky, odersky@gmail.com, Sat Apr 16 13:43:06 2016 +0200]"},
{"name" : "3ef41153463fbc89a3dda3a648ae0320aef95555", "time" : 1460806961, "y" : 0, "branches" : [0, 6, 11], "comment" : "Merge pull request #1211 from dotty-staging/fix-#1202\n\nFix Tasty errors", "author" : "PersonIdent[odersky, odersky@gmail.com, Sat Apr 16 13:42:41 2016 +0200]"},
{"name" : "b3f81fdcdca27a6fe647bce367ef221c917ea7b5", "time" : 1460730920, "y" : 93, "branches" : [0, 6, 11], "comment" : "Add check file\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 15 16:35:20 2016 +0200]"},
{"name" : "cae12d368ae23204a5fd58156e1f6f214471172c", "time" : 1460729179, "y" : 93, "branches" : [0, 6, 11], "comment" : "Add companions to value classes during desugarings\n\nThis means companions will be pickled and we can drop\nthe special treatement in transformInfo of FirstTransform.\nThat method is problematic, since it enters new symbols into\na class scope. This is not allowed, since transformInfo needs\nto be purely functional, side effects are not permitted\n(`enteredAfter` does not work either).\n\nThe problem manifested itself when compiling colltest5 with\na requirement failure in the code of `entered` when called\nfrom FirstTransform (trying to enter in a frozen class).\n\nTODO: Once we use statics for LazyVals we can get rid\nof the \"add companion object\" logic in FirstTransform\nalltogether.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 15 16:06:19 2016 +0200]"},
{"name" : "1607c7b0df62b19b3aafeb9966deb8faffcce605", "time" : 1460726431, "y" : 93, "branches" : [0, 6, 11], "comment" : "Make Names immutable Seqs\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 15 15:20:31 2016 +0200]"},
{"name" : "c32a2acee179fecf1f9d5c53aab94547a1ee2d67", "time" : 1460726400, "y" : 93, "branches" : [0, 6, 11], "comment" : "Tweak in NameOps\n\nThe previous version seemed to fail non-deterministaically, but after a while\nI could not reproduce it anymore. Anyway, leaving the change in.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 15 15:20:00 2016 +0200]"},
{"name" : "9481fe9b7bd015437e56d33f7568887dc3ca8e5b", "time" : 1460722312, "y" : 93, "branches" : [0, 6, 11], "comment" : "Dealias applied type constructors\n\nDealias TypeRefs that get applied to type arguments. Without that\nprecaution we get Stackoverflows in lookupRefined/betaReduce for\nCollectionStrawMan5.scala.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 15 14:11:52 2016 +0200]"},
{"name" : "eb2979d895e56be73fcc3bb14bd34198628fd8d9", "time" : 1460722164, "y" : 93, "branches" : [0, 6, 11], "comment" : "Fix toString and productPrefix of case objects\n\nNeed to drop the final `$' in both cases.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 15 14:09:24 2016 +0200]"},
{"name" : "6545934f06f5c22ab4acacf28ca2206b898e021e", "time" : 1460722114, "y" : 93, "branches" : [0, 6, 11], "comment" : "Fix #765 for super accessors\n\nPartial fix of #765. Hack to make sure unexpandedName\nworks for super accessor names.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 15 14:08:34 2016 +0200]"},
{"name" : "98d7183067f6a48957988ba99d234f60ab0246be", "time" : 1460722064, "y" : 93, "branches" : [0, 6, 11], "comment" : "Create LambdaTraits referred to from Unpickler\n\nLambdaTraits are created on demand; we need to make sure\nthey exist when referred to from Tasty.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 15 14:07:44 2016 +0200]"},
{"name" : "a77eb1592b5981419c99074caee876665bbf4daa", "time" : 1460721863, "y" : 93, "branches" : [0, 6, 11], "comment" : "Small improvements in Types\n\n1) Print RefinedTypes with their hashCode so that we can correlated with RefinedThis types\n2) Fast abort of instantiate in case we have determined that it is not safe anyway\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 15 14:04:23 2016 +0200]"},
{"name" : "371e8a7bf2db6ba17b5655265fbcde62c32de646", "time" : 1460719335, "y" : 108, "branches" : [0, 6, 11], "comment" : "Ycheck that all methods have method type\n", "author" : "PersonIdent[liu fengyun, liufengyunchina@gmail.com, Fri Apr 15 13:22:15 2016 +0200]"},
{"name" : "2cd72de0cfe7c24726cdabd1783740e20b366328", "time" : 1460713342, "y" : 109, "branches" : [0, 6, 11], "comment" : "store all benchmark results instead of doing expoential backoff\n", "author" : "PersonIdent[liu fengyun, liufengyunchina@gmail.com, Fri Apr 15 11:42:22 2016 +0200]"},
{"name" : "74634c2a27539ade96d1e4dcab8f213a0bdbb465", "time" : 1460712057, "y" : 93, "branches" : [0, 6, 11], "comment" : "New tests\n\nNew CollectionStrawMan5, executed as runttest in two different ways:\n\n - built with scalac, test compiled by dotty in tests/run.\n - built with dotty, test compiled by dotty using separate compilation.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 15 11:20:57 2016 +0200]"},
{"name" : "8af61ab2df46456fb943ce614c4d22b22a297239", "time" : 1460671487, "y" : 0, "branches" : [0, 6, 11], "comment" : "Merge pull request #1217 from dotty-staging/fix-1216\n\nFix #1216 Desugar: vals that are desugared PatDef may need setters.", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Fri Apr 15 00:04:47 2016 +0200]"},
{"name" : "3eb30ade5c85250535ee2fbac7208b114255ccdd", "time" : 1460665008, "y" : 109, "branches" : [0, 6, 11], "comment" : "workaround for ScalaMeter incorrect report path\n\nThe ScalaMeter issue is reported here:\n\nhttps://github.com/scalameter/scalameter/pull/163/files\n\nThe issue exists both in v0.7 and v0.6. As dotty uses v0.6 now,\nuse this workaround until we upgrate to a new version of ScalaMeter.\n", "author" : "PersonIdent[liu fengyun, liufengyunchina@gmail.com, Thu Apr 14 22:16:48 2016 +0200]"},
{"name" : "4d805dd6806ab85981c77683681a7e31d6222238", "time" : 1460646501, "y" : 113, "branches" : [0, 6, 11], "comment" : "Check that #1216 is fixed.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 14 17:08:21 2016 +0200]"},
{"name" : "c47eba5dd805c355efa93d21ac881d1ca755eef4", "time" : 1460646469, "y" : 113, "branches" : [0, 6, 11], "comment" : "Fix #1216 Desugar: vals that are desugared PatDef may need setters.\n\nSetters are normally synthesised in Desugar while expanding the ValDef.\nIf the tree is a PatDef it is being desugared into several ValDefs that\nmay need to be desugared once again.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 14 17:07:49 2016 +0200]"},
{"name" : "7ea24c63ad57029b8e68ff00f5978e0e9058f60b", "time" : 1460567463, "y" : 115, "branches" : [0, 6, 11], "comment" : "Update TASTY tests for dotty/src\n", "author" : "PersonIdent[VladimirNik, vladimir.nikolaev9@gmail.com, Wed Apr 13 19:11:03 2016 +0200]"},
{"name" : "b56f5c9620800adfaa27e359754be4b9a7aab4fe", "time" : 1460379838, "y" : 0, "branches" : [0, 6, 11], "comment" : "Merge pull request #1213 from felixmulder/topic/comment-parsing-fix\n\nFix issues with `enterBlock` for comment parsing", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon Apr 11 15:03:58 2016 +0200]"},
{"name" : "dfcb26ec6806d361334f12cb31e574ef57b2f7c5", "time" : 1460359384, "y" : 117, "branches" : [0, 6, 11], "comment" : "Fix issues with `enterBlock` for comment parsing\n", "author" : "PersonIdent[Felix Mulder, felix.mulder@gmail.com, Mon Apr 11 09:23:04 2016 +0200]"},
{"name" : "6942127668d0c9fe60e4b11d952adf2f7e1fee72", "time" : 1460197754, "y" : 115, "branches" : [0, 6, 11], "comment" : "Rearrange pickle tests\n\n1) Move passing test to pickling\n2) Add test case for #1212 in pending\n3) Disable annotations/internal in pickling tests. They lead to a stable symbol error\n   which is explainable (modifiers are read before symbol is created).\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Apr 9 12:29:14 2016 +0200]"},
{"name" : "0907f5bd5cc9f57b01c5b73403463c20b857d632", "time" : 1460197634, "y" : 115, "branches" : [0, 6, 11], "comment" : "Avoid creating a SourceFile annotation for SourceFile itself\n\nThis leads to an infinite cycle when trying to unpickling, because\nthe modifiers and annotations of a symbol are read before the symbol\nitself is created.\n\nSee #1212 for the general case.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Apr 9 12:27:14 2016 +0200]"},
{"name" : "5aa59ac17e6f48719f8b52048e0b86570e9399e3", "time" : 1460193370, "y" : 115, "branches" : [0, 6, 11], "comment" : "Simplify handling of sourcefiles in Tasty info\n\nInstead of separate source file sections, pickle SourceFile as an\nannotation of all toplevel classes.\n\nWe represent it like this anyway when reading back Tasty-defined classes.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Apr 9 11:16:10 2016 +0200]"},
{"name" : "fcf0efe1d70bd71b212f07a5764196860a7c4148", "time" : 1460127316, "y" : 0, "branches" : [0, 6, 11], "comment" : "Merge pull request #1151 from felixmulder/topic/wip-docstrings\n\nAdd support for raw docstrings in ASTs", "author" : "PersonIdent[odersky, odersky@gmail.com, Fri Apr 8 16:55:16 2016 +0200]"},
{"name" : "f9d27c9f63ed1852b372757aadc517ec02cb17ff", "time" : 1460120709, "y" : 115, "branches" : [0, 6, 11], "comment" : "Store source files as normal paths, not canonical ones.\n\nThis is the same as what Java does for its ClassFile attribute.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 8 15:05:09 2016 +0200]"},
{"name" : "5debb0971aff9cfa68ed9db4158753fbd8d6b519", "time" : 1460120640, "y" : 115, "branches" : [0, 6, 11], "comment" : "Explain isTyper field in Phase.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 8 15:04:00 2016 +0200]"},
{"name" : "1c56d8ca76626f2fa83bc9f6bbb74db053324a61", "time" : 1460116119, "y" : 0, "branches" : [0, 6, 11], "comment" : "Merge pull request #1201 from liufengyun/i972\n\nCheck Java classes are not used as objects", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri Apr 8 14:48:39 2016 +0300]"},
{"name" : "b37a2a898223049e6ac4c5ad2588e7018319709b", "time" : 1460099525, "y" : 115, "branches" : [0, 6, 11], "comment" : "Add source file for SourceFile annotation\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 8 09:12:05 2016 +0200]"},
{"name" : "20175a01baf6dc3129f72c16f205832901098956", "time" : 1460065704, "y" : 115, "branches" : [0, 6, 11], "comment" : "Fix unpickling of Java SeqLiterals\n\nTwo problems were fixed:\n\n - isJava needs to look at function symbol, not its type (references\n   to Java methods get normal MethodTypes not JavMethodTypes)\n\n - we also need to handle the case where the repeated argument is\n   wrspped in a type ascription.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Apr 7 23:48:24 2016 +0200]"},
{"name" : "56b948c332993014e13c4c3e192b3573f9c46462", "time" : 1460065445, "y" : 115, "branches" : [0, 6, 11], "comment" : "Update TastyFormat for SeqLiteral\n\nSeqLiteral have an elemTpt, which was missing in format.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Apr 7 23:44:05 2016 +0200]"},
{"name" : "88eb98ffc91f2954eb0ed305d19d46845f35ab33", "time" : 1460062361, "y" : 115, "branches" : [0, 6, 11], "comment" : "Fix flags when unpickling setters of parameter accessors\n\nParamAccessor is not a pickled flag. This is not a problem for\nnormal parameter accessors which are pickled as PARAM fields. But setters\nof parameter accessors also need to have the flag set (and Deferred reset).\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Apr 7 22:52:41 2016 +0200]"},
{"name" : "29e5792ad7ea1209f0141000449649e8cb943b65", "time" : 1460059075, "y" : 115, "branches" : [0, 6, 11], "comment" : "Test cases\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Apr 7 21:57:55 2016 +0200]"},
{"name" : "cc7acead9472643a2bdf73ac49d8d28f444d5fce", "time" : 1460058839, "y" : 115, "branches" : [0, 6, 11], "comment" : "Take SourceFile annotations into account when computing sourceFile\n\nIf a file was loaded from TASTY, it can not still have a non-null source file,\nsince the source file is unpickled into the annotation of a top-level class.\n\nAlso, fix typo in previous commit.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Apr 7 21:53:59 2016 +0200]"},
{"name" : "8ddfa83177c5962e06a0a2ee2365e2e62ea6dfa0", "time" : 1460058442, "y" : 115, "branches" : [0, 6, 11], "comment" : "Add unpickled source file path as annotation to root symbols\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Apr 7 21:47:22 2016 +0200]"},
{"name" : "cb1f38669abb118697e1351822fa6705f52dcce7", "time" : 1460058399, "y" : 115, "branches" : [0, 6, 11], "comment" : "Pickle sourcefile attribute with canonical path\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Apr 7 21:46:39 2016 +0200]"},
{"name" : "b3b3f3c31946c69b8ea03af352331482268fc16a", "time" : 1460058370, "y" : 115, "branches" : [0, 6, 11], "comment" : "Fix reading of SourceFile attribute from Tasty\n\nThe previous path name always had a \"Simple(...)\" wrapped around it.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Apr 7 21:46:10 2016 +0200]"},
{"name" : "3e0be576398673d33ff15a6e117e04c5d5cc016f", "time" : 1460058241, "y" : 115, "branches" : [0, 6, 11], "comment" : "Add dotty.annotation.internal.SourceFile annotation\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Apr 7 21:44:01 2016 +0200]"},
{"name" : "90f9653d80ef92fb81d3661148d8d51da1e4b568", "time" : 1460044885, "y" : 115, "branches" : [0, 6, 11], "comment" : "Make first phase of FromTasty not be a Typer\n\n`isTyper` is used to enable some error checking and handling, which\nneed not be done when in FromTasty.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Apr 7 18:01:25 2016 +0200]"},
{"name" : "e2cdfa3123d311773d34b10f5979181cecd8acf1", "time" : 1460044784, "y" : 115, "branches" : [0, 6, 11], "comment" : "Augment test case\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Apr 7 17:59:44 2016 +0200]"},
{"name" : "03e8c54c0165d129b12bdde29b2482dd1758e418", "time" : 1460044767, "y" : 115, "branches" : [0, 6, 11], "comment" : "Treat type parameters of secondary constructors as aliases\n\n... of class parameters using the gadt mechanism. Previously they were encoded as aliases\nby hardcoding alias bounds in the type parameter declaration, but that then leads to\nweird behavior and failures in unpickling.\n\nTo make this work, we also need to propagate gadt bounds into the this-call context.\n\nTest case in pickling/i1202a.scala.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Apr 7 17:59:27 2016 +0200]"},
{"name" : "306d422f1e3017731d1f9266f9d445e77ea73105", "time" : 1460044565, "y" : 115, "branches" : [0, 6, 11], "comment" : "Take type parameters for this(...) constructor calls from prefix\n\nPreviously, those were inferred from arguments, but this is wrong\nbecause we implicitly assume that the type parameters of the constructor\nand the type parameters of the class are the same.\n\nI could not find a test that fails for this. But if you look at the\n-Xprint:front output of pos/i941.scala, you notice that the\ninferred argument to the this(...) call was `Nothing` where\nit should have been `A`.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Apr 7 17:56:05 2016 +0200]"},
{"name" : "422b06126d3809f4db11dba0988cd21857e1f9de", "time" : 1460044315, "y" : 115, "branches" : [0, 6, 11], "comment" : "Search implicit arguments in the same context as typing explicit ones\n\nFor explicit arguments of this(...) constrictor calls we have a special\ncontext that hides members of the current class. But for implicit arguments\nwe did not. This led to implicit shadowing errors for\nscala.collection.immutable.PagedSeq when secondary constructor\ntype parameters were fixed (as done in subsequent commits).\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Apr 7 17:51:55 2016 +0200]"},
{"name" : "60379c2eae264547c7fefcbab45b1fca2352e153", "time" : 1460023402, "y" : 140, "branches" : [0, 6, 11], "comment" : "Remove old datastructure for comments\n", "author" : "PersonIdent[Felix Mulder, felix.mulder@gmail.com, Thu Apr 7 12:03:22 2016 +0200]"},
{"name" : "c7730ad9ea99ce7fa53e4cddefdd2afd9f60ce20", "time" : 1460015923, "y" : 140, "branches" : [0, 6, 11], "comment" : "Add commandline argument `-Ykeep-comments` to remove hardcoding\n", "author" : "PersonIdent[Felix Mulder, felix.mulder@gmail.com, Thu Apr 7 09:58:43 2016 +0200]"},
{"name" : "f43f520a1a6e60d4a6020af97c52dd6c43ea75cd", "time" : 1460012225, "y" : 140, "branches" : [0, 6, 11], "comment" : "Add binding between Symbol and Untyped tree in base context\n\nThis commit also adds a printer for use by dottydoc.\n", "author" : "PersonIdent[Felix Mulder, felix.mulder@gmail.com, Thu Apr 7 08:57:05 2016 +0200]"},
{"name" : "844683edb78f45bf37949bd923f56fc98a68c837", "time" : 1460011228, "y" : 140, "branches" : [0, 6, 11], "comment" : "Implement comments as attachments instead of tree members\n", "author" : "PersonIdent[Felix Mulder, felix.mulder@gmail.com, Thu Apr 7 08:40:28 2016 +0200]"},
{"name" : "8513dd692cf690a48b69329b60e1cbb852842f12", "time" : 1460011227, "y" : 140, "branches" : [0, 6, 11], "comment" : "Change tests to be based on JUnit, rename comments variable\n", "author" : "PersonIdent[Felix Mulder, felix.mulder@gmail.com, Thu Apr 7 08:40:27 2016 +0200]"},
{"name" : "6c8265c6cc3555e00f82cf4909fea5e95d1a2f94", "time" : 1460011227, "y" : 140, "branches" : [0, 6, 11], "comment" : "Add docstring support for types, vals, vars and defs\n", "author" : "PersonIdent[Felix Mulder, felix.mulder@gmail.com, Thu Apr 7 08:40:27 2016 +0200]"},
{"name" : "c66998bc56ba73b5b2cbbf6b10f4d5b83017db13", "time" : 1460011227, "y" : 140, "branches" : [0, 6, 11], "comment" : "Fix association of docstrings based on posisition\n\nThis commit fixes errors that would've occurred in this situation:\n\n```\n/** Docstring 1 */ <- this one would've been chosen\n/** Docstring 2 */\n/** Docstring 3 */\nclass Class\n```\n\nAnd this situation:\n\n```\n/** Docstring 1 */\ntrait Trait\n/** Docstring 2 */ <- this one would've been chosen\n```\n", "author" : "PersonIdent[Felix Mulder, felix.mulder@gmail.com, Thu Apr 7 08:40:27 2016 +0200]"},
{"name" : "3aab803d513cec98dab8a58e92924d96662a7d7d", "time" : 1460011227, "y" : 140, "branches" : [0, 6, 11], "comment" : "Add package object support\n", "author" : "PersonIdent[Felix Mulder, felix.mulder@gmail.com, Thu Apr 7 08:40:27 2016 +0200]"},
{"name" : "ee5413751183d4ab217cf63fc9c1ac7b33ff4710", "time" : 1460011227, "y" : 140, "branches" : [0, 6, 11], "comment" : "Add ability to parse nested classes/traits docstrings\n", "author" : "PersonIdent[Felix Mulder, felix.mulder@gmail.com, Thu Apr 7 08:40:27 2016 +0200]"},
{"name" : "7f20aef772c1bdc6e0a699a82f179d93934a1555", "time" : 1460011227, "y" : 140, "branches" : [0, 6, 11], "comment" : "Fix traits w/o bodies not getting the correct docstring\n", "author" : "PersonIdent[Felix Mulder, felix.mulder@gmail.com, Thu Apr 7 08:40:27 2016 +0200]"},
{"name" : "3b4906d9dc5621d595259254057dd5649e4f9862", "time" : 1460011227, "y" : 140, "branches" : [0, 6, 11], "comment" : "Add tests for classes and traits\n", "author" : "PersonIdent[Felix Mulder, felix.mulder@gmail.com, Thu Apr 7 08:40:27 2016 +0200]"},
{"name" : "0e6cce669a784ff1bb209372b191d0985e0c1e61", "time" : 1460011226, "y" : 140, "branches" : [0, 6, 11], "comment" : "Add initial support for raw docstrings in ASTs\n", "author" : "PersonIdent[Felix Mulder, felix.mulder@gmail.com, Thu Apr 7 08:40:26 2016 +0200]"},
{"name" : "474d99792fd330f59f7b75b45bee80f52ce65082", "time" : 1459934620, "y" : 0, "branches" : [0, 6, 11], "comment" : "Merge pull request #1186 from dotty-staging/fix-#1185\n\nImprovements to cyclic checking, avoidance, named parameters", "author" : "PersonIdent[odersky, odersky@gmail.com, Wed Apr 6 11:23:40 2016 +0200]"},
{"name" : "1a6eedd4fb714b3769bbb07eb8636995f961c4a6", "time" : 1459934578, "y" : 0, "branches" : [0, 6, 11], "comment" : "Merge pull request #1199 from dotty-staging/fix-stale-sym\n\nMake erased value type take a TypeRef instead of a ClassSymbol", "author" : "PersonIdent[odersky, odersky@gmail.com, Wed Apr 6 11:22:58 2016 +0200]"},
{"name" : "8dff0c6e2512c26c89b3f065c89863572ef50a16", "time" : 1459934516, "y" : 0, "branches" : [0, 6, 11], "comment" : "Merge pull request #1203 from lampepfl/DarkDimius-patch-5\n\nTwo fixes to TermRefWithSignature.newLikeThis", "author" : "PersonIdent[odersky, odersky@gmail.com, Wed Apr 6 11:21:56 2016 +0200]"},
{"name" : "4ca4fa1b507995e9e554aff3b0c141cf89709dd5", "time" : 1459930992, "y" : 0, "branches" : [0, 6, 11], "comment" : "Merge pull request #1204 from liufengyun/jline\n\nsimple integration with jline", "author" : "PersonIdent[odersky, odersky@gmail.com, Wed Apr 6 10:23:12 2016 +0200]"},
{"name" : "438cdf65009bee20e09bc9e63eb74a741e1dd72b", "time" : 1459891903, "y" : 156, "branches" : [0, 6, 11], "comment" : "simple integration with jline\n", "author" : "PersonIdent[liu fengyun, liufengyunchina@gmail.com, Tue Apr 5 23:31:43 2016 +0200]"},
{"name" : "7c72b0c7f8e7d83ff8646b179bbd658456a0b016", "time" : 1459793006, "y" : 157, "branches" : [0, 5, 6, 11], "comment" : "Fix TermRefWithSignature.newLikeThis\n\nUsed to not support more precise prefixes.\nAssumed that symbol does not change.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Apr 4 20:03:26 2016 +0200]"},
{"name" : "56d53a4d5bc4792d5b66caf6427dfa84a46bbf6c", "time" : 1459790712, "y" : 157, "branches" : [0, 5, 6, 11], "comment" : "Fix double computation in TermRefWithSignature.newLikeThis\n\nUsed to compute `asMemberOf(prefix)` twice.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon Apr 4 19:25:12 2016 +0200]"},
{"name" : "30b3840efe59537d8ba37d42fe7ec9e976cda7dc", "time" : 1459772484, "y" : 159, "branches" : [0, 6, 11], "comment" : "Check Java classes are not used as objects\n\nFollowing code should not pass Ycheck:\n\n    import java.lang.Math\n\n    val myMath: Math.type = Math\n    myMath.sqrt(3.0)\n    id(myMath)\n", "author" : "PersonIdent[liu fengyun, liufengyunchina@gmail.com, Mon Apr 4 14:21:24 2016 +0200]"},
{"name" : "ba1027edcd577d2680d3d4e7baabde4bcfaaba14", "time" : 1459691625, "y" : 160, "branches" : [0, 6, 11], "comment" : "Fix doc comment\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Apr 3 15:53:45 2016 +0200]"},
{"name" : "27e5c212de05f10177b9ca4375638a2e46929543", "time" : 1459691199, "y" : 161, "branches" : [0, 6, 11], "comment" : "Fix comment\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Apr 3 15:46:39 2016 +0200]"},
{"name" : "f5c220082048f9a7d67548a5619395f97139f088", "time" : 1459688189, "y" : 161, "branches" : [0, 6, 11], "comment" : "Fix copy-paste error\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Apr 3 14:56:29 2016 +0200]"},
{"name" : "a8b05409c901bb8db1fa0eed65fba14275ffe132", "time" : 1459685825, "y" : 161, "branches" : [0, 6, 11], "comment" : "Docs and polishing for denotation insertions\n\nBetter organization and documentation for the way a symbol's denotations\nare kept in a ring. This came out of a failed attempt to optimize by\nadding a `prevInRun` field.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Apr 3 14:17:05 2016 +0200]"},
{"name" : "079943e3cd18faa034aca3b154314e6f7a94a546", "time" : 1459684388, "y" : 160, "branches" : [0, 6, 11], "comment" : "Make erased value type take a TypeRef instead of a ClassSymbol\n\nTo address #1198, we need to avoid putting symbols in ErasedValueTypes.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Apr 3 13:53:08 2016 +0200]"},
{"name" : "d1ffa3e34610422cc8ec8a90c330cae548fa2ba6", "time" : 1459505666, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1172 from dotty-staging/compiler-docs\n\nFirst of a series of compiler design documents", "author" : "PersonIdent[odersky, odersky@gmail.com, Fri Apr 1 12:14:26 2016 +0200]"},
{"name" : "98a69cae13db04741e99a7abd45f9e2a9845e5f7", "time" : 1459502520, "y" : 166, "branches" : [0, 5, 6, 11], "comment" : "Drop Mode.scala from tasty_typer test\n\nFile was moved, it's no longer in package typer.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 1 11:22:00 2016 +0200]"},
{"name" : "492791f6940f472b9c4b12cf5dca178437d8b9d5", "time" : 1459502418, "y" : 166, "branches" : [0, 5, 6, 11], "comment" : "Polishing\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 1 11:20:18 2016 +0200]"},
{"name" : "4ab16677e1ccc469fe17b313dc48fd8427418fc7", "time" : 1459502418, "y" : 166, "branches" : [0, 5, 6, 11], "comment" : "Better documentation of main classes\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 1 11:20:18 2016 +0200]"},
{"name" : "1c48c1f8a0ff8f94652a98992d13fa47207a79d4", "time" : 1459502418, "y" : 166, "branches" : [0, 5, 6, 11], "comment" : "Add links\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 1 11:20:18 2016 +0200]"},
{"name" : "5ab9e4d025b14760cdeacb7aafd44d920729f538", "time" : 1459502418, "y" : 166, "branches" : [0, 5, 6, 11], "comment" : "New article: dotc's overall structure\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 1 11:20:18 2016 +0200]"},
{"name" : "a73a1d9f17d0de945262fbf1c61aa68b105a02d1", "time" : 1459502417, "y" : 166, "branches" : [0, 5, 6, 11], "comment" : "Document phases\n\nGive a one-line explanation what each phase does in Compiler.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 1 11:20:17 2016 +0200]"},
{"name" : "b2d1e87059a097809285803c3ec123ec36d4a4aa", "time" : 1459502417, "y" : 166, "branches" : [0, 5, 6, 11], "comment" : "Move Mode to core\n\nMode is used from a lot of low-level code, does not just reflect Typer info.\nSo it makes more sense top to place it in the core package.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 1 11:20:17 2016 +0200]"},
{"name" : "32dcb8bb3a3eebf405e049f73ec4f153eb1f5b24", "time" : 1459502417, "y" : 166, "branches" : [0, 5, 6, 11], "comment" : "add syntax highlighting\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 1 11:20:17 2016 +0200]"},
{"name" : "646ef5c321ec1c62ed03bfa24bed0438bbfcc937", "time" : 1459502417, "y" : 166, "branches" : [0, 5, 6, 11], "comment" : "fix typo\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 1 11:20:17 2016 +0200]"},
{"name" : "f9632aeb3c52314bccdb32e5cde655e0b82f85ad", "time" : 1459502417, "y" : 166, "branches" : [0, 5, 6, 11], "comment" : "Fix typo\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 1 11:20:17 2016 +0200]"},
{"name" : "4687dd390cf8e854291bb95a6f9d427b383d6a6f", "time" : 1459502417, "y" : 166, "branches" : [0, 5, 6, 11], "comment" : "Add more material to periods.md\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 1 11:20:17 2016 +0200]"},
{"name" : "669b9594a7783b9440773053f466cc489dbad5e7", "time" : 1459502417, "y" : 166, "branches" : [0, 5, 6, 11], "comment" : "First of a series of compiler design documents\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 1 11:20:17 2016 +0200]"},
{"name" : "6ae7051cdd83ebbd4ea5b93da771f39ad1dbf438", "time" : 1459466278, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1197 from dotty-staging/debug-unpickle\n\nTemporarily enable printing of original failure signature.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri Apr 1 01:17:58 2016 +0200]"},
{"name" : "f7664c2b1fe0e0bfc9ba4b9e6e58dabcb99ab755", "time" : 1459442733, "y" : 179, "branches" : [0, 5, 6, 11], "comment" : "Temporarilly enable printing of original failure signature to debug failing builds\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Mar 31 18:45:33 2016 +0200]"},
{"name" : "2cf40ab2b5adae16cd643fd53441cf03d0bc31ce", "time" : 1459437714, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1061 from sjrd/switches\n\nFix #854: Optimize matches on primitive constants as switches.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Thu Mar 31 17:21:54 2016 +0200]"},
{"name" : "8d85cd7b9aca2844e67e9614f6246302062963a6", "time" : 1459437403, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1091 from dotty-staging/fix1089\n\nFullParametrization: allow to have $this of ThisType.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Thu Mar 31 17:16:43 2016 +0200]"},
{"name" : "f38921fee213da3d22cf28eaa5cbec935f7d3734", "time" : 1459430571, "y" : 182, "branches" : [0, 5, 6, 11], "comment" : "Fix #854: Optimize matches on primitive constants as switches.\n\nThis does not yet unable the checks that `@switch` verifies that\nthe compiler was indeed able to perform the optimization.\n\nThis implementation also does not support guards. A match with\nguards will never be optimized as a switch.\n", "author" : "PersonIdent[Sébastien Doeraene, sjrdoeraene@gmail.com, Thu Mar 31 15:22:51 2016 +0200]"},
{"name" : "2fe8ad5d6dbcac4de9ee263ab30d4cc02ceab9ca", "time" : 1459428640, "y" : 182, "branches" : [0, 5, 6, 11], "comment" : "FullParameterization: Fix indentation and a typo.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Mar 31 14:50:40 2016 +0200]"},
{"name" : "bef963479349e9b977074c68a44cfc1d5926dbbf", "time" : 1459428640, "y" : 182, "branches" : [0, 5, 6, 11], "comment" : "Fix #1089: Special-case local methods\n\nThis is a simpler fix than the previous one.\nLocal methods, cannot change `this` and do not need to go through\nFullParameterization.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Mar 31 14:50:40 2016 +0200]"},
{"name" : "aab561c46144f2d9510ba881bf8dc0549631292a", "time" : 1459428636, "y" : 182, "branches" : [0, 5, 6, 11], "comment" : "Tailrec: drop support for polymorphic recursion.\n\nIf the method that recurses over a different type arguments,\nif this method is specialised, it would lead to method not\nbeing tail-rec anymore.\n\nEg:\n\ndef foo[@specialized A, @specialized B]: Unit = foo[B, A]\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Mar 31 14:50:36 2016 +0200]"},
{"name" : "07833e93f62cbe6d866300475288e8a763a36198", "time" : 1459428563, "y" : 182, "branches" : [0, 5, 6, 11], "comment" : "FullParametrization: allow to have $this of ThisType.\n\nTailRec methods remain members of enclosing class,\nit means that they can refer to methods that require this.type.\nIt means that tailrec, unlike value classes is not allowed to widen\ntype of $this to it's full self type.\n\nFixes #1089\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Mar 31 14:49:23 2016 +0200]"},
{"name" : "80b12473d7e7c5551ed7b13a835f239445662813", "time" : 1459423300, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Remove Variances.scala files accidentally leftover from #1193\n\nThese files were supposed to be remove, their content are now in variances.scala\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Thu Mar 31 13:21:40 2016 +0200]"},
{"name" : "db24466fef6cfef798353cbc50f245bf80dc166b", "time" : 1459421376, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1193 from dotty-staging/fix-variances\n\nmerge variances and Variances", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Thu Mar 31 12:49:36 2016 +0200]"},
{"name" : "3a275711d92f43903725f4c73b7d7178291bcfba", "time" : 1459418861, "y" : 189, "branches" : [0, 5, 6, 11], "comment" : "Fix build.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Mar 31 12:07:41 2016 +0200]"},
{"name" : "7871236ec02d8fbf4cc16c329c737d9e2ee682f3", "time" : 1459417849, "y" : 189, "branches" : [0, 5, 6, 11], "comment" : "merge variances and Variances\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Mar 31 11:50:49 2016 +0200]"},
{"name" : "5bd08d437c1365bd8a81cb1b6b9801b443fde96b", "time" : 1459416048, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1182 from dotty-staging/repl-fixes\n\nRepl fixes and tests", "author" : "PersonIdent[odersky, odersky@gmail.com, Thu Mar 31 11:20:48 2016 +0200]"},
{"name" : "8cafcb9455103c34b6ce4344b58ca472a3a1f034", "time" : 1459348004, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1189 from dotty-staging/tasty-dotty-tests\n\nTASTY tests for src/dotty", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed Mar 30 16:26:44 2016 +0200]"},
{"name" : "e4196bb4e2c1a51efaf429f49453dfe5b7d7fd9c", "time" : 1459346447, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1190 from sstucki/test/variance\n\nAdd tests related to variance checking.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed Mar 30 16:00:47 2016 +0200]"},
{"name" : "901fc77f387acd9598859de03a1386a236fe0b1b", "time" : 1459342654, "y" : 194, "branches" : [0, 5, 6, 11], "comment" : "Add tests related to variance checking.\n", "author" : "PersonIdent[Sandro Stucki, sandro.stucki@gmail.com, Wed Mar 30 14:57:34 2016 +0200]"},
{"name" : "f675ad9507089f8b912357fab86740653c1b8789", "time" : 1459332963, "y" : 195, "branches" : [0, 6, 11], "comment" : "Domain checking for named type parameters\n\nNow verifies that the named type parameters of an overriding\ntype or class are the same as the named type parameters of\nan overridden type.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Mar 30 12:16:03 2016 +0200]"},
{"name" : "d89767858c4e3a7ad37d9a98ea1e87f58bd0eb02", "time" : 1459324264, "y" : 195, "branches" : [0, 6, 11], "comment" : "Base deskolemize on ApproximatingTypeMap\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Mar 30 09:51:04 2016 +0200]"},
{"name" : "78545bbca89bafbee31fc5e4d9818e3173fb7131", "time" : 1459324264, "y" : 195, "branches" : [0, 6, 11], "comment" : "Add ApproximatingTypeMap class\n\nAlso: In a TypeMap, the variance of the prefix is unchanged\n(was: always 0). This brings it in line with TypeAccumulator\nand the subtyping rules.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Mar 30 09:51:04 2016 +0200]"},
{"name" : "f8aa4b3b56bae1cb0bf0f94a2f2b80b4443aa447", "time" : 1459324264, "y" : 195, "branches" : [0, 6, 11], "comment" : "Fix documentation of liftIfHK\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Mar 30 09:51:04 2016 +0200]"},
{"name" : "2474c1bd32258a76ccecf31c4dad463448bcf822", "time" : 1459324264, "y" : 195, "branches" : [0, 6, 11], "comment" : "Fix a case in deskolemize.\n\nWe should not return a ClassInfo as a value type.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Mar 30 09:51:04 2016 +0200]"},
{"name" : "78d2c9a00e1fcf20491a3f24423b6df40d6f14c1", "time" : 1459324264, "y" : 195, "branches" : [0, 6, 11], "comment" : "Simplify widenToParents\n\nNo need to form the glb.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Mar 30 09:51:04 2016 +0200]"},
{"name" : "de870e26da30e6d2b8f5dcab08a4f3db3334c41c", "time" : 1459324264, "y" : 195, "branches" : [0, 6, 11], "comment" : "Adapt type assignment for AppliedTypeTrees to new named params\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Mar 30 09:51:04 2016 +0200]"},
{"name" : "6d2a3d341128eddb99c0f52bca154f9e8b87eb55", "time" : 1459324263, "y" : 195, "branches" : [0, 6, 11], "comment" : "Test cases\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Mar 30 09:51:03 2016 +0200]"},
{"name" : "506c10613a4f5223472f76226c37cad1701e9610", "time" : 1459324263, "y" : 195, "branches" : [0, 6, 11], "comment" : "Don't lambda expand and/or types over named type parameters\n\nDo it only if at least one of the types has unnamed parameters. This is\na fundamental conflict with how we deal with intersections and unions.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Mar 30 09:51:03 2016 +0200]"},
{"name" : "c03c8ca068b61bc7cee97dbc9e183bb3e410b839", "time" : 1459324263, "y" : 195, "branches" : [0, 6, 11], "comment" : "Take named type parameters into account when instantiating variables.\n\nWhen instantiating a type variable, make the instance has the same named\ntype parameters as the upper bound. This is the analogue of kind-correctness\nfor named type parameters.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Mar 30 09:51:03 2016 +0200]"},
{"name" : "d0f9848486be2c8cec61acb94a592e8c9d4f842f", "time" : 1459324263, "y" : 195, "branches" : [0, 6, 11], "comment" : "Add methods for expressing named type params\n\nAdd methods for expressing what the named type parameters of a class or type are.\nAlso, add a method that widens a type so that is has a specified set of named type parameters.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Mar 30 09:51:03 2016 +0200]"},
{"name" : "0474de635bee32f6d78726072230c9d572de0d52", "time" : 1459324263, "y" : 195, "branches" : [0, 6, 11], "comment" : "Fix bug in printing New nodes\n\nExplicitly given type parameters were printed twice.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Mar 30 09:51:03 2016 +0200]"},
{"name" : "bbbb6620dabb2a247f74e4cdfbffd178654decba", "time" : 1459324263, "y" : 195, "branches" : [0, 6, 11], "comment" : "Fix test case.\n\nThe intent is that Repr implementations should not bind the Out parameter.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Mar 30 09:51:03 2016 +0200]"},
{"name" : "04be0341f8fc7a871914dcab4e359ce6890d36f4", "time" : 1459324262, "y" : 195, "branches" : [0, 6, 11], "comment" : "Fix error message output.\n\nType was printed in raw form.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Mar 30 09:51:02 2016 +0200]"},
{"name" : "e7e81d00fe701245f1bc16aff630a67260665cdd", "time" : 1459324262, "y" : 195, "branches" : [0, 6, 11], "comment" : "Fix type-shifting problem in vcInlineMethods\n\nvcInlineMethods could produce a different type on rewire which led to a -Ycheck failure. We now insert\na cast when that happens.\n\nTest case: pos/flowops1.scala with -Ycheck:vcInline.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Mar 30 09:51:02 2016 +0200]"},
{"name" : "a44082fd7d97e7adb839540d770b5f77b4a150a1", "time" : 1459324262, "y" : 195, "branches" : [0, 6, 11], "comment" : "Add test for #1181 to pending\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Mar 30 09:51:02 2016 +0200]"},
{"name" : "b49034715ac5dc5d3f8427b39e497d3e20c4c192", "time" : 1459324262, "y" : 195, "branches" : [0, 6, 11], "comment" : "Simplify and fix avoid logic\n\nThe previous formulation broke for named parameters.\nTest case in flowops1.scala.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Mar 30 09:51:02 2016 +0200]"},
{"name" : "0855b071d913e7acd5271ab34062c69e25cd93cd", "time" : 1459324262, "y" : 195, "branches" : [0, 6, 11], "comment" : "Fixes to checkNonCyclic\n\nSimplified logic and now check prefixes of TypeRefs.\nWithout the simplified logic we would get false cyclic errors for ski.scala.\n\nTest case: flowops.scala\n\nFixes #1185.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Mar 30 09:51:02 2016 +0200]"},
{"name" : "035aff45e89084290b8f67ca49007c3eac00f13f", "time" : 1458847321, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1104 from dotty-staging/spec-bugs\n\nImprovements & bugs that were discovered while implementing specialization.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Thu Mar 24 20:22:01 2016 +0100]"},
{"name" : "709ab9d010761603b954e95af080af591a8af571", "time" : 1458830211, "y" : 214, "branches" : [0, 5, 6, 11], "comment" : "TASTY tests for src/dotty\n", "author" : "PersonIdent[VladimirNik, vladimir.nikolaev9@gmail.com, Thu Mar 24 15:36:51 2016 +0100]"},
{"name" : "3e43c7f989c48c8e78eb6c7b5ae9bcb301a0c07d", "time" : 1458657737, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1180 from niktrop/dotc-settings-format\n\ndotc settings: String options after settings with colon shouldn't be ignored", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Tue Mar 22 15:42:17 2016 +0100]"},
{"name" : "552a56ae8573f1c08175b3211afa7e414bee681b", "time" : 1458652123, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1184 from liufengyun/error-pos\n\nbetter positioning of `_*` not last argument error", "author" : "PersonIdent[odersky, odersky@gmail.com, Tue Mar 22 14:08:43 2016 +0100]"},
{"name" : "fadcf44be1a8db931f86a28bcdd54e49bd8741da", "time" : 1458642653, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1187 from dotty-staging/fix-#1174\n\nFix problem involving classtag based pattern matches.", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Tue Mar 22 11:30:53 2016 +0100]"},
{"name" : "4df2e28a54978ee16e24bab961d9b491b6fe8707", "time" : 1458580650, "y" : 218, "branches" : [0, 5, 6, 11], "comment" : "Fix problem involving classtag based pattern matches.\n\nRewriting did not go far enough, as evidenced by pos/i1174.scala\n\nFixes #1174\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Mar 21 18:17:30 2016 +0100]"},
{"name" : "7e7058a22fcf8806e718bbba94080935a44ece0c", "time" : 1458327413, "y" : 219, "branches" : [0, 5, 6, 11], "comment" : "better positioning of `_*` not last argument error\n\nThe error should be at the beginning of the underscore `_`,\nnot the next token after the star `*`, which is the default.\n", "author" : "PersonIdent[liu fengyun, liufengyunchina@gmail.com, Fri Mar 18 19:56:53 2016 +0100]"},
{"name" : "1b29119b8ed1a2c3b382dfca01d6dde71f6ae733", "time" : 1458318527, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1179 from liufengyun/fix-issue-1059\n\nsupport `xs @ _*` and `_*` in Scala2 mode", "author" : "PersonIdent[odersky, odersky@gmail.com, Fri Mar 18 17:28:47 2016 +0100]"},
{"name" : "5ff8649b1bf36c1fcd55ba2ec71c93c4c587af81", "time" : 1458311073, "y" : 221, "branches" : [0, 5, 6, 11], "comment" : "String options with choices should be followed by colon and argument without whitespace\n\nFormat of some of the compiler settings was incompatible with scalac. For example \"-target:jvm-1.8\" is a valid argument for scalac, but it should be \"-target: jvm-1.8\" (with a whitespace) for dotc.\n", "author" : "PersonIdent[Nikolay.Tropin, Nikolay.Tropin@jetbrains.com, Fri Mar 18 17:24:33 2016 +0300]"},
{"name" : "72b44d9b5df579e90b5aba5c55d04f6b34081d02", "time" : 1458310131, "y" : 222, "branches" : [0, 5, 6, 11], "comment" : "support `xs @ _*` and `_*` in Scala2 mode\n\nThe standard syntax in Dotty now is `xs : _*`. In Scala2 mode,\nfollowing code should be valid:\n\n    list match {\n      case List(_, _, _, _ @ _*)     =>   0\n      case List(_, _, _*)            =>   1\n      case List(_, _: _*)            =>   2\n      case Nil                       =>   3\n    }\n", "author" : "PersonIdent[liu fengyun, liufengyunchina@gmail.com, Fri Mar 18 15:08:51 2016 +0100]"},
{"name" : "f8ebf777b92e858a7ff8cfdf022e151b4f056920", "time" : 1458303297, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1183 from sjrd/scalajs-0.6.8\n\nUpgrade to Scala.js 0.6.8.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri Mar 18 13:14:57 2016 +0100]"},
{"name" : "b17951d9f9fcafe920a7aad0af74b204af5f80c3", "time" : 1458301643, "y" : 224, "branches" : [0, 5, 6, 11], "comment" : "Upgrade to Scala.js 0.6.8.\n\nThis allows to remove the ugly workaround for default methods.\nThere is also a slight adaptation for the new way to encode a\nreference to the JS global scope in the IR.\n", "author" : "PersonIdent[Sébastien Doeraene, sjrdoeraene@gmail.com, Fri Mar 18 12:47:23 2016 +0100]"},
{"name" : "ef8c1968b2ea407c5b2ddca2fef00eb922e81f8e", "time" : 1458300348, "y" : 225, "branches" : [0, 5, 6, 11], "comment" : "Add test file\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Mar 18 12:25:48 2016 +0100]"},
{"name" : "a7a0543d4e98319e70acc44510071ce2576077b8", "time" : 1458300348, "y" : 225, "branches" : [0, 5, 6, 11], "comment" : "Add docs to TestREPL\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Mar 18 12:25:48 2016 +0100]"},
{"name" : "d8a7a59ef96127ca64f27e0cc2529d775b1fa9c9", "time" : 1458300348, "y" : 225, "branches" : [0, 5, 6, 11], "comment" : "Move all overridable bits into Config class\n\nCentral config class replaces mixture of parameters and fields.\nThe fields were in part in the wrong class, where they could not\neasily be overridden.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Mar 18 12:25:48 2016 +0100]"},
{"name" : "e1fb19412c5dcc722e7df24e543aadf03a463c9a", "time" : 1458300347, "y" : 225, "branches" : [0, 5, 6, 11], "comment" : "Add REPL tests\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Mar 18 12:25:47 2016 +0100]"},
{"name" : "57bde5b5c31b76c687649848bbe2207ebeb7a57d", "time" : 1458300166, "y" : 225, "branches" : [0, 5, 6, 11], "comment" : "Get rid of prompt in Driver\n\nIt's used only in Resident, where it should be defined.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Mar 18 12:22:46 2016 +0100]"},
{"name" : "c938f00ad86dc526c46f30c6c8465552cc12b44b", "time" : 1458300166, "y" : 225, "branches" : [0, 5, 6, 11], "comment" : "Get rid of indentCode\n\nIt messed up parsing of multi-line strings and did not\nseem to have a purpose. Error messages print fine without it.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Mar 18 12:22:46 2016 +0100]"},
{"name" : "f08c741efb6b64d6df7bd02b5191617037f6be12", "time" : 1458300166, "y" : 225, "branches" : [0, 5, 6, 11], "comment" : "Fix handling of imports in REPL.\n\nThey printed as raw trees which confused the REPL\nwhen wrapping subsequent liens with them.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Mar 18 12:22:46 2016 +0100]"},
{"name" : "a1a4b9847e3b3d1f63d5c04c57f561708d009a34", "time" : 1458300166, "y" : 225, "branches" : [0, 5, 6, 11], "comment" : "Initialize context in REPL\n\nThis broke under the recent introduction of the JS backend, because now\nthe context needs to be initialized before the platform can be selected.\nSo invoking `doti` immediately gave an IllegalStateException.\n\nNo big deal to fix, but it shows how sorely we are lacking REPL tests.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Mar 18 12:22:46 2016 +0100]"},
{"name" : "a675cbf90ce3dee2773aec376125054edefb895f", "time" : 1458298615, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1176 from liufengyun/master\n\nfix command line processing error", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri Mar 18 11:56:55 2016 +0100]"},
{"name" : "e73ef776e1754f5e207a631d4c1750743b3d4a9b", "time" : 1458298473, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1166 from dotty-staging/fix-#1136\n\nFix typing of SeqLiterals", "author" : "PersonIdent[odersky, odersky@gmail.com, Fri Mar 18 11:54:33 2016 +0100]"},
{"name" : "bd8a6dc79bf53193af617d08cd1b4fdef0ee0bb2", "time" : 1458298442, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1160 from dotty-staging/add/collection-strawman\n\nAdd/collection strawman", "author" : "PersonIdent[odersky, odersky@gmail.com, Fri Mar 18 11:54:02 2016 +0100]"},
{"name" : "d875fef31d984198489a3f94bdb4894698ad0cdb", "time" : 1458296961, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1148 from sjrd/scalajs-gen-exprs\n\nImplement most of the Scala.js IR code generator.", "author" : "PersonIdent[odersky, odersky@gmail.com, Fri Mar 18 11:29:21 2016 +0100]"},
{"name" : "cdbc1631d1eda5a1a3eaa708b585a6a052852646", "time" : 1458296210, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1154 from dotty-staging/add-rewrite\n\nFirst steps towards rewriting from Scala2 in dotty", "author" : "PersonIdent[odersky, odersky@gmail.com, Fri Mar 18 11:16:50 2016 +0100]"},
{"name" : "122b0351e3e5d0fbacf2aab9bbcc7cd57a4f7dc9", "time" : 1458127508, "y" : 238, "branches" : [0, 5, 6, 11], "comment" : "More documentation for some Scala.js-specific methods.\n", "author" : "PersonIdent[Sébastien Doeraene, sjrdoeraene@gmail.com, Wed Mar 16 12:25:08 2016 +0100]"},
{"name" : "9b98abf49849549eec4b2cf09e029b745abb0557", "time" : 1458126127, "y" : 238, "branches" : [0, 5, 6, 11], "comment" : "Cache the Phases we need in JSCodeGen like all other phases.\n", "author" : "PersonIdent[Sébastien Doeraene, sjrdoeraene@gmail.com, Wed Mar 16 12:02:07 2016 +0100]"},
{"name" : "28a2c76952c753ea2c3efacfad93c87a63227259", "time" : 1458049420, "y" : 240, "branches" : [0, 5, 6, 11], "comment" : "Add a test that checks that no useless forwarders are being created.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Mar 15 14:43:40 2016 +0100]"},
{"name" : "c103926177e1c5b34fc36036af8d686725490180", "time" : 1458049420, "y" : 240, "branches" : [0, 5, 6, 11], "comment" : "Mixin: create less forwarders.\n\nThere were two sources of inefficiency in previous scheme:\n - if symbol was no overriding anything the forwarder was still being\ncreated\n - the class that is will have the forwarder was not considered.\nMany methods do not require forwarders as JVM will dispatch correctly.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Mar 15 14:43:40 2016 +0100]"},
{"name" : "614a2361ee6b7bcebf5bf6aa7fe159acd5e8ef19", "time" : 1458049420, "y" : 240, "branches" : [0, 5, 6, 11], "comment" : "Change name of DropEmptyCompanions from dropEmpty to dropEmptyCompanions\n\ndropEmpty is not as clear, as it does not indicate what it drops.\nAdditionally makes phaseName by in sync with class name.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Mar 15 14:43:40 2016 +0100]"},
{"name" : "c3a78cf21901b2943caa823213f672c9849949c3", "time" : 1458049420, "y" : 240, "branches" : [0, 5, 6, 11], "comment" : "Memoize: perform required tree adaptation in setter.\n\nOtherwise can create trees that do not pas Ycheck.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Mar 15 14:43:40 2016 +0100]"},
{"name" : "8fe3218654c7834d08fbceb53fd2eed79f5f1f71", "time" : 1458049248, "y" : 240, "branches" : [0, 5, 6, 11], "comment" : "Erasure: no need to bridge paramaccessors.\n\nJust like normal accessors.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Mar 15 14:40:48 2016 +0100]"},
{"name" : "19a13db9b2692a6e1ea73cff361315f143fcbfaf", "time" : 1458034660, "y" : 245, "branches" : [0, 5, 6, 11], "comment" : "fix command line processing error\n", "author" : "PersonIdent[liu fengyun, liufengyunchina@gmail.com, Tue Mar 15 10:37:40 2016 +0100]"},
{"name" : "16f0bea7e4169ab89eddf2e7bae1de08ded3c84b", "time" : 1458033396, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1178 from liufengyun/tokens-fix\n\nmake token declarations consistent", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Tue Mar 15 10:16:36 2016 +0100]"},
{"name" : "b01a9c0e94284b9b5d2d6aa55d872ed92e5bc192", "time" : 1458033356, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1165 from dotty-staging/fix-#1144\n\nPickle/unpickle SuperAccessor names", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Tue Mar 15 10:15:56 2016 +0100]"},
{"name" : "0ef358414f5f63c2a819dab691d41197c7f2d2be", "time" : 1457974215, "y" : 248, "branches" : [0, 5, 6, 11], "comment" : "make token declarations consistent\n", "author" : "PersonIdent[liu fengyun, liufengyunchina@gmail.com, Mon Mar 14 17:50:15 2016 +0100]"},
{"name" : "01269e9be9e93e0ff38ad919cac0eb7240a2d195", "time" : 1457954173, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1168 from dotty-staging/fix-#1131\n\nTweaks to ExplicitOuter and TreeTypeMap", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon Mar 14 12:16:13 2016 +0100]"},
{"name" : "802de86ce800caf1fe6bbdfa2d4ed84c2802978f", "time" : 1457954118, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1173 from liufengyun/naming-cleanup\n\nmake variable name consistent in ScalaSettings", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon Mar 14 12:15:18 2016 +0100]"},
{"name" : "fc0eb527edbbadea04c180a9be1adbe66f3f88b5", "time" : 1457946339, "y" : 251, "branches" : [0, 5, 6, 11], "comment" : "make variable name consistent in ScalaSettings\n\nOptions with syntax \"-Y\" should NOT be named with a variable beginning with `X`.\n", "author" : "PersonIdent[liu fengyun, liufengyunchina@gmail.com, Mon Mar 14 10:05:39 2016 +0100]"},
{"name" : "6c18e37886e90d217579112ccf867c22658273be", "time" : 1457946136, "y" : 252, "branches" : [0, 5, 6, 11], "comment" : "Address reviewer comments.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Mar 14 10:02:16 2016 +0100]"},
{"name" : "fe94b7a360318a9a8e07201fbaf6ed2ae5231e28", "time" : 1457895331, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1171 from dotty-staging/fix-#1130\n\nHave checkNotPrivate skip over private aliases.", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Sun Mar 13 19:55:31 2016 +0100]"},
{"name" : "daffba9de6176ab75f292e2281aec87d5bb23124", "time" : 1457882585, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1164 from dotty-staging/fix-#1140\n\nMake sure lazy accessors in traits are not private.", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Sun Mar 13 16:23:05 2016 +0100]"},
{"name" : "6b983e39ff7880994c6edfec7e79a151f83e83f3", "time" : 1457878119, "y" : 255, "branches" : [0, 5, 6, 11], "comment" : "Make Synthetic a FormStart flag.\n\nNot needed in the end for this patch, but anyway a good idea.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Mar 13 15:08:39 2016 +0100]"},
{"name" : "9daf976a2040eaef2699cdaef6360fcbf8af6aa0", "time" : 1457878089, "y" : 255, "branches" : [0, 5, 6, 11], "comment" : "Assert that ensureNotPrivate does not break on separate compilation\n\nWhen ensureNotPrivate changes the status of a formerly private declaration,\nassert that the reference to the declaration is in the same compilation unit,\nas otherwise the nehavior would be different under separate compilation.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Mar 13 15:08:09 2016 +0100]"},
{"name" : "d500b1d6caaafcc9258263c98dc5250f662410c7", "time" : 1457877987, "y" : 255, "branches" : [0, 5, 6, 11], "comment" : "Propagate source file to synthetic companions\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Mar 13 15:06:27 2016 +0100]"},
{"name" : "ae49ebc8088cfe3493862234e86a29a0cbda9b91", "time" : 1457822971, "y" : 258, "branches" : [0, 5, 6, 11], "comment" : "Delete unused line\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Mar 12 23:49:31 2016 +0100]"},
{"name" : "13e3d59937ddcb9819904593cb7c6417af8eedd2", "time" : 1457795319, "y" : 252, "branches" : [0, 5, 6, 11], "comment" : "Fix two rewrite patches.\n\n1. trailing `_`:\n\n    `x _` is rewritten to `(() => x)` not to `x`\n\n2. lazy vals:\n\nRewrites are done in Typer, not LazyVals. Later on we are too much at risk to\nhit synthetically generated lazy vals.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Mar 12 16:08:39 2016 +0100]"},
{"name" : "13a376c80c21ddb28789530091bb54f7fa58e785", "time" : 1457795319, "y" : 252, "branches" : [0, 5, 6, 11], "comment" : "Fix patch for constructors with procedure syntax\n\nA constructor\n\n     def this() { ... }\n\nneeds to be rewritten to\n\n     def this() = { ... }\n\nnot to\n\n     def this(): Unit = { ... }\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Mar 12 16:08:39 2016 +0100]"},
{"name" : "bde5e4dfeb54601755f09983e3893e1679a4b920", "time" : 1457795319, "y" : 252, "branches" : [0, 5, 6, 11], "comment" : "Add patch for variance errors\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Mar 12 16:08:39 2016 +0100]"},
{"name" : "6ddc9112d0eb8a0f32b82c236244defdaeec5ce8", "time" : 1457795319, "y" : 252, "branches" : [0, 5, 6, 11], "comment" : "Fix assert in Rewrites\n\n`Iterator.sliding(2, 1)` returns a one-element result if the original iterator\ncontains only one element, which makes it unpleasant to use for our task. Replaced\nby a fold.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Mar 12 16:08:39 2016 +0100]"},
{"name" : "c0927cf6a8c622d38f262939266145e48e0bc092", "time" : 1457795319, "y" : 252, "branches" : [0, 5, 6, 11], "comment" : "Fix setChildPositions\n\nGave overlapping positions in the case of longer lists of children.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Mar 12 16:08:39 2016 +0100]"},
{"name" : "d24e10ce0ecbd66668852937e27d8ae50997ba67", "time" : 1457795318, "y" : 252, "branches" : [0, 5, 6, 11], "comment" : "Polish rewrite test\n\nRemove println; add docs\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Mar 12 16:08:38 2016 +0100]"},
{"name" : "87b30c986be145806591c16445ec90a8a54dcee0", "time" : 1457795318, "y" : 252, "branches" : [0, 5, 6, 11], "comment" : "Rewrite test\n\nTest rewritings that were implemented so far.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Mar 12 16:08:38 2016 +0100]"},
{"name" : "919f268cd93c3ad1c3cb629caa7c11bbb0e8af8f", "time" : 1457795318, "y" : 252, "branches" : [0, 5, 6, 11], "comment" : "Patch redundant `_' suffixes.\n\nScala2 allows `x _` even if `x` is not a method.\nDotty disallows them. The patch removes the ` _`\nin these cases.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Mar 12 16:08:38 2016 +0100]"},
{"name" : "4db804bc7b75038a8b4a36d4132af21e30c15ebc", "time" : 1457795318, "y" : 252, "branches" : [0, 5, 6, 11], "comment" : "More detailed diagnostic in NavigateAST\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Mar 12 16:08:38 2016 +0100]"},
{"name" : "c1814a01c9a48b83174055cdc6acc74906106a92", "time" : 1457795318, "y" : 252, "branches" : [0, 5, 6, 11], "comment" : "Maintain source position in Getters\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Mar 12 16:08:38 2016 +0100]"},
{"name" : "a378a46f285dd904a5ba5d2b57a5a8c2cdd7b056", "time" : 1457795318, "y" : 252, "branches" : [0, 5, 6, 11], "comment" : "Disable volatile interpretation of lazy vals under -language:Scala2\n\nRevert this commit once #1149 is fixed.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Mar 12 16:08:38 2016 +0100]"},
{"name" : "dbc06d9e0d1532754f8bcb9dba9bf6aac42a9b69", "time" : 1457795318, "y" : 252, "branches" : [0, 5, 6, 11], "comment" : "Remove println\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Mar 12 16:08:38 2016 +0100]"},
{"name" : "8881a98223832f28993263fcd147e2a7a1a51110", "time" : 1457795318, "y" : 252, "branches" : [0, 5, 6, 11], "comment" : "More neg tests\n\nSome random neg tests from previous experiments.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Mar 12 16:08:38 2016 +0100]"},
{"name" : "e61cd1bcf772691e8bb313d40ac6b14a412ff053", "time" : 1457795317, "y" : 252, "branches" : [0, 5, 6, 11], "comment" : "Test case for #1149\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Mar 12 16:08:37 2016 +0100]"},
{"name" : "d822b1e965aa808d706b859ce90ed4dc08df8d94", "time" : 1457795317, "y" : 252, "branches" : [0, 5, 6, 11], "comment" : "Add @volatile when rewriting lazy vals from Scala2.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Mar 12 16:08:37 2016 +0100]"},
{"name" : "294d21ff6168f1402efc04a52f8d26deaed31c2c", "time" : 1457795317, "y" : 252, "branches" : [0, 5, 6, 11], "comment" : "Better error message when an outer path is not found.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Mar 12 16:08:37 2016 +0100]"},
{"name" : "420878d609a19a01226e76e1b315db5a7eca3576", "time" : 1457795317, "y" : 252, "branches" : [0, 5, 6, 11], "comment" : "Copy full modifiers to companions\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Mar 12 16:08:37 2016 +0100]"},
{"name" : "54f6399b6625cb8f841c1e5965841d46a3e9230c", "time" : 1457795317, "y" : 252, "branches" : [0, 5, 6, 11], "comment" : "Fix desugaring of lazy patterns.\n\nSelectors should be defs, not lazy vals.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Mar 12 16:08:37 2016 +0100]"},
{"name" : "ec90a19852dbeeaaa10c5e95c3f97d605386e1ca", "time" : 1457795317, "y" : 252, "branches" : [0, 5, 6, 11], "comment" : "Untangle withAnnotation naming.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Mar 12 16:08:37 2016 +0100]"},
{"name" : "2ff667a6f3b9ac7170b366354d99d928b2fd0c40", "time" : 1457795316, "y" : 252, "branches" : [0, 5, 6, 11], "comment" : "Test language features always in phase typer.\n\nImports are missing afterwards.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Mar 12 16:08:36 2016 +0100]"},
{"name" : "ad483d8c3c9dc70cad9f463efd025bab7e07b882", "time" : 1457795316, "y" : 252, "branches" : [0, 5, 6, 11], "comment" : "Add functionality to navigate ASTs\n\nMap typed to corresponding untyped trees.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Mar 12 16:08:36 2016 +0100]"},
{"name" : "12d895587444d5d59e7d75dfaf7b85deb61e99e0", "time" : 1457795316, "y" : 252, "branches" : [0, 5, 6, 11], "comment" : "Better encapsulation\n\nNo more leaking ofMove PatchedFiles in a settings option. Move all\npatch classes into a `Rewrites` object.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Mar 12 16:08:36 2016 +0100]"},
{"name" : "c1e263bebf7e73239e7faa3e48d75a0a7df45d76", "time" : 1457795316, "y" : 252, "branches" : [0, 5, 6, 11], "comment" : "Avoid setupMethod in Driver\n\nDriver should not know that patch functionality exists. Instead, introduce settings\nthat can introduce their own stateful values.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Mar 12 16:08:36 2016 +0100]"},
{"name" : "c43ae4a31cac6363050ab07aa6ec1a9f0e9213b4", "time" : 1457795316, "y" : 252, "branches" : [0, 5, 6, 11], "comment" : "Add patching functionality for migration\n\nFirs version of patching that can be invoked by dotty compiler\nitself.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Mar 12 16:08:36 2016 +0100]"},
{"name" : "5f2c21b738f2de1c73f5625d7811da86e26eb6bc", "time" : 1457789522, "y" : 283, "branches" : [0, 5, 6, 11], "comment" : "Drop debug println\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Mar 12 14:32:02 2016 +0100]"},
{"name" : "dad9dfc2cc83e58fbe59f8cffd28ec1180d6fab1", "time" : 1457789102, "y" : 283, "branches" : [0, 5, 6, 11], "comment" : "Changes to owners in Mixin and Constructors\n\nTwo changes:\n\n1. Replace changeOwer with changeOwnerAfter for code\nthat moves into the $initial methods in Mixin. This is needed because\notherwise subsequent transforms gets confused wrt new vs old owners.\n`i1131.scala` exhibits the problem.\n\n2. Drop `transformSym` changed the owner of tenplate-local symbols\nto be the primary constructor. But that is done anyway with a \"changeOwnerAfter\"\nin `intoConstr`. So it is redundant and actually gets in the way with\na `changeOwnerAfter` in `Mixin`. The faulty scenario is this:\n\n  1. The SymTransformer of Constructor is run on a constructor-local definition.\n     The owner of that definition is set to <init> after phase Constructors.\n\n  2. The body of the definition is transformed in Mixin. The owner is set\n     to the initializer method, but only for the interval between Mixin\n     and Constructors.\n\nChanging to changeOwner in Mixin avoided that problem by duplicating the symbol but\nit runs into other problems.\n\nFortunately, the solution is much simpler than the status quo: Two changeOwnerAfter calls\nand no SymTransformer.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Mar 12 14:25:02 2016 +0100]"},
{"name" : "69b07e2466ae96c37066ee02c7d45b9b52417342", "time" : 1457789102, "y" : 283, "branches" : [0, 5, 6, 11], "comment" : "Test case\n\nThe test fails if either of the previous two commits is missing.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Mar 12 14:25:02 2016 +0100]"},
{"name" : "d34a9e3d89a8e205e23a6d59e02ccf736dd572f4", "time" : 1457789101, "y" : 283, "branches" : [0, 5, 6, 11], "comment" : "Refinement to TreeTypeMap\n\nWhen recursing in a template body, need to update the\ncontext's owner, so that `ref` can work correctly.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Mar 12 14:25:01 2016 +0100]"},
{"name" : "e5cad0c2ccfd4e8ea3dfb9f0eb22ab0a958287f8", "time" : 1457789101, "y" : 283, "branches" : [0, 5, 6, 11], "comment" : "Refinements to referencesOuter\n\nIn a New we need to decide based on the prefix of the type of object created.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Mar 12 14:25:01 2016 +0100]"},
{"name" : "216c195f5592e3f4cbf96ed00b3710a46307cd8a", "time" : 1457788469, "y" : 288, "branches" : [0, 5, 6, 11], "comment" : "Have checkNotPrivate skip over private aliases.\n\nCheckNotPrivate now avoids private aliases, so that types sat prepresentable in\ntransformation phases.\n\nThis does not solve the problem that private classes or abstract types might leak coming\nfrom Scala 2, but there is not really a good cure for that. We can reject them outright or\nallow them under language:Scala2 and hope for the best.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Mar 12 14:14:29 2016 +0100]"},
{"name" : "e68d68414fa346fad9dee204746d826ee172e861", "time" : 1457786625, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1170 from dotty-staging/fix/hash-delta\n\nFix incorrect hashing leading to cache pollution", "author" : "PersonIdent[odersky, odersky@gmail.com, Sat Mar 12 13:43:45 2016 +0100]"},
{"name" : "a4597c4e2e664f744eeb68541ddbab997afc03cc", "time" : 1457735798, "y" : 290, "branches" : [0, 5, 6, 11], "comment" : "Fix incorrect hashing leading to cache pollution\n\nBefore this commit, Hashable#addDelta did not work correctly when the\ninput hash was the special value NotCached, instead of returning\nNotCached, it returned NotCached + delta. This means that many different\nvalues ended up being cached with the same hash when they should not be\ncached at all, this is especially bad since our HashSet implementation\nuses open addressing.\n\nI noticed this bug while working on a phase to collect API information\nfor sbt (this phase needs to collect every member of a class, including\ninherited members), after enabling it, the compileStdLib test took\n~500 seconds to complete, this commit reduces this to ~100 seconds.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Fri Mar 11 23:36:38 2016 +0100]"},
{"name" : "208c91a3749910ff23ae65f7ff36d7b3cf8d62db", "time" : 1457690971, "y" : 291, "branches" : [0, 5, 6, 11], "comment" : "Fix test cases\n\nThe test contained an error that was unvovered by the \"Nothing is not Nullable\" fix.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Mar 11 11:09:31 2016 +0100]"},
{"name" : "65639176ce59fd64cbecd90bf5680e64e471938f", "time" : 1457632259, "y" : 291, "branches" : [0, 5, 6, 11], "comment" : "Add second field to SeqLiteral\n\nThe field keeps track of the element type. This is necessary\nbecause JavaSeqLiteral is nonvariant and the elements might\nbe empty, so we cannot always compute the type from the\nelement types.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Mar 10 18:50:59 2016 +0100]"},
{"name" : "9a624b9249024eec4e165b47e22fe3f029a9ae81", "time" : 1457632243, "y" : 291, "branches" : [0, 5, 6, 11], "comment" : "Nothing is not nullable\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Mar 10 18:50:43 2016 +0100]"},
{"name" : "df5fcefac142f6ab65a93c33ec9179380025a492", "time" : 1457631663, "y" : 255, "branches" : [0, 5, 6, 11], "comment" : "Fix and simplify initializer\n\nInitializer was needlessly complex and did not work anymore\nfor lazy vals (for them, we implicitly made use of the fact that\nthe initializer would find the symbol itself. But after name\nmangling that logic would break down.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Mar 10 18:41:03 2016 +0100]"},
{"name" : "9ae558a7a7060ac7dfc6ef3fc482e8eda66d33e3", "time" : 1457631594, "y" : 255, "branches" : [0, 5, 6, 11], "comment" : "More detailed reporting in TreeChecker\n\n... when definitions are missing.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Mar 10 18:39:54 2016 +0100]"},
{"name" : "3f47afb0f8655b734ed432002a9e07aad92e7867", "time" : 1457629396, "y" : 238, "branches" : [0, 5, 6, 11], "comment" : "Implement most of use-site JavaScript interop.\n\nNotable things that are not yet implemented:\n* JS exports\n* Scala.js-defined JS classes.\n", "author" : "PersonIdent[Sébastien Doeraene, sjrdoeraene@gmail.com, Thu Mar 10 18:03:16 2016 +0100]"},
{"name" : "d0dd7001f0b59ed53f0778530328b3bf413587a2", "time" : 1457629305, "y" : 238, "branches" : [0, 5, 6, 11], "comment" : "Implement most of the Scala.js IR code generator.\n\nNotable things that are missing at this point:\n\n* Pattern matching\n* Try\n* Most of the JavaScript interop\n", "author" : "PersonIdent[Sébastien Doeraene, sjrdoeraene@gmail.com, Thu Mar 10 18:01:45 2016 +0100]"},
{"name" : "39719aadb4076ecf22ca348f607367817638853d", "time" : 1457624774, "y" : 291, "branches" : [0, 5, 6, 11], "comment" : "More info when resolveOverloading fails\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Mar 10 16:46:14 2016 +0100]"},
{"name" : "a8c2b0556db56ac85de3f2a078e169f7e4a1671a", "time" : 1457608564, "y" : 258, "branches" : [0, 5, 6, 11], "comment" : "Pickle/unpickle SuperAccessor names\n\nNeeded to restore the SuperAccessor flag in separate compilation.\nFixes #1144.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Mar 10 12:16:04 2016 +0100]"},
{"name" : "b6daa2a522e88cfb70776b66301b65ed6d0205f6", "time" : 1457605848, "y" : 255, "branches" : [0, 5, 6, 11], "comment" : "Make sure lazy accessors in traits are not private.\n\nFixes #1140. Review by @DarkDimius or @smarter.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Mar 10 11:30:48 2016 +0100]"},
{"name" : "305a9f06bd2b2ac6070beb184d61ff6db4cb9155", "time" : 1457548812, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1163 from dotty-staging/fix-#1145\n\nFix bug where ambiguous references were not reported", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Wed Mar 9 19:40:12 2016 +0100]"},
{"name" : "8c99865cecf41b844e0710620337d26838e647ef", "time" : 1457546124, "y" : 302, "branches" : [0, 5, 6, 11], "comment" : "Fix bug where ambiguous references were not reported\n\nThere was a mssing condition which meant Tyepr thought it was\nat the outermost scope where but was mistaken.\n\nFixes #1145\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Mar 9 18:55:24 2016 +0100]"},
{"name" : "7dfab5f427ad9600b8e54b61716461787d7fa4a1", "time" : 1457544903, "y" : 303, "branches" : [0, 5, 6, 11], "comment" : "Refine pretypeArgs\n\nIt worked more or less by accident before. Now it's more complicated,\nbut we also have tests.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Mar 9 18:35:03 2016 +0100]"},
{"name" : "ff8731041a522b73fde6bddd2d7077d19d35b6b0", "time" : 1457533798, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1162 from dotty-staging/vc-companions\n\nremove println from FirstTransform", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Wed Mar 9 15:29:58 2016 +0100]"},
{"name" : "bf1a722f58f5a76858f6a16469e00b6e70e30bed", "time" : 1457533726, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1161 from andreaTP/fixInterfacesPublishLocal\n\nRemoved invalid javacOptions in (Compile, doc)", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed Mar 9 15:28:46 2016 +0100]"},
{"name" : "5ee20184b886bcdd8d01a593522a9c2b26f2104f", "time" : 1457533176, "y" : 306, "branches" : [0, 5, 6, 11], "comment" : "remove println from FirstTransform\n", "author" : "PersonIdent[VladimirNik, vladimir.nikolaev9@gmail.com, Wed Mar 9 15:19:36 2016 +0100]"},
{"name" : "163b06f5a4cf6fd41fbeb6c75dc8482092b9b33a", "time" : 1457531970, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1153 from dotty-staging/vc-companions\n\nFix for separate compilation with value class issue (#1137)", "author" : "PersonIdent[odersky, odersky@gmail.com, Wed Mar 9 14:59:30 2016 +0100]"},
{"name" : "f63110edc7ab8299ef1cd33b2b156e7987e35931", "time" : 1457528160, "y" : 303, "branches" : [0, 5, 6, 11], "comment" : "Make use of better overload resolution in collections strawman test\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Mar 9 13:56:00 2016 +0100]"},
{"name" : "945ee917aeaada9b3f0c1e1cf2e6f85d4a36300b", "time" : 1457528112, "y" : 303, "branches" : [0, 5, 6, 11], "comment" : "Pretype functional arguments when doing overload resolution\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Mar 9 13:55:12 2016 +0100]"},
{"name" : "dcf319300f640bc242d2d8629d3d6291d23c02ab", "time" : 1457527968, "y" : 310, "branches" : [0, 5, 6, 11], "comment" : "Removed invalid javacOptions in (Compile, doc)\n", "author" : "PersonIdent[andreaTP, andrea.peruffo1982@gmail.com, Wed Mar 9 13:52:48 2016 +0100]"},
{"name" : "ff6c79d22a0f0142d204e97b027b29eb869f0188", "time" : 1457521563, "y" : 303, "branches" : [0, 5, 6, 11], "comment" : "New collection strawman\n\nCentered around views instead of iterators.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Mar 9 12:06:03 2016 +0100]"},
{"name" : "bdd8c35447aa92969abf1dbaf479b6995fdfb7f4", "time" : 1457514666, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1155 from dotty-staging/static\n\nImplement @static sip.", "author" : "PersonIdent[odersky, odersky@gmail.com, Wed Mar 9 10:11:06 2016 +0100]"},
{"name" : "a068498201e7223f35e8801055645bd5b339ce67", "time" : 1457442840, "y" : 313, "branches" : [0, 5, 6, 11], "comment" : "Replace addAnnotation(annotation) by addAnnotation(Annotation(annotation))\n\nas asked in https://github.com/lampepfl/dotty/pull/1155/files#r55355664\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Mar 8 14:14:00 2016 +0100]"},
{"name" : "ead309423796f1a6ef59330112044b69ce719a58", "time" : 1457442768, "y" : 313, "branches" : [0, 5, 6, 11], "comment" : "CheckStatic: do not eliminate non-pure expressions.\n\nImplemented by checking that tree is allowed to access the static member\nand all the members on the path to it. Needed as typer has a tendency\nto desugar calls into series of selections&calls to This.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Mar 8 14:12:48 2016 +0100]"},
{"name" : "51dfcb81cf9f1c6eb9fa6fbb7f77c81086af230f", "time" : 1457442186, "y" : 313, "branches" : [0, 5, 6, 11], "comment" : "Fix Identation in tpd.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Mar 8 14:03:06 2016 +0100]"},
{"name" : "560810e25c77a5efd6212b71f29d2626aa21e9af", "time" : 1457433963, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1156 from dotty-staging/fix-#1052\n\nAllow successive opening comments.", "author" : "PersonIdent[odersky, odersky@gmail.com, Tue Mar 8 11:46:03 2016 +0100]"},
{"name" : "8b6e88fcd4b5e0f7b5a8c2edf9e0e8c2732734a1", "time" : 1457373183, "y" : 317, "branches" : [0, 5, 6, 11], "comment" : "Allow successive opening comments.\n\nFixes #1052.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Mar 7 18:53:03 2016 +0100]"},
{"name" : "15f42a5b97ca3c8732b28001e318e7716ef76202", "time" : 1457369963, "y" : 313, "branches" : [0, 5, 6, 11], "comment" : "Fix add beanSetter annotation to @static\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Mar 7 17:59:23 2016 +0100]"},
{"name" : "65961a939b8ede59ab2cb73f658e49ab4cc430ad", "time" : 1457369576, "y" : 313, "branches" : [0, 5, 6, 11], "comment" : "Add test that was used to see if @static works.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Mar 7 17:52:56 2016 +0100]"},
{"name" : "976702a074e145b10125c1285affd69238d5a8e7", "time" : 1457369576, "y" : 313, "branches" : [0, 5, 6, 11], "comment" : "LazyVals: make all fields added to companions static.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Mar 7 17:52:56 2016 +0100]"},
{"name" : "c73fbaa3fa082788fb3057ab7d8bce4b0f4b426b", "time" : 1457369570, "y" : 313, "branches" : [0, 5, 6, 11], "comment" : "Implement @static sip.\n\nThis pull request implements most of machinery needed for\nhttps://github.com/scala/scala.github.com/pull/491\n\nOnly 3-rd check is not implemented by this commit.\nI propose to get this in faster to fix #1149\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Mar 7 17:52:50 2016 +0100]"},
{"name" : "f1348f79566277ce72e1e4e070bf94a54b0f787e", "time" : 1457366987, "y" : 322, "branches" : [0, 5, 6, 11], "comment" : "Fix for separate compilation with value class issue (missing companion object - #1137)\n", "author" : "PersonIdent[VladimirNik, vladimir.nikolaev9@gmail.com, Mon Mar 7 17:09:47 2016 +0100]"},
{"name" : "742ae7552cc0ebea700ddcb5892a673a1eaca967", "time" : 1457365878, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1142 from dotty-staging/fix/implicit-ctx\n\nDo the implicit search shadowing check in the correct context", "author" : "PersonIdent[odersky, odersky@gmail.com, Mon Mar 7 16:51:18 2016 +0100]"},
{"name" : "e5c59486ba56993b784f36aa5ae05ecfb2ceb4d4", "time" : 1457365866, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1147 from sjrd/fix-non-jvm-sam-non-apply\n\nFix #1146: Fix bug of ExpandSAMs with non-apply SAM methods.", "author" : "PersonIdent[odersky, odersky@gmail.com, Mon Mar 7 16:51:06 2016 +0100]"},
{"name" : "8b4f73fb73a2f57a0b3e6088443797e40f1d1720", "time" : 1457365812, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1150 from dotty-staging/change-lambdalift-fasttrack\n\nChange lambdalift - fasttrack", "author" : "PersonIdent[odersky, odersky@gmail.com, Mon Mar 7 16:50:12 2016 +0100]"},
{"name" : "4b10e2b7127f3644453a00fe54fec0212614c944", "time" : 1457363934, "y" : 326, "branches" : [0, 5, 6, 11], "comment" : "Fix #1146: Fix bug of ExpandSAMs with non-apply SAM methods.\n\nWhen expanding a SAM, ExpandSAMs always used the name `apply` for\nthe generated forwarder, instead of the name of the method which\nis abstract in the SAM type. This commit fixes this issue.\n", "author" : "PersonIdent[Sébastien Doeraene, sjrdoeraene@gmail.com, Mon Mar 7 16:18:54 2016 +0100]"},
{"name" : "cf2fed8138cb399beb7d1249227107b943fe3905", "time" : 1457363586, "y" : 327, "branches" : [0, 5, 6, 11], "comment" : "Address reviewer comments.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Mar 7 16:13:06 2016 +0100]"},
{"name" : "c14c9c096d09d9e21f1fd4ec27e6b416db01512f", "time" : 1457358096, "y" : 238, "branches" : [0, 5, 6, 11], "comment" : "Move the logic of ExpandSAMs.isJvmSam to Platform.isSam.\n\nWhether a language SAM type is also a valid SAM type for the\nback-end is a platform-specific thing. On Scala.js, for example,\nthe rules are completely different than for the JVM.\n\nThis commit therefore moves the logic of the predicate used by\nExpandSAMs to decide whether to expand a SAM as an anonymous class\nto the Platform.\n", "author" : "PersonIdent[Sébastien Doeraene, sjrdoeraene@gmail.com, Mon Mar 7 14:41:36 2016 +0100]"},
{"name" : "a50926701ef5171779aa025d2d307751d166cabe", "time" : 1457131968, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1126 from sjrd/scalajs\n\nInitial infrastructure and hello world for the Scala.js back-end.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri Mar 4 23:52:48 2016 +0100]"},
{"name" : "902479264127c7aa9f478e1145ad0e037bf83665", "time" : 1457125338, "y" : 330, "branches" : [0, 5, 6, 11], "comment" : "Add the sources of scalajs-ir to dotty instead of its binaries.\n\nThis guarantees that we can bootstrap dotty without depending on\nthe binaries of scalajs-ir compiled by another Scala compiler.\n", "author" : "PersonIdent[Sébastien Doeraene, sjrdoeraene@gmail.com, Fri Mar 4 22:02:18 2016 +0100]"},
{"name" : "42f87c2cd4f704fcb5ea769a4dbc85c2d183ac12", "time" : 1457119821, "y" : 331, "branches" : [0, 5, 6, 11], "comment" : "Allow adding typevars to an uncommitable constraint set\n\nWe triggered this assert after the fix in the previous commit.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Fri Mar 4 20:30:21 2016 +0100]"},
{"name" : "5225f00ab3300bac62a467ecc532c275e02e7f43", "time" : 1457045085, "y" : 331, "branches" : [0, 5, 6, 11], "comment" : "Do the implicit search shadowing check in the correct context\n\nThis commit fixes a very sneaky bug, the following code:\n```\nlazy val shadowing =\n  typed(untpd.Ident(ref.name) withPos pos.toSynthetic, funProto)\n       (nestedContext.addMode(Mode.ImplicitShadowing).setExploreTyperState)\n```\nis parsed by scalac as:\n```\nlazy val shadowing =\n  typed(untpd.Ident(ref.name) withPos pos.toSynthetic, funProto);\n(nestedContext.addMode(Mode.ImplicitShadowing).setExploreTyperState);\n```\nSo we don't actually use the nested context in `typed`, instead we end\nup implicitly using `ctx`!\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Thu Mar 3 23:44:45 2016 +0100]"},
{"name" : "6f82c225625916f9c855be1470faaa8e73093e5a", "time" : 1457017833, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1122 from dotty-staging/neg-lines-2\n\nNeg tests: remove xerror parameter from neg tests (#1110)", "author" : "PersonIdent[odersky, odersky@gmail.com, Thu Mar 3 16:10:33 2016 +0100]"},
{"name" : "2b8cd5a594c76fa4500f9c50b2bcd9e5c0c3ceae", "time" : 1457016630, "y" : 334, "branches" : [0, 5, 6, 11], "comment" : "Neg tests: change val computeFilePathsAndExpErrors to def\n", "author" : "PersonIdent[VladimirNik, vladimir.nikolaev9@gmail.com, Thu Mar 3 15:50:30 2016 +0100]"},
{"name" : "92b6677f3f79bddeaf38c634ba94197e9e805274", "time" : 1457010388, "y" : 334, "branches" : [0, 5, 6, 11], "comment" : "Neg tests: remove negTest flag; neg tests are binded to neg directory\n", "author" : "PersonIdent[VladimirNik, vladimir.nikolaev9@gmail.com, Thu Mar 3 14:06:28 2016 +0100]"},
{"name" : "447256c89148e07dfddcfc065bd5f0946b0ae9aa", "time" : 1457010388, "y" : 334, "branches" : [0, 5, 6, 11], "comment" : "Neg tests: remove xerror parameter from tests (compute based on // error)\n", "author" : "PersonIdent[VladimirNik, vladimir.nikolaev9@gmail.com, Thu Mar 3 14:06:28 2016 +0100]"},
{"name" : "af8fc529dfc6e321f84c036f3ebeaeb62e8e38c4", "time" : 1457008588, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1129 from dotty-staging/rename/AllFlags\n\nRename AllFlags to AnyFlags", "author" : "PersonIdent[odersky, odersky@gmail.com, Thu Mar 3 13:36:28 2016 +0100]"},
{"name" : "ff27c8c12f1f584718acb8799b2609df952751b0", "time" : 1457006502, "y" : 327, "branches" : [0, 5, 6, 11], "comment" : "Drop accidentally left-in inhibitor switch\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Mar 3 13:01:42 2016 +0100]"},
{"name" : "c1b41411b467ad0a6e97ac5931bf13aa0b2bc750", "time" : 1457005571, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1139 from dotty-staging/change-needs-companion\n\nChange isCompanionNeeded", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Thu Mar 3 12:46:11 2016 +0100]"},
{"name" : "f02cb0cc910e3320eeb19e2b1cad7e03a16c9c42", "time" : 1457002105, "y" : 327, "branches" : [0, 5, 6, 11], "comment" : "Cleanup lambda lift\n\n1. Make clearer what markFree is supposed to do and get\n   rid of `propagated` mode bit.\n2. Harden copyParams so that we make sure corresponding\n   parameters and fields are copied.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Mar 3 11:48:25 2016 +0100]"},
{"name" : "21a53daa8d03f04d165b4ea1edbe46fecee36ea0", "time" : 1456997860, "y" : 341, "branches" : [0, 5, 6, 11], "comment" : "Speed up LazyVals isCompanion needed\n\nBrings time to compile stdlib down from 185s to 44s.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Mar 3 10:37:40 2016 +0100]"},
{"name" : "0e21000f5527461b68a382346712e5f52fb3beec", "time" : 1456997813, "y" : 341, "branches" : [0, 5, 6, 11], "comment" : "Print phases with time they need\n\nPrint a phase after it has run, together with the time\nit needs. Useful to locate performance problems in transforms.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Mar 3 10:36:53 2016 +0100]"},
{"name" : "25da2152f89c9c8a25188222fa395951b064e639", "time" : 1456937581, "y" : 327, "branches" : [0, 5, 6, 11], "comment" : "Fix call propagation from constructor to class\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Mar 2 17:53:01 2016 +0100]"},
{"name" : "69b6b892793e45a7158d006cdfb5554edc5db633", "time" : 1456935543, "y" : 327, "branches" : [0, 5, 6, 11], "comment" : "LambdaLift redesign\n\nSimplifications in order to avoid the freqent special\ncasing of constructors and prepare the way for\nproper handling of trait constructors (which cause\nproblems; see pending/pos/llift.scala.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Mar 2 17:19:03 2016 +0100]"},
{"name" : "9d3424da9e34905a20783d4f597d1bb02d0df5d0", "time" : 1456926916, "y" : 327, "branches" : [0, 5, 6, 11], "comment" : "Simplification: get rid of local trait methods\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Mar 2 14:55:16 2016 +0100]"},
{"name" : "ae624660d3cc31e9956d7e537c7a5c7925afda68", "time" : 1456910165, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1111 from dotty-staging/fix-#1099\n\nSpecial case pattern matching against abstract types with class tags", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed Mar 2 10:16:05 2016 +0100]"},
{"name" : "a96f98367125f7699f002b0868f718438ff9920f", "time" : 1456864064, "y" : 347, "branches" : [0, 5, 6, 11], "comment" : "Rename AllFlags to AnyFlags\n\n`membersBasedOnFlags(requiredFlags = AnyFlags, excludedFlags = ...)` is\neasier to understand than\n`membersBasedOnFlags(requiredFlags = AllFlags, excludedFlags = ...)`\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Tue Mar 1 21:27:44 2016 +0100]"},
{"name" : "e94e8ef5200471a99facd818a6c1a25f994b163d", "time" : 1456854388, "y" : 327, "branches" : [0, 5, 6, 11], "comment" : "Handle local traits in lambda lift\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Mar 1 18:46:28 2016 +0100]"},
{"name" : "67de3d35019816a1297215770f1a8012c390db0e", "time" : 1456854388, "y" : 327, "branches" : [0, 5, 6, 11], "comment" : "Fix outer paths generated during lambda lift from constructors.\n\nIf lambda lift needs to create an outer path from a constructor, the\npath needs to start from the $outer parameter of the constructor, not\nthe this of the enclosing class, which is not yet available.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Mar 1 18:46:28 2016 +0100]"},
{"name" : "adc4f8295eecc2c802067ff7375006564700fff6", "time" : 1456854387, "y" : 327, "branches" : [0, 5, 6, 11], "comment" : "Fix a loophole where outer paths are missing at phase lambda lift.\n\nTest will come in llift.scala.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Mar 1 18:46:27 2016 +0100]"},
{"name" : "18505cb2061235dba1b064b9379164e2a48254a6", "time" : 1456843676, "y" : 330, "branches" : [0, 5, 6, 11], "comment" : "Store the JSDefinitions in a custom platform SJSPlatform.\n\nThis required the ability to instantiate a different `Platform`\ndepending on settings, which, in turn, required to defer the\ninitialization of `ContextBase.platform`.\n", "author" : "PersonIdent[Sébastien Doeraene, sjrdoeraene@gmail.com, Tue Mar 1 15:47:56 2016 +0100]"},
{"name" : "cd4004a82d9713bbb0b120aba83b3ed8fc9f1372", "time" : 1456843676, "y" : 330, "branches" : [0, 5, 6, 11], "comment" : "Initial infrastructure and hello world for the Scala.js back-end.\n\nThe Scala.js back-end can be enabled with the `-scalajs`\ncommand-line option. Currently, it adds one phase to the pipeline,\nwhich emits .sjsir files from trees.\n\nA sandbox project `sjsSandbox`, in `sandbox/scalajs/`, can be used\nto easily test Scala.js compilation. One can run the `main()`\nmethod of the `hello.world` object with\n\n  > sjsSandbox/run\n\nThe back-end only contains the bare mimimum to compile the hello\nworld application in the sandbox. Anything else will blow up\n(for example, primitive method calls). It is a work-in-progress.\n", "author" : "PersonIdent[Sébastien Doeraene, sjrdoeraene@gmail.com, Tue Mar 1 15:47:56 2016 +0100]"},
{"name" : "0ebf36b394b00f3f432d8fdedeaa15e7d4df2b06", "time" : 1456843676, "y" : 330, "branches" : [0, 5, 6, 11], "comment" : "Mark concrete vals mixed in from Scala2 traits as mutable.\n\nWhen a concrete val is mixed in from a Scala2 trait, a setter is\ngenerated, which is called by the `$init$` method. Since the\nassignment in this setter is not done in the constructor, it is\nnonsensical for the field to be immutable.\n\nThis commit sets the Mutable flag on such fields. It only applies\nfor vals coming from Scala2 traits. vals coming from Dotty traits\nare kept immutable.\n", "author" : "PersonIdent[Sébastien Doeraene, sjrdoeraene@gmail.com, Tue Mar 1 15:47:56 2016 +0100]"},
{"name" : "b347d2725d1a4e5f66d798be79d3fc3f0f44ea88", "time" : 1456843675, "y" : 330, "branches" : [0, 5, 6, 11], "comment" : "In LinkScala2ImplClass, disregard signatures when looking for constructor.\n\nDotty treats trait and class constructors as returning the class.\nBut scalac uses Unit for the return type of trait init methods.\n", "author" : "PersonIdent[Sébastien Doeraene, sjrdoeraene@gmail.com, Tue Mar 1 15:47:55 2016 +0100]"},
{"name" : "0ae3ef2010b90bf06d76a768b0f0c5aa56c1180a", "time" : 1456843295, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1135 from dotty-staging/add/more-memory-2\n\n Build.scala: increase Jenkins max heap from 1.1G to 1.3G ", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Tue Mar 1 15:41:35 2016 +0100]"},
{"name" : "acf05353a599de11e466b5e35cd003a2f6aa5312", "time" : 1456839262, "y" : 356, "branches" : [0, 5, 6, 11], "comment" : "Build.scala: increase Jenkins max heap from 1.1G to 1.3G\n\nThis should be safe now that run tests do not take so much memory\nanymore (cf #1033 and  #1076).\n\nIt would be even better if we could figure out why we're using so much\nmemory, but that's less important than avoiding spurious test failures.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Tue Mar 1 14:34:22 2016 +0100]"},
{"name" : "6ade676bf9e1796a74fc4b4eb289b985c07e6100", "time" : 1456839045, "y" : 356, "branches" : [0, 5, 6, 11], "comment" : "Rename travisMemLimit to jenkinsMemLimit, we don't use travis anymore\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Tue Mar 1 14:30:45 2016 +0100]"},
{"name" : "806ea749affd475f2e9fec66623dcef738bc61b3", "time" : 1456838959, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1134 from felixmulder/topic/fix-dotc\n\nFix `bin/dotc` checkjar of wrong project", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Tue Mar 1 14:29:19 2016 +0100]"},
{"name" : "88e9794ac9e31b7bb02ef68d1c74bfad6f867acb", "time" : 1456837842, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1128 from dotty-staging/fix/membersBasedOnFlags\n\nMake Types#membersBasedOnFlags safer and faster", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Tue Mar 1 14:10:42 2016 +0100]"},
{"name" : "c652c2ecb7f4d835f8131a67c0537f10289c3dee", "time" : 1456836826, "y" : 360, "branches" : [0, 5, 6, 11], "comment" : "Fix `bin/dotc` checkjar of wrong package\n", "author" : "PersonIdent[Felix Mulder, felix.mulder@gmail.com, Tue Mar 1 13:53:46 2016 +0100]"},
{"name" : "561915336d652c41bf196a190c5847cf27a26506", "time" : 1456762934, "y" : 361, "branches" : [0, 5, 6, 11], "comment" : "Make Types#membersBasedOnFlags safer and faster\n\nBy filtering excluded flags earlier, we avoid forcing some denotations.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Mon Feb 29 17:22:14 2016 +0100]"},
{"name" : "ba67e556271156c11f5f313f68891bf18f7a51d2", "time" : 1456686631, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1125 from dotty-staging/add/interface\n\n Add a `dotty-interfaces` package ", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Sun Feb 28 20:10:31 2016 +0100]"},
{"name" : "7e7ee820df7647680d9aaf1ca991fe9718159097", "time" : 1456686539, "y" : 363, "branches" : [0, 5, 6, 11], "comment" : "Add a `dotty-interfaces` package\n\nWe introduce a new entry point for the compiler in\n`dotty.tools.dotc.Driver`:\n```\ndef process(args: Array[String], simple: interfaces.SimpleReporter,\n  callback: interfaces.CompilerCallback): interfaces.ReporterResult\n```\nExcept for `args` which is just an array, the argument types and return\ntype of this method are Java interfaces defined in a new package called\n`dotty-interfaces` which has a stable ABI. This means that you can\nprogrammatically run a compiler with a custom reporter and callbacks\nwithout having to recompile it against every version of dotty: you only\nneed to have `dotty-interfaces` present at compile-time and call the\n`process` method using Java reflection.\n\nSee `test/test/InterfaceEntryPointTest.scala` for a concrete example.\n\nThis design is based on discussions with the IntelliJ IDEA Scala plugin\nteam. Thanks to Nikolay Tropin for the discussions and his PR\nproposal (see #1011).\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Sun Feb 28 20:08:59 2016 +0100]"},
{"name" : "c2cb4694556731aaa243889d702afb5ac2b9e74a", "time" : 1456683395, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1127 from dotty-staging/upgrade/sbt-0.13.11\n\nUpgrade sbt to 0.13.11 and scalastyle-sbt-plugin to 0.8.0", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Sun Feb 28 19:16:35 2016 +0100]"},
{"name" : "327960efa53d67ee0c56729a0e4e655423cde26b", "time" : 1456679321, "y" : 365, "branches" : [0, 5, 6, 11], "comment" : "Upgrade sbt to 0.13.11 and scalastyle-sbt-plugin to 0.8.0\n\nUpgrading sbt will allow us to experiment with bootstrapping\nusing sbt since 0.13.11 is the first release that supports building\nwith dotty (see https://github.com/smarter/dotty-bridge).\n\nUpgrading scalastyle-sbt-plugin allows us to remove the workaround for\nhttps://github.com/scalastyle/scalastyle/issues/156\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Sun Feb 28 18:08:41 2016 +0100]"},
{"name" : "94b41d5c491878543288af1bedb4daf57226ca07", "time" : 1456356678, "y" : 363, "branches" : [0, 5, 6, 11], "comment" : "Small API changes in preparation for dotty-interfaces\n\n- Rename Diagnostic#msg to message, this is nicer for a public API\n- Rename SourceFile#lineContents and SourcePosition#lineContents\n  to lineContent, the former is not grammatically correct.\n- Add some convenience methods to SourcePosition.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Thu Feb 25 00:31:18 2016 +0100]"},
{"name" : "0eecb7189188e6ce379b8840749abb1e0241035b", "time" : 1456333728, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1124 from sjrd/fix-fatalerror-ctor\n\nFix FatalError's constructor to forward `msg` to super.", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Wed Feb 24 18:08:48 2016 +0100]"},
{"name" : "c6820938e8c56833114a57ce17aa6e39d0d8b591", "time" : 1456325914, "y" : 368, "branches" : [0, 5, 6, 11], "comment" : "Remove dotty.tools.dotc.FatalError; use dotty.tools.FatalError instead.\n", "author" : "PersonIdent[Sébastien Doeraene, sjrdoeraene@gmail.com, Wed Feb 24 15:58:34 2016 +0100]"},
{"name" : "9218b1c925a258ec44583feb6741a828ffddf6f9", "time" : 1456308262, "y" : 368, "branches" : [0, 5, 6, 11], "comment" : "Fix FatalError's constructor to forward `msg` to super.\n\nPreviously, getMessage() always returned `null`, causing NPEs\nwhen trying to report a FatalError.\n", "author" : "PersonIdent[Sébastien Doeraene, sjrdoeraene@gmail.com, Wed Feb 24 11:04:22 2016 +0100]"},
{"name" : "36ce4bcb47252b488c728378278c9d3b10f83e78", "time" : 1456247546, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1095 from sjrd/modernize-build\n\nModernize and clean up the build.", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Tue Feb 23 18:12:26 2016 +0100]"},
{"name" : "8ecca5086b349628979c887c0dc49c8b5f6e757b", "time" : 1456247532, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1123 from smarter/refactor/doReport\n\nConsoleReporter: handling of non-sensical messages is now reusable ", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Tue Feb 23 18:12:12 2016 +0100]"},
{"name" : "03486df4053ec75bce0ec4b6e5f16ceafcbf66e9", "time" : 1456244486, "y" : 372, "branches" : [0, 5, 6, 11], "comment" : "ConsoleReporter: handling of non-sensical messages is now reusable\n\nThis is now handled by a separate trait HideNonSensicalMessages that can\nbe mixed in, similar to UniqueMessagePositions. This way we'll be able\nto reuse this functionality for other kind of Reporters.\n\nThis also means that we don't need `doReport` to return a Boolean\nanymore, so we change it to return a Unit as it did before\n065a0026924f722e9844c8e314180bb4cebca236\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Tue Feb 23 17:21:26 2016 +0100]"},
{"name" : "9d24583b44e4b59d07d61c5f051c8e9a8a832148", "time" : 1456183286, "y" : 372, "branches" : [0, 5, 6, 11], "comment" : "Refactor Diagnostic\n\nBreak it out from Reporter and eliminate all dependencies\nto Context. This is done so that Diagnostics can be part\nof a public and minimal compiler API.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Tue Feb 23 00:21:26 2016 +0100]"},
{"name" : "11bd355128fb6e0457f70baea235aaba91deb888", "time" : 1455989059, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1117 from dotty-staging/dont-create-companions\n\nDo not create companions that will be dropped later.", "author" : "PersonIdent[odersky, odersky@gmail.com, Sat Feb 20 18:24:19 2016 +0100]"},
{"name" : "0f4d74d9bc7ef99599082b403cb3aa55d181a071", "time" : 1455986537, "y" : 375, "branches" : [0, 5, 6, 11], "comment" : "Rename unused phases.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Feb 20 17:42:17 2016 +0100]"},
{"name" : "8439c7feb204cfacf861322ad6dcfe4056188891", "time" : 1455986537, "y" : 375, "branches" : [0, 5, 6, 11], "comment" : "FirstTransform: simplify needsCompanion code\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Feb 20 17:42:17 2016 +0100]"},
{"name" : "910481a0f4fe671f3f4d8965eac61870596970e1", "time" : 1455986537, "y" : 375, "branches" : [0, 5, 6, 11], "comment" : "Do not create companions that will be dropped later.\n\nFix blocker bug reported in #1114\nI dislike this fix as now phase needs to know in advance\nif it will ever need a companion for the class.\nOn the bright side, this change makes it clear\nwhich phases need companions\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Feb 20 17:42:17 2016 +0100]"},
{"name" : "6e535f7dc855d1587142f81bd9a53ea9ba3c7300", "time" : 1455986281, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1112 from dotty-staging/value-classes-private-this-param\n\nValue classes: add support for private[this] parameter", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Sat Feb 20 17:38:01 2016 +0100]"},
{"name" : "3a8fa8b4fc5ef486ffc2e9e85d454598bf15aa02", "time" : 1455986202, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1120 from dotty-staging/fix-1114-patmat\n\nPatMat: remove one more trace of doing several steps at a time", "author" : "PersonIdent[odersky, odersky@gmail.com, Sat Feb 20 17:36:42 2016 +0100]"},
{"name" : "d7d5ffccd7f4fd575f881a036579b08faca5a42d", "time" : 1455985146, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1119 from dotty-staging/fix-#1116\n\nDefault getters accessibility fix", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Sat Feb 20 17:19:06 2016 +0100]"},
{"name" : "e5c8cb439ef59c0942070e812f1ef634c6ab9451", "time" : 1455984664, "y" : 381, "branches" : [0, 5, 6, 11], "comment" : "Test that #1114 is fixed.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Feb 20 17:11:04 2016 +0100]"},
{"name" : "619402025124d05dfdaf6b32c46bf66deb4b4da7", "time" : 1455984277, "y" : 381, "branches" : [0, 5, 6, 11], "comment" : "PatMat: remove one more trace of doing several steps at a time\n\nWhen creating subPatRefs the consider returned type of accessor,\nnot the type of binder.\n\nFixes #1114\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Feb 20 17:04:37 2016 +0100]"},
{"name" : "71fd9dc32eb3777c55ef276bed9fd43d36bdc053", "time" : 1455983157, "y" : 383, "branches" : [0, 5, 6, 11], "comment" : "Don't copy annotations from method to default getter.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Feb 20 16:45:57 2016 +0100]"},
{"name" : "8a849a4b5b5c682263ca5a2cd5a1693ee7cbbb02", "time" : 1455982265, "y" : 383, "branches" : [0, 5, 6, 11], "comment" : "Default getters accessibility fix\n\nDefault getters should have same accessibility as the method they belong to.\nPreviously, it was the accessibility of the parameter, which makes no sense.\nFixes #1116.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Feb 20 16:31:05 2016 +0100]"},
{"name" : "1d2fe4823bc4c8a69351d49229556ac3a1532778", "time" : 1455960031, "y" : 385, "branches" : [0, 5, 6, 11], "comment" : "Remove bogus test on rebasing\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Feb 20 10:20:31 2016 +0100]"},
{"name" : "ad4ce030052d6013641eefc9481e50c2ca0b9c2e", "time" : 1455959998, "y" : 385, "branches" : [0, 5, 6, 11], "comment" : "Search for classtag only during typer.\n\nWe do not want to do implicit search during tree checking.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Feb 20 10:19:58 2016 +0100]"},
{"name" : "050c9af51432e3a752715af78b0de577d5af7f87", "time" : 1455959998, "y" : 385, "branches" : [0, 5, 6, 11], "comment" : "Special case for pattern matching tagged abstract types.\n\nAdd special case when pattern matching against an abstract type that comes with a class tag\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Feb 20 10:19:58 2016 +0100]"},
{"name" : "14096e3601e42fd33fb2446b908a5cfce3cf1fa9", "time" : 1455959998, "y" : 385, "branches" : [0, 5, 6, 11], "comment" : "Refactoring of typedTyped\n\nGoal: Make implementation easier to understand. Prepare the ground for\nspecial-casing of typetagged patterns.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Feb 20 10:19:58 2016 +0100]"},
{"name" : "c6064ed02c4d895b1d0df269fc018265b0d55625", "time" : 1455959998, "y" : 385, "branches" : [0, 5, 6, 11], "comment" : "Check that classOf gets applied to class types\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Feb 20 10:19:58 2016 +0100]"},
{"name" : "419ee6cd11214c91e55bb74fb77b8e84760a780e", "time" : 1455959997, "y" : 385, "branches" : [0, 5, 6, 11], "comment" : "Remove ClassTags phase.\n\nNow subsumed by functionality in Typer.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Feb 20 10:19:57 2016 +0100]"},
{"name" : "ea2345d5725ca74504d5cb4b9e14e6d2e73da53c", "time" : 1455959997, "y" : 385, "branches" : [0, 5, 6, 11], "comment" : "Simplify ClassOf phase\n\nMake use of Definitions as the repository for\nstandard symbols in Predef.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Feb 20 10:19:57 2016 +0100]"},
{"name" : "1f58090849a51787a4482a8d016a31f15f3c1b9b", "time" : 1455959997, "y" : 385, "branches" : [0, 5, 6, 11], "comment" : "Fix desugaring of classes with context bounds\n\nContext bounds did not make it before into secondary\nconstructors. Now the evidence parameters generated\nby context bounds get copied into secondary constructors.\n\nWithout this fix, scala.collection.immutable.PagedSeq fails\nto compile in new classtag scheme.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Feb 20 10:19:57 2016 +0100]"},
{"name" : "02b545211b3895d18e7e9b45289897a5ae447123", "time" : 1455959997, "y" : 385, "branches" : [0, 5, 6, 11], "comment" : "Fix search of Array classTags.\n\nIf a classtag for `T` is available, a classtag\nfor `Array[T]` can also be generated.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Feb 20 10:19:57 2016 +0100]"},
{"name" : "27d91f90c8f6c295dd03dc98be61c10c77d775a7", "time" : 1455959997, "y" : 385, "branches" : [0, 5, 6, 11], "comment" : "Make type fully defined before searching for a ClassTag for it\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Feb 20 10:19:57 2016 +0100]"},
{"name" : "e4989b3cc13f70d8316790e309b5d3b27317d80e", "time" : 1455959996, "y" : 385, "branches" : [0, 5, 6, 11], "comment" : "Synthesize classTags in Typer.\n\nNow diagnoses missing ClassTags of abstract types\nas implicit failures.\n\nAlso: Simpler API of tpd.clsOf.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Feb 20 10:19:56 2016 +0100]"},
{"name" : "f6391c780ce7472352b60da9fdd7ec8d7496a0ea", "time" : 1455959996, "y" : 385, "branches" : [0, 5, 6, 11], "comment" : "Remove bogus test\n\nTests failures were caused by previous incomplete implementation\nof classTag.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Feb 20 10:19:56 2016 +0100]"},
{"name" : "07bf063000db98789a7b0227436284ec9e77e73e", "time" : 1455901818, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1102 from dotty-staging/fix-#1096\n\nKeep named arguments during eta expansion", "author" : "PersonIdent[odersky, odersky@gmail.com, Fri Feb 19 18:10:18 2016 +0100]"},
{"name" : "dfa3ec849ff62f682092c450129e78d43829bde3", "time" : 1455901771, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1066 from dotty-staging/fix-#997\n\nFix #997", "author" : "PersonIdent[odersky, odersky@gmail.com, Fri Feb 19 18:09:31 2016 +0100]"},
{"name" : "1ebbba352eb61f5cc575455f61d496a54fcb7f95", "time" : 1455900718, "y" : 399, "branches" : [0, 5, 6, 11], "comment" : "fix to neg_valueClasses test\n", "author" : "PersonIdent[VladimirNik, vladimir.nikolaev9@gmail.com, Fri Feb 19 17:51:58 2016 +0100]"},
{"name" : "6f382a51a522673de75d154da2632108e7a1016c", "time" : 1455899311, "y" : 400, "branches" : [0, 5, 6, 11], "comment" : "Add error markers\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 19 17:28:31 2016 +0100]"},
{"name" : "2217a4ec9ea563f01b07c852a3834d738cd6439d", "time" : 1455899063, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1072 from dotty-staging/change-isVolatile-2\n\nChange is volatile 2", "author" : "PersonIdent[odersky, odersky@gmail.com, Fri Feb 19 17:24:23 2016 +0100]"},
{"name" : "f49f00cb311b59ad1f4be97e7c4f4e93e5022cde", "time" : 1455898107, "y" : 399, "branches" : [0, 5, 6, 11], "comment" : "Add support for private[this] parameter in value classes\n", "author" : "PersonIdent[VladimirNik, vladimir.nikolaev9@gmail.com, Fri Feb 19 17:08:27 2016 +0100]"},
{"name" : "97e261d17bb260cd0db4708199118d7039e442fa", "time" : 1455897456, "y" : 400, "branches" : [0, 5, 6, 11], "comment" : "Merge parentsWithArgs and instantiatedParents\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 19 16:57:36 2016 +0100]"},
{"name" : "5969e02b59b0cae07eab6bf8065331708f4b2480", "time" : 1455897456, "y" : 400, "branches" : [0, 5, 6, 11], "comment" : "Fix expected error count\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 19 16:57:36 2016 +0100]"},
{"name" : "54702905111ecc363d6312635415fd9ee7976356", "time" : 1455897456, "y" : 400, "branches" : [0, 5, 6, 11], "comment" : "Move leak detection to Checking\n\nAlso: include a test that private aliases are transparent.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 19 16:57:36 2016 +0100]"},
{"name" : "19026b87c47a5aeca98387f39f6d59fae5bec846", "time" : 1455897456, "y" : 400, "branches" : [0, 5, 6, 11], "comment" : "Fix two private leaks in dotty compiler itself.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 19 16:57:36 2016 +0100]"},
{"name" : "fc043bfb2e1c8fd0a73b87a4c955e3e09f6bf8c0", "time" : 1455897455, "y" : 400, "branches" : [0, 5, 6, 11], "comment" : "Add checking for leaking private definitions\n\nFirst version. Fixes #997.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 19 16:57:35 2016 +0100]"},
{"name" : "eb1908a9f2c61895cabe70c0ac0ebbe8ef14fcea", "time" : 1455897390, "y" : 400, "branches" : [0, 5, 6, 11], "comment" : "New utility method: Reporter#errorOrMigrationWarning\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 19 16:56:30 2016 +0100]"},
{"name" : "6a93dd0dea9833ecba70d09a414a650227c03fc9", "time" : 1455897390, "y" : 400, "branches" : [0, 5, 6, 11], "comment" : "Copy access flags to derived definitions during desugaring\n\nPreviously, some definitions were too public, others too private.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 19 16:56:30 2016 +0100]"},
{"name" : "12301586418ebad71c7d7d5ce9a53ea4909f675a", "time" : 1455897321, "y" : 410, "branches" : [0, 5, 6, 11], "comment" : "Fix merge breakage.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 19 16:55:21 2016 +0100]"},
{"name" : "ea407f143591aa9ffd0fd0f9a25a9ec9e812e76c", "time" : 1455887616, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1106 from dotty-staging/neg-lines\n\nNeg tests check files for // error markers (rebased and updated)", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri Feb 19 14:13:36 2016 +0100]"},
{"name" : "cecaa4baa7ed1e42d2d6788b334925e2ba6ae809", "time" : 1455886937, "y" : 410, "branches" : [0, 5, 6, 11], "comment" : "Remove unused method, fix comments.\n\nAddendum to change-isVolatile. Changes did not make it in\nby accident before that branch was merged.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 19 14:02:17 2016 +0100]"},
{"name" : "8158279b556bc9f39d59adadefeb85d44c93433e", "time" : 1455886937, "y" : 410, "branches" : [0, 5, 6, 11], "comment" : "Simplify logic in matchNamed\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 19 14:02:17 2016 +0100]"},
{"name" : "8441de7a907996361a78d744d3364cee3d558f84", "time" : 1455886937, "y" : 410, "branches" : [0, 5, 6, 11], "comment" : "Allow Named Arguments in TypeArgs\n\nLets one also pass named arguments to methods.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 19 14:02:17 2016 +0100]"},
{"name" : "1d585f1172d563051c0710008568b3b53728281f", "time" : 1455886856, "y" : 410, "branches" : [0, 5, 6, 11], "comment" : "Use hasNamedArgs instead of repeating test inline.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 19 14:00:56 2016 +0100]"},
{"name" : "356e59c2d25963cde8dae309881550f3635da7f3", "time" : 1455886855, "y" : 410, "branches" : [0, 5, 6, 11], "comment" : "Add some flexibility in comparing named and unnamed parameterized types.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 19 14:00:55 2016 +0100]"},
{"name" : "9dd07aad2ae6941a23c256245340771b3b5c2ab1", "time" : 1455886855, "y" : 410, "branches" : [0, 5, 6, 11], "comment" : "Take defult parameters into account for overloading resolution.\n\nThe current Scala spec only considers methods without default parameters\nfor overloading resolution (unless only a single one remains anyway after\nfiltering by shape). This is needlessly restrictive. But dropping this\nrestriction (as dotty does) can lead to ambiguity errors, which is why\nrun/t8197 did not compile anymore.\n\nWe fix the problem by a last try rule: If after asSpecific tests there are\nstill several alternatives, and only one of them is without default arguments,\npick that one.\n\nI tried an alternative rule which would make the distinction on default params\nearlier but that one fails for the overloaded tree copier functions in Trees.scala\n(the method with default parameters is also the one which is more specific).\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 19 14:00:55 2016 +0100]"},
{"name" : "6ee8569e6bf14412dc924fe1379a544f263397ed", "time" : 1455886855, "y" : 410, "branches" : [0, 5, 6, 11], "comment" : "Fix problem of overloading resolution when receiver is not stable.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 19 14:00:55 2016 +0100]"},
{"name" : "a553296a6d32e062eed498241ae99bcc61c58529", "time" : 1455886801, "y" : 410, "branches" : [0, 5, 6, 11], "comment" : "Fix review comment in previous PR\n\nWas not fixed by accident then, so we do it here now.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 19 14:00:01 2016 +0100]"},
{"name" : "66924f4f1e4111edcce530cc383fc1eb894a342c", "time" : 1455886801, "y" : 410, "branches" : [0, 5, 6, 11], "comment" : "Fix assertion error message\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 19 14:00:01 2016 +0100]"},
{"name" : "103339ed48f95b427776f18cf4659afb2f84897c", "time" : 1455886801, "y" : 410, "branches" : [0, 5, 6, 11], "comment" : "Add test to illustrate overloading problem.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 19 14:00:01 2016 +0100]"},
{"name" : "d0b1ebcd41674dd78ec98a88ce4a60457c423da0", "time" : 1455886801, "y" : 410, "branches" : [0, 5, 6, 11], "comment" : "Make type parameter reordering generally available.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 19 14:00:01 2016 +0100]"},
{"name" : "f94c53caaa9265bc0252f8c435d1395901728601", "time" : 1455886801, "y" : 410, "branches" : [0, 5, 6, 11], "comment" : "Add doc comment\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 19 14:00:01 2016 +0100]"},
{"name" : "03a880526a5da369d7f7fdcb07bfa3207375f829", "time" : 1455886801, "y" : 410, "branches" : [0, 5, 6, 11], "comment" : "Address reviewer comments\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 19 14:00:01 2016 +0100]"},
{"name" : "70e27f8a6f7943e8913a194fd69a4e73cc6fde1b", "time" : 1455886801, "y" : 410, "branches" : [0, 5, 6, 11], "comment" : "More named param tests\n\nAlso, add an unrelated test file to pos.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 19 14:00:01 2016 +0100]"},
{"name" : "dbf04a67bbd06c5beebb958d0012ae300a20d0d1", "time" : 1455886801, "y" : 410, "branches" : [0, 5, 6, 11], "comment" : "Annotate test with // error indications\n\nWe had same fleyness in number of errors of cycle.scala\nwhich prompted this.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 19 14:00:01 2016 +0100]"},
{"name" : "556230ad15c7a2587d6e34496dae00fc310efe42", "time" : 1455886801, "y" : 410, "branches" : [0, 5, 6, 11], "comment" : "Check named type params for welformedness rules.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 19 14:00:01 2016 +0100]"},
{"name" : "5ac739eb65694457ac21800404641a693648a55c", "time" : 1455886800, "y" : 410, "branches" : [0, 5, 6, 11], "comment" : "Fix PostTyper normalization for named args\n\nNeeds to work also if named arg refers to an abstract type,\nnot a parameter.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 19 14:00:00 2016 +0100]"},
{"name" : "9757adc43f3b608974c418a7b8ddf68d355f6c48", "time" : 1455886800, "y" : 410, "branches" : [0, 5, 6, 11], "comment" : "Fix pending test for pickling\n\nThere is a before/after difference having to do with the\norder in which class declarations show up.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 19 14:00:00 2016 +0100]"},
{"name" : "0a95366873126f6b0b1ba32cd5c3455339e3abf5", "time" : 1455886800, "y" : 410, "branches" : [0, 5, 6, 11], "comment" : "Move failing test to pending\n\nNamed parameters cause some elements to be unpickled\nin a different order as they are pickled. In particular\nterm parameter aliases and type parameter aliases seem to be swapped.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 19 14:00:00 2016 +0100]"},
{"name" : "ba91b76cb2f1c59b0298b3aeea8c1bc9735f0023", "time" : 1455886800, "y" : 410, "branches" : [0, 5, 6, 11], "comment" : "Avoid cyclic reference error when building dotty.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 19 14:00:00 2016 +0100]"},
{"name" : "b79c5b4281952ab6cc501da8b20e7ae7f75ab44e", "time" : 1455886800, "y" : 410, "branches" : [0, 5, 6, 11], "comment" : "Make named parameter alias handling more robust\n\nAfter unpickling we might see an alias\n\n    X = pre.X\n\nwhere pre =:= the ThisType of the enclosing class. But it\nmight not be `eq` to it.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 19 14:00:00 2016 +0100]"},
{"name" : "6947b630bada85dabd7904ecf5d1da724c5d281d", "time" : 1455886800, "y" : 410, "branches" : [0, 5, 6, 11], "comment" : "Augment test case\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 19 14:00:00 2016 +0100]"},
{"name" : "3363c4e4dde98d58e99f7d7ce44f5cc206cef4c7", "time" : 1455886800, "y" : 410, "branches" : [0, 5, 6, 11], "comment" : "Make some operations surivive partial named parameter lists\n\nTypes#underlyingClassRef and PostTyper#normalizeTree need to be changed so they can\ndeal with partial named parameter lists.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 19 14:00:00 2016 +0100]"},
{"name" : "5a8e87004f563feafbaf16e78bd0d6be26ee6e1c", "time" : 1455886800, "y" : 410, "branches" : [0, 5, 6, 11], "comment" : "First version of named type arguments\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 19 14:00:00 2016 +0100]"},
{"name" : "91ccb52bda344d74ba7a3e9859346e57051d2aff", "time" : 1455886799, "y" : 410, "branches" : [0, 5, 6, 11], "comment" : "Support named type parameters\n\nChanges needed to support simple named type parameters.\nNot yet implemented: named arguments.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 19 13:59:59 2016 +0100]"},
{"name" : "d872d9ca54e9d56f563dc2e0bb002b38380af391", "time" : 1455886799, "y" : 410, "branches" : [0, 5, 6, 11], "comment" : "Remove unnecessary logic in toBounds\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 19 13:59:59 2016 +0100]"},
{"name" : "46b7fc713da460023073c9a9d4d25fc2c7acf5e2", "time" : 1455886653, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1107 from dotty-staging/fix/wildApprox-lazyref\n\nProtoTypes#wildApprox: fix LazyRef approximation", "author" : "PersonIdent[odersky, odersky@gmail.com, Fri Feb 19 13:57:33 2016 +0100]"},
{"name" : "70f5d93898095aa47b8f7bb33de00d415888dfcf", "time" : 1455883935, "y" : 439, "branches" : [0, 5, 6, 11], "comment" : "Neg tests: remove // error from pos tests\n", "author" : "PersonIdent[VladimirNik, vladimir.nikolaev9@gmail.com, Fri Feb 19 13:12:15 2016 +0100]"},
{"name" : "8543d46a974c0440a869f370a72dda44a0e4e5b9", "time" : 1455879582, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1109 from dotty-staging/add/gitignore-scala\n\n.gitignore: add scala-scala", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri Feb 19 11:59:42 2016 +0100]"},
{"name" : "8da1486841e430e6487689c496b678b019f4f2e0", "time" : 1455838008, "y" : 441, "branches" : [0, 5, 6, 11], "comment" : ".gitignore: add scala-scala\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Fri Feb 19 00:26:48 2016 +0100]"},
{"name" : "ff95503eba99e542605cb085894f35f53c4ef5b8", "time" : 1455819057, "y" : 439, "branches" : [0, 5, 6, 11], "comment" : "Neg tests: filename checking updated\n", "author" : "PersonIdent[VladimirNik, vladimir.nikolaev9@gmail.com, Thu Feb 18 19:10:57 2016 +0100]"},
{"name" : "48cd10159573150ed41c86d45c259cf6ad1a0c8e", "time" : 1455818094, "y" : 443, "branches" : [0, 5, 6, 11], "comment" : "ProtoTypes#wildApprox: fix LazyRef approximation\n\nBefore this commit, the output of `wildApprox(A)` where `A <: Sys[LazyRef(A)]` was\n`? <: Sys[LazyRef(() => wildApprox(A))]`. This lead to infinite\nsubtyping checks.\n\nThis is fixed by always approximating a LazyRef by an unbounded\nwildcard. Since we only create LazyRefs when we encounter a cycle, this\nshould be safe.\n\nFix #1103.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Thu Feb 18 18:54:54 2016 +0100]"},
{"name" : "0afccf5e2f0a082ec6a1a69ede02942a20c25215", "time" : 1455815955, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #898 from dotty-staging/add/auto-uncurry\n\nImplement auto tupling of function arguments", "author" : "PersonIdent[odersky, odersky@gmail.com, Thu Feb 18 18:19:15 2016 +0100]"},
{"name" : "955b04a41ccefeac6bfec0158991c152165be6eb", "time" : 1455815506, "y" : 439, "branches" : [0, 5, 6, 11], "comment" : "Adapt neg tests to new neg tests checks\n", "author" : "PersonIdent[VladimirNik, vladimir.nikolaev9@gmail.com, Thu Feb 18 18:11:46 2016 +0100]"},
{"name" : "5fc321ffaa0a0b6b997c0fdecf1a86590474d812", "time" : 1455814930, "y" : 439, "branches" : [0, 5, 6, 11], "comment" : "Restructured JUnit neg tests\n", "author" : "PersonIdent[VladimirNik, vladimir.nikolaev9@gmail.com, Thu Feb 18 18:02:10 2016 +0100]"},
{"name" : "418c118e3cf8c54fee1f2416e2bb2ba3996d8578", "time" : 1455814803, "y" : 439, "branches" : [0, 5, 6, 11], "comment" : "Negtests (JUnit only) check that each error line has a // error\n", "author" : "PersonIdent[VladimirNik, vladimir.nikolaev9@gmail.com, Thu Feb 18 18:00:03 2016 +0100]"},
{"name" : "1ed38673d4c88d573363459d316fdfe275d05025", "time" : 1455814485, "y" : 439, "branches" : [0, 5, 6, 11], "comment" : "Negtests with // error comments\n", "author" : "PersonIdent[VladimirNik, vladimir.nikolaev9@gmail.com, Thu Feb 18 17:54:45 2016 +0100]"},
{"name" : "4be70a5a8469c1355c84bef70936a81f899a9678", "time" : 1455792930, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1073 from dotty-staging/fix-#576\n\nHandle implicits with default parameters.", "author" : "PersonIdent[odersky, odersky@gmail.com, Thu Feb 18 11:55:30 2016 +0100]"},
{"name" : "3c85915ba7c98b253603fc873e6e41336a528bd6", "time" : 1455789012, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1094 from j2rodrig/master\n\nChange nested typer creation to allow creation of derived typers", "author" : "PersonIdent[odersky, odersky@gmail.com, Thu Feb 18 10:50:12 2016 +0100]"},
{"name" : "cdfbdb14f0d6bb4f3a5dd284fd17e86addaa5d03", "time" : 1455787781, "y" : 451, "branches" : [0, 5, 6, 11], "comment" : "Keep named arguments during eta expansion\n\nFixes #1096.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Feb 18 10:29:41 2016 +0100]"},
{"name" : "7a893f590b3b211ab6de4efb6708a63c8439506a", "time" : 1455767371, "y" : 0, "branches" : [0, 5, 6, 11], "comment" : "Merge pull request #1082 from dotty-staging/add-repl\n\nDotty REPL initial version", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Thu Feb 18 04:49:31 2016 +0100]"},
{"name" : "24a5fbe86d4fbf0de41f8ecc2d973961305704a8", "time" : 1455732308, "y" : 0, "branches" : [0, 5, 6, 7, 11], "comment" : "Merge pull request #1092 from dotty-staging/value-class-checks\n\nAdd checks for value classes", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed Feb 17 19:05:08 2016 +0100]"},
{"name" : "f96f4a20fa53a74d9c49d06d2ef49bdff4dfcbca", "time" : 1455730788, "y" : 454, "branches" : [0, 5, 6, 11], "comment" : "Make dummy first line define something useful\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Feb 17 18:39:48 2016 +0100]"},
{"name" : "784864d34413f8f42385b1a1c980d65dcbd0052b", "time" : 1455730788, "y" : 454, "branches" : [0, 5, 6, 11], "comment" : "Warm up interpreter during first prompt.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Feb 17 18:39:48 2016 +0100]"},
{"name" : "ae5bccd3d4a9e52aec93088a39fd0d6b658306ba", "time" : 1455730788, "y" : 454, "branches" : [0, 5, 6, 11], "comment" : "Narrow Interpreter.scala further.\n\ncompileString is not needed and does not what one might\nexpect (no wrapping). So it should not be exported.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Feb 17 18:39:48 2016 +0100]"},
{"name" : "9b45420d2b3193469931b15406d382c499fbb453", "time" : 1455730788, "y" : 454, "branches" : [0, 5, 6, 11], "comment" : "Remove interpreterSettings logic\n\nSeems to be overkill for the current interpreter. The only thing that was needed\nwas a configrable linewidth. A plain setting works fine for this and is in\nline with the way things are done elsewhere.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Feb 17 18:39:48 2016 +0100]"},
{"name" : "41079cd8e196817048812a51041086b31908fcc3", "time" : 1455730788, "y" : 454, "branches" : [0, 5, 6, 11], "comment" : "Adress reviewer comments\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Feb 17 18:39:48 2016 +0100]"},
{"name" : "203dfaa2a7165340a43a4a1ca921df187067e188", "time" : 1455730787, "y" : 454, "branches" : [0, 5, 6, 11], "comment" : "Reinstantiate t920\n\nGot deleted by accident. Version in run has object\nrenamed to prevent case clashes on MacOS. Version that\nexhibits the clash is in pending/run.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Feb 17 18:39:47 2016 +0100]"},
{"name" : "bb60d3c43bd42d24b54d5cad0dcfdb50cbdd5782", "time" : 1455730776, "y" : 454, "branches" : [0, 5, 6, 11], "comment" : "Turn cleaning on for interpreter generated messages\n\nAvoids line$object... gunk.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Feb 17 18:39:36 2016 +0100]"},
{"name" : "4f1938809c94660984b59720232d4ef0e4048687", "time" : 1455730776, "y" : 454, "branches" : [0, 5, 6, 11], "comment" : "Fix validity checking refinement\n\nIt seems some symbols are valid from NoPhase (0). In any case, we should\nnot check members before typerphase.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Feb 17 18:39:36 2016 +0100]"},
{"name" : "2f94c3d920ca87ebb98e7476150ad8b39f0b808f", "time" : 1455730776, "y" : 454, "branches" : [0, 5, 6, 11], "comment" : "Refine validity checking\n\nWhen defining a class in the interpreter we had a case where\nthe class was accessed at phase 46 in the backend, yet the denotation\nwas the initial denotation in a previous run. In that case we\nhave to check again at the phase where the denotation is valid.\nThis was not done before, and hence the owner of the denbotation\ndid not contain the symbol because the backend phase is after flatten.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Feb 17 18:39:36 2016 +0100]"},
{"name" : "6324a75d39e4eab8a405dafd19480a0dbd4841ad", "time" : 1455730776, "y" : 454, "branches" : [0, 5, 6, 11], "comment" : "Add diagnostic why a symbol is stale.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Feb 17 18:39:36 2016 +0100]"},
{"name" : "f3ba2dc0c69b31e3fa839f3c13c664ed6c143371", "time" : 1455730776, "y" : 454, "branches" : [0, 5, 6, 11], "comment" : "More todos\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Feb 17 18:39:36 2016 +0100]"},
{"name" : "482819f28e320f6e6fcc7de423bd7a232ec4fdc2", "time" : 1455730775, "y" : 454, "branches" : [0, 5, 6, 11], "comment" : "Better explanation of TODO items\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Feb 17 18:39:35 2016 +0100]"},
{"name" : "4550b524771af0719846eb906795a5ba83106eb9", "time" : 1455730775, "y" : 454, "branches" : [0, 5, 6, 11], "comment" : "Revisions to REPL\n\nChanges necessary to make basic REPL functionality work.\n\nMajor refactoing: Code of Interpreter is now in CompilingInterpreter.scala.\nInterpreter.scala contains just the API.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Feb 17 18:39:35 2016 +0100]"},
{"name" : "37b6df435f1595f8610ec6d5fbe16d079da2eff7", "time" : 1455730775, "y" : 454, "branches" : [0, 5, 6, 11], "comment" : "Export run context\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Feb 17 18:39:35 2016 +0100]"},
{"name" : "46ad05fe0bbb23ab77013f27d68926d2daed3f2b", "time" : 1455730775, "y" : 454, "branches" : [0, 5, 6, 11], "comment" : "newCompiler now takes a context parameter\n\nMakes side-effecting initialization of interpreter\nunnecessary.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Feb 17 18:39:35 2016 +0100]"},
{"name" : "6ecdc8a69db1a808269b1c288284a4a430ce865e", "time" : 1455730732, "y" : 454, "branches" : [0, 5, 6, 11], "comment" : "First PoC of REPL\n\nAdaptation of REPL by Spoon from ca 2007. Compiles OK, but\nnot yet tested.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Feb 17 18:38:52 2016 +0100]"},
{"name" : "5f5eca9ee9367c57da8138f2618759dfc86ffb71", "time" : 1455730731, "y" : 454, "branches" : [0, 5, 6, 11], "comment" : "Utility method for phase replacement\n\nAllows to replace existing phase by sequence of new\nphases.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Feb 17 18:38:51 2016 +0100]"},
{"name" : "d1877e1ff89b318d16ad0637bcd923e540080140", "time" : 1455730731, "y" : 454, "branches" : [0, 5, 6, 11], "comment" : "Make output directory overridable\n\nThe interpreter needs to install a virtual directory\nas output directory. This is not supported with the -d\noption in ScalaSettings. The solution is to make the\noutput directory overridable in the GenBCode phase.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Feb 17 18:38:51 2016 +0100]"},
{"name" : "bb2ef7c1b6613d7d27f433ae4426e03c76f72419", "time" : 1455704638, "y" : 472, "branches" : [0, 5, 6, 11], "comment" : "Modernize and clean up the build.\n\nSettings `in Global` are moved to Build.settings. Otherwise they\nare added *twice* in every project.\n\nProject definitions use the `project` macro rather than the\n`Project()` factory, as is the customary notation since sbt\n0.13. The `Defaults.coreDefaultSettings` is therefore dropped.\n\nThe coding style of project definitions is adapted to the style\nshown in sbt documentations.\n", "author" : "PersonIdent[Sébastien Doeraene, sjrdoeraene@gmail.com, Wed Feb 17 11:23:58 2016 +0100]"},
{"name" : "71698fa7898633e71ba7d94182d89b76fe91b6ab", "time" : 1455663250, "y" : 473, "branches" : [0, 5, 6, 7, 11], "comment" : "Add checks for value classes:\n1. Add errors in case of incorrect parameter;\n2. Improvement to error message if value class is defined as a local class;\n", "author" : "PersonIdent[VladimirNik, vladimir.nikolaev9@gmail.com, Tue Feb 16 23:54:10 2016 +0100]"},
{"name" : "697e5e38be89b3477313e86fe57ac3ba49e2344e", "time" : 1455653087, "y" : 474, "branches" : [0, 5, 6, 11], "comment" : "Support for extending the Typer\n", "author" : "PersonIdent[Jonathan Rodriguez, son.of.yhwh@gmail.com, Tue Feb 16 15:04:47 2016 -0500]"},
{"name" : "4ceb3e7708f49b5d97af770dba226ca5a9c93c38", "time" : 1455639460, "y" : 475, "branches" : [0, 5, 6, 11], "comment" : "Fix pos test\n\nFormer test no longer allowed after conforms/compatible change.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Feb 16 17:17:40 2016 +0100]"},
{"name" : "17296763448bf86c9f95b1458e5722b9829e8b3e", "time" : 1455635469, "y" : 475, "branches" : [0, 5, 6, 11], "comment" : "Untuple using `def` not `val`.\n\nAs retronym noted on #897, `val` forces to early.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Feb 16 16:11:09 2016 +0100]"},
{"name" : "06bfbd379fe350a93e3de38940fda0e359a07e1d", "time" : 1455634153, "y" : 475, "branches" : [0, 5, 6, 11], "comment" : "Strengthen requirement for auto-tupling\n\nWas: corresponding parameter types \"are compatible\".\nNow: corresponding parameter types \"conform\".\n\nThis avoids the inconsistency mentioned by @retronym in #897.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Feb 16 15:49:13 2016 +0100]"},
{"name" : "e5f8697cf54be6cfa82884eb2f4c4e4d79af2700", "time" : 1455633894, "y" : 475, "branches" : [0, 5, 6, 11], "comment" : "Turn println into log\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Feb 16 15:44:54 2016 +0100]"},
{"name" : "81b5f84de0d5a0d8ab2e0c5c5172145ee22d45dd", "time" : 1455632655, "y" : 475, "branches" : [0, 5, 6, 11], "comment" : "Fix merge error\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Feb 16 15:24:15 2016 +0100]"},
{"name" : "62a526eeb664da5f0a7982375f0f77618b6b3f92", "time" : 1455632655, "y" : 475, "branches" : [0, 5, 6, 11], "comment" : "Add more pos and neg tests\n\nTests suggested by @retronym's comments on issue #897.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Feb 16 15:24:15 2016 +0100]"},
{"name" : "29104c9755a9d6393959a416650422b84f0957f2", "time" : 1455632623, "y" : 475, "branches" : [0, 5, 6, 11], "comment" : "Auto-uncurry n-ary functions.\n\nImplements SIP #897.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Feb 16 15:23:43 2016 +0100]"},
{"name" : "5c21583669ff9128784ce128d36e723b9d4517ee", "time" : 1455626942, "y" : 482, "branches" : [0, 5, 6, 11], "comment" : "Add test case\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Feb 16 13:49:02 2016 +0100]"},
{"name" : "c4be2191e0c17767911377d7bc835d1b40eb39af", "time" : 1455626806, "y" : 482, "branches" : [0, 5, 6, 11], "comment" : "Handle implicits with default parameters\n\nIf an implicit parameter has a default, then that\ndefault should be taken in case no implicit argument\nis found.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Feb 16 13:46:46 2016 +0100]"},
{"name" : "5e8023335e641c9c05c6517a82764571e7ef6386", "time" : 1455615616, "y" : 0, "branches" : [0, 5, 6, 7, 11], "comment" : "Merge pull request #1075 from dotty-staging/fix-t920-test\n\nDrop empty companion objects", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Tue Feb 16 10:40:16 2016 +0100]"},
{"name" : "afec2a7a597e6e7736e4d26620f8488e9587b7b0", "time" : 1455316373, "y" : 0, "branches" : [0, 5, 6, 7, 11], "comment" : "Merge pull request #1080 from dotty-staging/fix-#619\n\nDocument dotty internal Annotations", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri Feb 12 23:32:53 2016 +0100]"},
{"name" : "259cf1e2234a853ade180ec7452f78ece3b66bf8", "time" : 1455294238, "y" : 0, "branches" : [0, 5, 6, 7, 11], "comment" : "Merge pull request #1079 from dotty-staging/fix-#435\n\nFix #435", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri Feb 12 17:23:58 2016 +0100]"},
{"name" : "d04e704dda619331ae16ef870e1154ece77dd541", "time" : 1455294145, "y" : 0, "branches" : [0, 5, 6, 7, 11], "comment" : "Merge pull request #1076 from dotty-staging/fix/run-tests-memory\n\npartest: run tests with -Xms64M -Xmx1024M instead of JVM defaults", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri Feb 12 17:22:25 2016 +0100]"},
{"name" : "6cc0e484bda30468ea2e2bcba2d11968e996b5c2", "time" : 1455294118, "y" : 0, "branches" : [0, 5, 6, 7, 11], "comment" : "Merge pull request #1081 from dotty-staging/fix-#645\n\nAdd test case for #645", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri Feb 12 17:21:58 2016 +0100]"},
{"name" : "9d19ef6ec8d68c9058deadeb1c4a62e70c63852c", "time" : 1455294097, "y" : 0, "branches" : [0, 5, 6, 7, 11], "comment" : "Merge pull request #1078 from dotty-staging/fix-#324\n\nBetter handling enclosing class computations", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Fri Feb 12 17:21:37 2016 +0100]"},
{"name" : "fec5b81678c73b3ea9ad8a9daa3ff4b4ad767d46", "time" : 1455275263, "y" : 490, "branches" : [0, 5, 6, 7, 11], "comment" : "Add test case for #645\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 12 12:07:43 2016 +0100]"},
{"name" : "d8227b493a89620b307b9ceb4357477a10312811", "time" : 1455273864, "y" : 491, "branches" : [0, 5, 6, 7, 11], "comment" : "Document dotty internal Annotations\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 12 11:44:24 2016 +0100]"},
{"name" : "904d9f87bc31c52d504f71607532edcbf214637c", "time" : 1455271858, "y" : 492, "branches" : [0, 5, 6, 7, 11], "comment" : "Improve error message\n\n... when package clashes with same-named object.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 12 11:10:58 2016 +0100]"},
{"name" : "34d11c5ff1d0339a117c6b1be6d534e80de7bef9", "time" : 1455269920, "y" : 492, "branches" : [0, 5, 6, 7, 11], "comment" : "Allow enclosing module as qualifying class\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 12 10:38:40 2016 +0100]"},
{"name" : "9b3c727a0faa0e0f693a4053e0bb260c695e62ff", "time" : 1455267521, "y" : 492, "branches" : [0, 5, 6, 7, 11], "comment" : "Survive class of errors in implicit search\n\nAn `C.this` term with erroneous class `C` will get a\n`NoPrefix` type. A subsequent implicit search on this\ncrashed. This is fixed now.\n\nFixes #324.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 12 09:58:41 2016 +0100]"},
{"name" : "d3c331782d19994997d920807b16f2edb26dce0d", "time" : 1455208028, "y" : 495, "branches" : [0, 5, 6, 7, 11], "comment" : "Fix problems in DropEmptyCompanions\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Feb 11 17:27:08 2016 +0100]"},
{"name" : "d57fd8bc9fc9eadf620b29a89a69b7d974a7ec65", "time" : 1455194396, "y" : 496, "branches" : [0, 5, 6, 7, 11], "comment" : "partest: run tests with -Xms64M -Xmx1024M instead of JVM defaults\n\nThis is the same settings that scalac uses, this should help use avoid\nusing too much memory (the default on 64 bits Linux seems to be\n-Xms248M -Xmx3938M).\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Thu Feb 11 13:39:56 2016 +0100]"},
{"name" : "1839369a65f4c9d9b076ed657b7c40b5a4418154", "time" : 1455179709, "y" : 495, "branches" : [0, 5, 6, 7, 11], "comment" : "Only remove synthetic companion objects\n\nIf the object was explicitly written, it might be\nreferenced, even if it is empty.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Feb 11 09:35:09 2016 +0100]"},
{"name" : "24ccb77061d0b6d3b5fa0464e9afb3e48c67eea9", "time" : 1455178749, "y" : 495, "branches" : [0, 5, 6, 7, 11], "comment" : "Move test to pending\n\nThe underlying problem on MacOS/Windows remains:\n\nWe have a class `B` and an object `b` in the same scope.\nWe used to get a conflict on `B$/b$` because we created\nan empty companion object for `B`. Now we get a conflict\nfor `B/b`, because the `b` object creates to classes:\n`b.class` an `b$.class` and `b.class` clashes with `B.class`.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Feb 11 09:19:09 2016 +0100]"},
{"name" : "df7d8914aa139e8961db6ce0651e09b118d8bab2", "time" : 1455178635, "y" : 495, "branches" : [0, 5, 6, 7, 11], "comment" : "New phase to drop empty companion objects\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Feb 11 09:17:15 2016 +0100]"},
{"name" : "c16ead8d78936cab3dada7aa5e70eeacc5f576d1", "time" : 1455178585, "y" : 495, "branches" : [0, 5, 6, 7, 11], "comment" : "Abstract out lazy local names somewhat\n\nAdd operations to NameOps to detect and produce names\nfor lazy locals.\n\n@darkdimius Maybe there is already another way to do this?\nI could not find it.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Feb 11 09:16:25 2016 +0100]"},
{"name" : "13b61653439700ca6607074bcded4d714131bdc2", "time" : 1455090081, "y" : 0, "branches" : [0, 5, 6, 7, 11], "comment" : "Merge pull request #1071 from dotty-staging/add/more-tests\n\nEnable tests for old fixed issues", "author" : "PersonIdent[odersky, odersky@gmail.com, Wed Feb 10 08:41:21 2016 +0100]"},
{"name" : "3c8f04e4c5e1dae42e321c3bb446688d573bbeea", "time" : 1455020500, "y" : 502, "branches" : [0, 5, 6, 7, 11], "comment" : "Enable tests for old fixed issues\n\nFix #530, #654, #681, #684, #685\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Tue Feb 9 13:21:40 2016 +0100]"},
{"name" : "6101ffa0b428f06e1c7788e35566b17f09c95b7c", "time" : 1455016549, "y" : 0, "branches" : [0, 5, 6, 7, 11], "comment" : "Merge pull request #1051 from dotty-staging/change-isVolatile\n\nChange is volatile", "author" : "PersonIdent[odersky, odersky@gmail.com, Tue Feb 9 12:15:49 2016 +0100]"},
{"name" : "1511cb49b990e14bd085a26bbcaa77cd827f151b", "time" : 1455007388, "y" : 504, "branches" : [0, 5, 6, 7, 11], "comment" : "Fix commpilation error\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Feb 9 09:43:08 2016 +0100]"},
{"name" : "f6a5802b7185525f7e221b745ec283f8ea206161", "time" : 1455007388, "y" : 504, "branches" : [0, 5, 6, 7, 11], "comment" : "By-name parameters are not stable values.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Feb 9 09:43:08 2016 +0100]"},
{"name" : "187c241d7b2b3698a5773463c17fd26c8294d0f7", "time" : 1455007388, "y" : 504, "branches" : [0, 5, 6, 7, 11], "comment" : "New test files from SI 7278.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Feb 9 09:43:08 2016 +0100]"},
{"name" : "eaa157860fd278f7d1404bb2aa495547277fd311", "time" : 1455007388, "y" : 504, "branches" : [0, 5, 6, 7, 11], "comment" : "Perform typer realizability checks only during Typer.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Feb 9 09:43:08 2016 +0100]"},
{"name" : "ec4a3a0f4d0b8cccf636d1608896e7cafba9dec0", "time" : 1455007388, "y" : 504, "branches" : [0, 5, 6, 7, 11], "comment" : "Big realizability refactoring\n\nMove logic from TypeOps to new file CheckRealizable.scala.\nAlso check realizable fields under strict mode.\nCheck at phase PostTyper rather than Typer to avoid cycles.\nNew tests for imports and deep paths.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Feb 9 09:43:08 2016 +0100]"},
{"name" : "d34256c14a507dbdaea10bd83e8006cdafb9c799", "time" : 1455007387, "y" : 504, "branches" : [0, 5, 6, 7, 11], "comment" : "Handle paths of length > 1 for realizability checking\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Feb 9 09:43:07 2016 +0100]"},
{"name" : "20fc6bd93c543f98da39a165437234670505f860", "time" : 1455007387, "y" : 504, "branches" : [0, 5, 6, 7, 11], "comment" : "Consider by name parameters as lazily initialized\n\nshould be terated analogous to lazy vals for realizability checking.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Feb 9 09:43:07 2016 +0100]"},
{"name" : "f44a1ed47d8fc68d9dae321fd28433b70abf7bfe", "time" : 1455007387, "y" : 504, "branches" : [0, 5, 6, 7, 11], "comment" : "Remove isVolatile and DNF methods\n\nThese are replaced by the realizibility logic.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Feb 9 09:43:07 2016 +0100]"},
{"name" : "1441622f094e6b149fb5e166fcc51c299f116913", "time" : 1455007387, "y" : 504, "branches" : [0, 5, 6, 7, 11], "comment" : "Drop lines from test\n\nThe lines in question now cause an error (\"cannot be instantiated...\")\nwhich masks the real tests at phase PostTyper.\n\nAlso adapt bugcount of hklower test\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Feb 9 09:43:07 2016 +0100]"},
{"name" : "defba2af7c3b49231962a6f882173bcaff914fcc", "time" : 1455007387, "y" : 504, "branches" : [0, 5, 6, 7, 11], "comment" : "Check that non-abstract classes have realizable bounds.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Feb 9 09:43:07 2016 +0100]"},
{"name" : "3637e08033c857e19862ae1fc9730d96cdba3fe2", "time" : 1455007387, "y" : 504, "branches" : [0, 5, 6, 7, 11], "comment" : "Fix isRealizableTest\n\nNeed to demand \"effecively final\" instead of `is(Final)`.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Feb 9 09:43:07 2016 +0100]"},
{"name" : "a0fb0685fcfc5e988e0d033af26c1055269488e5", "time" : 1455007386, "y" : 504, "branches" : [0, 5, 6, 7, 11], "comment" : "Handle imports in path checks.\n\nIf `T` is a member of `p` then\n\n    { import p._; ... T ... }\n\nshould be checked in the same way as\n\n    { ... p.T ... }\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Feb 9 09:43:06 2016 +0100]"},
{"name" : "e87dee212351aa7acb15760814cdd1c30c4de019", "time" : 1455007386, "y" : 504, "branches" : [0, 5, 6, 7, 11], "comment" : "Fix path error disgnastics\n\nFix wording so that it works for nested errors as well.\nIncorparte Tiark's latest example.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Feb 9 09:43:06 2016 +0100]"},
{"name" : "0480cb2a5902b733145f54fdc238aba7b831396b", "time" : 1455007386, "y" : 504, "branches" : [0, 5, 6, 7, 11], "comment" : "Only final lazy vals can be paths.\n\nReason: They might be overridden by other lazy vals\nthat are not realizable, and therefore risk creating\nbad bounds.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Feb 9 09:43:06 2016 +0100]"},
{"name" : "5fd2028931874291b3cf1b7efef4fed7119d9316", "time" : 1455007386, "y" : 504, "branches" : [0, 5, 6, 7, 11], "comment" : "Enforce rule that laziness is preserved when overriding.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Feb 9 09:43:06 2016 +0100]"},
{"name" : "9a6f82b2ecfd7462d0a1f4e0464878fd58231277", "time" : 1455007385, "y" : 504, "branches" : [0, 5, 6, 7, 11], "comment" : "Reorganize tests to account for new typing of projection\n\nTests with failed projections are moved to pos-scala2, which\nwas renamed from pos-special. Files in pos-scala2 are compiled\nwith -language:Scala2 option.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Feb 9 09:43:05 2016 +0100]"},
{"name" : "44c14b3fb6e5eb6f2b9734f092eef1d85f6b4d18", "time" : 1455007253, "y" : 504, "branches" : [0, 5, 6, 7, 11], "comment" : "Cleanup of isEffectivelyFinal\n\nEffectivelyFinal came without documentation, so it was not clear\nwhat is was supposed to compute. I looked at the use sites, and it\nseems that all they need is \"impossible to override\". So I changed\nthe code to do that and dropped the additional condition that\nmembers of modules or final classes were not allowed to be lazy or\nmutable. It was not clear to me what that had to do with finality.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Feb 9 09:40:53 2016 +0100]"},
{"name" : "322bcfef33834eb1e57c874c5a745faf65e1b8bc", "time" : 1455007253, "y" : 504, "branches" : [0, 5, 6, 7, 11], "comment" : "Move realizability logic from Types to TypeOps.\n\nTypes is already big enough.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Feb 9 09:40:53 2016 +0100]"},
{"name" : "7ccd02c2cd23e4187f3e3a378973704cecd6459a", "time" : 1455007252, "y" : 504, "branches" : [0, 5, 6, 7, 11], "comment" : "Realizability refactoring\n\nDistinguish between isStable and isRealizable.\nIssue migration warnings for realizibility failures.\nProvide error diagnostics why something is not realizable.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Feb 9 09:40:52 2016 +0100]"},
{"name" : "1b7745e5f9c0e251436b33247133f3810838cf12", "time" : 1455007252, "y" : 504, "branches" : [0, 5, 6, 7, 11], "comment" : "Also consider type aliases when checking for realizability\n\nFixes #50.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Feb 9 09:40:52 2016 +0100]"},
{"name" : "1cc4d90627907a17172f7e8129003f9e9cb0cdf4", "time" : 1455007252, "y" : 504, "branches" : [0, 5, 6, 7, 11], "comment" : "Move scala2Mode test from isStable to isRealizable\n\nThis prepares the way for using isRealizable in different contexts.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Feb 9 09:40:52 2016 +0100]"},
{"name" : "41f056750990a2e6391eec3436077715041d2b8a", "time" : 1455007252, "y" : 504, "branches" : [0, 5, 6, 7, 11], "comment" : "Use isRealizable to identify stable prefixes\n\nReplaces isVolatile, which is too weak (and more complicated).\nBackwards compatibility with Scala2 is ensured by dropping the\nrequirement in Scala2 mode.\nFixes #1047, which now compiles without inifinite recursion.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Feb 9 09:40:52 2016 +0100]"},
{"name" : "633e2ebfd42af65f8324aec87a2444bb9cec5eff", "time" : 1455007252, "y" : 504, "branches" : [0, 5, 6, 7, 11], "comment" : "No volatile check needed for strict vals.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Feb 9 09:40:52 2016 +0100]"},
{"name" : "6e7bb3ac7a78354d29e791bc1cb01637791c038e", "time" : 1454975752, "y" : 0, "branches" : [0, 5, 6, 7, 11], "comment" : "Merge pull request #1058 from dotty-staging/fix-#864-v2\n\nPrune constraints that could turn into cycles", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Tue Feb 9 00:55:52 2016 +0100]"},
{"name" : "7d3f6d02141bb362c4c1e383cb21a476383b5c60", "time" : 1454960268, "y" : 528, "branches" : [0, 5, 6, 7, 11], "comment" : "Fix documentation of ConstraintHandling#addConstraint\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Mon Feb 8 20:37:48 2016 +0100]"},
{"name" : "73e13e8e16eaef531aafb1ff1666047b9f2f41a4", "time" : 1454959928, "y" : 528, "branches" : [0, 5, 6, 7, 11], "comment" : "Fix documentation of Config.checkConstraintsSeparated\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Mon Feb 8 20:32:08 2016 +0100]"},
{"name" : "cb5935ec641b5e36b1b2c7da7d25a5013dfab890", "time" : 1454948270, "y" : 0, "branches" : [0, 5, 6, 7, 11], "comment" : "Merge pull request #1053 from dotty-staging/fix-#1045\n\nFix #1045", "author" : "PersonIdent[odersky, odersky@gmail.com, Mon Feb 8 17:17:50 2016 +0100]"},
{"name" : "0c4eb3305b0adf82f779f6e88bb01f7274ce00b9", "time" : 1454948241, "y" : 0, "branches" : [0, 5, 6, 7, 11], "comment" : "Merge pull request #1067 from dotty-staging/fix-1065\n\nFix #1065 erasedLub for arrays of primitives.", "author" : "PersonIdent[odersky, odersky@gmail.com, Mon Feb 8 17:17:21 2016 +0100]"},
{"name" : "ae09ac296f192d9b2229e2cd92bac4715f77e207", "time" : 1454941609, "y" : 532, "branches" : [0, 5, 6, 7, 11], "comment" : "Drop redundant context parameter\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Feb 8 15:26:49 2016 +0100]"},
{"name" : "8aeee17d2b6f24a0c3cc21f858ff60bc47ab2dc1", "time" : 1454941350, "y" : 0, "branches" : [0, 5, 6, 7, 11], "comment" : "Merge pull request #1063 from dotty-staging/fix-#803\n\nHandle \"missing args\" case when expected type is a singleton type.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon Feb 8 15:22:30 2016 +0100]"},
{"name" : "e384b3af6859c7e2d8481288e293ee9d86a377b9", "time" : 1454940870, "y" : 534, "branches" : [0, 5, 6, 7, 11], "comment" : "Test that #1065 is fixed.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Feb 8 15:14:30 2016 +0100]"},
{"name" : "692cd5a349f44d9862d607ed69eada0bef04bb23", "time" : 1454940864, "y" : 534, "branches" : [0, 5, 6, 7, 11], "comment" : "Fix #1065 erasedLub for arrays of primitives.\n\nUnlike arrays of objects, that can be accessed as an array\nof a super type of this object,\nint[] cannot be accessed as an array of primitives.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Feb 8 15:14:24 2016 +0100]"},
{"name" : "d0056132485c10e0e408668e177a8452c5112d3b", "time" : 1454778105, "y" : 0, "branches" : [0, 5, 6, 7, 11], "comment" : "Merge pull request #1057 from dotty-staging/fix/hide-stacktraces\n\nHide stack traces behind -Ydebug", "author" : "PersonIdent[odersky, odersky@gmail.com, Sat Feb 6 18:01:45 2016 +0100]"},
{"name" : "ffcc27baddb02f3c92e9d22ddfb56d0d30f277d8", "time" : 1454772151, "y" : 0, "branches" : [0, 5, 6, 7, 11], "comment" : "Merge pull request #1064 from dotty-staging/fix-#1044-take-3\n\nThird try for a fix for #1044: handle TypevarsMissContext mode in wildApprox", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Sat Feb 6 16:22:31 2016 +0100]"},
{"name" : "534e4ad9f6ef1dfb767adc89c9544484cab4f48a", "time" : 1454718109, "y" : 538, "branches" : [0, 5, 6, 7, 11], "comment" : "Fix #1044: handle TypevarsMissContext mode in wildApprox\n\nWhen `wildApprox` encounters a PolyParam it approximates it by its\nbounds in the current constraint set, but this is incorrect if\n`TypevarsMissContext` is set, we might get the bounds of another use of\nthis `PolyType`. This is exactly what happened in i1044.scala where the\nimplicit view `refArrayOps` needs to be used twice with two different\ntype parameters.\n\nThe fix is to approximate a PolyParam by its original bounds in its\nPolyType if `TypevarsMissContext` is set.\n\nThis fix was inspired by the approach of #1054.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Sat Feb 6 01:21:49 2016 +0100]"},
{"name" : "b33babc2398e5013820e21568713fdb6c15aa6fa", "time" : 1454717561, "y" : 539, "branches" : [0, 5, 6, 7, 11], "comment" : "Do not use the plain printer with -Ydebug\n\nInstead, a new setting called -Yplain-printer is used for this.\nAfter this commit, we can now run all tests with -Ydebug (this was not\nthe case before because using the plain printer breaks -Ytest-pickler)\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Sat Feb 6 01:12:41 2016 +0100]"},
{"name" : "4d988825e41a789383bdb53b5ef4ac68e37ad96d", "time" : 1454717557, "y" : 539, "branches" : [0, 5, 6, 7, 11], "comment" : "Do not store context creation trace with -Ydebug\n\nThis makes the compiler extremely slow. To store the trace, you now need\nto pass -Ytrace-context-creation\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Sat Feb 6 01:12:37 2016 +0100]"},
{"name" : "2c08c72a7f9b968e1f659d1d3d811f3166524983", "time" : 1454690407, "y" : 0, "branches" : [0, 5, 6, 7, 11], "comment" : "Merge pull request #1060 from dotty-staging/throwMethodInit\n\nForce the initialization of throwMethod in Definitions", "author" : "PersonIdent[odersky, odersky@gmail.com, Fri Feb 5 17:40:07 2016 +0100]"},
{"name" : "12a02c7d5c76693a4876c95a42a20bd32b150e64", "time" : 1454690248, "y" : 0, "branches" : [0, 5, 6, 7, 11], "comment" : "Merge pull request #1062 from dotty-staging/fix-#859\n\nFix #859", "author" : "PersonIdent[odersky, odersky@gmail.com, Fri Feb 5 17:37:28 2016 +0100]"},
{"name" : "37c877d0781547bb5e26c05b1713b7f7b3ef0411", "time" : 1454689643, "y" : 543, "branches" : [0, 5, 6, 7, 11], "comment" : "Handle \"missing args\" case when expected type is a singleton type.\n\nFixes #803.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 5 17:27:23 2016 +0100]"},
{"name" : "6560f387a47e96c9063045ce9dc56e3bfb174349", "time" : 1454688122, "y" : 544, "branches" : [0, 5, 6, 7, 11], "comment" : "Force the initialization of throwMethod in Definitions\n", "author" : "PersonIdent[VladimirNik, vladimir.nikolaev9@gmail.com, Fri Feb 5 17:02:02 2016 +0100]"},
{"name" : "c7e71b81f0bf4ccf1f2d442e0425fe6f0dfe2c99", "time" : 1454687945, "y" : 545, "branches" : [0, 5, 6, 7, 11], "comment" : "Surive non-existing sourceModule in Scala2 pickled info.\n\nIt seems when unpickling nsc that some module classes come\nwithout a source module. Survive this situation rather than\ncrashing. i859.scala is an example.\n\ni859 compiles with the patch, but causes a deep subtype when unpickling.\nNot sure whether scalac does the same.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 5 16:59:05 2016 +0100]"},
{"name" : "041d42f58eae860f88d6f1ea54305c1a7dca6c42", "time" : 1454687798, "y" : 545, "branches" : [0, 5, 6, 7, 11], "comment" : "Handle subtyping of LazyVals that are in train of being evaluated.\n\nInstead of forcing again, and causing an assertion error, back out\nassuming that the result is false. Fixes first problem with #859.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 5 16:56:38 2016 +0100]"},
{"name" : "9c38a61d4b3319999a43265ea17f85a1b3ca6886", "time" : 1454687592, "y" : 545, "branches" : [0, 5, 6, 7, 11], "comment" : "Make LazyRef#ref a def instead of a lazy val\n\nIt's slightly more efficient. There was no need to have\na separate cache for the lazy val.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 5 16:53:12 2016 +0100]"},
{"name" : "8358e979d328fcf430d6f895c39b3a3aae6e722e", "time" : 1454674464, "y" : 528, "branches" : [0, 5, 6, 7, 11], "comment" : "Avoid `related` buffer in `addConstraint`.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 5 13:14:24 2016 +0100]"},
{"name" : "f20b11ae7935664b88d0b1c81782e042356fc11b", "time" : 1454670343, "y" : 528, "branches" : [0, 5, 6, 7, 11], "comment" : "Narrow problematic constraint instead of widening it.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 5 12:05:43 2016 +0100]"},
{"name" : "55832b8020a498d9cd49e2de4f8a8a3ba696814c", "time" : 1454667579, "y" : 528, "branches" : [0, 5, 6, 7, 11], "comment" : "Fix docs and naming\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 5 11:19:39 2016 +0100]"},
{"name" : "c24ece505e53570566b499b817342a4dfa4087ff", "time" : 1454666592, "y" : 528, "branches" : [0, 5, 6, 7, 11], "comment" : "Prune constraints that could turn into cycles\n\nFixes #864. Review by @smarter.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 5 11:03:12 2016 +0100]"},
{"name" : "e177e782ff12c2288d2e5323a0cd1c65447627e0", "time" : 1454636966, "y" : 539, "branches" : [0, 5, 6, 7, 11], "comment" : "Do not use println when SingleDenotation#signature fails\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Fri Feb 5 02:49:26 2016 +0100]"},
{"name" : "11df014b7fab14999d2de1ce5f86ef860dabfe2e", "time" : 1454634351, "y" : 539, "branches" : [0, 5, 6, 7, 11], "comment" : "Hide stack traces behind -Ydebug\n\nThey're not very useful for end users and some tests like\ntests/neg/selfreq.scala always print these exceptions which makes it\nharder to read the test logs,\n\nAlso use Thread.dumpStack() instead of creating an Exception and calling\nprintStackTrace() on it.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Fri Feb 5 02:05:51 2016 +0100]"},
{"name" : "9d8c92d1d52fcfa95d57ce88d91dbb84c8ecfbd1", "time" : 1454628842, "y" : 0, "branches" : [0, 5, 6, 7, 11], "comment" : "Merge pull request #1052 from smarter/fix/driver-api\n\nImprove and document the Driver#process API, fix partest logging", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Fri Feb 5 00:34:02 2016 +0100]"},
{"name" : "7eba7f7a6778cc0ddfb2ce81dee64dd4fa23490a", "time" : 1454626851, "y" : 555, "branches" : [0, 5, 6, 7, 11], "comment" : "Use Context#setReporter where possible\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Fri Feb 5 00:00:51 2016 +0100]"},
{"name" : "a33d517f4b3c00070b2e66afb82d2cc4284d4894", "time" : 1454625063, "y" : 555, "branches" : [0, 5, 6, 7, 11], "comment" : "Context: set compilerCallback like other context variables\n\nPreviously, we could set compilerCallback on non-fresh contexts, but\nthere is no reason that this should be allowed, and this is not done\nanymore in the code since the last commit.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Thu Feb 4 23:31:03 2016 +0100]"},
{"name" : "7827c5ae1744583974f9c99432c1082ea6cb8997", "time" : 1454625063, "y" : 555, "branches" : [0, 5, 6, 7, 11], "comment" : "Better compiler entry points\n\n- Document the entry points\n- It is now possible to set a custom reporter without using a custom\n  context\n- Use `null` for optional arguments to make it easier to run the\n  compiler using reflection or from Java.\n- DPDirectCompiler does not use a custom context anymore\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Thu Feb 4 23:31:03 2016 +0100]"},
{"name" : "208f7cde44a06947e452ba6c5132704caa4b1c3e", "time" : 1454625063, "y" : 555, "branches" : [0, 5, 6, 7, 11], "comment" : "Compiler: use the reporter passed from the Driver\n\nWith this commit and the previous one, partest should finally correctly\nlog the output of the compiler and display it at the end of its\nexecution if compilation failed.\n\nAlso make sure the initial Reporter in a Context is _not_ a ThrowingReporter.\nPreviously, the initial Reporter was always overriden in Compiler by\nrootReporter so it had no effect, but this is not the case anymore, and\nthe negative junit tests fail with the ThrowingReporter since they throw\nan exception instead of exiting with a certain number of errors.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Thu Feb 4 23:31:03 2016 +0100]"},
{"name" : "73fad44a11dafa507e1d358f1bc222b04319a594", "time" : 1454624518, "y" : 555, "branches" : [0, 5, 6, 7, 11], "comment" : "Driver: properly use root Context passed as argument\n\nAlso CompilerTest no longer runs the compiler with the context\nDottyTest#ctx. Previously, we got away with this because\nCompiler#process ignored it and created a new Context, but this commit\nfixes this, and it is now very important that we use a different context\nfor every test we compile. Since DottyTest#ctx was the only part of\nDottyTest we used, CompilerTest no longer extends DottyTest to make sure\nthat we do not use it accidentally. If we want to use DottyTest as a\nbase class for tests again, we will have to remove its implicit Context\nfield first.\n\nAlso do not try to initialize the definitions in the context used by\npartest, this is not necessary.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Thu Feb 4 23:21:58 2016 +0100]"},
{"name" : "f926c8c14a7b48f2c0f3da680c69881ddfb9bf46", "time" : 1454624301, "y" : 555, "branches" : [0, 5, 6, 7, 11], "comment" : "Remove useless options in tests\n\n- Removed \"-Xprint-types\", it is only rarely needed and makes it very\nhard to read trees, enable it yourself if you need it.\n- Removed \"-Ylog:<some\", this does not seem to have any effect\ncurrently.\n- Removed \"-pagewidth 90\", this is overloaded in tests.scala to 160 anyway.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Thu Feb 4 23:18:21 2016 +0100]"},
{"name" : "d6a52eec2221101973c6b28f54aa20319f0e8b6f", "time" : 1454610333, "y" : 555, "branches" : [0, 5, 6, 7, 11], "comment" : "Reporter: make summary available without a Context\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Thu Feb 4 19:25:33 2016 +0100]"},
{"name" : "cf1413bfc89308aa4b44aa1b76019c168c32a343", "time" : 1454610332, "y" : 555, "branches" : [0, 5, 6, 7, 11], "comment" : "ConsoleReporter: remove unused argument ctx\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Thu Feb 4 19:25:32 2016 +0100]"},
{"name" : "fc4867eafbf9714bfd053cc594b6763197859001", "time" : 1454605563, "y" : 532, "branches" : [0, 5, 6, 7, 11], "comment" : "Disable benchmark test\n\nThe test checks that Scala collections perform within 10x of Java collections.\nThat's not something we need to test for dotty. And because of the heavily\nparallel execution of the tests it does not always hold. This is the second\ntime in a a month that this particular test failed on jenkins. I think we lost\nenough cycles on it.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Feb 4 18:06:03 2016 +0100]"},
{"name" : "6778e3c74ff86c0174e84bb3df08af47931ecbbb", "time" : 1454599811, "y" : 532, "branches" : [0, 5, 6, 7, 11], "comment" : "Slight optimization\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Feb 4 16:30:11 2016 +0100]"},
{"name" : "8efdbdc9843f66fbb8fc39aa2716da0fe7187fd9", "time" : 1454593076, "y" : 532, "branches" : [0, 5, 6, 7, 11], "comment" : "Try to make refinements match in approximateUnions\n\nSee comment in Typer#approximateUnion for an explanation.\nFixes #1045.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Feb 4 14:37:56 2016 +0100]"},
{"name" : "7d1d93e95113802bee77b9d2b89475a56be46bf7", "time" : 1454583795, "y" : 532, "branches" : [0, 5, 6, 7, 11], "comment" : "Push `|' into corresponding RefinedTypes in approximateUnion\n\nThis gives in general a supertype, that's OK for approximation.\nSee ee76fda for an explanation.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Feb 4 12:03:15 2016 +0100]"},
{"name" : "93dd1cf1fdbf56ca3c153aa5a25fb4c48782acf5", "time" : 1453653685, "y" : 0, "branches" : [0, 5, 6, 7, 11], "comment" : "Merge pull request #1022 from dotty-staging/fix-i939\n\nFix #939. Allows IntMap and LongMap to compile", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Sun Jan 24 17:41:25 2016 +0100]"},
{"name" : "150d62960d294b1076eafe774b610a022543e4d9", "time" : 1453639906, "y" : 568, "branches" : [0, 5, 6, 7, 11], "comment" : "Add IntMap and LongMap to collections whitelist.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sun Jan 24 13:51:46 2016 +0100]"},
{"name" : "b18c930965c0ca70e1fbd15674d042d83a38ef4e", "time" : 1453639906, "y" : 568, "branches" : [0, 5, 6, 7, 11], "comment" : "Test that #939 is fixed\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sun Jan 24 13:51:46 2016 +0100]"},
{"name" : "842e966a233084539fbc755320c83f8c6fed7ef0", "time" : 1453639906, "y" : 568, "branches" : [0, 5, 6, 7, 11], "comment" : "Fix i939: Patmat shouldn't compare selectors to module TypeTrees.\n\nIt would be great to augment Ycheck to ensure that some trees are not\npermitted, e.g. TypeTree cannot be a stat in a block or a receiver of\n a call.\n\nCurrently this is `ensured` by backend by failing.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sun Jan 24 13:51:46 2016 +0100]"},
{"name" : "e9105c96253ae62cecb63e39764583f826876159", "time" : 1453585524, "y" : 0, "branches" : [0, 5, 6, 7, 11], "comment" : "Merge pull request #1039 from dotty-staging/fix-#998\n\nFix #998", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Sat Jan 23 22:45:24 2016 +0100]"},
{"name" : "8ceaba796346d40a1be156d38b02de91854634cd", "time" : 1453584178, "y" : 0, "branches" : [0, 5, 6, 7, 11], "comment" : "Merge pull request #1038 from dotty-staging/fix-#1037\n\nFix #1037", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Sat Jan 23 22:22:58 2016 +0100]"},
{"name" : "ab1d30d7d430eb472a97dcdd0af81e4cb3cfabb4", "time" : 1453584108, "y" : 0, "branches" : [0, 5, 6, 7, 11], "comment" : "Merge pull request #1040 from dotty-staging/fix-#1036\n\nFix #1036", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Sat Jan 23 22:21:48 2016 +0100]"},
{"name" : "eb1197c87b212bd3b776ce9e24f550e80888e5e4", "time" : 1453283628, "y" : 574, "branches" : [0, 5, 6, 7, 11], "comment" : "Fix #998\n\nNeeded a fix in approximateUnion.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Jan 20 10:53:48 2016 +0100]"},
{"name" : "bbce22137fb83b33773b198bf4aaba9417596179", "time" : 1453281841, "y" : 575, "branches" : [0, 5, 6, 7, 11], "comment" : "Fix #1036\n\nAchieved by tweaking from where we get the parameter types of an eta-expansion.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Jan 20 10:24:01 2016 +0100]"},
{"name" : "2042adc79cff35cdafef4130b74ed90d0d5841bf", "time" : 1453227211, "y" : 576, "branches" : [0, 5, 6, 7, 11], "comment" : "Extend test\n\nWe verified that before the combination abstract/concrete for `x`\nalso led to AMEs. So we test it here explicitly, too.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Jan 19 19:13:31 2016 +0100]"},
{"name" : "5e9a40a45503eab81d58368ab7f26de7fbe458ba", "time" : 1453224573, "y" : 576, "branches" : [0, 5, 6, 7, 11], "comment" : "Perform isCurrent at transform phase\n\ninstead of the one after it. Fixes problem with t7475b.scala\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Jan 19 18:29:33 2016 +0100]"},
{"name" : "0ae58a58498d4659e4877f6c3dd836c22e90013d", "time" : 1453224529, "y" : 576, "branches" : [0, 5, 6, 7, 11], "comment" : "Small refactoring\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Jan 19 18:28:49 2016 +0100]"},
{"name" : "3686713abe506f5d815fd850e9db012497b1aa5c", "time" : 1453218271, "y" : 576, "branches" : [0, 5, 6, 7, 11], "comment" : "Don't force symbol denotation when taking fingerprint.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Jan 19 16:44:31 2016 +0100]"},
{"name" : "a93cdf4077003dad3428a4af34ba30c3d812dc78", "time" : 1453218270, "y" : 576, "branches" : [0, 5, 6, 7, 11], "comment" : "Avoid repeated evaluations of parentIsYounger.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Jan 19 16:44:30 2016 +0100]"},
{"name" : "1aa8fbb56e95d7aea04b338d3edf7d53077b804a", "time" : 1453140348, "y" : 0, "branches" : [0, 5, 6, 7, 11], "comment" : "Merge pull request #1014 from dotty-staging/fix/deep-subtypes\n\nCheck all bounds and avoid infinite subtyping checks when intersecting denotations", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Mon Jan 18 19:05:48 2016 +0100]"},
{"name" : "224232df2affa882c2c41fc8a6730ad7fc049679", "time" : 1453137768, "y" : 582, "branches" : [0, 5, 6, 7, 11], "comment" : "Check AppliedTypeTrees bounds inside AppliedTypeTree\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Mon Jan 18 18:22:48 2016 +0100]"},
{"name" : "06e18c6e7761c458b33af3471f013a4dd3cee3f1", "time" : 1453132156, "y" : 582, "branches" : [0, 5, 6, 7, 11], "comment" : "Avoid infinite subtyping checks when intersecting denotations\n\nThis allows us to run compileStdLib without deep subtypes again.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Mon Jan 18 16:49:16 2016 +0100]"},
{"name" : "3c29bbe7953f31f35dd404577cd04b4de95f74bb", "time" : 1453132156, "y" : 582, "branches" : [0, 5, 6, 7, 11], "comment" : "Adapt and add tests\n\nNew test that exhibited the problem is ski.scala. Previously\nthis did not fail with a bounds violation.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Mon Jan 18 16:49:16 2016 +0100]"},
{"name" : "73815420c3ee22f8b0209bc9d915dad8b1559b9a", "time" : 1453132156, "y" : 582, "branches" : [0, 5, 6, 7, 11], "comment" : "Avoid caching the wrong bounds in TypeRefs\n\nChecking bounds everywhere revealed a problem in compileStdLib,\nwhich this commit fixes.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Mon Jan 18 16:49:16 2016 +0100]"},
{"name" : "39ca54fcbe21df0fd277ab9734a032d71027fa4c", "time" : 1453132156, "y" : 582, "branches" : [0, 5, 6, 7, 11], "comment" : "Check bounds everywhere\n\nPreviously, bounds of a TypeDef tree were not checked. We now make\nsure bounds are checked everywhere in PostTyper. The previous\npartial check in Applications gets removed (it was not complete\neven for TypeApplications because sometimes bounds were not yet\nknown when the test was performed.)\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Mon Jan 18 16:49:16 2016 +0100]"},
{"name" : "c0b545be494bc53f9839c8301cdca71edeb620c7", "time" : 1453132156, "y" : 582, "branches" : [0, 5, 6, 7, 11], "comment" : "Keep rhs of TypeDef in typed tree\n\nThis is important for IDEs who want to see the full tree.\nThe tree now gets replaced by a TypeTree in PostTyper.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Mon Jan 18 16:49:16 2016 +0100]"},
{"name" : "dd733181fd943f5074af57b151da95df7c999fc9", "time" : 1453127796, "y" : 0, "branches" : [0, 5, 6, 7, 11], "comment" : "Merge pull request #1020 from dotty-staging/fix/tvar-ephemeral\n\nFix caching bug: don't assume that tvars instantiation cannot be retracted", "author" : "PersonIdent[odersky, odersky@gmail.com, Mon Jan 18 15:36:36 2016 +0100]"},
{"name" : "b60a6aef78739739956ccb707df913a195d15461", "time" : 1453108917, "y" : 0, "branches" : [0, 5, 6, 7, 11], "comment" : "Merge pull request #1035 from dotty-staging/upgrade/partest-1.0.11\n\nUpgrade scala-partest to 1.0.11", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon Jan 18 10:21:57 2016 +0100]"},
{"name" : "c62990c06eae68aae4ab372c14f175c514d2aa9f", "time" : 1453056715, "y" : 590, "branches" : [0, 5, 6, 7, 11], "comment" : "Upgrade scala-partest to 1.0.11\n\nFirst step in fixing #1034\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Sun Jan 17 19:51:55 2016 +0100]"},
{"name" : "0a2b676e97d1325e6ddd3861b7681f8f8db955b9", "time" : 1453052442, "y" : 591, "branches" : [0, 5, 6, 7, 11], "comment" : "Fix caching bug: don't assume that tvars instantiation cannot be retracted\n\nWhen TypeVar#inst is empty but an instantiation exists in the typer\nstate, we should set ephemeral to true, because this instantiation will\nbe retracted if we throw away the current typer state.\n\nThis makes hkrange.scala pass, it compiled before but the type parameter\nof `f` was inferred to be `Nothing` because of this bug, and this failed\nYcheck.\n\nFor anyone who wonders how caching bugs manifest themselves, here's what\nhappened in details in hkrange.scala:\n\n1. In an ExploreTyperState we set `CC` to be `IndexedSeq` in the\n   constraint set\n2. In that same typer state the TypeRef `CC[Int]` (it's a TypeRef\n   because `CC` is a type lambda) gets the denotation `IndexedSeq[Int]`,\n   which is correct, but the denotation is cached since `ephemeral` is\n   false, which is wrong.\n3. Later, we retract the ExplorerTyperState, so `CC` is uninstantiated\n   again and unconstrained.\n4. Then we do the subtyping check `CC[Int] <:< IndexedSeq[Int]`, because\n   the denotation of `CC[Int]` was cached, this returns true, but `CC` stays\n   unconstrained.\n5. This means that when we instantiate `CC`, we get `Nothing`\n\nAfter this fix, the TypeRef denotation is no longer cached, so when we\ndo `CC[Int] <:< IndexedSeq[Int]`, `CC` gets constrained as expected.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Sun Jan 17 18:40:42 2016 +0100]"},
{"name" : "c2513a639df2585f9991d40d6be9fce23b5d4699", "time" : 1453051563, "y" : 0, "branches" : [0, 5, 6, 7, 11], "comment" : "Merge pull request #1033 from dotty-staging/disable/t7880\n\nStop crashes because we're out of memory by disabling t7880", "author" : "PersonIdent[odersky, odersky@gmail.com, Sun Jan 17 18:26:03 2016 +0100]"},
{"name" : "06c7513dabb9ce24380787da3cc1ae274f873c94", "time" : 1453047928, "y" : 593, "branches" : [0, 5, 6, 7, 11], "comment" : "Stop crashes because we're out of memory by disabling t7880\n\nAll of our recent memory-related tests failures since\nhttps://github.com/lampepfl/dotty/pull/1030 was merged seem to be caused\nby t7880.scala. It tries to intentionally trigger an OutOfMemoryError,\nhowever since we don't pass -Xmx to our run tests it's possible that\nthis we fill up the memory of our host before we reach the maximum heap\nsize of the JVM.\n\nIdeally, we would specify a -Xmx for run tests (scalac uses 1 GB),\nunfortunately in the version of partest we use this is tricky because we\nneed to set the system property \"partest.java_opts\". If we upgrade our\npartest to the latest release, we can instead specify it by setting the\nargument `javaOpts` of the constructor of `SuiteRunner`, see\nhttps://github.com/scala/scala-partest/commit/7c4659e1f88b410109ad3c4e7f66ae7070c6e985\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Sun Jan 17 17:25:28 2016 +0100]"},
{"name" : "0e32220e64bab05b32c830675fcfc91c0a9235d3", "time" : 1453032341, "y" : 0, "branches" : [0, 5, 6, 7, 11], "comment" : "Merge pull request #1021 from dotty-staging/fix/procedure-migration\n\nImprove migration message for Scala 2 procedures", "author" : "PersonIdent[odersky, odersky@gmail.com, Sun Jan 17 13:05:41 2016 +0100]"},
{"name" : "ef5c50ae9cfb1ac400eccf882f38c3bdf7699110", "time" : 1453029013, "y" : 0, "branches" : [0, 5, 6, 7, 11], "comment" : "Merge pull request #1031 from dotty-staging/change-early-typeparams3\n\nChange early typeparams, take 3", "author" : "PersonIdent[odersky, odersky@gmail.com, Sun Jan 17 12:10:13 2016 +0100]"},
{"name" : "17dcd7c7765c4d37540bf1140e258c857cffc7f7", "time" : 1452976019, "y" : 596, "branches" : [0, 5, 6, 7, 11], "comment" : "Always eta-expand AppliedTypeTrees arguments\n\nThis makes compileIndexedSeq pass again.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Sat Jan 16 21:26:59 2016 +0100]"},
{"name" : "9a378b10a706f283a7337a1debe02e586d08c5ed", "time" : 1452976017, "y" : 596, "branches" : [0, 5, 6, 7, 11], "comment" : "Compute type params in namer without completing the whole info\n\nType params should be computed before computing the whole info of\na type. Without the patch we get a cyclic reference in the compileMixed\ntest.\n\nNote that compileIndexedSeq does not pass with this commit (it passed\nbefore), this is fixed in the next commit.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Sat Jan 16 21:26:57 2016 +0100]"},
{"name" : "8e84133598f879c1cb0ad4b9faf2a90c0403536f", "time" : 1452976015, "y" : 596, "branches" : [0, 5, 6, 7, 11], "comment" : "Fix checkNonCyclic.\n\nNeed to also look info refined types.\nNeed to handle case where we hit a NoCompleter again.\n\nFixes #974 and makes MutableSortedSetFactory in stdlib compile.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Sat Jan 16 21:26:55 2016 +0100]"},
{"name" : "a4f35e2cf41dd38a35688f351510603165c6f89f", "time" : 1452976012, "y" : 596, "branches" : [0, 5, 6, 7, 11], "comment" : "Make skolems uncached\n\nThere was no reason in the first case to cache them, as their\nequality is reference identity. Maybe this fixes the OOM errors\nwe encounter.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Sat Jan 16 21:26:52 2016 +0100]"},
{"name" : "a2c8000dcd5c50d088cbd7127449b08dd7cd34a2", "time" : 1452975984, "y" : 596, "branches" : [0, 5, 6, 7, 11], "comment" : "Survive files that are not SFiles in CompilerTest\n\nI observed in a local partest a file with was a java.io.Path, not an SFile.\nThey should be treated like SFiles. Not clear why this came up. The file\nin question (partest-generated/pos/Patterns_v1.scala) looked just like\nall the others that were read as SFiles.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Sat Jan 16 21:26:24 2016 +0100]"},
{"name" : "6e8fcde4ca389b816f841b7ffcf3b7dcb7db4468", "time" : 1452972530, "y" : 596, "branches" : [0, 5, 6, 7, 11], "comment" : "Increase the maximum heap size on Jenkins\n\nWe're getting a lot of OutOfMemoryException when the maximum size is 1\nGB, but we cannot increase it too much without using up all the memory\navailable on the Jenkins instances, let's see if 1.1 GB is enough.\n\nAlso stop using a custom -Xss, the default of 1 MB should be good enough.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Sat Jan 16 20:28:50 2016 +0100]"},
{"name" : "2503291afd5bb4bf56dfda74ac1446fb8b388521", "time" : 1452940894, "y" : 0, "branches" : [0, 5, 6, 7, 11], "comment" : "Merge pull request #1029 from dotty-staging/fix/partest-output\n\npartest: Print stack traces of swallowed exceptions", "author" : "PersonIdent[odersky, odersky@gmail.com, Sat Jan 16 11:41:34 2016 +0100]"},
{"name" : "87f60583f549a343290145ff07b0a99ae433862d", "time" : 1452883079, "y" : 603, "branches" : [0, 5, 6, 7, 11], "comment" : "partest: Print stack traces of swallowed exceptions\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Fri Jan 15 19:37:59 2016 +0100]"},
{"name" : "3b5c70bd5cecc542226e1766d9f9ba752a26b8ec", "time" : 1452787768, "y" : 604, "branches" : [0, 5, 6, 7, 11], "comment" : "Improve migration message for Scala 2 procedures\n\nIt's not correct to just add `=` you also need to specify the return\ntype to be `Unit` otherwise things may not work as expected, this is\nespecially important for a `main` method.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Thu Jan 14 17:09:28 2016 +0100]"},
{"name" : "da661c8a509efaa1c0ff926b0907c32cd37708a5", "time" : 1452729682, "y" : 0, "branches" : [0, 5, 6, 7, 11], "comment" : "Merge pull request #1024 from dotty-staging/partest-non-bootstrapped\n\nPartest dotty non-bootstrapped.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Thu Jan 14 01:01:22 2016 +0100]"},
{"name" : "c059815c58c2dc06d245ff791126e78d09b5b5a6", "time" : 1452701059, "y" : 606, "branches" : [0, 5, 6, 7, 11], "comment" : "Partest dotty non-bootstrapped.\n\nNeeds to go in before\nhttps://github.com/scala/scala-jenkins-infra/pull/152\nis deployed\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Jan 13 17:04:19 2016 +0100]"},
{"name" : "66e73e022db9bc5309e2a22dbc4547e95e1c10cb", "time" : 1452099903, "y" : 0, "branches" : [0, 5, 6, 7, 11], "comment" : "Merge pull request #1004 from dotty-staging/linker/types\n\nSubtle changes to TypeComarer needed for Linker.", "author" : "PersonIdent[odersky, odersky@gmail.com, Wed Jan 6 18:05:03 2016 +0100]"},
{"name" : "705a95f31dd659a2bdd13379cd80ea3fed964ff0", "time" : 1452093605, "y" : 0, "branches" : [0, 5, 6, 7, 11], "comment" : "Merge pull request #1016 from dotty-staging/fix/language-features\n\nBuild.scala: only enable features we use", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed Jan 6 16:20:05 2016 +0100]"},
{"name" : "e71b5fe32b10f4709d74ad0364511c3070f9b91e", "time" : 1451942768, "y" : 0, "branches" : [0, 5, 6, 7, 11], "comment" : "Merge pull request #1015 from dotty-staging/fix/dotc-d\n\nbin/dotc: fix \"-d\" argument", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon Jan 4 22:26:08 2016 +0100]"},
{"name" : "71a599f3972746391eae74056c0d23577001b467", "time" : 1451942741, "y" : 0, "branches" : [0, 5, 6, 7, 11], "comment" : "Merge pull request #1018 from dotty-staging/fix/paramless-override\n\nVCArrayPrototype: replace override \"def clone\" by \"def clone()\"", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon Jan 4 22:25:41 2016 +0100]"},
{"name" : "ef9984f87fbe965dc4de0d2926c3bd613d040608", "time" : 1451930863, "y" : 611, "branches" : [0, 5, 6, 7, 11], "comment" : "VCArrayPrototype: replace override \"def clone\" by \"def clone()\"\n\nThis prevented Dotty from bootstrapping when the file arguments were\ngiven in a certain order because of #1017. Regardless of what we do\nregarding #1017, it makes sense to use \"def clone()\" here.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Mon Jan 4 19:07:43 2016 +0100]"},
{"name" : "a40d80c98260cfd7314da2a44382699b69ed7f7c", "time" : 1451928597, "y" : 612, "branches" : [0, 5, 6, 7, 11], "comment" : "Build.scala: only enable features we use\n\n-language:_ does not work when compiling dotty with dotty because it\nimplies -language:keepUnions which prevents dotty from typechecking\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Mon Jan 4 18:29:57 2016 +0100]"},
{"name" : "58a1f7b9ced7c070ef44aaa0abdf93001dbd7738", "time" : 1451928151, "y" : 613, "branches" : [0, 5, 6, 7, 11], "comment" : "bin/dotc: fix \"-d\" argument\n\nIt's already used to specify an output folder, don't try to interpret it\nas a shortcut for -debug\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Mon Jan 4 18:22:31 2016 +0100]"},
{"name" : "66e02a5256cbd7519418e2409c4929a20b9e23ed", "time" : 1451919487, "y" : 0, "branches" : [0, 5, 6, 7, 11], "comment" : "Merge pull request #1013 from dotty-staging/add/sbt-stuff\n\nAdd a compiler.properties resource file like in Scala 2", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Mon Jan 4 15:58:07 2016 +0100]"},
{"name" : "f9abfd54c30dab551472841ddd74fb467e755766", "time" : 1451913292, "y" : 615, "branches" : [0, 5, 6, 7, 11], "comment" : "Mark TermRefWithFixedSym as non-final.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Jan 4 14:14:52 2016 +0100]"},
{"name" : "013c82356d2bf000edaed164ae8f369e43d0072c", "time" : 1451904099, "y" : 0, "branches" : [0, 5, 6, 7, 11], "comment" : "Merge pull request #1003 from dotty-staging/linker/tasty\n\nFixes&Changes to TASTY inspired by Linker", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon Jan 4 11:41:39 2016 +0100]"},
{"name" : "f0c6814a61768155d3e8c08093f365fce6360527", "time" : 1451902842, "y" : 615, "branches" : [0, 5, 6, 7, 11], "comment" : "Allow comparisons between TypeRefs and ThisTypes.\n\nMotivation comes from Linker:\n\nList$.canBuildFrom is implemented as\n\n  ReusableCBF.asInstanceOf[GenericCanBuildFrom[A]]\n\nstatic type of field ReusableCBF here is\n  TypeRef(TypeRef(List$), GenericCanBuildFrom[Nothing])\nbut the ident ReusableCBF gets type\n  TypeRef(ThisType(List$), GenericCanBuildFrom[Nothing])\n\nWe already permit comparisons between static TermRefs and ThisTypes,\nthis change additionally allows TypeRefs to static modules to\nbecome subtypes of ThisTypes of static modules.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Jan 4 11:20:42 2016 +0100]"},
{"name" : "ef73669cef8f34257176c4720c0b5c0e63d98c3e", "time" : 1451902151, "y" : 618, "branches" : [0, 5, 6, 7, 11], "comment" : "Address review comments.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Jan 4 11:09:11 2016 +0100]"},
{"name" : "4bca33233bb11e9a8ef8461b66707c37e8a09184", "time" : 1451900761, "y" : 0, "branches" : [0, 5, 6, 7, 11], "comment" : "Merge pull request #1005 from dotty-staging/ycheck-erasure-arrays\n\nYcheck that scala.Array is erazed to either Object or JavaArrayType.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon Jan 4 10:46:01 2016 +0100]"},
{"name" : "28c6b5a48122c26aff1a810c8f33c50a3643fd79", "time" : 1451833095, "y" : 0, "branches" : [0, 5, 6, 7, 11], "comment" : "Merge pull request #993 from dotty-staging/tasty-typer-test\n\nAdd tests for dotc.typer pickling/unpickling", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Sun Jan 3 15:58:15 2016 +0100]"},
{"name" : "be3ab3f0806cea8cd3993ef486ded254d8b00143", "time" : 1451821402, "y" : 0, "branches" : [0, 5, 6, 7, 11], "comment" : "Merge pull request #1010 from dotty-staging/fix/new-asSeenFrom\n\nFix #1009: Do not forget to skolemize some types", "author" : "PersonIdent[odersky, odersky@gmail.com, Sun Jan 3 12:43:22 2016 +0100]"},
{"name" : "fc3221836bd28c98dbef64e564d6f4e8b6ae90db", "time" : 1451526015, "y" : 622, "branches" : [0, 5, 6, 7, 11], "comment" : "Add a compiler.properties resource file like in Scala 2\n\nThis is used by sbt to get the compiler's version.\n\nThe code to generate the resource comes from\nhttp://www.scala-sbt.org/0.13/docs/Howto-Generating-Files.html#Generate+resources\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Thu Dec 31 02:40:15 2015 +0100]"},
{"name" : "2427f056447ab3f9a0ceaa001353eb0a4067e1bb", "time" : 1451164377, "y" : 0, "branches" : [0, 5, 6, 7, 11], "comment" : "Merge pull request #1006 from dotty-staging/more-tests\n\nMore tests", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Sat Dec 26 22:12:57 2015 +0100]"},
{"name" : "8d8fd269a5e798d4951041c2851ee3b7bd33185d", "time" : 1450980320, "y" : 624, "branches" : [0, 5, 6, 7, 11], "comment" : "Fix #1009: Do not forget to skolemize some types\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Thu Dec 24 19:05:20 2015 +0100]"},
{"name" : "c66613de7f32cfabbca765a96f1a3cc0ea2d5bcb", "time" : 1450830563, "y" : 0, "branches" : [0, 5, 6, 7, 11], "comment" : "Merge pull request #1008 from dotty-staging/fix-sym-positions\n\nFix off by 2 error for symbol positions", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Wed Dec 23 01:29:23 2015 +0100]"},
{"name" : "51c6646aa64f0e5ef63f337bca4fb2803743a50a", "time" : 1450796410, "y" : 626, "branches" : [0, 5, 6, 7, 11], "comment" : "Update test error count\n\nOne error gest supporessed now because\nit has the same position as a previous one.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Dec 22 16:00:10 2015 +0100]"},
{"name" : "24ef49b2aba670aa1ad9211c05f7f511e6eb7ed6", "time" : 1450789561, "y" : 626, "branches" : [0, 5, 6, 7, 11], "comment" : "Fix off by 2 error for symbol positions\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Dec 22 14:06:01 2015 +0100]"},
{"name" : "08e3f7688c2364e7f6760b8be35cd4ea6b330a10", "time" : 1450720968, "y" : 0, "branches" : [0, 5, 6, 7, 11], "comment" : "Merge pull request #999 from dotty-staging/change-idempotent-asSeenFrom\n\nChange idempotent as seen from", "author" : "PersonIdent[odersky, odersky@gmail.com, Mon Dec 21 19:02:48 2015 +0100]"},
{"name" : "ac7f9f2c566337c91ea82195e950e5d3dd31c4d3", "time" : 1450719851, "y" : 629, "branches" : [0, 5, 6, 7, 11], "comment" : "Remove extraneous println\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 21 18:44:11 2015 +0100]"},
{"name" : "5103f1720a26ac16c2b6b8bde1fe5717b3e5b78f", "time" : 1450717329, "y" : 629, "branches" : [0, 5, 6, 7, 11], "comment" : "Make asSeenFrom idempotent\n\nLet asSeenFrom generate a marker annotated type\nfor any unsafe instantiation. Then cleanup in\ntypedSelect.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 21 18:02:09 2015 +0100]"},
{"name" : "4163b249428d1f27843ecc4e5b7c9c7dac0698dd", "time" : 1450709660, "y" : 0, "branches" : [0, 5, 6, 7, 11], "comment" : "Merge pull request #1001 from dotty-staging/change-distribute-or\n\nChange distribute or", "author" : "PersonIdent[odersky, odersky@gmail.com, Mon Dec 21 15:54:20 2015 +0100]"},
{"name" : "9675b84a4dd82a3705990e8474299725861424ea", "time" : 1450699440, "y" : 632, "branches" : [0, 5, 6, 7, 11], "comment" : "Add precondition to doc comment.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 21 13:04:00 2015 +0100]"},
{"name" : "2b411163b22adacc27239201b43aa119c6bd86a5", "time" : 1450699376, "y" : 632, "branches" : [0, 5, 6, 7, 11], "comment" : "Polishing\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 21 13:02:56 2015 +0100]"},
{"name" : "ea86193b042abad6eff3ae6ee6db32c68b9daf8c", "time" : 1450699228, "y" : 632, "branches" : [0, 5, 6, 7, 11], "comment" : "Change name of setting: -YshowVarBounds -> -Yshow-var-bounds\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 21 13:00:28 2015 +0100]"},
{"name" : "0290dbcbffd3833e23ad6e206ca6fd1cc56f1415", "time" : 1450695611, "y" : 635, "branches" : [0, 5, 6, 7, 11], "comment" : "Enable previously failing whitelist test\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 21 12:00:11 2015 +0100]"},
{"name" : "c3be5073490be226fe2010c2ab445998257cf422", "time" : 1450695596, "y" : 635, "branches" : [0, 5, 6, 7, 11], "comment" : "Refine interdiction of Array after erasure\n\nArray is still allowed after erasure when compiling Array.scala.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 21 11:59:56 2015 +0100]"},
{"name" : "f75f2adc7288d19eaf18b3197d691de45c404159", "time" : 1450693663, "y" : 635, "branches" : [0, 5, 6, 7, 11], "comment" : "Merge branch 'ycheck-erasure-arrays' of https://github.com/dotty-staging/dotty into ycheck-erasure-arrays\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 21 11:27:43 2015 +0100]"},
{"name" : "5a8675b76e1b7bed1b21cfdde211ffd89063eb9a", "time" : 1450693557, "y" : 635, "branches" : [0, 5, 6, 7, 11], "comment" : "Fix erasure of raw arrays\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 21 11:25:57 2015 +0100]"},
{"name" : "13513b4a78ffb60472822792673dffdab7fe9194", "time" : 1450685207, "y" : 0, "branches" : [0, 5, 6, 7, 11], "comment" : "Merge pull request #1007 from dotty-staging/fix/tests-ycheck\n\nFix typo in command run by Jenkins", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon Dec 21 09:06:47 2015 +0100]"},
{"name" : "2505ad452e29a8644d3721fc52f7d02c98672fc0", "time" : 1450653370, "y" : 640, "branches" : [0, 5, 6, 7, 11], "comment" : "Fix typo in command run by Jenkins\n\nThe effect of this typo was that Ycheck:tailrec was never run on Jenkins.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Mon Dec 21 00:16:10 2015 +0100]"},
{"name" : "e51b8845fb20fe3a4e1c655d4b72e2833906bbc2", "time" : 1450645245, "y" : 641, "branches" : [0, 5, 6, 7, 11], "comment" : "The big pending/pos test triage\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 20 22:00:45 2015 +0100]"},
{"name" : "79db79a87e6141c7148f50622b4add60188ae7cf", "time" : 1450627933, "y" : 642, "branches" : [0, 5, 6, 7, 11], "comment" : "Fix assertion in erasure to correctly print name of the phase.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sun Dec 20 17:12:13 2015 +0100]"},
{"name" : "513312450fddff94371f6ca0afd2524e2a17eed9", "time" : 1450627529, "y" : 635, "branches" : [0, 5, 6, 7, 11], "comment" : "TypeErasure.isErasedType: scala.Array is invalid after Erasure.\n\nIt should either be erased to j.l.Object or replaced by JavaArrayType.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sun Dec 20 17:05:29 2015 +0100]"},
{"name" : "473c8318b8206a3415acef27a880c78614dbe064", "time" : 1450627451, "y" : 635, "branches" : [0, 5, 6, 7, 11], "comment" : "Minimize #996\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sun Dec 20 17:04:11 2015 +0100]"},
{"name" : "a1a2961a3aba856f7753005541e439636ff1c5b6", "time" : 1450623243, "y" : 615, "branches" : [0, 5, 6, 7, 11], "comment" : "Linker specific: add note to withSymAndName.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sun Dec 20 15:54:03 2015 +0100]"},
{"name" : "facb334f64b4221b56200852e9bab5c80c7266f9", "time" : 1450623235, "y" : 615, "branches" : [0, 5, 6, 7, 11], "comment" : "LinkerSpecific: make functionality of ResolveSuper accessible.\n\nLinker needs to resolve super calls\nbefore they are rewritten in the tree.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sun Dec 20 15:53:55 2015 +0100]"},
{"name" : "18d8417afd884c4399abdb7cd0882821a71e5916", "time" : 1450622709, "y" : 618, "branches" : [0, 5, 6, 7, 11], "comment" : "TreeUnpickler unpickle only top-level packages and imports.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sun Dec 20 15:45:09 2015 +0100]"},
{"name" : "a3b10d134401f21c33ce51abd65d3404700ed479", "time" : 1450622705, "y" : 618, "branches" : [0, 5, 6, 7, 11], "comment" : "Postpone tree compaction till all phases finish operating TASTY.\n\nLinker adds new sections. Wait for sections to be added and then compact.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sun Dec 20 15:45:05 2015 +0100]"},
{"name" : "68ce6e764db1e41408fcc3ad7c9874836874cd94", "time" : 1450622356, "y" : 618, "branches" : [0, 5, 6, 7, 11], "comment" : "Maintain original completer in SymDenotation.\n\nNeeded to be able to access additional sections of TASTY.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sun Dec 20 15:39:16 2015 +0100]"},
{"name" : "f10cfa2a2079cacae2931bb0b0b6336fd6c6d4b1", "time" : 1450622346, "y" : 618, "branches" : [0, 5, 6, 7, 11], "comment" : "Linker specific: TreePicker: export functions for reuse\n\nLinker needs to save some trees.\nInstead of reimplementing I would rather reuse already existing methods.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sun Dec 20 15:39:06 2015 +0100]"},
{"name" : "5903fe35fada0f081334e933e6a5a182047d5d5f", "time" : 1450622338, "y" : 618, "branches" : [0, 5, 6, 7, 11], "comment" : "Allow unpickler to be accessible after FromTasty\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sun Dec 20 15:38:58 2015 +0100]"},
{"name" : "d3a31d3c30c08939a6d8a6f1ae1a93826eb0cc9d", "time" : 1450622328, "y" : 618, "branches" : [0, 5, 6, 7, 11], "comment" : "Have only one tree pickler per TASTY pickler.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sun Dec 20 15:38:48 2015 +0100]"},
{"name" : "f94ea3f0b780e72921d6604434470bd7d31184fe", "time" : 1450622318, "y" : 618, "branches" : [0, 5, 6, 7, 11], "comment" : "Fix reading of Longs from tasty. Fixes wrong UUID.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sun Dec 20 15:38:38 2015 +0100]"},
{"name" : "906a7a7dfa38e53bfdffa2e94ddbf5eb23587592", "time" : 1450622303, "y" : 618, "branches" : [0, 5, 6, 7, 11], "comment" : "Linker Specific: allow phases to get to TASTY section.\n\nMakes all classes and fields on the way to TASTY section accessible.\nExample of usage can be found here:\n  https://gist.github.com/DarkDimius/0f9dc769b0dd7a3c7365\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sun Dec 20 15:38:23 2015 +0100]"},
{"name" : "581fee04f808d6f7759f98358e7475e6a58138e3", "time" : 1450610265, "y" : 641, "branches" : [0, 5, 6, 7, 11], "comment" : "Fix problem dealing with symbolic import renames\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 20 12:17:45 2015 +0100]"},
{"name" : "f780a371a3716c6917a510ed72a5927704634bb3", "time" : 1450608775, "y" : 641, "branches" : [0, 5, 6, 7, 11], "comment" : "Make isBottomType work for derives types as well.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 20 11:52:55 2015 +0100]"},
{"name" : "a2f0fc167bddda7bdf1f6b3fa8e091770a80b379", "time" : 1450608737, "y" : 641, "branches" : [0, 5, 6, 7, 11], "comment" : "Fix hk comparison between class and range lambda\n\nIn a situation like\n\n    List <: [X] -> <: GenTraversable[X]\n\nWe have to ask whether the rhs contains the instantiated lhs,\nnot whether it is a supertype.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 20 11:52:17 2015 +0100]"},
{"name" : "bde77d4c43dd994e0b9bd7feb9abf74bb9678e12", "time" : 1450608649, "y" : 641, "branches" : [0, 5, 6, 7, 11], "comment" : "Don't do eta expansion on bottom types\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 20 11:50:49 2015 +0100]"},
{"name" : "ded374a5229a17c5c6dc04e50044d62422dc1023", "time" : 1450560660, "y" : 641, "branches" : [0, 5, 6, 7, 11], "comment" : "Fix eta expansion\n\nrevios fix crashed for nullary functions\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Dec 19 22:31:00 2015 +0100]"},
{"name" : "05bc8a088a9ecabaa9d7424d51c8f4f218d0fd74", "time" : 1450548188, "y" : 641, "branches" : [0, 5, 6, 7, 11], "comment" : "Turn println into log\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Dec 19 19:03:08 2015 +0100]"},
{"name" : "aad036c4720aac43a41ab8d994d51d71d233031d", "time" : 1450547980, "y" : 641, "branches" : [0, 5, 6, 7, 11], "comment" : "Don't flag override errors for synthetic companion objects.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Dec 19 18:59:40 2015 +0100]"},
{"name" : "7dafb2ac6d5fd41cfc0a94f2a72b881987890abf", "time" : 1450547916, "y" : 641, "branches" : [0, 5, 6, 7, 11], "comment" : "Add position to implicit defs generated from implicit classes.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Dec 19 18:58:36 2015 +0100]"},
{"name" : "6c335b750fb65b1a605b9c8ad3a459113ffdbabf", "time" : 1450545338, "y" : 641, "branches" : [0, 5, 6, 7, 11], "comment" : "Fix parsing of blocks that end in an import\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Dec 19 18:15:38 2015 +0100]"},
{"name" : "ec54cd557f3a9f52db9e280043a5b9657ca6fc30", "time" : 1450544099, "y" : 641, "branches" : [0, 5, 6, 7, 11], "comment" : "Fix desugaring of symbols.\n\nSymbols can appear in patterns, so inserting an `apply` is wrong.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Dec 19 17:54:59 2015 +0100]"},
{"name" : "1de9e43ce85f7ddc93e21c4c7dc2c8b6558e95fb", "time" : 1450542622, "y" : 641, "branches" : [0, 5, 6, 7, 11], "comment" : "Fix eta lifting for functions with vararg parameters.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Dec 19 17:30:22 2015 +0100]"},
{"name" : "4619393a6c3b52127ceec07e2fc3630d22aef51a", "time" : 1450532836, "y" : 641, "branches" : [0, 5, 6, 7, 11], "comment" : "Categorize more tests\n\nAll pos tests up to 3999 have been triaged. One new test in pending.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Dec 19 14:47:16 2015 +0100]"},
{"name" : "8e257a63872697bd48a51ce93a0289c9f5acdfd8", "time" : 1450521373, "y" : 632, "branches" : [0, 5, 6, 7, 11], "comment" : "Add test case\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Dec 19 11:36:13 2015 +0100]"},
{"name" : "871188627d5bee19488e60922d23df2243d068d9", "time" : 1450470341, "y" : 632, "branches" : [0, 5, 6, 7, 11], "comment" : "Refactoring of derivedSelect\n\nIf splitProjections is set, it is more efficient that way.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Dec 18 21:25:41 2015 +0100]"},
{"name" : "d362455add3fcfb99d87c1e8290d9f6e1bf23654", "time" : 1450461040, "y" : 632, "branches" : [0, 5, 6, 7, 11], "comment" : "Fix higher-kinded unions and intersections\n\nSince And/Or type themselves are parameterless, their\nthe union and intersection of hgiher-kinded types has to be treated\nspecially: The types have to be pulled under a common lambda.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Dec 18 18:50:40 2015 +0100]"},
{"name" : "570cf0f84b0daa78a6234ead4b5b3c5b58b5db79", "time" : 1450198283, "y" : 632, "branches" : [0, 5, 6, 7, 11], "comment" : "Fix layout\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Dec 15 17:51:23 2015 +0100]"},
{"name" : "fd9d3f3944852da09278196ae69d99af37e7bb13", "time" : 1450198283, "y" : 632, "branches" : [0, 5, 6, 7, 11], "comment" : "Optionally rewrite projections.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Dec 15 17:51:23 2015 +0100]"},
{"name" : "9b630fae0d3c772610a2c58d9dbb4b95710c8c68", "time" : 1450198283, "y" : 632, "branches" : [0, 5, 6, 7, 11], "comment" : "Revise alias rules in type comparisons.\n\nThe fix solves two cases where we had a deep subtype before.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Dec 15 17:51:23 2015 +0100]"},
{"name" : "ee76fda79d446a2d6db51cb4af032a8e92936013", "time" : 1450198283, "y" : 632, "branches" : [0, 5, 6, 7, 11], "comment" : "Dont push `|' inside refined types.\n\nAs the comment explains, this is not sound.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Dec 15 17:51:23 2015 +0100]"},
{"name" : "300992407ca0e03eeda93cbb1a34ebc5907586b5", "time" : 1450198283, "y" : 632, "branches" : [0, 5, 6, 7, 11], "comment" : "Better error message in splitter\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Dec 15 17:51:23 2015 +0100]"},
{"name" : "ad7333eb7ed2d891789f187c880d6bc64b1d9c26", "time" : 1450198283, "y" : 632, "branches" : [0, 5, 6, 7, 11], "comment" : "Print bounds of TypeVars only when option is enabled.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Dec 15 17:51:23 2015 +0100]"},
{"name" : "c864e118e7bd04dcbd0503ab9af6729fda94ff3f", "time" : 1450198236, "y" : 0, "branches" : [0, 5, 6, 7, 11], "comment" : "Merge pull request #1000 from dotty-staging/fix-#241\n\nFix #241", "author" : "PersonIdent[odersky, odersky@gmail.com, Tue Dec 15 17:50:36 2015 +0100]"},
{"name" : "7e8f40164a48aa45d40b690929f969a0345b5503", "time" : 1450191402, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "More tweaks to override checks.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Dec 15 15:56:42 2015 +0100]"},
{"name" : "3a031f55d257203047504ff5eff7718e617d89ce", "time" : 1450190590, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Change <:< to overrides\n\nThis is needed to freeze the constraint.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Dec 15 15:43:10 2015 +0100]"},
{"name" : "503011f5749e7c21ab4f3b5eca8c2f9b0a1b37a6", "time" : 1450109794, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Check types for overriding conditions.\n\nCloses #241 -- that took a while!\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 14 17:16:34 2015 +0100]"},
{"name" : "86e35e48bb7916b6c2e35147973d2572a29b93c3", "time" : 1450109732, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Use symbolic refs when testing whether a TypeBounds contains a ClassInfo\n\nWithout the fix and the later commit that checks types for overriding\nwe get a Ycheck failure in t3452h.scala.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 14 17:15:32 2015 +0100]"},
{"name" : "8103c64854c8024927912fd27ce101e1fbc04470", "time" : 1450099811, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Add comments to whitelist with assignments for further action.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 14 14:30:11 2015 +0100]"},
{"name" : "21948a58c0c47363addf0dd87f1527e9b0aec76f", "time" : 1450099810, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Generalize overriding checking from isDefined\n\nGeneralize overriding checking from isDefined\nto all methods added by desugar to a case class.\nNone of these methods has an override so we\nneed to add one in case they do override another method\n(previously we would flag this as an error).\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 14 14:30:10 2015 +0100]"},
{"name" : "0a19b0b94393e47865f21f714e82676a67ab2e4d", "time" : 1450099810, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Only select parameterless get methods in unapplys.\n\nOtherwise we'd get a failure due to an overloaded `get` definition\nwhenever we typecheck a case class that is also a Map (because maps\ninherit a `get`).\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 14 14:30:10 2015 +0100]"},
{"name" : "a0b29722ff5c3f4d5a6c8e2f2868df755933d298", "time" : 1450099810, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Improve printing of overloaded denotations\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 14 14:30:10 2015 +0100]"},
{"name" : "44782f2e60a05b84676621f1399d59f657a636fd", "time" : 1450099810, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Add new whitelists tests.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 14 14:30:10 2015 +0100]"},
{"name" : "3bbc2bf62cebcf6fd7cb22d6b3e1227095e7964a", "time" : 1450099810, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Better diagnosis for cyclic references caused by class clashes.\n\nWe now get a cyclic reference when inheriting from an inner class\nwith the same name in an outer supertype. Since this was legal\nin Scala2 it's good to explain that particular case. Test case\nin overrideClass.scala\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 14 14:30:10 2015 +0100]"},
{"name" : "82f59af99df93e198b31b14a854fc22af97f04a9", "time" : 1450099810, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Fix problem handling SuperTypes in asSeenFrom\n\nA SuperType should behave just as the underlying ThisType in asSeenFrom.\nWithout this patch, compiling the ...ViewLike hierarachy crashes with\na YCheck error in resolveSuper. The underlying issue is that the very\ncomplicated tangle of supercalls does not type check because an asSeenFrom\nwith a SuperType prefix does not compute the right type.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 14 14:30:10 2015 +0100]"},
{"name" : "7cdbcdb3203dfd6a5d2bb099e06321da7d12fcd6", "time" : 1450099810, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Convert super. prefixes of types to this.\n\n`super` has no meaning for type membes. Harmonizing the\nprefix to `this` avoids spurious incompatibilities.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 14 14:30:10 2015 +0100]"},
{"name" : "3476bab33e9509963fd02aab10b4db3b891c9a85", "time" : 1450099809, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Better diagnostics for clashing classes\n\nWe do not allow same-named class members in supertraits\nof a mixin composition anymore. This commit gives a\nbetter error message and avoids a crash in RefChecks.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 14 14:30:09 2015 +0100]"},
{"name" : "c4238b13b3eb89abeac49aa814313c9adc75599c", "time" : 1450099809, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Drop redundant condition\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 14 14:30:09 2015 +0100]"},
{"name" : "db9d4f0fcccde4caa2a586a9d874dc479b104318", "time" : 1450099809, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Add test case\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 14 14:30:09 2015 +0100]"},
{"name" : "f829cf8ba742b149a10250710c46b5a1c49aa7cc", "time" : 1450099809, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Make some types of definitions symbolic\n\nThis is needed to ensure that the type of a definition node\n(ValDef, TypeDef, or DefDef) always refers to the symbol of\nthat definition.\n\nCaused a spurious error in selfReq to go away (so error count was\nupdated).\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 14 14:30:09 2015 +0100]"},
{"name" : "2a3f78673afe581fffec7f88039ba27a71ed2fe2", "time" : 1450099809, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Fix sleeper bug in ParamForwarding\n\nParamForwarding converts some parameters to nullary methods, yet\nit does not update the references to these parameters. Their signature\nis still NotAMethod, which is wrong. Causes subtle differences in\npeckle tests: a param accessor get type T before pickling (which is\nwrong), gets => T when reading back (which is right). Test case in\npickling/selfSym.scala.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 14 14:30:09 2015 +0100]"},
{"name" : "8203177068d02327e6c8ca576d2c704204500e27", "time" : 1450099808, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Adaptations to checkSymAssign\n\n(1) Also allow symbols to switch between a member of a class\n    and a member of its selftype. Seen in the wild in TraversableViewLike.scala.\n    Test case in pickling/selfSym.scala\n\n(2) Tidy up the error message.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 14 14:30:08 2015 +0100]"},
{"name" : "ac99941234da48427d1ca10823e45aa740baa354", "time" : 1450099808, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Do not report data races between symbols defined in class and its selftype\n\nAnalogous to the previous situation where we do not report a data race\nif the previous symbol comes from a superclass, we now do the same if\nthe previous symbol comes from a given self type. Makes overrideDataRace.scala pass,\nand finally enables stdlib test with TraverableViewLike.scala added.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 14 14:30:08 2015 +0100]"},
{"name" : "6c9168467d9278e13c06fc7e56ae7bf331ae0198", "time" : 1450099808, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Fix tricky bug coming up when compiling TraversableViewLike.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 14 14:30:08 2015 +0100]"},
{"name" : "4900abc7edcd209608cf7539a968cb375bdcb9c1", "time" : 1450099808, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Avoid unassigned type errors when typing curried functions.\n\nIf a partial application of a function has an error type,\nmake sure the whole tree also has an error type. Before,\nsometimes the type was missing which led to a partial application error.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 14 14:30:08 2015 +0100]"},
{"name" : "9b2d9b2f8a9cd3ea0b7c97e78771943aad165a64", "time" : 1450099808, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Remove stray assignment\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 14 14:30:08 2015 +0100]"},
{"name" : "611bf8623027a0936eaa7649b6c4200853b81d05", "time" : 1450099808, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Add whitelist entries which now work\n\nAfter changes to variance checker and fixes to stdlib.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 14 14:30:08 2015 +0100]"},
{"name" : "9eee92fb324d8ff7cf1e749cfe7ff37dfc45a014", "time" : 1450099807, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Fix of too strict variance checking.\n\nWhen following an alias type, go directly to aliased type.\nGoing via the TypeAlias link causes the current variance ot be\nnarrowed to 0.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 14 14:30:07 2015 +0100]"},
{"name" : "25f38589093dc070c400e9767474faf5fb4fc075", "time" : 1450099807, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Disregard BaseTypeArg parameters when variance checking.\n\nAllows us to compile immutable.Set.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 14 14:30:07 2015 +0100]"},
{"name" : "083b949f5710d363859892cb94fa60527e7516cd", "time" : 1450099807, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Make all arg bindings have flag BaseTypeArg.\n\nIt's unclear what the prupose of the previous restriction to Local only was.\nAnd we need it to be set for all arg bindings so that immutable.Set does not\nfail with a variance error.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 14 14:30:07 2015 +0100]"},
{"name" : "ef66db271c573adb0fc47dcce76bbac0fcc59ed7", "time" : 1450099807, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Rename TypeArgument -> BaseTypeArg flag.\n\nDescribes its meaning more accurately.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 14 14:30:07 2015 +0100]"},
{"name" : "886b74d63969458e808d251d65a9f6ecca56f262", "time" : 1450099807, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Remove redundant type parameter in testLifted\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 14 14:30:07 2015 +0100]"},
{"name" : "8a9e89afffb501ed7b312c21aa5e9981cd4e2b23", "time" : 1450017364, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Allow deep subtype for sets and related code in dotty/transform.\n\nThe change in subtyping led to a deep subtype recursion for sets.scala.\nIt seems legit, so the -Yno-deep-subtypes check is disabled.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 13 15:36:04 2015 +0100]"},
{"name" : "95098ba498b5317002395008376a565550189673", "time" : 1450017278, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Shortcut in derivesFrom for high bound Any.\n\nAny is a supertype of every other type, so no need to analyze types in detail.\nThis also fixes the cyclic reference error observed for sets.scala, but only\nfor the special case where the base class is Any.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 13 15:34:38 2015 +0100]"},
{"name" : "b59395843b872d5c95052aa1e2f81c2c2fc172f1", "time" : 1450017177, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Better explanation for adaptHkVariances\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 13 15:32:57 2015 +0100]"},
{"name" : "dba4b94443a8066df23ee7ccdb890ad048a06a2c", "time" : 1450017137, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Avoid cycle when computing sets\n\nThe tightened subtyping algorithm led to a cycle in baseTypeRef when\ncompiling sets.scala. This commit fixes the problem.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 13 15:32:17 2015 +0100]"},
{"name" : "2703543fb6e86603bae040fa4cf1ddf93498ef3f", "time" : 1450016222, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "In isSubType, follow aliases only if prefix is a path.\n\nComment explains why following aliases in general is incomplete and potentially unsound.\nThis makes Iter2 compile, but causes cyclic reference errors for pos/sets.scala.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 13 15:17:02 2015 +0100]"},
{"name" : "b350d209a20ebdf583d1dd2d3fdcd3be5073d2ef", "time" : 1450016063, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Perform variance adaptation only when needed in isSubType\n\nPreviously adaptIfHK was performed on every type application. This made\nt3152 fail. We now do this only on demand, in isSubType. t3152 now passes\nagain. But the change unmasked another error, which makes Iter2 fail to compile.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 13 15:14:23 2015 +0100]"},
{"name" : "88f24efb2858f46c146214bc7e51f5de17c31bc0", "time" : 1449841181, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Allow bottom types as hk type arguments\n\n    Fixes problem raised in #966.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Dec 11 14:39:41 2015 +0100]"},
{"name" : "b8e05d5b955de664e4a5872f43c8184014cecf05", "time" : 1449838159, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Add isBottomType/Class tests to Definitions\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Dec 11 13:49:19 2015 +0100]"},
{"name" : "6cb2a3bcee8bc4fb9ae4d148c8e620d3ae41040f", "time" : 1449826270, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Remove extraneous match\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Dec 11 10:31:10 2015 +0100]"},
{"name" : "fd44a171340a87359e267aeb63072bc5a8873b10", "time" : 1449824774, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Disallow hk type parameters in lower bounds.\n\nAlso: various cleanups to comments.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Dec 11 10:06:14 2015 +0100]"},
{"name" : "1c77b03cb9909c3a1bf4477e49e58d81b25f47b2", "time" : 1449742653, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Fix TypeLambda extractor.\n\nAs remarked by @smarter, argInfos does not work for type lambdas,\nso argBoundss is always Nil.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Dec 10 11:17:33 2015 +0100]"},
{"name" : "6fc069f55d9d29a781b9ca2e021f8b3273327c56", "time" : 1449577472, "y" : 0, "branches" : [0, 5, 6, 7, 11], "comment" : "Merge pull request #989 from dotty-staging/add/callback\n\nAdd initial CompilerCallback implementation for IntelliJ", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Tue Dec 8 13:24:32 2015 +0100]"},
{"name" : "169c8dc0dd06349b50bc8c059566d5b66314a133", "time" : 1449415314, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Cleanup of RefinedType subtype comparison.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 6 16:21:54 2015 +0100]"},
{"name" : "7f6decfe9b30396fb788a16639eb9e4700f532b0", "time" : 1449415064, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Code and documentation cleanups\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 6 16:17:44 2015 +0100]"},
{"name" : "b8c6e73eb970894c12eb11f3b99123f502d52ae7", "time" : 1449415064, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Move failing test to pending\n\nSeems to be a hk-type inference issue. Needs further investigation but\nis not high priority right now.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 6 16:17:44 2015 +0100]"},
{"name" : "378b96fc15eda32d5b645aa6b02442509b209147", "time" : 1449415064, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Fix tasty test failures\n\nby bringing homogenization of # $Apply projections back.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 6 16:17:44 2015 +0100]"},
{"name" : "f6d1153e193045ad4d8a1564e3c0cdb49b853a5b", "time" : 1449415064, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Avoid false positives when extracting AppliedType\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 6 16:17:44 2015 +0100]"},
{"name" : "50d265299ab99ace68e3813794559de2bbcdc91c", "time" : 1449415064, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Be DRY betweeen EtaExpand and LambdaAbstract\n\nAll Lambda abstractions, not just eta expansions, should\nuse actual parameter bounds, not the one retrieved from\nthe parameter symbols.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 6 16:17:44 2015 +0100]"},
{"name" : "651930949e370b21e46bedba0f58fc92e37a33f6", "time" : 1449415064, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Allow for F-bounded bounds in TypeLambda\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 6 16:17:44 2015 +0100]"},
{"name" : "56dd29d3d3b0524d03a93965160e651a5d757b92", "time" : 1449415063, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Fix printing of type lambdas\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 6 16:17:43 2015 +0100]"},
{"name" : "d186a333c55b738ee35a81cb185da2f3e7ab4742", "time" : 1449415063, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Reset constraint when one of several implicit arguments is not found.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 6 16:17:43 2015 +0100]"},
{"name" : "f8d82c2634dcf9d94037b107d49d088e89f7070f", "time" : 1449415063, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Switch to new hk scheme.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 6 16:17:43 2015 +0100]"},
{"name" : "dec21f5ea39a2c2c059c829ac16edd68f71793ee", "time" : 1449414562, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Better diagnostics for applyOverloaded.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 6 16:09:22 2015 +0100]"},
{"name" : "8cd50f7132fae4ca795d5fb5811421a43b79eb46", "time" : 1449414562, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Fully type annotate Printers\n\nThis prevents propagation changes leading to long\nrecompiles when a printer is changed.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 6 16:09:22 2015 +0100]"},
{"name" : "1fe3310c2008a29f9e3cf9e067005bf52527a0d3", "time" : 1449414562, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Fixes to TypeLambda and EtaExpansion extractors.\n\nMakes i815 compile.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 6 16:09:22 2015 +0100]"},
{"name" : "130c24c233e0b2b41be8e11ece1bd4cd6ebff00f", "time" : 1449414562, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Fix to TypeLambda over with a TypeBounds body\n\nTaking typeAlias is illegal in that case.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 6 16:09:22 2015 +0100]"},
{"name" : "8db7a9b8914e0f66207db9d998f1186f8e195f85", "time" : 1449414562, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Fix bug computing typeParams for hk types\n\nArg bounds do not count is bindings.\nAlso: TypeLambda's $Apply binding should be covariant,\nbecause the parameter is (not sure it matters though).\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 6 16:09:22 2015 +0100]"},
{"name" : "05c0e55850a5b086e38d3a54e937106f727fbe8e", "time" : 1449414561, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Fix bug computing typeParams for hk types\n\nArg bounds do not count is bindings.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 6 16:09:21 2015 +0100]"},
{"name" : "56e63ed4b081c0e4696a475aa4a468baa6491e4a", "time" : 1449414561, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Don't recognize type bounds as lambda abstractions\n\nPrinting bounds omits the \"<:\" otherwise.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 6 16:09:21 2015 +0100]"},
{"name" : "261087a97fc981dbc5cd2c57eab736aca668c3bc", "time" : 1449414561, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Fix problem with printing lambdas.\n\nPrevious implementation died because\nTermRef had no denotation.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 6 16:09:21 2015 +0100]"},
{"name" : "91a865cf9e5fff097249b3f14ced9deb0006fafe", "time" : 1449414561, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Base Application extractor on classSymbols\n\ntypeSymbols always have empty type parameter list.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 6 16:09:21 2015 +0100]"},
{"name" : "73bf06b4735b8a74c99ed185e52ae3350181f426", "time" : 1449414561, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "More uses of adaptIfHK\n\nAlso: fix EtaExpansion.\nAlso: Add some debug code to Applications, awaiting further fixes.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 6 16:09:21 2015 +0100]"},
{"name" : "2abcd02d2a2067ba78430262664f5d3ab9b61d00", "time" : 1449414561, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Use new adaptArgs for Scala2Unpickler\n\nAlso: fix adaptArgs and LambdaTrait to make it work.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 6 16:09:21 2015 +0100]"},
{"name" : "67d28339d91f912c2894a05110d713f077458feb", "time" : 1449414560, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Drop redundant check in beta reduce\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 6 16:09:20 2015 +0100]"},
{"name" : "e14be2d90f330835af86e85b2bca97a6d1b7cf06", "time" : 1449414560, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Fix adaptIfHK and drop rawTypeParams\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 6 16:09:20 2015 +0100]"},
{"name" : "e63f0585c7f120dbc8d9965d8729e831efd2f2ae", "time" : 1449414560, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Use typeapp extractors for printing\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 6 16:09:20 2015 +0100]"},
{"name" : "7eeb5657497536ebafd7bbf80ea74fbc805a3b77", "time" : 1449414560, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Extractors and other new functionality for type applications\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 6 16:09:20 2015 +0100]"},
{"name" : "f89b5628a66442edcc8c31193a559c6b5c32e837", "time" : 1449414560, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Add missing type params in test\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 6 16:09:20 2015 +0100]"},
{"name" : "0fde4b4902f81f9a020dbf460925596a276ab328", "time" : 1449414560, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Change hk naming scheme\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 6 16:09:20 2015 +0100]"},
{"name" : "df00eb195d86a3d1425029f2f2436029a757ee5d", "time" : 1449414559, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Disallow existentially bound parameters as type parameters\n\nDone in order to keep the basics as simple as possible.\nTreating existentially bound parameters as still instantiatable type\nparameters does not seem to add anything fundamental, and makes the\ntype system less regular.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 6 16:09:19 2015 +0100]"},
{"name" : "4c8db87e499e3a0f56a89ed0824b27230db32997", "time" : 1449414559, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Don't count partial applications as applications.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 6 16:09:19 2015 +0100]"},
{"name" : "cf794033ae42df0251fe2bc60051cb7dafb38023", "time" : 1449414559, "y" : 677, "branches" : [0, 5, 6, 7, 11], "comment" : "Drop requirement that an isRef type cannot be refined.\n\nIt seems to complciate things with no real purpose.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 6 16:09:19 2015 +0100]"},
{"name" : "7e63af3777c0ad5649d4ff60facbfdfa02b4b874", "time" : 1449414438, "y" : 0, "branches" : [0, 5, 6, 7, 11], "comment" : "Merge pull request #979 from dotty-staging/fix/hk-deep-subtype-2\n\nTypeComparer: delay looking up members of AndTypes", "author" : "PersonIdent[odersky, odersky@gmail.com, Sun Dec 6 16:07:18 2015 +0100]"},
{"name" : "80eb242a294b0af6ced4da2b9095bfcd0d628b29", "time" : 1449315703, "y" : 0, "branches" : [0, 5, 6, 7, 11], "comment" : "Merge pull request #988 from smarter/fix/compile-Seq\n\nReduce the amount of typing in Namer, fixes compiling Seq", "author" : "PersonIdent[odersky, odersky@gmail.com, Sat Dec 5 12:41:43 2015 +0100]"},
{"name" : "61dd887b124c9ba07ec1bd5e2a2e1ef7d3b1dc42", "time" : 1449266662, "y" : 749, "branches" : [0, 5, 6, 7, 11], "comment" : "Add tests for dotc.typer pickling/unpickling\n", "author" : "PersonIdent[VladimirNik, vladimir.nikolaev9@gmail.com, Fri Dec 4 23:04:22 2015 +0100]"},
{"name" : "ccf7f8ae4e09c1e5cbbc52d64ff0358203d29d5c", "time" : 1449151092, "y" : 750, "branches" : [0, 5, 6, 7, 11], "comment" : "Add initial CompilerCallback implementation for IntelliJ\n\nThis adds some simple callbacks to Dotty that should be enough to\nget basic integration from IntelliJ.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Thu Dec 3 14:58:12 2015 +0100]"},
{"name" : "47da63278147634c75ecd3d0b5f3709a8de2a2db", "time" : 1449078546, "y" : 0, "branches" : [0, 5, 6, 7, 11], "comment" : "Merge pull request #990 from lampepfl/DarkDimius-patch-4\n\nIndicate regex used for filtering out benchmarks.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed Dec 2 18:49:06 2015 +0100]"},
{"name" : "11a415433d4f7d9e1abbb1eeacb44e2795f493ae", "time" : 1449076171, "y" : 752, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Indicate regex used for filtering out benchmarks.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed Dec 2 18:09:31 2015 +0100]"},
{"name" : "2a5a19314201c06ea0b12391b6794bf2aeffeb9c", "time" : 1449068638, "y" : 0, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Merge pull request #985 from dotty-staging/tasty-core-test\n\nAdd test for dotc.core pickling/unpickling", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed Dec 2 16:03:58 2015 +0100]"},
{"name" : "0c970b1674686655439f6a81d4dbfc8d758878fc", "time" : 1449062571, "y" : 754, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Add tests for dotc.core pickling/unpickling\n", "author" : "PersonIdent[VladimirNik, vladimir.nikolaev9@gmail.com, Wed Dec 2 14:22:51 2015 +0100]"},
{"name" : "66ae931f2dc0a90a90fc92622a6c5ab615f1558c", "time" : 1448986326, "y" : 755, "branches" : [0, 5, 6, 7, 11], "comment" : "Desugar#makeAnnotated: Avoid unnecessary typing\n\nThe less typing we do during Namer, the better.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Tue Dec 1 17:12:06 2015 +0100]"},
{"name" : "60fb657649d800c03e8335892cd82455e7e34235", "time" : 1448986288, "y" : 755, "branches" : [0, 5, 6, 7, 11], "comment" : "Compile scala.collection.Seq without double-binding error\n\nThis commit fixes two issues which caused us to complete Seq too early and\nread it from the classpath instead of from the sources:\n- Evaluting RepeatedParamClass forced Seq, this is not necessary\n  because the type of RepeatedParamClass is a LazyType\n- TypeErasure#sigName on a Scala type always forced Seq, even if\n  the type is not a repeated param type.\n\nThis fixes #980.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Tue Dec 1 17:11:28 2015 +0100]"},
{"name" : "de529acd026419fba6897073881c8d9da7c5ae32", "time" : 1448982689, "y" : 0, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Merge pull request #987 from dotty-staging/tasty-dotc-reporting-test\n\nRemoved tasty_dotc_reporting test due to issue #986", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Tue Dec 1 16:11:29 2015 +0100]"},
{"name" : "9c2b838fba4de910ce72230f04266d19ff510398", "time" : 1448981953, "y" : 758, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Removed tasty_dotc_reporting test due to issue #986\n", "author" : "PersonIdent[VladimirNik, vladimir.nikolaev9@gmail.com, Tue Dec 1 15:59:13 2015 +0100]"},
{"name" : "6e4b4f4dd2f09ce787dfb2da4ae9fffe2b30b07a", "time" : 1448919039, "y" : 759, "branches" : [0, 5, 6, 7, 11], "comment" : "TypeComparer: delay looking up members of AndTypes\n\nIn ParFactory.scala we have checks that look like:\n  (Foo { type Bar = X }) & (Foo { type Bar = X }) <:< (Foo { type Bar = X })\nwhere `Foo` is a recursive type.\n\nBefore this commit, we would first try to check this by looking up `Bar`\nin the `AndType` on the left, which means looking it up in both branches\nand then merging the result, but the merge requires more subtyping\nchecks, which in turn require looking up a member inside an `AndType`,\nseemingly ad infinitum.\n\nWe now avoid this by checking if either branch of the `AndType` on the left\nis a subtype of the `RefinedType` on the right before looking up a member\nin the `AndType` itself.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Mon Nov 30 22:30:39 2015 +0100]"},
{"name" : "112564655f4f23552cb9ae48d0fdb7d8ac5b725c", "time" : 1448906161, "y" : 0, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Merge pull request #984 from dotty-staging/optimize-subtyping\n\nFix inefficieny in the presence of aliasing.", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Mon Nov 30 18:56:01 2015 +0100]"},
{"name" : "9e7e40b9f33aec952a9fcb05d45734dd19da0322", "time" : 1448901092, "y" : 761, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Update the comment of TypeApplications#argInfo\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Mon Nov 30 17:31:32 2015 +0100]"},
{"name" : "559801288d96a28e84f4b79c9033b507416caa90", "time" : 1448901092, "y" : 761, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Fixed comments\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Mon Nov 30 17:31:32 2015 +0100]"},
{"name" : "e77428eb0bf0d9f68f4055d686cbabe111a4afdf", "time" : 1448901092, "y" : 761, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Drop argumnt interpolation.\n\nIt turns out it's not needed because now all type arguments are\nexpressed as aliases. Interestingly dropping this feature shaved\n20% off the time off junit tests. Which seems to indicate that the\nhandling of type application is really performance critical.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Mon Nov 30 17:31:32 2015 +0100]"},
{"name" : "4ca8744da021642d9f943224950482b3344cf089", "time" : 1448901092, "y" : 761, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Avoid too eager computation in reporting.\n\nI noted a slowdown of about 25% (66sec -> 81sec) when compiling dotty even\nafter the subtype optimization (before it was 117sec).\nI tracked it down to the traceIndented fix which avoided questions to be evaluated\ntwice. But it also caused the question to be evaluated\nMaking the val lazy fixed the problem.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Mon Nov 30 17:31:32 2015 +0100]"},
{"name" : "bced61d0bb58e8e4da1c7e8ececb1c24b5e81843", "time" : 1448901092, "y" : 761, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "The change to do compareAlias early caused a dramatic slowdown of compilation\ncompileStdLib went from 45 sec to 230 sec. The problem were many redundant tests\nwhen every member of an alias chain was compared to every other.\n\nThe new scheme follows alias chains to their end before doing anything else.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Mon Nov 30 17:31:32 2015 +0100]"},
{"name" : "0a96cbe590218ab022ccdb2950790fbab32dedcb", "time" : 1448693546, "y" : 0, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Merge pull request #983 from dotty-staging/stable-modifier-pickling\n\nAdd pickling/unpickling of stable modifier", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Sat Nov 28 09:52:26 2015 +0300]"},
{"name" : "317ca3e4d45dfe31f50f87f60194ce2506c86fa8", "time" : 1448645248, "y" : 767, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Add pickling/unpickling of stable modifier\n\nPickling/unpickling of STABLE modifier allows to fix problem with\nunpickling of path-dependent types (#982)\n", "author" : "PersonIdent[VladimirNik, vladimir.nikolaev9@gmail.com, Fri Nov 27 18:27:28 2015 +0100]"},
{"name" : "2bb73c3bf1a6fef8bd77d762c99d02d499621ea3", "time" : 1448555275, "y" : 0, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Merge pull request #975 from smarter/fix/logging\n\nBetter logging, especially of exceptions", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Thu Nov 26 17:27:55 2015 +0100]"},
{"name" : "d4e42ea4f886a1a94459d40cfc6faec3ee513fad", "time" : 1448552971, "y" : 769, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Preload scala.util.control.NonFatal\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Thu Nov 26 16:49:31 2015 +0100]"},
{"name" : "bd079c7a271b4bc8007021b34de6bbacea9fa85f", "time" : 1448552971, "y" : 769, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Avoid repeated unnecessary logging in traceIndented\n\nWhile trying to debug #943 I noticed that the exception output from\ntraceIndented was interspersed with unrelated logging output, this\nhappened because `question` in traceIndented is by-name and was\nevaluated both before executing an operation and afterwards.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Thu Nov 26 16:49:31 2015 +0100]"},
{"name" : "ec2d0e46a608cad7c53d7eb0154e89b19d73f973", "time" : 1448531374, "y" : 0, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Merge pull request #978 from dotty-staging/companion-methods-duplication\n\nDuplication of companion methods after using FromTasty fixed", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Thu Nov 26 10:49:34 2015 +0100]"},
{"name" : "0afb2a357e1cdf0184af6570483d739b5fe84f3e", "time" : 1448487646, "y" : 772, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Duplication of companion methods after using FromTasty fixed\n", "author" : "PersonIdent[VladimirNik, vladimir.nikolaev9@gmail.com, Wed Nov 25 22:40:46 2015 +0100]"},
{"name" : "7ce2b3bec6c243658823f48032dce28064feeb98", "time" : 1448472445, "y" : 0, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Merge pull request #976 from smarter/fix/hk-deep-subtype\n\nisSubtype: try to dealias TypeRefs before recursively checking the prefixes", "author" : "PersonIdent[odersky, odersky@gmail.com, Wed Nov 25 18:27:25 2015 +0100]"},
{"name" : "3e714af5dbfbd8e61500bd0ede04cc39952f10ee", "time" : 1448464118, "y" : 774, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Update whitelist with more files that compile\n\nThanks to the previous commit, more files now compile without deep\nsubtyping errors.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Wed Nov 25 16:08:38 2015 +0100]"},
{"name" : "81b7ed9abb9627d541b795990980f4431b459380", "time" : 1448413877, "y" : 774, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "isSubtype: try to dealias TypeRefs before recursively checking the prefixes\n\nAs demonstrated by tests/pos/hk-deep-subtype.scala, we can avoid some\ndeep subtype recursions that result in stack overflows by doing this.\n\nFix #943.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Wed Nov 25 02:11:17 2015 +0100]"},
{"name" : "4463f5e705480c7da188695abdb0ccacf452103c", "time" : 1448230302, "y" : 0, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Merge pull request #969 from dotty-staging/change-swap-annot-args\n\nSwap order of arguments in annotations", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Sun Nov 22 23:11:42 2015 +0100]"},
{"name" : "b7aae3f3deeb219c79a808454563145bf1b15243", "time" : 1448226810, "y" : 777, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Swap order of arguments in annotations for Tasty\n", "author" : "PersonIdent[VladimirNik, vladimir.nikolaev9@gmail.com, Mon Nov 23 00:13:30 2015 +0300]"},
{"name" : "e7fdb416006cfa4091b90935c74b5602adb5f68e", "time" : 1448211797, "y" : 777, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Swap order of arguments in annotations\n\nThe fact that the annotation comes first is weird, because when I write\nan annotated type it's <type> @<annotation>. Also, annotated types\nare like RefinedTypes in that they derive from a parent type. And in\nRefinedTypes the parent comes first.\n\nSo swapping the arguments improves consistency.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 22 18:03:17 2015 +0100]"},
{"name" : "dce7053f3a6b859733253edcc82ad42b6ea3ed73", "time" : 1448121864, "y" : 0, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Merge pull request #967 from dotty-staging/tasty-tests\n\nNew tests for tasty", "author" : "PersonIdent[odersky, odersky@gmail.com, Sat Nov 21 17:04:24 2015 +0100]"},
{"name" : "7870cfc72bee2c1b6f45c02f903206f1af03ac03", "time" : 1448045390, "y" : 780, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "New tests for tasty\n", "author" : "PersonIdent[VladimirNik, vladimir.nikolaev9@gmail.com, Fri Nov 20 21:49:50 2015 +0300]"},
{"name" : "ea1ee475bdf8007907144b86b0aefaa88e100966", "time" : 1447975894, "y" : 0, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Merge pull request #965 from reactormonk/master\n\nFixed != comparison", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri Nov 20 00:31:34 2015 +0100]"},
{"name" : "8a438f2ccb6ad6361b5356f47c6f035001633fd0", "time" : 1447974545, "y" : 782, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Fixed != comparison\n\nBy linter:\ncomparing values of types Char and String using `!=' will always yield\ntrue\n", "author" : "PersonIdent[Simon Hafner, hafnersimon@gmail.com, Fri Nov 20 07:09:05 2015 +0800]"},
{"name" : "ea1373b32db36c0596c36d53e91e967a31ad682f", "time" : 1447877173, "y" : 0, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Merge pull request #963 from smarter/fix/poly-implicits\n\nFix ambiguity errors with polymorphic implicits", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Wed Nov 18 21:06:13 2015 +0100]"},
{"name" : "c2079f2f38d81577dd9710c9d0b044c599b18ec7", "time" : 1447813921, "y" : 784, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Annotate `isAsSpecific` with references to its documentation\n\nAlso reorder the cases to be in the same order as the documentation.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Wed Nov 18 03:32:01 2015 +0100]"},
{"name" : "7d76151109db168d025dfc0f6501fa7694e17053", "time" : 1447813921, "y" : 784, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Fix ambiguity errors with polymorphic implicits\n\nPreviously, `isAsSpecific(alt1, tp1, alt2, tp2)` did not handle\nhaving `tp2` be a polymorphic non-method type like `[A]Foo[A]`.\n\nAlso update the documentation of `isAsSpecific` to account for this\nchange, the new documentation is based on SLS § 6.26.3 but\nadapted to reflect the code.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Wed Nov 18 03:32:01 2015 +0100]"},
{"name" : "945334c8affd0dc5067316447e8384f1ea7025ad", "time" : 1447798868, "y" : 0, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Merge pull request #955 from dotty-staging/fix-#937\n\nFix #937", "author" : "PersonIdent[odersky, odersky@gmail.com, Tue Nov 17 23:21:08 2015 +0100]"},
{"name" : "5ccf5599dd02b377f8c29a9452edd4abf2f28f86", "time" : 1447794287, "y" : 787, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Add one more passing filt to whitelist\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Nov 17 22:04:47 2015 +0100]"},
{"name" : "44ccfe9a2867b9361994e8c529d0820b6e45985a", "time" : 1447794287, "y" : 787, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Fix bug with finger printing in delete.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Nov 17 22:04:47 2015 +0100]"},
{"name" : "da97bfb6e1284f906d529b62ca4c1c69e15c140e", "time" : 1447794130, "y" : 0, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Merge pull request #957 from dotty-staging/fix-#938\n\nFix #938", "author" : "PersonIdent[odersky, odersky@gmail.com, Tue Nov 17 22:02:10 2015 +0100]"},
{"name" : "3ec504cf4586dc99964b1b049eae745077c20b37", "time" : 1447792221, "y" : 790, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Fix comparison\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Nov 17 21:30:21 2015 +0100]"},
{"name" : "0a15bb5be1d7a6e8ee635ef3a5eea4e6094ebce0", "time" : 1447792221, "y" : 790, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Add test case\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Nov 17 21:30:21 2015 +0100]"},
{"name" : "7c6870e4d5ac3a9206aed16633c5f0a92fc97b5d", "time" : 1447792221, "y" : 790, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Compensate for getter transform in isSubType test\n\nGetters transform `T` to `=> T`. This means that `=> T <: T`\nmight need to be true after getters. Observed in the wild\ntree checking t938.scala after getters.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Nov 17 21:30:21 2015 +0100]"},
{"name" : "bd76fbaec088de73deeb443681071bd311624dc1", "time" : 1447792221, "y" : 790, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Fix bug in phase identification for Ycheck\n\n-Ycheck:era checked after phase resolveSuper. This was due to an overly simplistic containsPhase\ncheck.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Nov 17 21:30:21 2015 +0100]"},
{"name" : "b02c80c2c240b58e8030d2ccf7dc7d7a36b3afe9", "time" : 1447792220, "y" : 790, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Fix #938 - escaping reference.\n\nNeed to avoid also symbols in ThisTypes\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Nov 17 21:30:20 2015 +0100]"},
{"name" : "57d05d3cc2456bcb7bfa743ad664690ad5a3aaac", "time" : 1447791077, "y" : 0, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Merge pull request #958 from dotty-staging/companion-methods\n\nLinks between companions after unpickling are added", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Tue Nov 17 21:11:17 2015 +0100]"},
{"name" : "9c30c9b13d2eb95f4d86368ed27cf7e63e468dee", "time" : 1447787064, "y" : 796, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Links between companions after unpickling are added\n", "author" : "PersonIdent[VladimirNik, vladimir.nikolaev9@gmail.com, Tue Nov 17 22:04:24 2015 +0300]"},
{"name" : "eefa6112cc2c9e26dfd22bbc7532332d71aa6b43", "time" : 1447780220, "y" : 0, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Merge pull request #950 from dotty-staging/fix-#916\n\nAdapt type parameters of typed eta expansion according to expected variances", "author" : "PersonIdent[odersky, odersky@gmail.com, Tue Nov 17 18:10:20 2015 +0100]"},
{"name" : "b37b9e3b9f675c5b312f85511d20aaa50200eff1", "time" : 1447779243, "y" : 798, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Extend synchronized scope in newTermName\n\nJust noted that the previous scope might have been too small.\nWe compute the bucket index with the table size before going into the\nsynchronized. But that might mean we see a stale table size.\nLet's see what this gives us.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Nov 17 17:54:03 2015 +0100]"},
{"name" : "17a5066c0692a0ad0cdc5a38e3b549ace8fc5e06", "time" : 1447779219, "y" : 798, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Packages are never fully completed\n\nThe previous commit made packages always fully completed.\nThis is wrong - since new members can be added to packages\nat any time, packages are never fully completed.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Nov 17 17:53:39 2015 +0100]"},
{"name" : "e5fcf57b1e62e420c611ed58d475d081d95f9048", "time" : 1447779219, "y" : 798, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Fix problems arising when hierarchies of classes are under completion\n\nFix problems arising when hierarchies of classes are under completion at the same time.\nIn this case it can happen that we see a subclass (e.g. Arrays.scala) which depends\non a superclass (e.g. GenTraversableLike.scala) that itself does not have its parents\ndefined yet. Previously, several things went wrong here\n\n - One of the base classes would be marked as frozen, even though it dod not have all\n   members entered yet. This led to an error in finger printing.\n - The baseclasses and super class bits of the subclass would be computed before the parents\n   of the middle class were known. The baseclasses would then be chached, leading to\n   false results for isDerivedFrom.\n\nWe need to refine the logic for computing base classes, super class bits, and fingerprints\nto account for that issue.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Nov 17 17:53:39 2015 +0100]"},
{"name" : "c435a8a2e3df50f3ca41f2f9f9f9d8d22a037785", "time" : 1447779218, "y" : 798, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Avoid setting info with parents too early when unpickling\n\nAdding parents signals (via SymDenotation.fullyDefined) that\nthe class can now be frozen. So this should be done only after all\nmembers are entered.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Nov 17 17:53:38 2015 +0100]"},
{"name" : "7a61c8693fd7f3431d5a80829a6a051151969122", "time" : 1447779176, "y" : 798, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Revert: Make hash codes on type more predictable.\n\ngetSimpleName crashes on some module names created by scalac.\n\nMay help finding the partest issue. (reverted from commit c11646c40042404550eb983577c9e7096a40502a)\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Nov 17 17:52:56 2015 +0100]"},
{"name" : "f9c8675be88426214a92c5f0202ff24c266bbf23", "time" : 1447774745, "y" : 0, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Merge pull request #962 from dotty-staging/fix-#947\n\nFix #947", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Wed Nov 18 00:39:05 2015 +0900]"},
{"name" : "c595c56d834113f275f246d681f8acff42059254", "time" : 1447773386, "y" : 804, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "scala-collections.whitelist: remove stray 'x' that broke the test\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Tue Nov 17 16:16:26 2015 +0100]"},
{"name" : "199dca76a3a6771272a04b1cb717a4b8f04dd9a7", "time" : 1447764593, "y" : 798, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Harden definition of isScalaTrait\n\nExclude false positives such as `Lambda|` be requiring\nthat lambda traits are defined in the Scala package.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Nov 17 13:49:53 2015 +0100]"},
{"name" : "d53da9502fe0cb98ed5f8dfe64fbc6e62c0e3368", "time" : 1447764593, "y" : 798, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Eta expand according to expected type parameter variance\n\nWhen eta expanding a type `C` to `[vX] => C[X]` the variance `v`\nis now the variance of the expected type, not the variance of the\ntype constructor `C`, as long as the variance of the expected type\nis compatible with the variance of `C`.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Nov 17 13:49:53 2015 +0100]"},
{"name" : "48714abbd66ab22c5567ae16af38b9ddd65ef8c2", "time" : 1447760660, "y" : 804, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Add ArrayBuilder to whitelist\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Nov 17 12:44:20 2015 +0100]"},
{"name" : "e1bbb348eb06ee19aed4380b9f1f594508e1de0f", "time" : 1447760542, "y" : 804, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Test case for #947\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Nov 17 12:42:22 2015 +0100]"},
{"name" : "365d3a5fe60da2d6ed004d377adf086a1bf841ba", "time" : 1447760530, "y" : 804, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Extend implicits test\n\n... to show that we support implicit patterns.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Nov 17 12:42:10 2015 +0100]"},
{"name" : "8a70ae85c829385e2cdc0c58e4e7438c55135492", "time" : 1447760501, "y" : 804, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Add file to scala-collections-whitelist\n\nThis witnesses that #945 is fixed (by pushing a fix to the\nScala file to dotty-library).\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Nov 17 12:41:41 2015 +0100]"},
{"name" : "e59c0baaff669d54eb502b2142783d9f5d75e3b5", "time" : 1447760223, "y" : 804, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "More refined treatement of pattern type variables\n\nPreviously all lower case names were treated as variables\nin patterns. But that made code like\n\n    x: cls\n\ncrash the compiler if `cls` was a class. Also, it owuld preventing\nthis idiom unless one wrote\n\n    x: `cls`\n\nWe now do it like scalac and treat lower case names as variables\nonly in arguments of types.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Nov 17 12:37:03 2015 +0100]"},
{"name" : "6b061b5b94fb4e13a97274b28e0ab9ac78b69f27", "time" : 1447690161, "y" : 0, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Merge pull request #960 from dotty-staging/fix-#941\n\nFix #941", "author" : "PersonIdent[odersky, odersky@gmail.com, Mon Nov 16 17:09:21 2015 +0100]"},
{"name" : "2c187400ba7f88ccca5d805054ee06bab4cdcd25", "time" : 1447684449, "y" : 813, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Enable more parts of whitelist\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 16 15:34:09 2015 +0100]"},
{"name" : "9fed7680322ea30aefff9cce214918af515a99a1", "time" : 1447684420, "y" : 813, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Avoid merge errors in Scala2 mode\n\nLinearize instead. It would be nice to be able to give a\nmigration warning here, but unfortunately we do not have\na position at the point the warning would be generated,\nand it feels like overkill to do another kind of exception\nthat gets propagated and caught in typer.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 16 15:33:40 2015 +0100]"},
{"name" : "44d07275693ea0997b102b735db8703cbbbbfb74", "time" : 1447682135, "y" : 813, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Generalize test to function classes\n\nThe previous test was too struct, missed cases where\nsome arguments of the function were unbound. i583a.scala\ncontains a test case.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 16 14:55:35 2015 +0100]"},
{"name" : "a7b95b8e40df320e8f4aee59a3e382957c88d517", "time" : 1447681880, "y" : 813, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Better diagnostic for migration warnings\n\nFlag them as \"migration warning\" rather than just \"warning\".\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 16 14:51:20 2015 +0100]"},
{"name" : "10ee00edf779fbf8ad74886e523811dd96fbab5e", "time" : 1447681842, "y" : 813, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Flag trailing `_' following non-function as an error\n\nIf `x` is not a function or method, then `x _` should be disallowed.\nscalac accepts this and converts it to () => x instead. I'd like\nto drop this because it's unnecessary and non-obvious. If\n-language:Scala2 is on, the behavior is like Scala 2's but\na migration warning is issued.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 16 14:50:42 2015 +0100]"},
{"name" : "d8c4ab697aa97da509bc2c943a65e4ec78917211", "time" : 1447680336, "y" : 813, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Make secondary constructor type parameters aliases\n\nMake secondary constructor type parameters aliases of the\nenclosing class parameters. Test case in i941.scala. Observed\nin the wild when trying to typecheck Streams.scala.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 16 14:25:36 2015 +0100]"},
{"name" : "08b53243bfaadaf8fd590bf0a30a5dfa667ca38e", "time" : 1447665028, "y" : 0, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Merge pull request #956 from dotty-staging/companion-methods\n\nRemove duplication of companion methods in Scala2Unpickler", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon Nov 16 10:10:28 2015 +0100]"},
{"name" : "a369a810114884b2cf8c57103e564fda12c72b3d", "time" : 1447625418, "y" : 820, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Remove duplication of companion methods in Scala2Unpickler\n", "author" : "PersonIdent[VladimirNik, vladimir.nikolaev9@gmail.com, Mon Nov 16 01:10:18 2015 +0300]"},
{"name" : "522c1f21b6b868a364534bc7cf4bb4f62e1b1b45", "time" : 1447252522, "y" : 0, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Merge pull request #936 from dotty-staging/more-collections\n\nGet more collections whitelisted", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed Nov 11 15:35:22 2015 +0100]"},
{"name" : "f838a747d240d157a2c3250cef97b6937b56e8aa", "time" : 1447252485, "y" : 0, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Merge pull request #946 from dotty-staging/more-predictable-hashes\n\nMake hash codes on type more predictable.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed Nov 11 15:34:45 2015 +0100]"},
{"name" : "d3ba65d9cc3bbeba202aff3527c17d66bedbe153", "time" : 1447193139, "y" : 0, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Merge pull request #921 from dotty-staging/polytypes-hashcodes\n\nAdd stable hash codes to PolyTypes and PolyParams.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Tue Nov 10 23:05:39 2015 +0100]"},
{"name" : "c11646c40042404550eb983577c9e7096a40502a", "time" : 1447170214, "y" : 824, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Make hash codes on type more predictable.\n\nMay help finding the partest issue.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Nov 10 16:43:34 2015 +0100]"},
{"name" : "fc5e2cf858e6b6aec3ac7b6cac0e899a388281dc", "time" : 1447170069, "y" : 825, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Address review comments.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Nov 10 16:41:09 2015 +0100]"},
{"name" : "697253ce65c48fc734f0cd3332788c79a2de5acb", "time" : 1447169396, "y" : 826, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Remove leftover empty lines\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Nov 10 16:29:56 2015 +0100]"},
{"name" : "c86f8d3b788836d6112e45f555c803f1894f5715", "time" : 1447169313, "y" : 826, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Change diagnosis of GenericTraversableTemplate.scala.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Nov 10 16:28:33 2015 +0100]"},
{"name" : "85a39ff9fbf8498ce71d2467ac8cc42bcd4220f0", "time" : 1447169020, "y" : 826, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "This cyclic ref is fixed.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Nov 10 16:23:40 2015 +0100]"},
{"name" : "296caf5da808fa208b670ff0c5c36d928e9bb81c", "time" : 1447168994, "y" : 826, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Tailrec bug is fixed.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Nov 10 16:23:14 2015 +0100]"},
{"name" : "bd54033336526864340d6127a85be71b61ed4bad", "time" : 1447167684, "y" : 826, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Revert \"Check that Iterator.scala compiles on jenkins.\"\n\nThis reverts commit 05e47a4ac03cad65932a5bbddf506b91e6604f38.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Nov 10 16:01:24 2015 +0100]"},
{"name" : "bdd291c120b3e9592d068083434be6f54e6e355d", "time" : 1447167684, "y" : 826, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Revert \"Go back to sbt 0.13.5 until 0.13.9 is published on type safe artifactory\"\n\nThis reverts commit 2f41c73ee86a56b190758baaf5999ed85d2f57a1.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Nov 10 16:01:24 2015 +0100]"},
{"name" : "d46a053457043c312461bdbb34cd89e56fe65b79", "time" : 1447167684, "y" : 826, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Add more generic classes that compile\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Nov 10 16:01:24 2015 +0100]"},
{"name" : "cd684964dd94617af8c021d33d86bc5f0447759d", "time" : 1447167684, "y" : 826, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "More deep subtype failures.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Nov 10 16:01:24 2015 +0100]"},
{"name" : "a74f3995890c0cdaafbfe33a207f8932e268f3eb", "time" : 1447167684, "y" : 826, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Add more generic classes that compile\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Nov 10 16:01:24 2015 +0100]"},
{"name" : "3ef85c06d000deb072686f75644886968162080a", "time" : 1447167684, "y" : 826, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Showcase #943\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Nov 10 16:01:24 2015 +0100]"},
{"name" : "c65e8d7e40135ed8619ec683dc732c38d733c8ce", "time" : 1447167684, "y" : 826, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "HasNewBuilder and HasNewCombiner compile\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Nov 10 16:01:24 2015 +0100]"},
{"name" : "66be6f2e05f10ef8f15be0a209510fa1b88aee0c", "time" : 1447167684, "y" : 826, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "GenericSeqCompanion compiles\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Nov 10 16:01:24 2015 +0100]"},
{"name" : "0c29307c63a77b467269e2f11489de4bee918fe1", "time" : 1447167684, "y" : 826, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Another cyclic ref\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Nov 10 16:01:24 2015 +0100]"},
{"name" : "77d108fad6e05acb7c85b1beac6f5c72834948a6", "time" : 1447167684, "y" : 826, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "One more cyclic ref\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Nov 10 16:01:24 2015 +0100]"},
{"name" : "be0fae422d2e7d0145696af88f8576efbe926c04", "time" : 1447167684, "y" : 826, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Start adding scala.collections.generic.*\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Nov 10 16:01:24 2015 +0100]"},
{"name" : "6581e060ff59447f4e9d980bc9c87b917988008b", "time" : 1447167684, "y" : 826, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "TrieIterator uses early definitions.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Nov 10 16:01:24 2015 +0100]"},
{"name" : "2cbe2c7e34b998fd326cee1a53b5f0fec0a90cdd", "time" : 1447167684, "y" : 826, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Add TreeMap and TreeSet.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Nov 10 16:01:24 2015 +0100]"},
{"name" : "e714fb85d2863e4509c6e409309b98b12a7f492a", "time" : 1447167684, "y" : 826, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "showcase #941\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Nov 10 16:01:24 2015 +0100]"},
{"name" : "397bf67f623f259d413d1a4acc39b50171c28ecb", "time" : 1447167684, "y" : 826, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Showcase #942\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Nov 10 16:01:24 2015 +0100]"},
{"name" : "b074d574d494045e468421a6d7edb89cb8b6a25d", "time" : 1447167684, "y" : 826, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Add more collections that compile\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Nov 10 16:01:24 2015 +0100]"},
{"name" : "dd63002ee6e27624eedff42ea92490bc0ceec62c", "time" : 1447167684, "y" : 826, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Showcase #940\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Nov 10 16:01:24 2015 +0100]"},
{"name" : "f68d9f19881dbe4caf61dbdaaee139f95b689859", "time" : 1447167684, "y" : 826, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Add Map and MapLike\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Nov 10 16:01:24 2015 +0100]"},
{"name" : "4d9d8a894b430fb7a0fe13842ecbf37a1a87009a", "time" : 1447167684, "y" : 826, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Showcase #939\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Nov 10 16:01:24 2015 +0100]"},
{"name" : "b217275764586754c4a179329fc8f526da42f5c0", "time" : 1447167684, "y" : 826, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Try to add ListMap and ListSet\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Nov 10 16:01:24 2015 +0100]"},
{"name" : "1265d3910e92cc6855c45c0cc3dc282df4961dff", "time" : 1447167684, "y" : 826, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Showcase #939\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Nov 10 16:01:24 2015 +0100]"},
{"name" : "7ad71a6a5d16882cda2ed1c243e78561ab0f4879", "time" : 1447167684, "y" : 826, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Start adding more immutable collections.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Nov 10 16:01:24 2015 +0100]"},
{"name" : "92d2c5258b4a968eff49e9e59662c8b3f0fa8db8", "time" : 1447167684, "y" : 826, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Add more classes that compile\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Nov 10 16:01:24 2015 +0100]"},
{"name" : "aed8bb039502fade09eb115d2ca81a2cc03a66da", "time" : 1447167684, "y" : 826, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "One more cyclic reference.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Nov 10 16:01:24 2015 +0100]"},
{"name" : "878c7c7726d7c285b9d5434380fc21aa97b8fe6f", "time" : 1447167684, "y" : 826, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "One more manifestation of #916\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Nov 10 16:01:24 2015 +0100]"},
{"name" : "499c25118dca0c6d52e8ba00f6fa5fd6cf733d7d", "time" : 1447167684, "y" : 826, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Showcase #938\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Nov 10 16:01:24 2015 +0100]"},
{"name" : "5a2e4ef3a515e07bcae1a38193f6dcb93ba8a094", "time" : 1447167684, "y" : 826, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "One more cyclic reference.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Nov 10 16:01:24 2015 +0100]"},
{"name" : "17b48b54dad0c689af20c596bb2e71ebc8efbd6d", "time" : 1447167684, "y" : 826, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Add more collections that compile\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Nov 10 16:01:24 2015 +0100]"},
{"name" : "38df9a44747da2328fa9655c6e3c0e0e6501acb7", "time" : 1447167684, "y" : 826, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Showcase #937\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Nov 10 16:01:24 2015 +0100]"},
{"name" : "9a999999f098d8f71c37589acde7b2fb9a6985ce", "time" : 1447167652, "y" : 826, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Disable compilation of GenSeq and GenSeqLike.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Nov 10 16:00:52 2015 +0100]"},
{"name" : "21f5b6ab806a5082b365e746f2e36ebf4ddf6c3c", "time" : 1447167612, "y" : 826, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Showcase #935\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Nov 10 16:00:12 2015 +0100]"},
{"name" : "f24ea5a4998b6ef5ab6bd7167512d2decf2c88b8", "time" : 1447167578, "y" : 826, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Add more collections to whitelist.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Nov 10 15:59:38 2015 +0100]"},
{"name" : "52872cb21e5f898c6acfdc8c19d1d10c1224460c", "time" : 1447167512, "y" : 826, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Check that Iterator.scala compiles on jenkins.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Nov 10 15:58:32 2015 +0100]"},
{"name" : "7cfd3cad248f4b82da61d324c2724e779ddc5fe0", "time" : 1447167494, "y" : 0, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Merge pull request #928 from dotty-staging/stdlib-definitions\n\nMake Definitions survive recompilation of core definitions.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Tue Nov 10 15:58:14 2015 +0100]"},
{"name" : "f8169b4aac2e80ce7e87fcb20c4da23c99806b04", "time" : 1447167458, "y" : 0, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Merge pull request #944 from dotty-staging/fix-tailrec\n\nTailrec: fix compilation of IndexedSeqOptimized", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Tue Nov 10 15:57:38 2015 +0100]"},
{"name" : "9a9436a776aab803a55b8127c68754358b32510f", "time" : 1447151351, "y" : 865, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "CrossCastAnd: reimplement it in more compact way.\n\nNote that there is a slight difference in behaviour:\n\nit will be unconditionally adding cast even if its not needed.\n\nFor example in callsFoo1 cast is not needed(erasure will insert a correct one).\n```\nclass A{\n  private def foo = 1\n  def callsFoo1(other: A & B): Int = other.foo\n  def callsFoo2(other: B & A): Int = other.foo\n}\n\ntrait B {\n  def foo(i: Int) = i\n}\n```\n\nThough as AndTypes are uncommon I do not expect this to have\n non-negligible impact on performance.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Nov 10 11:29:11 2015 +0100]"},
{"name" : "49e03c6b0d4eaef5c4571fc953d3aa17c1b7841a", "time" : 1447150370, "y" : 865, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "CrossCastAnd: Fix issue with Phases.\n\nRight part of and type should not be widened,\nas dotty could have used non-widened type to drive type inference.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Nov 10 11:12:50 2015 +0100]"},
{"name" : "ffb6d24cde5dff8288c923cac833f301a2189cea", "time" : 1447148435, "y" : 865, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Test that private member selection on AndTypes works.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Nov 10 10:40:35 2015 +0100]"},
{"name" : "813b5f36faf4a6d55f2e82d2bc457a066d8eaccd", "time" : 1447148404, "y" : 865, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "New phase: crossCastAnd.\n\nThis transform makes sure that all private member selections from\nAndTypes are performed from the first component of AndType.\nThis is needed for correctness of erasure.\nSee `tests/run/PrivateAnd.scala`\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Nov 10 10:40:04 2015 +0100]"},
{"name" : "949c48e0f325afa29ebc70e94de17d525b26386e", "time" : 1447094206, "y" : 869, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Get more info on Heisenbugs\n\n1) Check that searched scope is consistent\n2) Do a linear search for symbol with name, and report\n   if something was found that way.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 9 19:36:46 2015 +0100]"},
{"name" : "30dc9241f98f5128a6f9ae8dffea47d751255c6d", "time" : 1447092163, "y" : 865, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Add minimized example that allows to reproduce issue in erasure.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Nov 9 19:02:43 2015 +0100]"},
{"name" : "f44de2d3b3b0d99276daf3f7b3d6c5074e6c2442", "time" : 1447084079, "y" : 865, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Tailrec: fix compilation of IndexedSeqOptimized\n\nFixed #912\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Nov 9 16:47:59 2015 +0100]"},
{"name" : "b112b2b7c5caa11675242e7c79fe0461673e7668", "time" : 1447081176, "y" : 869, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Print missing ref diagnostics on stderr\n\nWas stdout, but this gets mixed up with the exception printing on stderr.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 9 15:59:36 2015 +0100]"},
{"name" : "581960acfe3ff12e3e738ee5714f418d6baf90e7", "time" : 1447080342, "y" : 869, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Avoid cyclic reference errors when unpickling classes\n\nSet info early in order to avoid cyclic reference errors.\nErrors were observed when compiling\n\n    scala/Predef.scala scala/package.scala scala/collection/GenSeqLike.scala\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 9 15:45:42 2015 +0100]"},
{"name" : "b23c6b8a626a99270c5495c9c55e214c55a5696b", "time" : 1447080341, "y" : 869, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Don't inspect info when dealiasing classes\n\nForces a bit less, and could be more efficient.\nDid not seem to make a difference with current\nCyclicReferences though, except that cyclic\nerror happened a bit later in the sequence.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 9 15:45:41 2015 +0100]"},
{"name" : "e8b07a33e085136a70b68f5172153c8e557c89f9", "time" : 1447080341, "y" : 869, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Better diagnosis from completions printer\n\nTrack starts and ends of completions using indentation.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 9 15:45:41 2015 +0100]"},
{"name" : "9fe9865d462a646ca122f9a00bd3ad5595905e90", "time" : 1447080341, "y" : 869, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "More info when TreeChecker fails\n\nNow also provides compilation unit.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 9 15:45:41 2015 +0100]"},
{"name" : "02f0c7909eb26be8556e278a638674ed585916d5", "time" : 1447080341, "y" : 869, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Trying to get more diagnostics out of TreeChecker\n\nAgain it dies without an exception trace. Is partest eating error output?\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 9 15:45:41 2015 +0100]"},
{"name" : "137715529d51e489c291e4e881842ac45532e971", "time" : 1447080341, "y" : 869, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Make dir.list synchronized.\n\nJust a grap at straws to get a handle for the\nmissing reference problem.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 9 15:45:41 2015 +0100]"},
{"name" : "4007e71ecaf17d794ba5fc8aa8d2700efc3e3263", "time" : 1447080341, "y" : 869, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "More refined Retyping tracing\n\nInstead of simply dropping all Retyper error traces, we now\nsend them to the config.Printers.transforms printer, so what happens depends\non the value of that printer.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 9 15:45:41 2015 +0100]"},
{"name" : "224637c1cd0524d538cdd6fe261746f2c10b46ff", "time" : 1447080341, "y" : 869, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Disable \"Exception while typing\" trace in retyper.\n\nI looked a some of the failures so far, and in each case we got\na huge \"exception while typing\" cascade but then no actual error!\nBuffer overflow? To find out more I disabled the trace for now.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 9 15:45:41 2015 +0100]"},
{"name" : "0e14e70b1bb4b079990b952ada3e8dd6b8de955d", "time" : 1447080340, "y" : 869, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Generalize MultiArrayOf to arrays of wildcards\n\nNeeded for both ClassTags and instance of checks. This makes\nscala/Array.scala compile.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 9 15:45:40 2015 +0100]"},
{"name" : "820bd7ec55bc8ef621204dc82f56a80e2d2459f0", "time" : 1447080340, "y" : 869, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Avoid taking references before toplevel symbols are entered.\n\nTaking a reference means that the symbol will be brought forward into the current run,\nthen if the same symbol is entered from source, a datarace ensues.\n\nThis affected the ProductN symbols because these are automatically added to a case class\nsuring desugaring.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 9 15:45:40 2015 +0100]"},
{"name" : "27e65efdf56f7fc9968d3a9ee63022aa9dc34a24", "time" : 1447080340, "y" : 869, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Enable compilation of primitive types.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 9 15:45:40 2015 +0100]"},
{"name" : "f93167dbd1edf4acb4eb359a87e16a18a98ae349", "time" : 1447080340, "y" : 869, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Don't try to transform sources of primitive value classes after FrontEnd.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 9 15:45:40 2015 +0100]"},
{"name" : "e8687d683b7cb1642f007b991da420caba9b4898", "time" : 1447080340, "y" : 869, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Make symbol methods in Definitions depend on implicit context\n\nOtherwise they would always return the symbol in the original context\nwhere Definitions was first created.\n\nAlso, cache two more arrays of symbols per run.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 9 15:45:40 2015 +0100]"},
{"name" : "a1bd4dc57c9f1dbf548fa9f6ea3c4d2895ca1d35", "time" : 1447080340, "y" : 869, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Rename AnnotRef -> AnnotType\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 9 15:45:40 2015 +0100]"},
{"name" : "4f01f62ac216fa9034d343828aa6f4be626d9b36", "time" : 1447080340, "y" : 869, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Shorten ..Class.typeRef to ..Type\n\nSince we now have two forms of (almost) everything in Definitions,\nmight as well profit from it.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 9 15:45:40 2015 +0100]"},
{"name" : "2d7a05fa46016ea54e10a80735e04b33fd0938d1", "time" : 1447080339, "y" : 869, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Fix dotty compilation problem in Definitions\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 9 15:45:39 2015 +0100]"},
{"name" : "af6ffc319cb23c5ade01251a93810f7a33429e58", "time" : 1447080339, "y" : 869, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Renamings in Definitions\n\nTypeRef becomes Type, thus removing duplicates. Where\n...Type was used in an extraction (e.g. ArrayType(...),\nFunctionType(...)), we now use ...Of.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 9 15:45:39 2015 +0100]"},
{"name" : "5398c5a723b0f8b0d35e6c3ad230c5046169e837", "time" : 1447080339, "y" : 869, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Avoid overhead of generating symbol sets on each access\n\n1) Have symbol sets cached per run\n2) Use methods Denotation#isPrimitiveValueClass, Denotation#isNumericValueClass\ninstead of calling contains directly on symbol sets.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 9 15:45:39 2015 +0100]"},
{"name" : "5db52d25256568cf7d8c2335ee733a38b059b5ad", "time" : 1447080339, "y" : 869, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Make Set[TypeRef]s private\n\nContains tests on thsoe sets would be flakey anyway.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 9 15:45:39 2015 +0100]"},
{"name" : "bf38d8cebb81ea42c3de7c9f5bbaddc3ec45fc8a", "time" : 1447080339, "y" : 869, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Remove/hide value class maps\n\nRemove unneeded maps and make the ones that are needed\nprivate. Reason: Maps indexed with TypeNames are prone\nto misuse; should be accessed only with names of known\nprimitive classes.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 9 15:45:39 2015 +0100]"},
{"name" : "dfca53ea14970e9071f943ffa6662cb7ce9ed8ca", "time" : 1447080339, "y" : 869, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Move refType/Class maps from Definitions to CapturedVars\n\nMaps should not have TypeRefs as keys, yet symbols are not stable\nfor recompilation. Solution: Construct these maps over symbols but\nmove them to CapturedVars#Transform where they will be re-built\non each run.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 9 15:45:39 2015 +0100]"},
{"name" : "33b284f23906a4584472381dceb8b535f890b050", "time" : 1447080338, "y" : 869, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Make BoxedUnit_UNIT a def\n\nWas a lazy val, but this is not stable under recompilation.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 9 15:45:38 2015 +0100]"},
{"name" : "d7424c032d0f1b4de2e93d48506c80c5a0f44d5b", "time" : 1447080338, "y" : 869, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Match on _name rather than TypeRef in scalaPrimitives\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 9 15:45:38 2015 +0100]"},
{"name" : "a2c1d2ae22890570322c8c101174527290adceb6", "time" : 1447080338, "y" : 869, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Standardize requiredMethod calls\n\nRemve versions in Symbols, always go through version in\nDenotations. Avoids having two equivalent ways to do the same thing.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 9 15:45:38 2015 +0100]"},
{"name" : "23be0fddeec6d6c280f277cd06a7f576dc8b38a6", "time" : 1447080338, "y" : 869, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Standardize naming and definition order of annotation classes\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 9 15:45:38 2015 +0100]"},
{"name" : "687dec19304e87536f07fb4e65338121ed1b10c7", "time" : 1447080338, "y" : 869, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Use more standard way to define LanguageModuleClass\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 9 15:45:38 2015 +0100]"},
{"name" : "3254690408400e7625a9efdc5600aabae3423611", "time" : 1447080338, "y" : 869, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Make isPolymorphicAfterErasure a method\n\nCan't be a lazy val, because one of the symbols it tests\n(`newRefArray`) can be recomputed.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 9 15:45:38 2015 +0100]"},
{"name" : "0db1043fe7a473a1065a85664b3596f9257480a4", "time" : 1447080337, "y" : 869, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Harmonize naming conventions for BoxedUnit\n\nAlso, delete unused `uncheckedStableClassRef` entry.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 9 15:45:37 2015 +0100]"},
{"name" : "02164c3ed561dba0e65ee6f57e7d1821d7490971", "time" : 1447080337, "y" : 869, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Index primitive value class maps by name, not TypeRef\n\nTypeRefs can have several representations for logically the\nsame type, so they don't make good keys.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 9 15:45:37 2015 +0100]"},
{"name" : "8978ae6dfabae562fb5dcf4c7f66983d4d865892", "time" : 1447080337, "y" : 869, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "First versions of Definitions based on TypeRefs not Symbols.\n\nSymbols are not stable between runs, so if some symbol referred\nto from Definitions gets recompiled, there are then two Symbols\nthat are both visible, one referenced from Definitions, the other\nthe one that got compiled.\n\nThos led to a crash when e.g. compiling scala.Short, because the\nnewly compiled symbol was not recognized as a primitive value\nclass.\n\nThe present commit tries to make systematic changes without regard\nto simplicity or aesthetics. This will be polished in future commits.\n// ### comments signal areas that need further attention.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 9 15:45:37 2015 +0100]"},
{"name" : "f2b61ce055fccf96e305ef43fca8abef8a912f33", "time" : 1447080174, "y" : 0, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Merge pull request #933 from dotty-staging/revert-sbt\n\nFix sbt build.", "author" : "PersonIdent[odersky, odersky@gmail.com, Mon Nov 9 15:42:54 2015 +0100]"},
{"name" : "2f41c73ee86a56b190758baaf5999ed85d2f57a1", "time" : 1447067477, "y" : 904, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Go back to sbt 0.13.5 until 0.13.9 is published on type safe artifactory\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Nov 9 12:11:17 2015 +0100]"},
{"name" : "d25d2893628ba27c80f7f2369a07ae88489e43a7", "time" : 1447067447, "y" : 904, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Fix sbt: project/plugins.sbt needs empty line.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Nov 9 12:10:47 2015 +0100]"},
{"name" : "8eef182cfab2d4a23924c4478809d6e83bfc0b9b", "time" : 1447065041, "y" : 0, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Merge pull request #899 from dotty-staging/fix-#880\n\nRequire outer pointer also for proxies of enclosing classes.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon Nov 9 11:30:41 2015 +0100]"},
{"name" : "8c593779fd49f9085f69b6b5a9fe180ebede801e", "time" : 1447059817, "y" : 0, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Merge pull request #867 from dotty-staging/upgrade/sbt-0.13.9\n\nUpgrade SBT to 0.13.9", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon Nov 9 10:03:37 2015 +0100]"},
{"name" : "b3a1626d81385624f1db894a360288b85e8b3585", "time" : 1447059207, "y" : 0, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Merge pull request #927 from dotty-staging/stdlib-bounds\n\nDrop checking that lower bound is a subtype of upper bound.", "author" : "PersonIdent[odersky, odersky@gmail.com, Mon Nov 9 09:53:27 2015 +0100]"},
{"name" : "3d5a2e2987066a1575db2874cf2c4721a1a66de1", "time" : 1447059167, "y" : 0, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Merge pull request #905 from dotty-staging/fix-nested-pkg-member-2\n\nFix nested pkg member 2", "author" : "PersonIdent[odersky, odersky@gmail.com, Mon Nov 9 09:52:47 2015 +0100]"},
{"name" : "80c2fbd0ff8a99201e109b89a201693bc18bee34", "time" : 1447059143, "y" : 0, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Merge pull request #902 from dotty-staging/fix-numeric-implicit-args\n\nFix numeric implicit args", "author" : "PersonIdent[odersky, odersky@gmail.com, Mon Nov 9 09:52:23 2015 +0100]"},
{"name" : "9cbe9949a0b240f1cb8f8509441ef19f78c68c76", "time" : 1447058779, "y" : 0, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Merge pull request #926 from dotty-staging/stdlib-variance\n\nHandle Scalac variance unsoundness with regards to constructors.", "author" : "PersonIdent[odersky, odersky@gmail.com, Mon Nov 9 09:46:19 2015 +0100]"},
{"name" : "93753dc557c0b628391f706406bf1f942ec053bd", "time" : 1447057682, "y" : 912, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Avoid spurious procedure syntax migration warning\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 9 09:28:02 2015 +0100]"},
{"name" : "9767782a4766826ef903836609cb34c9bad2df61", "time" : 1446739098, "y" : 913, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Check bounds of inferred typevars in PostTyper.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Nov 5 16:58:18 2015 +0100]"},
{"name" : "5cce9b47427e96ab2159a88137ae74e92939b757", "time" : 1446737961, "y" : 913, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Add more info on missing references in unpickler.\n\nTrying to hunt down the flakey build.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Nov 5 16:39:21 2015 +0100]"},
{"name" : "399cc10e8d6984583f18d4f3ee8a8eb6d1608d81", "time" : 1446734887, "y" : 913, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Drop neg test\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Nov 5 15:48:07 2015 +0100]"},
{"name" : "0650ec0d64f93136d5aa99c5850eedb07dab77a3", "time" : 1446734750, "y" : 912, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Drop neg test\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Nov 5 15:45:50 2015 +0100]"},
{"name" : "230cdf74e555e1553515dcfd981015689bd4985a", "time" : 1446734011, "y" : 912, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Turn on -language:Scala2 -migration when compiling stdlib\n\nneeded to turn some errors into warnings.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Nov 5 15:33:31 2015 +0100]"},
{"name" : "990eff8a5905a3b3120bf1c150e218792acd8822", "time" : 1446733574, "y" : 913, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Drop test that lower bound must be a subtype of upper bound.\n\nAs discussed in #780 and #525, the test is not needed. This makes\nt1279a compile, which got moved now to pos. Fixes #780 and #915.\nIt also makes scala.List compile. Review by @smarter.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Nov 5 15:26:14 2015 +0100]"},
{"name" : "0e7c15a9d7bcb3015c24cbd2e16d8d143cfd21de", "time" : 1446730528, "y" : 912, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Remove println accidentally left in code.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Nov 5 14:35:28 2015 +0100]"},
{"name" : "7c999a3a52b107e6cf2becf5a9b268fb4e11e4bf", "time" : 1446730379, "y" : 912, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Allows Iterator.scala to compile by itself.\n\nFixes #913.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Nov 5 14:32:59 2015 +0100]"},
{"name" : "1e280d03886e3b20fa28661b0d25b6b11dec56f3", "time" : 1446729220, "y" : 912, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Handle variance unsoundness in scalac\n\nThe included test\n\n     pos-special/variances-constr.scala\n\ndemonstrates an unsoundness in the variance checking of scalac.\nScalac excludes symbols owned by constructors from the\nchecking. This is unsound, as can be demonstrated by compiling the test\nand observing output of the program run:\n\nException in thread \"main\" java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.String\n	at Test$.main(variances-constr.scala:17)\n	at Test.main(variances-constr.scala)\n\nDotty allows this code only under -language:Scala2 and issues a migration warning.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Nov 5 14:13:40 2015 +0100]"},
{"name" : "4b76eeaa13176aede421af3fe86c392c438b0e5d", "time" : 1446728257, "y" : 912, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Add scalaMode and testScalaMode to TypeOps\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Nov 5 13:57:37 2015 +0100]"},
{"name" : "4850629d244156d96a2a1bad231cddc0084d0d31", "time" : 1446728257, "y" : 912, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Emit a migration warning in Parser when hitting a Scala2 feature.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Nov 5 13:57:37 2015 +0100]"},
{"name" : "a0fbe09d945b6b6ef1279e7d6f828bdd3b93cce2", "time" : 1446728257, "y" : 912, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Add migration warnings\n\nThe idea is that whenever Dotty detects a migration problem under -language:Scala2,\nit should issue a migration warning, so we know what needs to be rewritten.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Nov 5 13:57:37 2015 +0100]"},
{"name" : "c16c7f6009c5c7255cf3768585c1115a82b5a38c", "time" : 1446722747, "y" : 0, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Merge pull request #889 from dotty-staging/fix-#877\n\nFix #877", "author" : "PersonIdent[odersky, odersky@gmail.com, Thu Nov 5 12:25:47 2015 +0100]"},
{"name" : "0f04188f0b8fa94663741234bbd8cb163b5f42b1", "time" : 1446712971, "y" : 0, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Merge pull request #923 from dotty-staging/fix-typeparam-order\n\nReorder unpickled type params if necessary", "author" : "PersonIdent[odersky, odersky@gmail.com, Thu Nov 5 09:42:51 2015 +0100]"},
{"name" : "1654ebcafd5635b0c8761ef77beae44c91682e05", "time" : 1446712958, "y" : 0, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Merge pull request #900 from dotty-staging/fix-#871\n\nDeal gracefully with missing return types of abstract menthods.", "author" : "PersonIdent[odersky, odersky@gmail.com, Thu Nov 5 09:42:38 2015 +0100]"},
{"name" : "c164deb13f4fcf0a155945e694a59e9c0b3ec119", "time" : 1446659616, "y" : 928, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Reorder unpickled type params if necessary\n\nWhen compiling Iterator.scala it was observed that\nthe type parameters of BufferedCanBuildFrom appeared\ninm the wrong order. This fix corrects that, making\nsure that type parameters appear in the decls scope\nin the same order as they are given in the epxlicitly\nunpickled type parameter list.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Nov 4 18:53:36 2015 +0100]"},
{"name" : "0f5c1fd17c2acc23c3735dd4d8d3748e9eeef444", "time" : 1446635766, "y" : 825, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Add stable hash codes to PolyParams.\n\nHelps me a lot in linker.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Nov 4 12:16:06 2015 +0100]"},
{"name" : "4e86a9dd62560381a6caf960470ea5e4db636fff", "time" : 1446635118, "y" : 825, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Hashable: make finishHash protected.\n\nIs in sync with hashSeed being protected.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Nov 4 12:05:18 2015 +0100]"},
{"name" : "d3e5a6981c985e71a77356deab9155806b9ffd02", "time" : 1446573338, "y" : 0, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Merge pull request #901 from dotty-staging/fix-#851\n\nFix #851 Java parsing forgot type parameters", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Tue Nov 3 18:55:38 2015 +0100]"},
{"name" : "c9eba1efead3ff9f4fb5b9de74270fa69c71a2dd", "time" : 1446573274, "y" : 0, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Merge pull request #920 from dotty-staging/stdlib-TraversableOnce\n\nStdlib traversable once", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Tue Nov 3 18:54:34 2015 +0100]"},
{"name" : "8529f59dd6bc60ea2293dc1b3d37191cb52d7d1c", "time" : 1446573221, "y" : 0, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Merge pull request #919 from dotty-staging/stdlib-option\n\nFixes to make scala.Option compile", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Tue Nov 3 18:53:41 2015 +0100]"},
{"name" : "d2ed587d8711bcbeaaf970043e7d80955ada164a", "time" : 1446555885, "y" : 934, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Enable <:< implicits as conversions.\n\nThese were disabled before, which means that having evidence\nof S <:< T did not introduce a usable implicit conversion from\nS to T. We do do it like scalac: just disable Predef.$conforms.\n\nThis makes TraversableOnce compile. Fixes #914.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Nov 3 14:04:45 2015 +0100]"},
{"name" : "f2187f3deb90b3584a4e7f3030b1d3b716cac775", "time" : 1446501728, "y" : 934, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Enable compilation of Option.scala\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 2 23:02:08 2015 +0100]"},
{"name" : "707fc3760e8ca961fa88a9a607dfe09e2ee2c9f2", "time" : 1446501188, "y" : 934, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Retain `case` flags for module classes representing case objects\n\nThis will cause them to automatically implement a certain number\nof synthetic methods.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 2 22:53:08 2015 +0100]"},
{"name" : "f3b1aef46f561eda43fcfb3db1b957b447b79322", "time" : 1446501120, "y" : 934, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Make isDefined override if necessary\n\nisDefined is now always auto-generated for case classes. It need to get an automatic override\nif there is a version that's inherited.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 2 22:52:00 2015 +0100]"},
{"name" : "b1cb0afd6bce37d8e7e77f1a64e6db82a0d7bb86", "time" : 1446500022, "y" : 0, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Merge pull request #917 from dotty-staging/compile-stdlib\n\nCompile big parts of stdlib", "author" : "PersonIdent[odersky, odersky@gmail.com, Mon Nov 2 22:33:42 2015 +0100]"},
{"name" : "15827c13c1604d168165a08851d6f88b85913739", "time" : 1446490149, "y" : 939, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Partest also needs to close scala repo.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Nov 2 19:49:09 2015 +0100]"},
{"name" : "2c4a1fc5df1faf34f3c2be74fee0f99b838cda50", "time" : 1446490129, "y" : 939, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Use absolute dates in Jenkins git-log.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Nov 2 19:48:49 2015 +0100]"},
{"name" : "c0eff977c481b9235e5f0a411ef36787027172cf", "time" : 1446488085, "y" : 939, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Ouch... remove comment that broke compilation.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Nov 2 19:14:45 2015 +0100]"},
{"name" : "c48c4295766b096bfb8183643cfe6d4dd5c1a1c3", "time" : 1446488004, "y" : 939, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Allow empty lines in whitelist file.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Nov 2 19:13:24 2015 +0100]"},
{"name" : "26393627283e88514dc706d4e104130343d8abc3", "time" : 1446488004, "y" : 939, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Use custom repo to download fork of scale-library.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Nov 2 19:13:24 2015 +0100]"},
{"name" : "c26fb1615b253e461faeabf1965a963c7a3d196d", "time" : 1446488004, "y" : 939, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Showcase #916\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Nov 2 19:13:24 2015 +0100]"},
{"name" : "f4dbb7f04bfb0975ece9fc7758edf81968ae37f3", "time" : 1446488003, "y" : 939, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Showcase #915\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Nov 2 19:13:23 2015 +0100]"},
{"name" : "67f645d2f94c10e0c6b72789acda9486d4eddf18", "time" : 1446488003, "y" : 939, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Showcase #914\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Nov 2 19:13:23 2015 +0100]"},
{"name" : "0a0fb0a53ef90537ede22855cb82752c8181c342", "time" : 1446488003, "y" : 939, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Showcase #913\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Nov 2 19:13:23 2015 +0100]"},
{"name" : "8dcf540fd45b67093f684e68ff3cb33a0f99e122", "time" : 1446488003, "y" : 939, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Showcase #912\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Nov 2 19:13:23 2015 +0100]"},
{"name" : "cbadb1d795dd3b5742e2cf611058d06c1033738c", "time" : 1446488003, "y" : 939, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Showcase #911\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Nov 2 19:13:23 2015 +0100]"},
{"name" : "c7896eb5298b3ac27d9b449eebaef65e6011f1c3", "time" : 1446488003, "y" : 939, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Showcase #907\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Nov 2 19:13:23 2015 +0100]"},
{"name" : "f3ee62b0654d9f67d99639eb24efd9570ccbc824", "time" : 1446488003, "y" : 939, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Showcase #910\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Nov 2 19:13:23 2015 +0100]"},
{"name" : "e13b181431e48ee26c799fce2134ac5a4024a41f", "time" : 1446488003, "y" : 939, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Showcase #909\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Nov 2 19:13:23 2015 +0100]"},
{"name" : "cfc5e11c92950fdfa3bdfb40e322261b29ac53d6", "time" : 1446488003, "y" : 939, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Compiling products forces Data races.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Nov 2 19:13:23 2015 +0100]"},
{"name" : "fa7e450e893edefd29a0435840ef049a1cc9115d", "time" : 1446488002, "y" : 939, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Test compiling sodlib\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Nov 2 19:13:22 2015 +0100]"},
{"name" : "432689d1a38cf65da88a1e72e0c0f425850c340e", "time" : 1446486375, "y" : 0, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Merge pull request #860 from dotty-staging/change-allow-ex-in-hk\n\nChange allow ex in hk", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon Nov 2 18:46:15 2015 +0100]"},
{"name" : "f58acd171105487984a1d8df2646246aab43e5e1", "time" : 1446472096, "y" : 0, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Merge pull request #887 from dotty-staging/fix-#873\n\nAllow pattern matching anonymous functions of arity > 1", "author" : "PersonIdent[odersky, odersky@gmail.com, Mon Nov 2 14:48:16 2015 +0100]"},
{"name" : "21f6711d0ba034238f780614368d9d270192a22a", "time" : 1446472072, "y" : 0, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Merge pull request #908 from dotty-staging/fix-#903\n\nParentheses around a wildcard should not produce a lambda", "author" : "PersonIdent[odersky, odersky@gmail.com, Mon Nov 2 14:47:52 2015 +0100]"},
{"name" : "2bcc0b06cf6f2d83148206275ffe7b8617fdb776", "time" : 1446466602, "y" : 958, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Add tests for wildcards without types\n\nAs suggested by review.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 2 13:16:42 2015 +0100]"},
{"name" : "9da99f11035d94afba05f4bb768b3a9766b26faf", "time" : 1446461128, "y" : 958, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Parentheses around a wildcard should not produce a lambda\n\n`(_)` and `(_: T)` should not be converted to functions\n\n    x => x\n    (x: T) => x\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 2 11:45:28 2015 +0100]"},
{"name" : "bf5f79cea0e2cd1f5cbdd5d3c0ed36a41039723f", "time" : 1446452793, "y" : 960, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Fix problem when accessing same identifier from nested packages.\n\nThe previous rules picked the once outer removed member rather than\nthe innermost one, of both members exist.\n\nSeen in the wild in scala.sys.ShutdownHookThread. No separate test here,\nbecause we'll include large parts of stdlib anyway as a build test.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 2 09:26:33 2015 +0100]"},
{"name" : "34608562fa4f3697ddf4034fb802182a18c9f687", "time" : 1446395076, "y" : 960, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Update check file\n\nand explain why it's different now.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 1 17:24:36 2015 +0100]"},
{"name" : "f48ea79df03fde590f0ba22dcc52f2c82227b9e9", "time" : 1446392520, "y" : 960, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Disable failing test\n\nDotty delivers an ambiguity error. The comment in the test argues why\nthis is OK.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 1 16:42:00 2015 +0100]"},
{"name" : "5ed617b9ac205b831ec69b782472b1afc5752378", "time" : 1446390526, "y" : 960, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Better handling of implicits over numeric types.\n\nCompiling scala.math.BigDecimal and scala.math.BigInteger shows a problem.\nThe conversion `int2bigInt` is not applicable to a Byte because `Byte -> Int`\nrequires another implicit conversion.\n\nWe fix that by using a new method relaxed_<:< for implicit compatibility checks,\nwhich always admits numeric widenings.\n\nThis leads to another problem. Now the conversions\n\n    implicit def byteToInt(x: Byte): Int\n    implicit def byteToShort(x: Byte): Short\n\nare ambiguous when we try to convert from Byte to Int.\nWe fix that by adding a \"tie-break\" to implicit search\nwhere if several methods match a numeric value result type\nand all have numeric value types as result types, we\npick the numerically largest type that matches.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 1 16:08:46 2015 +0100]"},
{"name" : "e1586bc0a8672002a948dff3d1402e5f7d5b7033", "time" : 1446379629, "y" : 964, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Don't interpreter $init$ as a constructor when parsing Java files.\n\nFixes #851.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 1 13:07:09 2015 +0100]"},
{"name" : "baaf522978aff6e9123349611be1a5311dac65c8", "time" : 1446379566, "y" : 964, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Allow -Xprint:parser option to print parse trees\n\n`parser` is strictly speaking not a phase, but it makes sense\nto allow parsed trees being printed. Before this was only possible\nif the `typr` printer was enabled, but this was cumbersome, non-intuitive,\nand did too much.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 1 13:06:06 2015 +0100]"},
{"name" : "3badc4d8219385ad0f3bcc77790681a7e7c6d088", "time" : 1446377162, "y" : 966, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Deal gracefully with missing return types of abstract menthods.\n\n1) Better error message: \"missing return type\" instead of `=' expected.\n2) Allow them under language:Scala2\n\nFixes #871\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 1 12:26:02 2015 +0100]"},
{"name" : "4d39003f3ca112d03af1e7a51c9e59bf5eb510c5", "time" : 1446322010, "y" : 967, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Require outer pointer also for proxies of enclosing classes.\n\nThere was a missing case where an outer pointer is required.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Oct 31 21:06:50 2015 +0100]"},
{"name" : "970a2bdc6c3ea7740e86217e1f30adb998457db9", "time" : 1446293305, "y" : 968, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "add out/ to .gitignore\n\nIt messes up git operations with out/.keep out of date. (reverted from commit 465ea96afb46e29fb523dad884f0ba860eeea6ff)\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Oct 31 13:08:25 2015 +0100]"},
{"name" : "08e880231ff5facd55a80bed0391b22fe85a9f44", "time" : 1446293225, "y" : 0, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Merge pull request #896 from dotty-staging/gitignore\n\nFix #895: Maintain keep file during bootstrap", "author" : "PersonIdent[odersky, odersky@gmail.com, Sat Oct 31 13:07:05 2015 +0100]"},
{"name" : "03bf4904c9abb50d97d3a7ae0dd70d0456a9f9fb", "time" : 1446291495, "y" : 970, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Fix #895: Maintain keep file during bootstrap\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 31 12:38:15 2015 +0100]"},
{"name" : "9b41b94d350ddc43b016d517aa935c228f97884b", "time" : 1446291437, "y" : 970, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Add `out/` folder correctly to gitignore.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 31 12:37:17 2015 +0100]"},
{"name" : "c5fedba675ce958715d1ff35a78a3e71f9a55d97", "time" : 1446291181, "y" : 0, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Merge pull request #894 from dotty-staging/check-singlethreaded\n\nCheck that access to context base is singlethreaded.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Sat Oct 31 12:33:01 2015 +0100]"},
{"name" : "5b2d94a274abe82d26687f1c6ef19fb1d57df2dd", "time" : 1446281870, "y" : 973, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Check that access to context base is singlethreaded.\n\nContextBase is not intended to be threadsafe, We now test that\nindeed it is not shared by compileUnits calls operating on\ndifferent threads.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Oct 31 09:57:50 2015 +0100]"},
{"name" : "cdfcbc166a331421eaf9a4e9bf64f5c885da19a4", "time" : 1446280046, "y" : 0, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Merge pull request #890 from dotty-staging/fix-#879\n\nFix #879", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Sat Oct 31 09:27:26 2015 +0100]"},
{"name" : "ac347485e94061d548bebc794ee133bb1b248a48", "time" : 1446278326, "y" : 0, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Merge pull request #892 from dotty-staging/fix-typeparam-names\n\nAvoid printing expanded names when displaying type parameters.", "author" : "PersonIdent[odersky, odersky@gmail.com, Sat Oct 31 08:58:46 2015 +0100]"},
{"name" : "125831b666c3a49d41d89d0d94a155acbe55c52b", "time" : 1446245378, "y" : 976, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Address reviewer comments\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Oct 30 23:49:38 2015 +0100]"},
{"name" : "64247c1935f13645a12f21238c73727ebb607134", "time" : 1446243599, "y" : 968, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Make a new fresh name creator for each unit\n\nNeeded to make builds deterministic.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Oct 30 23:19:59 2015 +0100]"},
{"name" : "b80b179d6fbb92c8f6ff3616cec1f3aab5106799", "time" : 1446228683, "y" : 978, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Also handle SAM functions when adaptiing arity of case lambdas.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Oct 30 19:11:23 2015 +0100]"},
{"name" : "f0c2a901ad1cafe08deff2d715b1fa8d663812a3", "time" : 1446225649, "y" : 976, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Fix #879\n\nDon't insert a constructor call when typechecking Java classes.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Oct 30 18:20:49 2015 +0100]"},
{"name" : "4cda3ff723ea0de7f0f61fd2db922c3e5a9b4d9a", "time" : 1446225174, "y" : 980, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Avoid printing expanded names when displaying type parameters.\n\nDifferences can be observed when checking neg/variances.scala.\nReview and any necessary polishing by @smarter.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Oct 30 18:12:54 2015 +0100]"},
{"name" : "f6e454ba8ba2f1183177e1f69788bf9610512c3f", "time" : 1446221271, "y" : 968, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Fix #877\n\nUse freshName to name evidence parameters.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Oct 30 17:07:51 2015 +0100]"},
{"name" : "465ea96afb46e29fb523dad884f0ba860eeea6ff", "time" : 1446221254, "y" : 968, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "add out/ to .gitignore\n\nIt messes up git operations with out/.keep out of date.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Oct 30 17:07:34 2015 +0100]"},
{"name" : "9fbb9c9c9b6050183dd71b8541a63fc6ebf9e2a6", "time" : 1446209951, "y" : 978, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Revert nullary function patch\n\nNullary functions are handled by scalac, and dotty should do the same.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Oct 30 13:59:11 2015 +0100]"},
{"name" : "2a4d7bc68dde060458cb3692cc272968f096c7d4", "time" : 1446199224, "y" : 978, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Fix case expansion for nullary functions.\n\nAlways expand to at least one parameter.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Oct 30 11:00:24 2015 +0100]"},
{"name" : "edfb6e72076b216c4762b52a5b9558fd9d106148", "time" : 1446197567, "y" : 0, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Merge pull request #886 from dotty-staging/fix-#884\n\nFix #884 - misdiagnosed ambiguous definition.", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Fri Oct 30 18:32:47 2015 +0900]"},
{"name" : "f0e54c59520566b8d9d2b4dae8a4802de6b3a843", "time" : 1446195238, "y" : 978, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Allow pattern matching anonymous functions of arity > 1\n\nThis is sepcified in Sec. 8.5 of the SLS. Fixes #873. Review by @smarter.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Oct 30 09:53:58 2015 +0100]"},
{"name" : "4f9b5cc0b785e8a4e5375407b695278fecb94588", "time" : 1446192049, "y" : 987, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Add missing test file.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Oct 30 09:00:49 2015 +0100]"},
{"name" : "201ce2f1d11bf3940291f6c800ec9dedead6c2a5", "time" : 1446191045, "y" : 0, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Merge pull request #882 from dotty-staging/fix/java-annots-pos\n\nSet position on annotations parsed from Java", "author" : "PersonIdent[odersky, odersky@gmail.com, Fri Oct 30 08:44:05 2015 +0100]"},
{"name" : "9a53392f551ce97c2490ca8f38bc3dac7cfa1a08", "time" : 1446187418, "y" : 989, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Upgrade SBT to 0.13.9 and upgrade SBT plugins\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Fri Oct 30 07:43:38 2015 +0100]"},
{"name" : "32f31b8924d16074679bfa0857019d3ba078c4a2", "time" : 1446142338, "y" : 987, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Fix #884 - misdiagnosed ambiguous definition.\n\nUniversal equality strikes again. Caused a bug in\nisDefinedInCurrentUnit.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Oct 29 19:12:18 2015 +0100]"},
{"name" : "68cc0b7b97a7e439b01f732a94c11a119faade7c", "time" : 1446117694, "y" : 0, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Merge pull request #883 from dotty-staging/add/Main-process\n\nMake it easier to call the compiler using reflection", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Thu Oct 29 12:21:34 2015 +0100]"},
{"name" : "d0c8d9d9df5d51269ee4f4577ba996d1a58b8e4d", "time" : 1446115276, "y" : 992, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Make it easier to call the compiler using reflection\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Thu Oct 29 11:41:16 2015 +0100]"},
{"name" : "40d493580bfed7d59f1802d0d45c56cee97e466d", "time" : 1446108619, "y" : 993, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Set position on annotations parsed from Java\n\nFix a crash in Typer#assertPositioned\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Thu Oct 29 09:50:19 2015 +0100]"},
{"name" : "c1facd5c40fa7208d7549e6727e6e7498d4d3f34", "time" : 1445937015, "y" : 0, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Merge pull request #869 from dotty-staging/fix-#866\n\nFix #866", "author" : "PersonIdent[odersky, odersky@gmail.com, Tue Oct 27 10:10:15 2015 +0100]"},
{"name" : "065a0026924f722e9844c8e314180bb4cebca236", "time" : 1445849241, "y" : 995, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Don't count suppressed errors\n\nIf an error message was supressed to count it in the total.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Oct 26 09:47:21 2015 +0100]"},
{"name" : "d4f30d1a268a51ee74c98f6ae0f45136274536af", "time" : 1445849030, "y" : 995, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Keep separate chain of outer reporters for StoreReporters\n\nUsed in rewritten `errorsReported` method. This fixes #866. The problem\nbefore was that `TyperState#trywithFallBack` temporarily updates\nthe reporter, so crawling up the context chain to check for reporters\nwith errors missed some reported errors, which triggered the assertion\nin `Tree#withType`.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Oct 26 09:43:50 2015 +0100]"},
{"name" : "75ac4010609c7d3ac856523d8f2d59e710a4c58c", "time" : 1445848708, "y" : 995, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Shorten ctx.typerState.reporter to ctx.reporter\n\n... making use of method in `ctx`.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Oct 26 09:38:28 2015 +0100]"},
{"name" : "999e26ac73932ec963346166e55b80e8b25dd18f", "time" : 1445799397, "y" : 989, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Build.scala: Fix deprecation warnings\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Sun Oct 25 19:56:37 2015 +0100]"},
{"name" : "51ab200f97f11ac74270f6925028ba4d58284e7b", "time" : 1445791835, "y" : 0, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Merge pull request #865 from dotty-staging/fix-module-alias-subtyping\n\nFix hole in subtyping of modules", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Sun Oct 25 17:50:35 2015 +0100]"},
{"name" : "7947a7b0fc818128f5e2a0cd10cc43d2d7614354", "time" : 1445789372, "y" : 1000, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Fix hole in subtyping of modules\n\nWe did not handle correctly the case exemplified by `range.scala`: A module this type, which\nis compared with a getter to the same module. Seen in the wild in scala.math.BigDecimal.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Oct 25 17:09:32 2015 +0100]"},
{"name" : "08df804a5b4b7289a1518aa5ccf9753ec1a8cd7a", "time" : 1445784852, "y" : 0, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Merge pull request #863 from dotty-staging/fix/inference-methcall\n\nFix/inference methcall", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Sun Oct 25 15:54:12 2015 +0100]"},
{"name" : "875d7da572b2367222e3021edcecb2d3cb33cefa", "time" : 1445783701, "y" : 1002, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Readd `.widen`  which was accidentally removed from the previous commit\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Sun Oct 25 15:35:01 2015 +0100]"},
{"name" : "e83e8944c5757d4b60de796a505925fa2f1bb4f7", "time" : 1445782489, "y" : 1002, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Simplify logic in adapt\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Oct 25 15:14:49 2015 +0100]"},
{"name" : "6d8f3730ca4d381b105737edaff6f8794b54e848", "time" : 1445782210, "y" : 1002, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Fix issue that prevented instantiating some tvars before implicit search\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Oct 25 15:10:10 2015 +0100]"},
{"name" : "ae0e1263c22e6b94b112a2b4b00a49853f0e3d58", "time" : 1445782210, "y" : 1002, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Less eager tvar interpolation: wait until method calls are fully applied\n\nFix #738\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Oct 25 15:10:10 2015 +0100]"},
{"name" : "ecf62cf18b43b5a39e973bdc8087675a24337ce0", "time" : 1445776750, "y" : 0, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Merge pull request #843 from dotty-staging/fix-#830\n\nFix #830: Compiler hangs on implicit search with singleton &/|", "author" : "PersonIdent[odersky, odersky@gmail.com, Sun Oct 25 13:39:10 2015 +0100]"},
{"name" : "4b1d08928bd008a23fa40490d2998e58a6f06c4d", "time" : 1445776114, "y" : 1007, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Represent references to Scala2 inner classes as WithFixedSym types\n\nReason: An inner Scala2 class might be shadowed by a same-named class in a subtype.\nIn Dotty this is disallowed butin Scala 2 it is possible. For instance, math.Numeric\nand math.Ordering both have an inner class \"Ops\". Normal TypeRef types could not\nselect the shadowed class in Ordering is the prefix is of type Numeric.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Oct 25 13:28:34 2015 +0100]"},
{"name" : "dbc668f074b6e121f00a6a63ea55d1a3077f7eb1", "time" : 1445772540, "y" : 1007, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Make Lazy and Trait \"From Start\" flags\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Oct 25 12:29:00 2015 +0100]"},
{"name" : "982d19cbbc058f594e79544888a3be2bfc9a4a06", "time" : 1445772285, "y" : 1007, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Make SuperAccessor and Scala2x \"FromStart\" flags.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Oct 25 12:24:45 2015 +0100]"},
{"name" : "cdcc7e3592386fcfe0f2b9915db78a894ac92536", "time" : 1445701701, "y" : 1007, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Add fixed version of GenTraversableFactory.\n\nThere is still an issue because math uses inner classes named\nOps which shadow each other. Dotty can't handle it, so implicit\nsearch in `range` goes wrong. The new test has been modified\nto work around that issue.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Oct 24 17:48:21 2015 +0200]"},
{"name" : "538764f17ee1bb94dbfb2d2fb4241c55af3dc896", "time" : 1445701049, "y" : 1007, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Remove redundant tests\n\nisHK already does a dealias.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Oct 24 17:37:29 2015 +0200]"},
{"name" : "4f15c103cca72a0f673bbc07025120e5308360ec", "time" : 1445696592, "y" : 1007, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Don't drop $apply when eliminating existentials in unpickler\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Oct 24 16:23:12 2015 +0200]"},
{"name" : "308e637dd35ba8c5e46c1bacf309ad2d82cd93bd", "time" : 1445682716, "y" : 1007, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Revise typeParams to account for existential hk types\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Oct 24 12:31:56 2015 +0200]"},
{"name" : "396df3b7bb954c674911b8e144ba0e1c77ffab00", "time" : 1445682645, "y" : 1007, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Add test case\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Oct 24 12:30:45 2015 +0200]"},
{"name" : "a415ca1ab713f92788262057d9810d937dc7499a", "time" : 1445675691, "y" : 1007, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Allow existential types in hk types\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Oct 24 10:34:51 2015 +0200]"},
{"name" : "77f7b2a4e988aa610a3cf7d92bb8838359127176", "time" : 1445612724, "y" : 0, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Merge pull request #858 from lampepfl/DarkDimius-patch-3\n\nAdd link to gitter channel, delete travis badge.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri Oct 23 17:05:24 2015 +0200]"},
{"name" : "891449c48a4ecddeadeec3e6227b395487d42705", "time" : 1445612066, "y" : 1017, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Add link to gitter channel, delete travis badge.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri Oct 23 16:54:26 2015 +0200]"},
{"name" : "83b6bcf1cb1c88418730e0541195cc22b37f3152", "time" : 1445612012, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #857 from dotty-staging/change-readme\n\nChange readme", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri Oct 23 16:53:32 2015 +0200]"},
{"name" : "3aa6fef0feb43e6b29f899591460ece7301e57ee", "time" : 1445611554, "y" : 1019, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Change readme to reflect current state\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Oct 23 16:45:54 2015 +0200]"},
{"name" : "87098e63c2796387c598513a2af2d8f2d1aae91b", "time" : 1445607892, "y" : 1007, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "fix typos\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Oct 23 15:44:52 2015 +0200]"},
{"name" : "41825fb1ec51b397aaa9c15b1f24109a9607a981", "time" : 1445607479, "y" : 1007, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "fix typos\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Oct 23 15:37:59 2015 +0200]"},
{"name" : "5612697342f14645b401205d84fb121b3117e3bb", "time" : 1445607221, "y" : 1007, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "fix typos\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Oct 23 15:33:41 2015 +0200]"},
{"name" : "934eee886f3d8ddc17d88598ca39d36a117aa6db", "time" : 1445607099, "y" : 1007, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "fix typos\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Oct 23 15:31:39 2015 +0200]"},
{"name" : "bd183bce3fe9c06bf51cdc346bcd4d7ab76703be", "time" : 1445606947, "y" : 1007, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Draft blog post\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Oct 23 15:29:07 2015 +0200]"},
{"name" : "392b0f10c133982d6070f2551c11d1ca7eb79bba", "time" : 1445604988, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #853 from dotty-staging/partest-run\n\nRun CI-partest with bootstrapped compiler", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri Oct 23 14:56:28 2015 +0200]"},
{"name" : "c326d15bce108459371567069a7ecbc38388fb84", "time" : 1445601588, "y" : 1026, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Print stack traces before creating stub symbols\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri Oct 23 13:59:48 2015 +0200]"},
{"name" : "3c6f28ba36e3e908c7a5e313e96e7d34f3da62fe", "time" : 1445599094, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #852 from dotty-staging/fix-script\n\nFix bug in dotc script", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri Oct 23 13:18:14 2015 +0200]"},
{"name" : "0a386a85da9c6df97bf2cb6627e1f905af17c123", "time" : 1445590686, "y" : 1028, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Only replace intersections of constants with Nothing\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Oct 23 10:58:06 2015 +0200]"},
{"name" : "14d20d9bacb713da046ada786673935e4ff4a8c2", "time" : 1445589707, "y" : 1026, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Revert \"Workaround #840\"\n\nThis reverts commit acd7b9d31cd0a2fbc285921bdc5a7bdc9c1d2872.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri Oct 23 10:41:47 2015 +0200]"},
{"name" : "c787fe1a7ec221906951ae07fe0ae651cea3a5c5", "time" : 1445589698, "y" : 1026, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Enable running pos tests in partest\n\nAs junit tests are run with dotty-compiled-by-scalac,\nit makes sense to execute run tests with dotty-compiled-by-dotty.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri Oct 23 10:41:38 2015 +0200]"},
{"name" : "45a9074c5184be6cc715ab4f0872ea834c5908d7", "time" : 1445589689, "y" : 1026, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Run partest under bootstrapped dotty.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri Oct 23 10:41:29 2015 +0200]"},
{"name" : "acd7b9d31cd0a2fbc285921bdc5a7bdc9c1d2872", "time" : 1445589674, "y" : 1026, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Workaround #840\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri Oct 23 10:41:14 2015 +0200]"},
{"name" : "1f9131273dc0ac9811532a35349c6bd58711eb7e", "time" : 1445589518, "y" : 1033, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Indicate that dotty is being built.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri Oct 23 10:38:38 2015 +0200]"},
{"name" : "5e56813d2d3cf8dc54850013c2f7dc41ec26d984", "time" : 1445589484, "y" : 1033, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Fix bug in dotc script.\n\nUsed to always use bootstrapped version\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri Oct 23 10:38:04 2015 +0200]"},
{"name" : "73f725c361a8d990d698c0aeb6889e272759ebeb", "time" : 1445589111, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #832 from dotty-staging/fix-#815-hk-constructor-alias\n\nFix #815.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri Oct 23 10:31:51 2015 +0200]"},
{"name" : "344f8499be5f4705c8bd7c9aad45d04d760d3dda", "time" : 1445589086, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #842 from dotty-staging/fix-838\n\nFix #838. Fixes to non-local modules& static forwarders.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri Oct 23 10:31:26 2015 +0200]"},
{"name" : "50fe6eb3f1edbbecd4c5f750ac61a9396c3f3852", "time" : 1445589071, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #849 from dotty-staging/fix-#840\n\nFix #840", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri Oct 23 10:31:11 2015 +0200]"},
{"name" : "f786ce5903670c7496e8a295ec1a49a6e512c896", "time" : 1445586411, "y" : 1038, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Don't drop impure expressions when eliding isInstanceOf tests.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Oct 23 09:46:51 2015 +0200]"},
{"name" : "56f9ab865d51d11c8ab45424233543ac2d775c93", "time" : 1445552475, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #846 from dotty-staging/fix-#827\n\nFix #827", "author" : "PersonIdent[odersky, odersky@gmail.com, Fri Oct 23 00:21:15 2015 +0200]"},
{"name" : "82afe5f3f4d0286a0202a959e03871eb7454dbec", "time" : 1445551504, "y" : 1038, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Fix #840\n\nProblem was that interceptTypeTestCasts was run at wrong phase.\nIt saw after erasura a type of the form `x.Array$$T`. Before\nerasure that type is simply an alias of another type, but after\nerasure, Arraya$$T is defined to be a type alias of a Wildcard type.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Oct 23 00:05:04 2015 +0200]"},
{"name" : "a62ec3cb862b4a98f58411d93de52cfb76a4ed76", "time" : 1445528462, "y" : 1041, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Address reviewer comments\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Oct 22 17:41:02 2015 +0200]"},
{"name" : "238d875f71e2a462e90a971f7d7317047cbf4d0c", "time" : 1445527427, "y" : 1041, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Simplify treatment of merge conflicts\n\nNow, we always throw a merge error. No more exceptions.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Oct 22 17:23:47 2015 +0200]"},
{"name" : "da945c4613cb9a11c89649aeabf1913e3b3019dd", "time" : 1445526664, "y" : 1041, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Better handling of merge errors\n\nInstead of picking one at random, throw a MergeError\nwhich might be caught later in mergeDenot. MergeDenot\nhas enough info to pick a simulate Scala2 linarization\nif the prefix comes from Scala2, or it rethrows the\nexception so that it becomes a type error.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Oct 22 17:11:04 2015 +0200]"},
{"name" : "746889b4ed0f53e433c123ddb2b90dece1298fff", "time" : 1445526347, "y" : 1041, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Check for cyclic inheritance.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Oct 22 17:05:47 2015 +0200]"},
{"name" : "b927f66d4b90bc34cc864f596b8d1dc97fdc3ebe", "time" : 1445515577, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #841 from dotty-staging/fix-#831-object-self\n\nFix #831 object self", "author" : "PersonIdent[odersky, odersky@gmail.com, Thu Oct 22 14:06:17 2015 +0200]"},
{"name" : "e92668c024b0c3acf8be0cc229cd7428640a8195", "time" : 1445515557, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #835 from dotty-staging/add-more-tests\n\nAdd more tests", "author" : "PersonIdent[odersky, odersky@gmail.com, Thu Oct 22 14:05:57 2015 +0200]"},
{"name" : "b482db80c88f575390935b7d1cfbc60e5212f169", "time" : 1445513381, "y" : 1047, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Adapt sourceModule to new selfInfo scheme.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Oct 22 13:29:41 2015 +0200]"},
{"name" : "9421e61051bf56329045250132e184065810ea13", "time" : 1445513327, "y" : 1047, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Fix #831\n\nNeed to create a self symbols for modules with explicit self type, but need to take\ncare it is already typed, or sourceModule risks running into CyclicReferences.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Oct 22 13:28:47 2015 +0200]"},
{"name" : "b8c87180edda1f9a0a42d49b2baae324a28f96fe", "time" : 1445513140, "y" : 1049, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Remove empty test file\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Oct 22 13:25:40 2015 +0200]"},
{"name" : "6b7c51c5c4f02b7713f5f44c4de4a287cdd329c6", "time" : 1445513020, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #834 from dotty-staging/fix-#825\n\nFix #825", "author" : "PersonIdent[odersky, odersky@gmail.com, Thu Oct 22 13:23:40 2015 +0200]"},
{"name" : "9cb35429fc2c52f5d243b9c9d29739df1ff5967a", "time" : 1445512810, "y" : 1028, "branches" : [0, 4, 5, 6, 7, 11], "comment" : "Fix #830: Compiler hangs on implicit search with singleton &/|\n\nIn fact we get a deep subtype recursion when compileing i830.scala. The problem\ngoes away once we make use of the fact that the intersection of two singleton\ntypes which are not subtypes of each other is empty.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Oct 22 13:20:10 2015 +0200]"},
{"name" : "30e5f322a0fb9c4c43cbeb3231423ac95571a3a7", "time" : 1445509286, "y" : 1028, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Avoid mutation in checkWellFormed\n\nIt's done anyway later in FirstTransform.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Oct 22 12:21:26 2015 +0200]"},
{"name" : "28193a6c53482cbec36530c25dc1a26438b81a18", "time" : 1445509286, "y" : 1028, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Avoid caching in sigName\n\nUse more complicated control flow with returns instead.\nsigName is likely performance critical, so some\ntrickiness is justified.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Oct 22 12:21:26 2015 +0200]"},
{"name" : "f1b3859911ee04a90a0b169c5eefa2c64ce5d265", "time" : 1445509286, "y" : 1028, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Add well-formedness checking for created symbols\n\nEnforces various restrictions of definitions.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Oct 22 12:21:26 2015 +0200]"},
{"name" : "54f5899b0888983495f5ff70f561d9634350f3f2", "time" : 1445509286, "y" : 1028, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Hardening of sigName for ill-formed valueclasses\n\nNeed to survive even if a value class does not have an\nunderlying type. Also: better diagnostics if sigName\ngoes wrong.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Oct 22 12:21:26 2015 +0200]"},
{"name" : "1eb26f570fe37c6753e0936d745507a0092baded", "time" : 1445509285, "y" : 1028, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Hardening of Parser against illegal flag combinations\n\nAvoids accidental combinations of term and type flags.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Oct 22 12:21:25 2015 +0200]"},
{"name" : "4e49976c8f4a19fd8533a0bb8543c4a2f2076f64", "time" : 1445509285, "y" : 1028, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Avoif follow-on errors for illegal implicit classes\n\nSupporess creation of implicit factory if it would be illegal.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Oct 22 12:21:25 2015 +0200]"},
{"name" : "3da5e04e286ee74781fda9e3b8776e5a8644712a", "time" : 1445509285, "y" : 1028, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Fix tests to survive wellformedness checks\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Oct 22 12:21:25 2015 +0200]"},
{"name" : "7384b8d90431d09178c532925f7db3408be550fc", "time" : 1445509010, "y" : 1059, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Update version of bundled backend.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Oct 22 12:16:50 2015 +0200]"},
{"name" : "213044a3e7c07d3567d6351558c547fda4500547", "time" : 1445508962, "y" : 1059, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Fix DottyBackendInterafec.isStaticModuleClass.\n\nUsed to pass wrong context.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Oct 22 12:16:02 2015 +0200]"},
{"name" : "9ad85c31640d8cf3b97db51f5520c1ca63e3e31c", "time" : 1445504534, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #833 from dotty-staging/explicit-outer\n\nFix bugs in ExplicitOuter", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Thu Oct 22 11:02:14 2015 +0200]"},
{"name" : "d19aec7e6d3dd7b5bd3368b49b15643b6b9a3be5", "time" : 1445504504, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #837 from dotty-staging/bootstrapped\n\nQuick&dirty bootstrap", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Thu Oct 22 11:01:44 2015 +0200]"},
{"name" : "2e606a850ab48c5b3a12cfb99a175a03688e35e3", "time" : 1445504489, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #836 from dotty-staging/lazy-vals-longs\n\nLazyVals: fix underflows in binary shifts.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Thu Oct 22 11:01:29 2015 +0200]"},
{"name" : "bc3e49944dc941d90894c7fa40de582e15bad421", "time" : 1445465403, "y" : 1064, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Quick&dirty bootstrap\n\ndot script now has -bootstrapped option that will use dotty-compiled-by-dotty.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Oct 22 00:10:03 2015 +0200]"},
{"name" : "cffd494fe816df6f9bc93d58087786e9612ef15d", "time" : 1445465326, "y" : 1065, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Test that more than 16 lazy vals can be safely used in one object.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Oct 22 00:08:46 2015 +0200]"},
{"name" : "845b93b769a16b789f7ef4c6704dbb320ecafd75", "time" : 1445464981, "y" : 1065, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "LazyVals: fix long shifts.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Oct 22 00:03:01 2015 +0200]"},
{"name" : "1b81e31e4b8d6a3d3ce47d1386e65754ec5099b4", "time" : 1445446211, "y" : 1049, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "More tests\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Oct 21 18:50:11 2015 +0200]"},
{"name" : "c4882896c041774b7a8beab1dcb5b4eeee4701f1", "time" : 1445444893, "y" : 1049, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Remove disgnostic println\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Oct 21 18:28:13 2015 +0200]"},
{"name" : "7867f8cc9ff70f0e78acbd8af54f64a073a94f53", "time" : 1445440980, "y" : 1069, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "ExplicitOuter: fix generation of outer methods for indirectly inherited traits.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Oct 21 17:23:00 2015 +0200]"},
{"name" : "dc1f711e1a362cf0ae7d15e8d19a2ccae7c80946", "time" : 1445440940, "y" : 1069, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "ExplicitOuter: methods in classes should not be deferred.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Oct 21 17:22:20 2015 +0200]"},
{"name" : "2b5b0648dc8c3eb4738d99932f87b9962e9d16b1", "time" : 1445438632, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #811 from dotty-staging/fix-objects-mixin\n\nFix #810: initialization of inner objects of traits.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed Oct 21 16:43:52 2015 +0200]"},
{"name" : "3898deafe17eaf5e96387d02c58e4cc74f90838f", "time" : 1445352725, "y" : 1072, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Fix #815.\n\nNeed to handle hk-aliases specially in typedNew\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Oct 20 16:52:05 2015 +0200]"},
{"name" : "cbb565a436196b102c27688d1da8f27bea12bae4", "time" : 1445332764, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #821 from dotty-staging/fix-check-simple-kinded\n\nCheck that some types are not higher-kinded.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Tue Oct 20 11:19:24 2015 +0200]"},
{"name" : "78d769004bdcd152f9f4816bb5cf699aeeb73ff3", "time" : 1445270883, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #823 from smarter/fix/lifting-and-inference\n\nAlways fully define the types of lifted expressions", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Mon Oct 19 18:08:03 2015 +0200]"},
{"name" : "78488cba57f5bfdf3181a8e6df5be2b290ebf564", "time" : 1445270838, "y" : 1075, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Always fully define the types of lifted expressions\n\nFixes #822\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Mon Oct 19 18:07:18 2015 +0200]"},
{"name" : "9ede7d003926fc46dd9620876c82b33ca9526850", "time" : 1444664316, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #817 from smarter/fix/avoid\n\nFix various issues in `TypeAssigner#avoid`", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Mon Oct 12 17:38:36 2015 +0200]"},
{"name" : "db354748e387f664db4eae2aa61e1a17037548e8", "time" : 1444641070, "y" : 1069, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Address reviewer comments #811.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Oct 12 11:11:10 2015 +0200]"},
{"name" : "82a6d6f52065ae39a0a162f95e5002a6ab26cc55", "time" : 1444395608, "y" : 1078, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "TypeAssigner#avoid: do not lose type parameters when the base type changes.\n\nFixes #741.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Fri Oct 9 15:00:08 2015 +0200]"},
{"name" : "d1014c3a2cf87b783f383e52b8923a42ee1bc31c", "time" : 1444395608, "y" : 1078, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Add pos test about escaping refinements\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Fri Oct 9 15:00:08 2015 +0200]"},
{"name" : "c9c8f223f832a602f4487f3a6a5b75b8affe6280", "time" : 1444395599, "y" : 1078, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "TypeAssigner#avoid: don't miss escaping refs in complex types\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Fri Oct 9 14:59:59 2015 +0200]"},
{"name" : "48acd08ac7e6346ffa573163fc1993cbdae458cd", "time" : 1444395409, "y" : 1078, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "TypeAssigner#avoid: more precise types for inner classes\n\nWhen we need to avoid `A` in the class `A#B`, we can try to replace `A`\nby a supertype. Previously, we only tried to replace `A#B` itself by a\nsupertype.\n\nFixes #711.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Fri Oct 9 14:56:49 2015 +0200]"},
{"name" : "bea9aa282c7a929fdab815b3f34d2d697ade7bca", "time" : 1444394383, "y" : 1075, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Move Inferencing out of the Typer cake\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Fri Oct 9 14:39:43 2015 +0200]"},
{"name" : "8532c98672e6dcde4d350f253b46892cc0ece34c", "time" : 1444223248, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #799 from dotty-staging/change-inference\n\nChange inference", "author" : "PersonIdent[odersky, odersky@gmail.com, Wed Oct 7 15:07:28 2015 +0200]"},
{"name" : "6cca64fa0aa37942812d1c870b99f309dab67352", "time" : 1444218118, "y" : 1084, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Check that some types are not higher-kinded.\n\nInvalidates #813. Review by @darkdimius.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Oct 7 13:41:58 2015 +0200]"},
{"name" : "a8c8bdad57941071b85caa54bc57b84d8ca7d526", "time" : 1444163466, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #820 from dotty-staging/add-collection-strawman\n\nAdd collection strawman #1", "author" : "PersonIdent[odersky, odersky@gmail.com, Tue Oct 6 22:31:06 2015 +0200]"},
{"name" : "adc4a54d81746e9c77cf2ac3f5f6c439b421b76c", "time" : 1444157952, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #805 from dotty-staging/change-freeze-bounds\n\nChange : freeze bounds", "author" : "PersonIdent[odersky, odersky@gmail.com, Tue Oct 6 20:59:12 2015 +0200]"},
{"name" : "3b60c3bfd675c9c650a006a302fb35163181db89", "time" : 1444147568, "y" : 1087, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Revert \"Make prefix covariant in type maps.\"\n\nThis reverts commit 0a48b2a6d3516f1f7d10d9a2a594a744ef98d5e8.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Oct 6 18:06:08 2015 +0200]"},
{"name" : "4bc469388a4d870f412932d380c3e04741de5575", "time" : 1444132477, "y" : 1088, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Rename collectAs -> to\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Oct 6 13:54:37 2015 +0200]"},
{"name" : "d42f4fee8717a91c845b6b8e1eaa053927f4b7e9", "time" : 1444132476, "y" : 1088, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Tweaks to conform with API set out in #818.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Oct 6 13:54:36 2015 +0200]"},
{"name" : "1521121b573c9e4766fd66c080d44c9af099b438", "time" : 1444132476, "y" : 1088, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Bugfixes and move CollectionStrawMan1 into the correct directory.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Oct 6 13:54:36 2015 +0200]"},
{"name" : "135b7255b3e90117cca9d046a89ef779adbef783", "time" : 1444132476, "y" : 1088, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Add ArrayBuffer as another Seq class. Make iterators inspectable.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Oct 6 13:54:36 2015 +0200]"},
{"name" : "868ae2acb4ef66fa6c32b45e10ba9940ba7340ad", "time" : 1444132476, "y" : 1088, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Add collection strawman and its tests\n\nThis compiles only after the changes in this branch.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Oct 6 13:54:36 2015 +0200]"},
{"name" : "0a48b2a6d3516f1f7d10d9a2a594a744ef98d5e8", "time" : 1444132323, "y" : 1087, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Make prefix covariant in type maps.\n\nAccording to the new subtyping rules,\n\n    T <: U  ==>  T#X <: U#X and T#x <: U#x\n\nTherefore type maps should treat the prefix of a named type\ncovariantly.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Oct 6 13:52:03 2015 +0200]"},
{"name" : "0838b81bea4d579f812c02fafdc50e2b1920c059", "time" : 1444132299, "y" : 1087, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Add explanations for rewritings\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Oct 6 13:51:39 2015 +0200]"},
{"name" : "5f7e2901b0d13d0201874ada72a107820870e274", "time" : 1443804406, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #804 from svalaskevicius/fix-compiling-ScalaRunTime\n\nfix compiling ScalaRunTime.scala", "author" : "PersonIdent[odersky, odersky@gmail.com, Fri Oct 2 18:46:46 2015 +0200]"},
{"name" : "6497d02675e651a79383c43f6ef38be918be1867", "time" : 1443720854, "y" : 1087, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Move failing test to pending\n\nThere is a diff, but a minor one. Instead of\n\n    (T? >: Int <: Int)\n\nwe get\n\n    (T? = Int) after pickling.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Oct 1 19:34:14 2015 +0200]"},
{"name" : "d8351e90a3f4c96a0c08990225948e90bf9c6338", "time" : 1443720854, "y" : 1087, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Add test case\n\nIter2.scala fails with 6 errors, but succeeds once lubs and glbs do not try to\nunify under invariant type constructors.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Oct 1 19:34:14 2015 +0200]"},
{"name" : "cc942e6a44951ea49601f822baeb38bbf5536294", "time" : 1443720854, "y" : 1087, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Reshuffle nested and/or calls.\n\nOverall goal: Push backtracking deeper into the tree.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Oct 1 19:34:14 2015 +0200]"},
{"name" : "241065192926524292f950288518533429297666", "time" : 1443720854, "y" : 1087, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Freeze constraints when checking parameter matching and subsumption.\n\nChecking whether two alternatives are the same should not unify\nthem by instantiating type variables.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Oct 1 19:34:14 2015 +0200]"},
{"name" : "2d6d432001bb237897918a05bd3e82be87dc8a11", "time" : 1443720806, "y" : 1087, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Fix typo in previous commit.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Oct 1 19:33:26 2015 +0200]"},
{"name" : "424fab79e56d376acbc2cdb5a203a527d0b2248d", "time" : 1443720805, "y" : 1087, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Opportunistically merge A & A -> A and B | B -> B in <:<\n\nCases like these (in fact one of the operads was a type variable\nthe other its underlying polyparam) arose in pos/overloads.scala and caused\ndeep subtype recursions.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Oct 1 19:33:25 2015 +0200]"},
{"name" : "6288a1bb35f8167ad3ba8784fb9ac95e7fbde7e7", "time" : 1443720805, "y" : 1087, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Implement toString for OrderingConstraint\n\nWe had problems printing constraints which are ill-formed, because\nthe basic operations & , | cause exceptions themselves. toString\nserves as a fallback if show does not work.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Oct 1 19:33:25 2015 +0200]"},
{"name" : "3f4c6a2b63bf94526792d108eaffc761d7d19ee5", "time" : 1443720805, "y" : 1087, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Slight code refactoring\n\nAvoid redundant computations when already in printing mode.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Oct 1 19:33:25 2015 +0200]"},
{"name" : "c6b21267c1f96cf8708689319f884d7d5cc04284", "time" : 1443720805, "y" : 1087, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Restore state when detecting a baseTypeRef cycle.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Oct 1 19:33:25 2015 +0200]"},
{"name" : "7352fc4a6fd7b3637bb7eb5f79f8a14f4e46a2b1", "time" : 1443720805, "y" : 1087, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "underlyingChain -> underlyingIterator\n\nmake successive underlying values an iterator (so that we\ndo not run into a stackoverflow in case of cycles).\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Oct 1 19:33:25 2015 +0200]"},
{"name" : "22417e217d7e5656af3ded79411db29589239f27", "time" : 1443720805, "y" : 1087, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Don't log when in Printing mode.\n\nLogging while printing messes up the recursion counts.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Oct 1 19:33:25 2015 +0200]"},
{"name" : "e14f23bfea5d3211d89a827567759350e1b79a03", "time" : 1443720805, "y" : 1087, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Fix compilation error.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Oct 1 19:33:25 2015 +0200]"},
{"name" : "3604a738654effc20be1d31b0e7af3d0847114b4", "time" : 1443720805, "y" : 1087, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Replace withMode by addMode\n\nwithMode sets the whole mode, nit an individual bits. This was used\nwrongly in several places. Make this less of a trap by renaming\nwithMode -> withModeBits.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Oct 1 19:33:25 2015 +0200]"},
{"name" : "fe714ed2b6aaca41f1e6681b217022b301f3049d", "time" : 1443720805, "y" : 1087, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Change some occurrences of <:< to frozen_<:<\n\nSome subtype tests should not instantiate type variables, in particular\nthose having to do with & and |.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Oct 1 19:33:25 2015 +0200]"},
{"name" : "78239daf86cf6d45fec46f259e55e1fdbd963046", "time" : 1443720805, "y" : 1087, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Generalize rules for isSubType between NamedTypes.\n\nCan assume P#T <: Q#T if P <: Q. This follows from\nthe rules how we expand # to existentials.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Oct 1 19:33:25 2015 +0200]"},
{"name" : "3ae9347bca8edbd46aa296570bb2b718a4849665", "time" : 1443622330, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #812 from dotty-staging/fix/#806-signature-matching\n\nFix #806 signature matching", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed Sep 30 16:12:10 2015 +0200]"},
{"name" : "a537ac19fb5623115384da7dd40ba0f7dce17479", "time" : 1443618096, "y" : 1112, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Replace `containsSig` with `matches`.\n\ncontainsSig still used param-only matching, which is incorrect\nin the new system, because different overloaded methods may have the\nsame parameter signature.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Sep 30 15:01:36 2015 +0200]"},
{"name" : "25431a96c849c878c577e7449d9f8eeec9f94328", "time" : 1443616799, "y" : 1112, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Refinements to signature matching\n\n1) Matching after erasure also takes wildcards into account\n(before it didn't).\n\n2) Combine all signature matching operations into a single matchDegree method.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Sep 30 14:39:59 2015 +0200]"},
{"name" : "ee4e2e0178d0db6494f2a971f5a5b9d3c8f732db", "time" : 1443613958, "y" : 1112, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Fix a long sleeper bug\n\nWhen setting the denotation we did not change the checked period.\nThis can lead to a situation where a denotation is set to NoDenotation,\nyet the checked period is something else. This means in effect the denotation\nwill vanish at the checked period. This bug caused the junit test failure\nabout \"non-member exception\" for sourceFile in DottyBackendInterface.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Sep 30 13:52:38 2015 +0200]"},
{"name" : "48a1f089dd34a4554e98bb1edcc08eb7ebaee384", "time" : 1443547171, "y" : 1112, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Move test to pos\n\nA test that checked for errors on overloading\nnow succeeds with the new rules.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Sep 29 19:19:31 2015 +0200]"},
{"name" : "a336ec0a700c0902c74d5318ab47929bc28c5413", "time" : 1443547171, "y" : 1112, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Refine atSignature\n\natSignature should also check result type names, except\n - if one of the result is a wildcard\n - a boolean flag relaxed is explicitly set\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Sep 29 19:19:31 2015 +0200]"},
{"name" : "2d9dcecc5757e4bd8659e78a94119c61ebc81a14", "time" : 1443547171, "y" : 1112, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Fix problem with avoid.\n\nWhen determining what to refine we should not rely only on signatures\nbut we need full denotation matching.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Sep 29 19:19:31 2015 +0200]"},
{"name" : "5b07f556ebb1e87d5b5c87c6375fa33c29c9a72d", "time" : 1443547171, "y" : 1112, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Eliminate Config.newMatch option\n\nWith the new approach to matching it is no longer sound.\nWe always have to match infos anyway to be sure.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Sep 29 19:19:31 2015 +0200]"},
{"name" : "9c8e247d8900f3fb6f497bc5e269b68f6bc967b7", "time" : 1443547133, "y" : 1112, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Matching denotations should take infos into account\n\nWhenchecking whether two denotations match it is not enough\nto look at the signatures. The signatures might match (on the\nparameters) but the actual parametre types might be different.\nThe change always tests infos after signatures, effectively\nturning the signature test into a pre-filter.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Sep 29 19:18:53 2015 +0200]"},
{"name" : "a5db9c71ce9be1bbfb745f5da088324c9510350c", "time" : 1443543589, "y" : 1069, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Mixin: materialise rhs for inherited scala2 modules\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Sep 29 18:19:49 2015 +0200]"},
{"name" : "80f8c1b06277321629da9afbfc66f4675187d18c", "time" : 1443543557, "y" : 1069, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "ExplicitOuter: Scala2 inner modules always require outer pointer.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Sep 29 18:19:17 2015 +0200]"},
{"name" : "ffe77a4364e7a4bfa7fdcc9e1fa75bd4fcd8abb7", "time" : 1443543514, "y" : 1069, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "UnpickleScala2: Scala modules do not set Lazy Flag.\n\nDotty modules do.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Sep 29 18:18:34 2015 +0200]"},
{"name" : "49eac6eab9a58a7d59088db91e104a8f3b0ecd78", "time" : 1443543468, "y" : 1069, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Typer: remove unused TyperContextOps\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Sep 29 18:17:48 2015 +0200]"},
{"name" : "7d3a0064aba0cfe74f7eea7bb43b913cd2c224c7", "time" : 1443523510, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #807 from svalaskevicius/cleanup-code\n\nCleanup code", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Tue Sep 29 12:45:10 2015 +0200]"},
{"name" : "791253b02998fc97f0b93c5d69f31d3b3e3745ab", "time" : 1443206607, "y" : 1125, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "add pos_companions to the suite\n", "author" : "PersonIdent[Sarunas Valaskevicius, rakatan@gmail.com, Fri Sep 25 19:43:27 2015 +0100]"},
{"name" : "e6706d1e8d73f97ba519f0345f46a8ec2fab4b8e", "time" : 1443195604, "y" : 1125, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "remove unused code\n", "author" : "PersonIdent[Sarunas Valaskevicius, rakatan@gmail.com, Fri Sep 25 16:40:04 2015 +0100]"},
{"name" : "1c131d55bbaed78ee646679e151cb0e792bfa508", "time" : 1443194584, "y" : 1127, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "add a test for a pattern match with ignored type param\n", "author" : "PersonIdent[Sarunas Valaskevicius, rakatan@gmail.com, Fri Sep 25 16:23:04 2015 +0100]"},
{"name" : "bb3efab1d5406257582a3f8c02c814643e4626b9", "time" : 1443194584, "y" : 1127, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "fix compiling ScalaRunTime.scala\n", "author" : "PersonIdent[Sarunas Valaskevicius, rakatan@gmail.com, Fri Sep 25 16:23:04 2015 +0100]"},
{"name" : "a3cb6b0d6182b3e5a831130b3485b7b2f99e26e1", "time" : 1443194400, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #802 from dotty-staging/change-hk-1\n\nChange hk take 2", "author" : "PersonIdent[odersky, odersky@gmail.com, Fri Sep 25 17:20:00 2015 +0200]"},
{"name" : "1ba3d612bce92b468fa3232a3157c2a49c48d741", "time" : 1442836296, "y" : 1130, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Fixes to comments suggested by reviewer\n\nFixes suggested by @marter when reviewing previous hk PR.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Sep 21 13:51:36 2015 +0200]"},
{"name" : "84590eb15907f40f3569c8f3d1c250f7a22c85d6", "time" : 1442834437, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #800 from dotty-staging/paramForwarding-comment\n\nParamForwarding #783: answer my own question.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon Sep 21 12:20:37 2015 +0100]"},
{"name" : "71e3133ef65b06a5bce605cd4f0ebf879cc05118", "time" : 1442832605, "y" : 1130, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Eta expand $apply projected types if needed\n\nIt turns out that asSeenFrom can produce types\nthat get projected with $apply but that are not\nhigher-kinded. An exampple failure is in Iter3,\nandother in scala.collection.immutable.Map (which is\nnow part of the test suite).\n\nWe now detect that situation, and eta expand the\nprojected type in `derivedSelect`, this will\nforce a subssequent `lookupRefined` which will give\nthe desired normalized type.\n\nAlso added is a configurable test that checks that\n$apply projected tyeps are in fact higher-kinded.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Sep 21 12:50:05 2015 +0200]"},
{"name" : "88638199588a4711b383d7de5a00872f26d69cac", "time" : 1442773441, "y" : 1133, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "ParamForwarding #783: answer my own question.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sun Sep 20 19:24:01 2015 +0100]"},
{"name" : "154f3511d52c6b748c03d97dd035f0ad79f9a355", "time" : 1442592737, "y" : 1130, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Move failing test to pending.\n\nThe original IterableSelfRec is not syntactically legal after\nthe hk changes. I attempted to fix, but there's still a type error.\nNeed to investigate whether this is a true error or a bug.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 18 18:12:17 2015 +0200]"},
{"name" : "5ee7b9ed189d77fbf864c5558841f53750db2c30", "time" : 1442592737, "y" : 1130, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Avoid orphan RefinedThis types in glb/lub.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 18 18:12:17 2015 +0200]"},
{"name" : "d1cd3d738213c08242cae66623edba8e0102574c", "time" : 1442592737, "y" : 1130, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Keep track of parameter bounds in LambdaAbstract and EtaReduce\n\n1) Lambda abstract now records bounds of abstracted type parameters in TypeLambda\n2) Eta-reduce likewise keeps the bounds it finds in the TypeLambda\n3) Eta-reduce now also translates hk$i references to type parameters of the reduced type.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 18 18:12:17 2015 +0200]"},
{"name" : "e8aecfa4d48383321549aa8f1ec8d1edb0ccaf06", "time" : 1442592737, "y" : 1130, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Disallow wildcard arguments to higher-kinded types...\n\n...unless the HK type can be eta-reduced to a class type.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 18 18:12:17 2015 +0200]"},
{"name" : "4148970a984de945c69f345381f0f03e84d7d6c2", "time" : 1442592736, "y" : 1130, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Generalize eta reduction to partially applied types.\n\nNow also allows to reduce something like\n\n  ([T] => Map[T, String])\n\nto\n\n  Map[_, String]\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 18 18:12:16 2015 +0200]"},
{"name" : "4aa1d5e1d9e4edfc1df6161504861840b24687ae", "time" : 1442592736, "y" : 1130, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Fix problem in typeParams\n\nAccidentally forwarded to rawTypeParams. This solved the problem with mismatching\ntype params in appliedTo that was caught in testLifted.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 18 18:12:16 2015 +0200]"},
{"name" : "ab6e5cebebe8c59901413f89281073d6eec7f8e1", "time" : 1442592736, "y" : 1130, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Rewrite compareHK to be kind-correct\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 18 18:12:16 2015 +0200]"},
{"name" : "38ac02916ec0beef0cb93f0fdd48ad1f9dfdcf48", "time" : 1442592736, "y" : 1130, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Replace isLambda with ifHK\n\nReplace occurrences of isLambda with isHK, because isHK is\na bit faster and simplier.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 18 18:12:16 2015 +0200]"},
{"name" : "5a9a48d21038b78545aba15d0d99238c3c395d47", "time" : 1442592640, "y" : 1130, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Remove magic from derivedRefinedType.\n\nIt's no longer needed with new hk scheme.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 18 18:10:40 2015 +0200]"},
{"name" : "31048ad571b8c917a4c67f48899babae0703cae2", "time" : 1442592639, "y" : 1130, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Rename of hk args HK$x -> hk$x\n\nThese are not user-accessible types, so no need to follow\ntype convention and write in upper case.\n\nAlso, rename occurrences of lambda to Lambda, to make clear\nwe mean a type lambda.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 18 18:10:39 2015 +0200]"},
{"name" : "845a5d65796365454ceaaba48603afa07792f7e7", "time" : 1442592639, "y" : 1130, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Simplify EtaReduce\n\nby removing dead case.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 18 18:10:39 2015 +0200]"},
{"name" : "2634498cede2525b07c1e40fbad0f5ae0cf96fda", "time" : 1442592639, "y" : 1130, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Rename Apply -> hkApply\n\nWant to have a unique name for Apply, so that tests for higher-kinded types become cheaper.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 18 18:10:39 2015 +0200]"},
{"name" : "caae19ba37b7b05b2fd2e1edbad62ee9bf46c5e4", "time" : 1442592595, "y" : 1130, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Add missing position to error\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 18 18:09:55 2015 +0200]"},
{"name" : "09ebc0f2b643c2be090c1aa0343880f063edc5be", "time" : 1442592595, "y" : 1130, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Adapt type arguments in typedAppliedTypeTree\n\nPreviously, only pattern bound arguments were adapated. This was an oversight.\nAlso, change logix so that we survive empty type parameter lists. This was\nalso an oversight before.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 18 18:09:55 2015 +0200]"},
{"name" : "c0918c69e578edad40320e0a5bac1603f5ce94fa", "time" : 1442592595, "y" : 1130, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Better error reporting in TreePickler\n\nTurn a possible NPE into an AssertionError. The latter\nare caught in pickleTree, so an error leaves a trace about\nwhat was pickled.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 18 18:09:55 2015 +0200]"},
{"name" : "965e7e368bcf7346b28ef19f694be502e76a1ca3", "time" : 1442592595, "y" : 1130, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Project all high-kinded types with #Apply\n\nUsed to be just instantiated lambdas. With the new scheme\nevery type with a kind higher than * needs to be projected\nwith #Apply.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 18 18:09:55 2015 +0200]"},
{"name" : "83ae926dad0caf945a8633b39b557567415b2bbe", "time" : 1442592447, "y" : 1130, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Try to eta reduce type applications.\n\nRewrite a type application like\n\n    ([HK$0] => C[HK$0])(T)   to   C[T]\n\nAvoids application cahins to become unnecessarly large.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 18 18:07:27 2015 +0200]"},
{"name" : "05a4660886276284f966896bc800c8862919c01f", "time" : 1442592447, "y" : 1130, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Follow alias types when computing type params.\n\nThis aligns typeParams and rawTypeParams. It's not strictly to necessary, though.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 18 18:07:27 2015 +0200]"},
{"name" : "31f9da14e5f2357c8af3c106acccc89fdd1f222c", "time" : 1442592447, "y" : 1130, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Temporary fix to testLifted\n\nDiscrepancies between numbers of formal and actual type arguments were\nobserved when typing partialFunctions.scala under new scheme.\n\nShould come back to this when subtyping is rewrittem/simplified to\nwork with new hk-scheme. Maybe testLifted is no longer needed at all.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 18 18:07:27 2015 +0200]"},
{"name" : "094c3bdef0fcc725c6eada7cbf70a9c51ce1ed7e", "time" : 1442592447, "y" : 1130, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Don't lambda abstract derived types\n\nDerived types already contain the lambda abstractoion; lambda abstracting\nthem again would cause a double lambda.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 18 18:07:27 2015 +0200]"},
{"name" : "47049965ce2b72e49b0d1ca29c10966f7d5012fb", "time" : 1442592447, "y" : 1130, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Avoid cycles when eliminating existentials in unpickling\n\nNew hk-scheme caused cycles in elimExistentials which are fixed\nby this patch.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 18 18:07:27 2015 +0200]"},
{"name" : "3be3aa3bc8c8e37bdb1f1495e40cfe357f678f28", "time" : 1442592447, "y" : 1130, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Use EtaExpand instead of LambdaAbstract when unpickling typerefs\n\nWhen unpickling from Scala2 TypeRefs with arguments which do not\nrefer to classes, use EtaExpand instead of LambdaAbstract. Lambda Abstrct\nis wrong since it drops type arguments.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 18 18:07:27 2015 +0200]"},
{"name" : "b12edd1959450f5473cef095821b86400b959e8d", "time" : 1442592447, "y" : 1130, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Allow to use safe substitution in LambdaAbstract\n\nNeeded to avoid cycles involving F-boundes hk-types when reading Scala2 collection classes\nwith new hk-scheme.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 18 18:07:27 2015 +0200]"},
{"name" : "e2aa258c3781fa9ee62fa47dd3b1206b09588c17", "time" : 1442592447, "y" : 1130, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Drop parameterizeWith\n\nparameterizeWith picked between simple hk types and lambda abstraction.\nNo longer needed because now we always lambda abstract.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 18 18:07:27 2015 +0200]"},
{"name" : "eb0b2886f642ec00b2e7f2db569c25f0e1e34757", "time" : 1442592447, "y" : 1130, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "A non-class typeref has type parameters only if subtype of a lambda class.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 18 18:07:27 2015 +0200]"},
{"name" : "525e0ac7bcb35eb78fedd4a943ef07106752f9fb", "time" : 1442592446, "y" : 1130, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Lambda abstract all TypeRefs when unpickling.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 18 18:07:26 2015 +0200]"},
{"name" : "60b231ce30a6eb0e99d031bdbcee3032d3ae5f3b", "time" : 1442592446, "y" : 1130, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Always lambda abstract TempPolyTypes representing types.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 18 18:07:26 2015 +0200]"},
{"name" : "36ea47659d7cccbff6b011e86063660bdf391bc5", "time" : 1442592446, "y" : 1130, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Don't eta expand in appliedTo\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 18 18:07:26 2015 +0200]"},
{"name" : "c8b22f5e8a9d404ba671682db687d6a1bc1067eb", "time" : 1442592316, "y" : 1130, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Add a test that logs the classpath to pinpoint setup failures.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 18 18:05:16 2015 +0200]"},
{"name" : "a4d51ed8ad7eea8d126ddfb8395943a2e83950cd", "time" : 1442592316, "y" : 1130, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Add comment.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 18 18:05:16 2015 +0200]"},
{"name" : "8c6b70912984e546f16064817446aea3f3863653", "time" : 1442592315, "y" : 1130, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Add EtaReduce method.\n\nEtaReduce will be used to keep applications on eta expanded methods small.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 18 18:05:15 2015 +0200]"},
{"name" : "c28f023c0eb35be14c0e649c14ad10b00603e615", "time" : 1442592315, "y" : 1130, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Avoid generating companion-methods for non-class types.\n\nThis would lead to a crash. Example is in Predef:\n\n    object Pair\n    type Pair\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 18 18:05:15 2015 +0200]"},
{"name" : "f19220307f25a08269ab5098de784f023cb6b02b", "time" : 1442592315, "y" : 1130, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Adapt arguments in all type applications\n\nPreviously, we did this only in applications in rhs of type definitions.\nNeed to do it everywhere.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 18 18:05:15 2015 +0200]"},
{"name" : "5f7eadf3f4d4798dec7c87c92a86c882948ac3de", "time" : 1442592315, "y" : 1130, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Strenghten condition in EtaExpandIfLambda\n\nWithout the additional `typeParams.nonEmpty` condition we got a crash\nin t1439.scala\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 18 18:05:15 2015 +0200]"},
{"name" : "fdf8f867fa1a1d2493052b19bd50907f1b5d75e8", "time" : 1442592315, "y" : 1130, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Fix argument eta expansion\n\n... and move to TypeApplications. isLambda test\nwas the wrong way before.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 18 18:05:15 2015 +0200]"},
{"name" : "0d95c76466012f9a7e6535ebba0620df4042f179", "time" : 1442592315, "y" : 1130, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Turn assertion into a test in etaExpandArgs.\n\nErreneous programs could have a difference in lengths\nbetween type parameters and type args, but this is tested\nanyway in Typer.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 18 18:05:15 2015 +0200]"},
{"name" : "0bdee32e8b35b6c994248def87cb8f6f874572dd", "time" : 1442592315, "y" : 1130, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Black hole detection for LazyRefs\n\nNow catches attempts to recursively force a LazyRef type\nthat's in train of being evaluated.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 18 18:05:15 2015 +0200]"},
{"name" : "b10b93e6f8bdee650ccbe588db476bd0c8c8819c", "time" : 1442592315, "y" : 1130, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Better diagnostics for failed sigName calls.\n\nIt used to be \"assertion error: NoType\" whenever sigName git\na projection of a missing member. Now we find out about\nwhat type was projected.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 18 18:05:15 2015 +0200]"},
{"name" : "3eb114351520b16028f9fbcd7a2fcdd6c7e0f5c7", "time" : 1442592314, "y" : 1130, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Check argument lengths in typedAppliedTypeTree\n\nWith the hk-types schem changed, we need to make sure that actual and formal argument lists\nof parameterized types have the same length.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 18 18:05:14 2015 +0200]"},
{"name" : "92fe081bcdf7f02cd65350463db2d3d4fa72f1eb", "time" : 1442592314, "y" : 1130, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Eta expand type arguments corresponding to lambdas\n\nIn Namer, eta expand any type argument that corresponds to a higher-kinded type parameter.\nAlso, check that all type parameter lists are fully applied.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 18 18:05:14 2015 +0200]"},
{"name" : "e2e71dcbb2343d28be0f5311c1cb0094db8cdb05", "time" : 1442592314, "y" : 1130, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Avoid cyclic references in containsRefinedThis\n\nAvoid forcing info if the reference goes to a class. This avoided\na CyclicReference when reading Scala's standard library form pos/collections\nwhen fiddling with the hk logic.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 18 18:05:14 2015 +0200]"},
{"name" : "8e1f0da3a22fb282e7bbde728c488d417aff5358", "time" : 1442592314, "y" : 1130, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Clean up of logic in typeDefSig\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 18 18:05:14 2015 +0200]"},
{"name" : "22a2c79adf3acb8b5dd341b552e499bced58c537", "time" : 1442591505, "y" : 1176, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Generalize set of typevars instantiated before implicit search\n\nWe now also consider type variables in a selection prefix of the\napplication. The test case was augmented to include a snippet which\nonly succeeds under the generalization.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 18 17:51:45 2015 +0200]"},
{"name" : "7f983665985d93c735d519f7d24d9ba072b26cd4", "time" : 1442590776, "y" : 1176, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Added neg test\n\n(scalac and dotty both produce an error here)\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 18 17:39:36 2015 +0200]"},
{"name" : "5e48d1c25e9fe1f5c6b962a6edb209e587150b86", "time" : 1442590776, "y" : 1176, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Add test case\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 18 17:39:36 2015 +0200]"},
{"name" : "493fbbdd6cd0ca7fecd7e34f963563fe58e1f877", "time" : 1442590676, "y" : 1176, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Fixes #739\n\nby adding the following rule:\n\nBefore typing an implicit parameter list of a method m, instantiate all type parameters of m that occur in the type of some preceding value parameter of m.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 18 17:37:56 2015 +0200]"},
{"name" : "7a97e86c71090600397fd9b14a5a4111c52d8498", "time" : 1442589734, "y" : 1176, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Change algorithm that computes instantiation direction\n\nChange algorithm that determines whether type variables are\nminimized or maximized. We used to look only at the variance\ntype variable in the containing type. We now also look with\nhigher precedence at the direction from which the type variable\nwas constrained. This is closer to what scalac does.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 18 17:22:14 2015 +0200]"},
{"name" : "3a8f70881c4e2298008cadee4def9d13cebcbe12", "time" : 1442586261, "y" : 1176, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Add test case\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 18 16:24:21 2015 +0200]"},
{"name" : "6bb62102e0542149a3644819fdcfae40ce08ba9e", "time" : 1442578311, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #798 from dotty-staging/fix-791\n\nFix 791", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri Sep 18 13:11:51 2015 +0100]"},
{"name" : "ec683c17773ab86782859fdc678d98c34810c1f3", "time" : 1442578280, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #796 from dotty-staging/fix-#789-problems-in-erasure\n\nFix #789 problems in erasure", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri Sep 18 13:11:20 2015 +0100]"},
{"name" : "62e136a3301ed873783b51261c943bd3d6d7267d", "time" : 1442578248, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #795 from dotty-staging/fix-weaker-access-errors\n\nFix weaker access errors", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri Sep 18 13:10:48 2015 +0100]"},
{"name" : "41b8853ca9a8327c65cb96a8ffccb5491d53edda", "time" : 1442487769, "y" : 1185, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Harmaonize numeric arguments only during typer.\n\nAfterwards, implicit conversions are no longer available.\nFixes #791.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Sep 17 13:02:49 2015 +0200]"},
{"name" : "4966589b7d09f1650bf2df461ba3c6461552a0e3", "time" : 1442486475, "y" : 1185, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Fix #791 erasedLub of two AnyVals is Object.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Sep 17 12:41:15 2015 +0200]"},
{"name" : "50e3a7d92f4b7cc4cd922eb92c7ed8bf793b159c", "time" : 1442484104, "y" : 1185, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "New phase: ExplicitSelf\n\nMakes self types explicit, if this is needed to identify\na member in a select. Fixes #789.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Sep 17 12:01:44 2015 +0200]"},
{"name" : "7ee013745699029830a822d0b9e1e8862eaa0b8c", "time" : 1442422505, "y" : 1185, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Fix weaker access error when generating bridges\n\nA bridge cannot have weaker access than the symbol it overrides.\nThis triggered an assertion error on \"clone\" for pos/t2183.scala.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Sep 16 18:55:05 2015 +0200]"},
{"name" : "99d397d7a02a2ad3aed07e8c48a60bd32564ea62", "time" : 1442422442, "y" : 1185, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Better diagnostic for weaker access errors\n\nFix typo, and print infos alongside fully qualified names.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Sep 16 18:54:02 2015 +0200]"},
{"name" : "95836327367da8be99cd2363bfb1b3539b21c760", "time" : 1442399966, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #792 from dotty-staging/dotc-tasty\n\nbin/dotc: add an option to run -tasty.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed Sep 16 12:39:26 2015 +0200]"},
{"name" : "4a8dc2dcf92e796f21b23451b3e244c7a5568082", "time" : 1442318543, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #790 from dotty-staging/mixin-traitsetters\n\nMemoize: Support creating valid trait setters", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Tue Sep 15 14:02:23 2015 +0200]"},
{"name" : "be092f2099b239c99a0a774582f96ddea4fc9cef", "time" : 1442249978, "y" : 1192, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "bin/dotc: add an option to run -tasty.\n\n@vladimirNik, should simplify your life\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Sep 14 18:59:38 2015 +0200]"},
{"name" : "12053fa4d55497fc4df06afd67ba3762019969c3", "time" : 1442243243, "y" : 1193, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Enable more tests that pass\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Sep 14 17:07:23 2015 +0200]"},
{"name" : "91f992c8af3e61a76bd862ad43b9abef9a6c3403", "time" : 1442241728, "y" : 1193, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Typer: allow to assign to vals inside trait setters.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Sep 14 16:42:08 2015 +0200]"},
{"name" : "406ec56c703c29ad29da2f5f6df366577d851ea5", "time" : 1442241698, "y" : 1193, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Mixin: support trait setters.\n\nUsed to create a separate field from trait setter, as the field name wasn't deconstructed.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Sep 14 16:41:38 2015 +0200]"},
{"name" : "dc57d6fcc539d3d1340305aa67b29763cee3b5c0", "time" : 1442237827, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #672 from dotty-staging/compile-dotty2\n\nCompile dotty.*, not only dotty.tools.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon Sep 14 15:37:07 2015 +0200]"},
{"name" : "e7ef08da8a699bdb96d0469c2a76c65709c29324", "time" : 1442237543, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #773 from dotty-staging/final-vals2\n\nMemoize: duplicate scala2 behaviour: don't create fields for final vals.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon Sep 14 15:32:23 2015 +0200]"},
{"name" : "e491cfbc14ec36afccc80a589f7bc18d62f37b2f", "time" : 1442230889, "y" : 1198, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "final-fields.scala: tes objects with constant final vals.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Sep 14 13:41:29 2015 +0200]"},
{"name" : "ea6de3869d2cee752f9a616b17ef4bb45a6288d1", "time" : 1442230857, "y" : 1198, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Memoize: bring back comment about how final vals are compiled\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Sep 14 13:40:57 2015 +0200]"},
{"name" : "3ff309751d2fd30d1a63eac306b6d871f840b505", "time" : 1442230697, "y" : 1198, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Add another test\n\nCheck that calling a side effecting function returning\na constant type does not get suppressed.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Sep 14 13:38:17 2015 +0200]"},
{"name" : "c8b359d5a29f76f8ed7985d22a6515637befe7f8", "time" : 1442230697, "y" : 1198, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Augment test file\n\nto test for propagation of constant types.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Sep 14 13:38:17 2015 +0200]"},
{"name" : "56dfb4e953e42e1defd20d58fb671c6ae802e91a", "time" : 1442230696, "y" : 1198, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Memoize should produce constant DefDefs for constant final vals.\n\nIt produced just the right hand side literal before.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Sep 14 13:38:16 2015 +0200]"},
{"name" : "ef6e2e9c6017675ffc2fefaaf2b217d05681a4c2", "time" : 1442230575, "y" : 1198, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Purity checking should take constant expressions into account.\n\nA constant expression with pure arguments is pure. Previously, this\nwas not taken into account, which meant that literalize did not\nwork for constant expressions contiaining primitive operations or\nString adds.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Sep 14 13:36:15 2015 +0200]"},
{"name" : "8a538ce728ed61c42ddb66f196dd217b8451bf9e", "time" : 1442230574, "y" : 1198, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Move literalize functionality to PostTyper\n\nNow, PostTyper replaces constant expressions with literals. If we wait any longer\nthen any tree rewriting of an application node would have to do constant folding again,\nwhich is a hassle.\n\nWith the previous late Literalize phase, constant expressions consisting of operations\nand arguments lost their constantness in PostTyper.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Sep 14 13:36:14 2015 +0200]"},
{"name" : "8fc5835ca13ef5ab47b29d5240d5e8d79a870b7c", "time" : 1442230574, "y" : 1198, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Constant final vals need to have right hand type.\n\nPreviously, a constant right hand side was not propagated\nto the type of a final val that implemented another val\nwith a given type. The inherited type was used instead.\nThis means final vals implementing abstract vals\nget evaluated too late.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Sep 14 13:36:14 2015 +0200]"},
{"name" : "1ff1cf5393778b7dc21f765f5c8f372c05877862", "time" : 1442230574, "y" : 1198, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Follow TermRefs when constant folding\n\nA TermRef representing a constant value needs to be\nconsidered a constant when folding.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Sep 14 13:36:14 2015 +0200]"},
{"name" : "869bdb0503628e8665292073087b08b91399a6c9", "time" : 1442230574, "y" : 1198, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Test behaviour of final vals.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Sep 14 13:36:14 2015 +0200]"},
{"name" : "f1f141eb04fa79bdee5a3b2aa354c488523ac199", "time" : 1442230574, "y" : 1198, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Memoize: duplicate scala2 behaviour: don't create fields for final vals.\n\nThis affect initialisation order and we rely on artifacts of initialisation order in Dotty.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Sep 14 13:36:14 2015 +0200]"},
{"name" : "2a2940e4a92508b767885c1c5ef63b09b564aa43", "time" : 1442229151, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #787 from dotty-staging/fix-#779-recursive-hk-types\n\nFix #779 recursive hk types", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon Sep 14 13:12:31 2015 +0200]"},
{"name" : "4f2e912d38bef3c3ccb799dd2d2ede7e3f73d00e", "time" : 1442223797, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #774 from dotty-staging/fix-constructors\n\nConstructors: fixes to maintain needed private fields.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon Sep 14 11:43:17 2015 +0200]"},
{"name" : "863d72dea0ada792ec3813fce588a996c532d295", "time" : 1442222864, "y" : 1211, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Address review comments of #774\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Sep 14 11:27:44 2015 +0200]"},
{"name" : "7f01a79ae9e368a4b6dfe70bff0c8c9ad6744ac6", "time" : 1442222675, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #788 from dotty-staging/fix-#781-context-bounds\n\nFix #781 context bounds", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon Sep 14 11:24:35 2015 +0200]"},
{"name" : "6235c45150a4a701aa006c304ded58becdc9a3ad", "time" : 1442064527, "y" : 1213, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Add test\n\nShould have been added on final vals commit.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Sep 12 15:28:47 2015 +0200]"},
{"name" : "5386c88b6e8d2f2ccf68e7d4e14b5fde6faf562f", "time" : 1442054217, "y" : 1213, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Fix desugaring problem\n\nDesugaring worked incorrectly when both context bounds and default parameters were present.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Sep 12 12:36:57 2015 +0200]"},
{"name" : "6fc42dd9ea03e30f475e4eaec3e1bf95c35de0d0", "time" : 1442054139, "y" : 1213, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Add -language:Scala2 option\n\nAvoids having to fix all occurrences of procedure syntax. Will be extended to other\nbackwards compatible features.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Sep 12 12:35:39 2015 +0200]"},
{"name" : "ef4ecc11674335e095745b06f49f3387a9693777", "time" : 1441981668, "y" : 1216, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Fill in missing #Apply projections in checkNonCyclic\n\nThey might fall through the cracks in appliedTo because symbols\nare still completing then.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 11 16:27:48 2015 +0200]"},
{"name" : "dc44f88bbf31db68d51177c137c9c43eb4f11398", "time" : 1441981620, "y" : 1216, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Pull out isLegal prefix.\n\nIt is used twice, should use same logic each time.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 11 16:27:00 2015 +0200]"},
{"name" : "03f860b01b3f7b538925b62609e788884bfdc7ff", "time" : 1441810841, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #786 from dotty-staging/fix-#776-param-forwarders\n\nFix param forwarding", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed Sep 9 17:00:41 2015 +0200]"},
{"name" : "edee93a70daa0e4ebd2a5390aca629c4d0d2e3d8", "time" : 1441810818, "y" : 1219, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Fix comment in ExpandPrivate\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Sep 9 17:00:18 2015 +0200]"},
{"name" : "16a3c393bd8001b7e8e2f8724f2d23279ed55bb1", "time" : 1441805641, "y" : 1219, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Add postcondition to ExpandPrivate.\n\nCheck that we do not create members with weaker access than members in superclass.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Sep 9 15:34:01 2015 +0200]"},
{"name" : "bdc0471f52491fcf9268fd369e02b1fbc5263518", "time" : 1441805567, "y" : 1219, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Add verbose message to assertion in applyOverloaded\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Sep 9 15:32:47 2015 +0200]"},
{"name" : "4804bb23f2dc7bf143dc8739750e979fec61c7c4", "time" : 1441803738, "y" : 1219, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "ExpandPrivate: add links to discussion.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Sep 9 15:02:18 2015 +0200]"},
{"name" : "15b9a7d22e136f5d29e950102bc1fdd9d6bf8d55", "time" : 1441803612, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #785 from dotty-staging/fix-#778-cyclic-references\n\nSurivive Cyclic References when unpickling Scala 2 HK types", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed Sep 9 15:00:12 2015 +0200]"},
{"name" : "46a7391d068bae0da81a36fd6fe549d666764bb0", "time" : 1441722717, "y" : 1219, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Fix param forwarding\n\nParameter forwarders cannot stay private, since private members\nare not allowed to have the same name as inherited public ones.\n\nReview by @DarkDimius\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Sep 8 16:31:57 2015 +0200]"},
{"name" : "71150c808111055d23ab88763a487dbf743c4b88", "time" : 1441707214, "y" : 1225, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Surivive Cyclic References when unpickling Scala 2 HK types\n\nCloses $778. It seems impossible (or very hard) to avoid Cyclic References\nwhen unpickling Scala2 files. So we try to survive them instead.\n\nReview by @DarkDimius\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Sep 8 12:13:34 2015 +0200]"},
{"name" : "76d083889d52a5abbf883e5577b1fd21c9a1d903", "time" : 1441118248, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #775 from dotty-staging/fix-lv\n\nLazyVals: fix volatile lazy vals initialization", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Tue Sep 1 16:37:28 2015 +0200]"},
{"name" : "fbc1609b6022513168996cf126f7b32105312849", "time" : 1440774099, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #767 from dotty-staging/fix-#756-super-accessors\n\nFix #756 super accessors", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri Aug 28 17:01:39 2015 +0200]"},
{"name" : "d1ecc22865b201a94a18c6a4f3404ab8bbb5945a", "time" : 1440500142, "y" : 1211, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Address review comments #774\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Aug 25 12:55:42 2015 +0200]"},
{"name" : "6ccd6b5f95ed6c6e042cc79f97dc08e1c50ac438", "time" : 1440433522, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #770 from odersky/fix-repeated\n\nFix repeated", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon Aug 24 18:25:22 2015 +0200]"},
{"name" : "f0b13b1c0656a5569d74933706148671c11b4d83", "time" : 1440431348, "y" : 1230, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "LazyVals: fix volatile lazy vals initialization\n\nUsed to incorrectly set status field.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Aug 24 17:49:08 2015 +0200]"},
{"name" : "56b1951b5763a3a77230f8b405e17b2e3ed2c988", "time" : 1440430786, "y" : 1211, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Add comment to Compiler.scala about behaviour of Constructors\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Aug 24 17:39:46 2015 +0200]"},
{"name" : "a33eece6c72d2c9b36b0d279fe0e3718b7dda817", "time" : 1440430775, "y" : 1211, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Constructors: remove self validation.\n\nCuriously enough, it only found bugs in old scheme\nIt was deleting accessors, that used to be vals\nbut became defs without anybody raising the `Method` flag.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Aug 24 17:39:35 2015 +0200]"},
{"name" : "86e83aff4c06d837912e248edfe08ea8e99c731d", "time" : 1440430765, "y" : 1211, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Constructors: Do not store private fields used only to initialise other fields\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Aug 24 17:39:25 2015 +0200]"},
{"name" : "030ab74be769177977d344a309f982d052a1adfb", "time" : 1440430740, "y" : 1211, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Constructors: gather retained private vals in advance.\n\nAllows not to go deep into tree,\nadditionally fixes bugs with fields that are only used in inner classes\nbeing removed.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Aug 24 17:39:00 2015 +0200]"},
{"name" : "96d2bd1680ef5ddb0e2d49d16eb1f5daca7fccbe", "time" : 1440430663, "y" : 1211, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Memoize: call transformFollowingDeep with correct owner.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Aug 24 17:37:43 2015 +0200]"},
{"name" : "b779f163e69221d9052c801d215fa2e688f7ba44", "time" : 1440430604, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #771 from dotty-staging/fix-final-vals\n\nFix final vals", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon Aug 24 17:36:44 2015 +0200]"},
{"name" : "739f8ea2c3b39f81f54bfea4b618770d7aa1a1c6", "time" : 1440414722, "y" : 1237, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Make it a syntactic criterion whether a literal is a legal type\n\nIntroduce a new non-terminal \"SimpleLiteral\". Only SimpleLiterals can be\ntypes.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Aug 24 13:12:02 2015 +0200]"},
{"name" : "e850a99f16004a702b5fa63736ac215fc388051b", "time" : 1440365820, "y" : 1237, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Test other forms of singleton types.\n\nTested are now other numeric values, strings, booleans, which are\nall legal singleton types.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 23 23:37:00 2015 +0200]"},
{"name" : "289e273697f9304d716ed9fc834b3b2016df6f7d", "time" : 1440365781, "y" : 1237, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Better error message for Null and 'sym singleton types.\n\nNull and 'sym are not legal as singleton types because the underlying\nvalues are not stable. They are rejected now outright instead of issuing\na cryptic \"X is not stable\" error message.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 23 23:36:21 2015 +0200]"},
{"name" : "a68cfd6457e899c9cbc04a522a79c6d1c4283ca3", "time" : 1440364603, "y" : 1237, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Update SyntaxSummary to take into account SIP 23.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 23 23:16:43 2015 +0200]"},
{"name" : "f63e8f2b97bc2a84a3e5a041155789f28717632a", "time" : 1440364565, "y" : 1237, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Update neg test\n\nIt's decided that constant types and purity are independent.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 23 23:16:05 2015 +0200]"},
{"name" : "b1aecb1a8d0c7982981296ac4bfa67d9db596e24", "time" : 1440364291, "y" : 1237, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Tests of functionality.\n\nAs the comment in pos/singletons.scala says, we currently\ntest only constant propagation during typer. We should also have a\ntest that literalize produces the literals in the right places.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 23 23:11:31 2015 +0200]"},
{"name" : "5b454b1070c3018203263f3bda21db217ed84f3f", "time" : 1440364201, "y" : 1237, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Make literalize work for TermRefs of constant type.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 23 23:10:01 2015 +0200]"},
{"name" : "5710272caea25014ac36517543a85f07c5f801d1", "time" : 1440364155, "y" : 1237, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Make final vals have constant types if rhs is a constant.\n\nThis duplicates scalac behavior. Awaiting inline, this is a stopgap because we need this to work\nfor the bootstrap. Once we have inline (and a migration tool that rewrites final to final inline)\nwe can migrate this functionality over to inline values.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 23 23:09:15 2015 +0200]"},
{"name" : "c0001fb3b3dfee3b16af608983a328df9c39b900", "time" : 1440364021, "y" : 1237, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Add literal-based singleton types (SIP-23).\n\nOnly the parser needed to be updated. Everything else works out of the box.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 23 23:07:01 2015 +0200]"},
{"name" : "fc979d9fbd5c4c60c4e5a4875ec1f465fdf0c40a", "time" : 1440363915, "y" : 1237, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Make Final a \"from-start\" flag.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 23 23:05:15 2015 +0200]"},
{"name" : "bc5f076450c71661e0edeacb54391454658e3ace", "time" : 1440277098, "y" : 1247, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Avoid T* in closure parameter ValDef\n\nMap a T* via underlyingIFRepeated to a Seq[T] in the\nparameter ValDef of a closure. Without this change,\nfun/sammy_repeated.scala fails to YCheck under the new\ntest introduced in the last commit.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Aug 22 22:58:18 2015 +0200]"},
{"name" : "22c42dd5f5333285f1898b25cf322a1ce6bd7a0c", "time" : 1440273924, "y" : 1247, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "When unpickling, translate T* to Seq[T] unless it's a parameter type.\n\nDotty allows T* types only for parameter types of MethodTypes (and for\nrepeated arguments); all other ocurrences have to be translated to the underlying type.\n\nTreeChecker now verifies that Ident and Select nodes never carry a repeated parameter\ntype.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Aug 22 22:05:24 2015 +0200]"},
{"name" : "3a203c8cef16fa458bdd24d66ae7835372596d3f", "time" : 1440271759, "y" : 1247, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "When unpickling Scala2, treat VALsyms separately from MODULEsyms\n\nVALsyms don't need the special setup of a module class unpickler.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Aug 22 21:29:19 2015 +0200]"},
{"name" : "c1d388fb3a9f826d09775afdb4610bf7dd357cad", "time" : 1440267396, "y" : 1247, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Refine refOfDef top handle repeated parameters\n\nrefOfDef is used in desugaring case classes, specifically the definition of an apply method.\nHere it is necessary to pass a vararg argument (x: _*) if the case class parameter is repeated.\nThis functionality is now added to `refOfDef`. I verified that the other uses of `refOfDef` are\ncompatible with this change.\n\nFixes #768.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Aug 22 20:16:36 2015 +0200]"},
{"name" : "de9877f53ef4e0c94968475788dd2c9e120c6e8d", "time" : 1440257956, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #764 from dotty-staging/mixin/forwarders\n\nMixin: class defined abstract members take precedence over interface defined.", "author" : "PersonIdent[odersky, odersky@gmail.com, Sat Aug 22 17:39:16 2015 +0200]"},
{"name" : "54d691e336a7a3e60d40eadab40bee9a48126f69", "time" : 1440257791, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #763 from dotty-staging/constructors/setters\n\nConstructors: fields should be set before super constructor is invoked.", "author" : "PersonIdent[odersky, odersky@gmail.com, Sat Aug 22 17:36:31 2015 +0200]"},
{"name" : "4689bd39e3c5271333bb6dec1370b4e5c802f7e0", "time" : 1440181635, "y" : 1253, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Add missing negative test.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Aug 21 20:27:15 2015 +0200]"},
{"name" : "2b162ffff6a1a969781c0a5790a679bc22da64d9", "time" : 1440162721, "y" : 1253, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Add test case\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Aug 21 15:12:01 2015 +0200]"},
{"name" : "aaae0df80376668d1c502857695b43d42083c888", "time" : 1440162527, "y" : 1253, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Workaround for #765\n\nAvoid using unexpanded name because it can give wrong results for super accessors\nof symbolic names. See #765. Without this commit t2183.scala crashes the compiler.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Aug 21 15:08:47 2015 +0200]"},
{"name" : "d17d3121fd8cbd620bbc70bb46e983b37311ba15", "time" : 1440159592, "y" : 1256, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Test that forwarders are correctly created.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri Aug 21 14:19:52 2015 +0200]"},
{"name" : "ee5639a8d90538c162f41cbb6d88007462311863", "time" : 1440159584, "y" : 1256, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Mixin: class defined abstract members take precedence over interface defined.\n\nIn case we have an class-defined abstract member implemented\n by a trait we need to create an explicit forwarder.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri Aug 21 14:19:44 2015 +0200]"},
{"name" : "6c7d972da57179f5050432233a31f05d4c2c6691", "time" : 1440159143, "y" : 1258, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Test that fields are correctly set before super constructor is called.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri Aug 21 14:12:23 2015 +0200]"},
{"name" : "908603be8dc754a7b391ee0c01c37e868072847b", "time" : 1440158249, "y" : 1258, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Constructors: fields should be set before super constructor is invoked.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri Aug 21 13:57:29 2015 +0200]"},
{"name" : "cc5dce545e1150021bcd3d312574bdf3b657512c", "time" : 1440149683, "y" : 1253, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Fix test when abstract override is needed.\n\nThere was a transcription error from scalac which caused the scope\nof a `!` to be wrong.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Aug 21 11:34:43 2015 +0200]"},
{"name" : "4a78c8959091292e9eda13ef9230acb039cf3824", "time" : 1440149683, "y" : 1253, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Expand names of super accessors\n\nScalac seems to treat superaccessors of traits in a rather peculiar way. They are\nleft unexpanded so that a class implementing several traits with the same superaccessors\nwill get duplicate methods with the same name. It seems this is then resolved in the backend.\n\nHere we solve the issue by expanding the names of trait super accessors immediately.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Aug 21 11:34:43 2015 +0200]"},
{"name" : "eec8191fc067358f88bec56d7dbda36e1fcfc131", "time" : 1440075587, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #758 from dotty-staging/fix-liftedTry-capturedVars-interaction\n\nFix lift try and captured vars interaction", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Thu Aug 20 14:59:47 2015 +0200]"},
{"name" : "dbbc5ca47bc3485f735682c89f8f4cd07c637572", "time" : 1440072108, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #757 from senia-psm/patch-1\n\nTypo fix in trait Lambda$II definition", "author" : "PersonIdent[odersky, odersky@gmail.com, Thu Aug 20 05:01:48 2015 -0700]"},
{"name" : "1414fd5d595c43669c350ab1e8a14b38e0868b53", "time" : 1440071953, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #760 from dotty-staging/mixin-fixes\n\nFixes to scala2 Mixin", "author" : "PersonIdent[odersky, odersky@gmail.com, Thu Aug 20 04:59:13 2015 -0700]"},
{"name" : "ab33d7aa90da65e8d1fb08452b74a8c9704a414e", "time" : 1440071922, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #762 from dotty-staging/fix-expandSAMS\n\nExpandSAMs: create isDefinedAt with correct name.", "author" : "PersonIdent[odersky, odersky@gmail.com, Thu Aug 20 04:58:42 2015 -0700]"},
{"name" : "530c22b54b0dd57d3a6fd5480186dcda8405bbd8", "time" : 1440064282, "y" : 1266, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "ExpandSAMs: create isDefinedAt with correct name.\n\nUsed to create a method named $isDefinedAt\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Aug 20 11:51:22 2015 +0200]"},
{"name" : "21d08633a0ae611663d13faafb49aa37b372fdcc", "time" : 1440063450, "y" : 1267, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "AugmentScala2Traits: fix typo in comment.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Aug 20 11:37:30 2015 +0200]"},
{"name" : "5a36e2f20bb5dd9cb04a1e8010280995c6305a39", "time" : 1440018769, "y" : 1268, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "ChangeOwnerAfter should also change owners of denotations defined later.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Aug 19 14:12:49 2015 -0700]"},
{"name" : "2cbf29e40af2494cc4a685b6c1e683d95bde95af", "time" : 1440018737, "y" : 1268, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Tweak to installAfter\n\ninstallAfter now overwrites denotaton also when the first denotation of a symbol is defined\nafter the current phase. Previously, a new denotation with a last valid phase before a first\nvalid phase was created.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Aug 19 14:12:17 2015 -0700]"},
{"name" : "4e50c5b5d3aa94369609e3bd0b96bcdadcc0ee84", "time" : 1439902119, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #761 from dotty-staging/partialFunctions\n\nExpandSams: Fix handling of PartialFunctions", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Tue Aug 18 14:48:39 2015 +0200]"},
{"name" : "c61986d09e59f12eb612bfdf96cb7f6e7d0c27a7", "time" : 1439823456, "y" : 1271, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Test that partial functions are handled correctly.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Aug 17 16:57:36 2015 +0200]"},
{"name" : "3379bfe7efb7f59512e348099985fa58023f1d89", "time" : 1439823366, "y" : 1271, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "ExpandSams: Fix handling of PartialFunctions\n\nIf that was expected to handle partial functions was guarded by\n`isJvmSam(PartialFunction)` which is false\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Aug 17 16:56:06 2015 +0200]"},
{"name" : "af3cee7d5dc19c24b92d6a93b917e3420ec2cf46", "time" : 1439821917, "y" : 1267, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "test #760\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Aug 17 16:31:57 2015 +0200]"},
{"name" : "280e399a5ce984ad8b7892e510d6d3af3937a81e", "time" : 1439819693, "y" : 1267, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Helper to get pickler phase.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Aug 17 15:54:53 2015 +0200]"},
{"name" : "05af0a361815a0ca438a9af94981aa7001bc6d6c", "time" : 1439819689, "y" : 1267, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "All non-deferred Scala2 defined methods in traits need a method in implClass.\n\nAs one can call them either indirectly through mixin composition or directly through super[Mixin].foo\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Aug 17 15:54:49 2015 +0200]"},
{"name" : "03b8d82cec2eef61f4ada69a4a8b285b160e0648", "time" : 1439819297, "y" : 1267, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Names of superaccessors can change during the pipeline\n\nIf a stable view on names is needed, better access them during a predefined phase.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Aug 17 15:48:17 2015 +0200]"},
{"name" : "d012514d2f6176c311e7f09b82e416f23505b656", "time" : 1439819190, "y" : 1267, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Scala2 supecraccessors are pickled as private, but compiled as public expanded\n\nNeed to do the very same transformation in AugmentScala2Traits.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Aug 17 15:46:30 2015 +0200]"},
{"name" : "4ff06368cda585e3a2d04af084a8fe09662e55f0", "time" : 1439672131, "y" : 1268, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Add a local val to lifted try to make sure owners are still legal.\n\nChecks the hypothesis that lifting a try may safely move expressions\ninto a ValDef owned by a new temp var.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Aug 15 13:55:31 2015 -0700]"},
{"name" : "edaa193aac1d7880a81cd6a836fe3d7c3d652d45", "time" : 1439672131, "y" : 1268, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Fix CaputuredVars/LiftTry interaction.\n\nCapturedVars introduced an assignment that could cause a try to be\nexecuted with a non-empty stack, even after LiftTry had already run.\nWe now avoid this by introducing a temporary variable.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Aug 15 13:55:31 2015 -0700]"},
{"name" : "b30843c59757ccaaf00c6733bf81f15eb911e6c2", "time" : 1439672131, "y" : 1268, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Fix miniphase assembly.\n\nThere were two architectural errors here, which confused TreeTransforms and MiniPhases\nand which caused \"NotDefinedHere\" on transformFollowing:\n\n1. TreeTransforms should not have idx fields, MiniPhases have them.2\n2. TreeTransformers initialize arrays of MiniPhases not TreeTransforms.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Aug 15 13:55:31 2015 -0700]"},
{"name" : "05fb4208c68d194a8575d42852ee1c792a328267", "time" : 1439672130, "y" : 1268, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Make changeOwnerAfter more robust wrt NotDefinedHere errors\n\nIt can happen that changeOwner sees symbols that are not defined yet at the phase where\nthe method is run. Such symbols should be ignored.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Aug 15 13:55:30 2015 -0700]"},
{"name" : "4b184fc4125c2b62b2c8a1679889506e1bf21bed", "time" : 1439629054, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #755 from dotty-staging/fix-getClass\n\nGetClass: get classSymbol reliably", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Sat Aug 15 10:57:34 2015 +0200]"},
{"name" : "7426fdd5c39df5e9d4b945fbb8966ad7efa30b64", "time" : 1439531652, "y" : 1283, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Typo fix", "author" : "PersonIdent[senia-psm, seniapsm@gmail.com, Fri Aug 14 08:54:12 2015 +0300]"},
{"name" : "edabec89a4e3c0f1b65f90b9002167433db1b1cb", "time" : 1439531312, "y" : 1283, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Typo fix in trait Lambda$II definition", "author" : "PersonIdent[senia-psm, seniapsm@gmail.com, Fri Aug 14 08:48:32 2015 +0300]"},
{"name" : "f5a94f71a462648678ee9a79e6d4137221059ec6", "time" : 1439499577, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #754 from dotty-staging/fix-objects\n\nFixes to emission of static initializers and forwarders in backend.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Thu Aug 13 22:59:37 2015 +0200]"},
{"name" : "bd73af6fab22ffafe1f0de6c87e217a208814508", "time" : 1439473681, "y" : 1286, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "GetClass: get classSymbol reliably\n\nTermRefs do not have a classSymbol.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Aug 13 15:48:01 2015 +0200]"},
{"name" : "945fefb6c6e54ccfd660314bf8c74fca7ee8496a", "time" : 1439457739, "y" : 1287, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Do not emit static forwarders in non-static modules.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Aug 13 11:22:19 2015 +0200]"},
{"name" : "96dfb35b58bb7cf59f5ef55a4c1735ec0e1f5557", "time" : 1439457573, "y" : 1287, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Fix emission of static initialisers for Modules.\n\nThey should not be emitted for non-static modules.\nAll modules look as if they were static by backend.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Aug 13 11:19:33 2015 +0200]"},
{"name" : "9eb55f1bb112030fe783e42c129e02f91c0aaef5", "time" : 1439158566, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #748 from dotty-staging/add/non-local/returns\n\nImplement non-local returns", "author" : "PersonIdent[odersky, odersky@gmail.com, Sun Aug 9 15:16:06 2015 -0700]"},
{"name" : "694aabd5caa2a67721f82db4027d28815af90275", "time" : 1438810025, "y" : 1290, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Revert \"Disable -Ycheck:labelDefs\"\n\nThis reverts commit c8afd79b4c7f145ba090a2d936d627c3ab35b1c2.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Aug 5 14:27:05 2015 -0700]"},
{"name" : "c4680c87d453c59f5874980984305b202c2f7b62", "time" : 1438809997, "y" : 1290, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Make sure expanded method names are legal according to JVM spec\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Aug 5 14:26:37 2015 -0700]"},
{"name" : "70ad514131f7e4e30b59027c6e3da3b763a2b8e9", "time" : 1438807210, "y" : 1290, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Revert \"Workaround #742 and add a test for it.\"\n\nThis reverts commit a43d39ad719978fbb36663f336c1c7cd2c4da1e0.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Aug 5 13:40:10 2015 -0700]"},
{"name" : "3f46a7506454f01f1b3d79b60d1b48845bde8d4a", "time" : 1438806718, "y" : 1290, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Add LiftTry phase\n\nPhase lifts tries that would be illegal because they execute on non-empty\nexpression stacks.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Aug 5 13:31:58 2015 -0700]"},
{"name" : "2a306ddcfe78589310d462bbf67fb893ce8702aa", "time" : 1438802821, "y" : 1290, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Make ensureConforms behave gracefully fter erasure\n\nAfter erasure, if required conformance is between value and non-value types,\none should perform boxing and unboxing operations automatically, instead of\njust issuing a cast, which would be illegal at that point.\n\nAlso: make isNonLocalReturn available as part of a global object, because\nwe'll need it in LiftTry.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Aug 5 12:27:01 2015 -0700]"},
{"name" : "c8afd79b4c7f145ba090a2d936d627c3ab35b1c2", "time" : 1438738498, "y" : 1290, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Disable -Ycheck:labelDefs\n\nDisable the check because if fails for desugar.scala and also in some dotty files.\nThis test failed before the addition of NonLocalReturns.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Aug 4 18:34:58 2015 -0700]"},
{"name" : "ac226f26d8f54c79c642ed88bc5c48916afeb61b", "time" : 1438738450, "y" : 1290, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Implement non-local returns\n\nNon-local returns are now implemented.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Aug 4 18:34:10 2015 -0700]"},
{"name" : "07e24e8640acf19a6bcedd1b68acbd7c8d8bf29b", "time" : 1438712321, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #735 from dotty-staging/ycheck-methods\n\nYcheck that methods defined in ClassInfo exist in tree.", "author" : "PersonIdent[odersky, odersky@gmail.com, Tue Aug 4 11:18:41 2015 -0700]"},
{"name" : "d5280358d12c43c3268653c95c7edf3dcc7d60bf", "time" : 1438710395, "y" : 1298, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Applied review comments\n\nAdded suggested changes by myself and @smarter.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Aug 4 10:46:35 2015 -0700]"},
{"name" : "3377de5bfe302b030530de97d27207afb7d963d0", "time" : 1438100614, "y" : 1298, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Fix #745, memoise should be able to get type of field from setter.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Jul 28 18:23:34 2015 +0200]"},
{"name" : "7cfa2e1e0ac3703161e33227d5729ddd81983f99", "time" : 1438100609, "y" : 1298, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Fix #744\n\nMixi was not calling transformFollowing on generated setters.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Jul 28 18:23:29 2015 +0200]"},
{"name" : "e147fbe1bb2ceeeb464028cd2c92238ad57a3ae1", "time" : 1438088128, "y" : 1298, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Add a test for #743 to pending.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Jul 28 14:55:28 2015 +0200]"},
{"name" : "a43d39ad719978fbb36663f336c1c7cd2c4da1e0", "time" : 1438088038, "y" : 1298, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Workaround #742 and add a test for it.\n\nMaking a correct fix could take some time,\nand I want to find other issues before I start working on this one.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Jul 28 14:53:58 2015 +0200]"},
{"name" : "15129574ec21fb66193d183201e5caee7ff53120", "time" : 1438081961, "y" : 1298, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Fix lazy vals in mixin\n\nThey should not become deferred.\nAnd there could be multiple symbols with same name in same scope, e.g.:\n\nimplicit class Foo(){}\n\nwill create implicit method Foo that and a lazy module named Foo\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Jul 28 13:12:41 2015 +0200]"},
{"name" : "f018c38f63de548a885723e46c6c726b0cbe2c54", "time" : 1438081824, "y" : 1298, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Fix enumeration of all members of the class\n\nused a wrong member function inside,\nled to errors similar to:\n\n java.lang.ClassFormatError: Duplicate method name&signature in class file dotty/tools/dotc/core/Types$WildcardType\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Jul 28 13:10:24 2015 +0200]"},
{"name" : "056e1246c9dc365bd37627923b999a80a57ca0f9", "time" : 1438032386, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #734 from alexander-myltsev/add-getclass\n\nImplement getClass", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon Jul 27 23:26:26 2015 +0200]"},
{"name" : "d24c6945963198566cd8e97e6bcacf6ebe2127dc", "time" : 1438021108, "y" : 1306, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Put GetClass to next mini-phase\n", "author" : "PersonIdent[Alexander Myltsev, alexander.myltsev@phystech.edu, Mon Jul 27 21:18:28 2015 +0300]"},
{"name" : "18470389bbfdf3cecb0aeb53fcc18ad90da13d65", "time" : 1438018082, "y" : 1298, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Survive Nodenotation in computeDenot\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jul 27 10:28:02 2015 -0700]"},
{"name" : "2cf567b1023734d481e8511e4e3314246afef6a4", "time" : 1437835960, "y" : 1306, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Implement getClass method\n", "author" : "PersonIdent[Alexander Myltsev, alexander.myltsev@phystech.edu, Sat Jul 25 17:52:40 2015 +0300]"},
{"name" : "0261ed09973d1a54fc80b0e0d0cefabde71b9eb2", "time" : 1437740963, "y" : 1298, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Workaround an issue in mixin.\n\nMixi does not define stored&substed in classes that inherit this trait.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri Jul 24 14:29:23 2015 +0200]"},
{"name" : "868591c81177397782a6bdad22a00112867ca74f", "time" : 1437740914, "y" : 1298, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Lazy initialisers names do not get mangled.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri Jul 24 14:28:34 2015 +0200]"},
{"name" : "cf17b73cc02daf514f6d5499fd7a5562fc93349e", "time" : 1437684407, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #736 from alexander-myltsev/fix-classof-check\n\nPrettify console output of classof check test", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Thu Jul 23 22:46:47 2015 +0200]"},
{"name" : "fe15d706a7e2a52f4604c5f167a9f609235f53b0", "time" : 1437674952, "y" : 1312, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Prettify console output of classof check test\n", "author" : "PersonIdent[Alexander Myltsev, alexander.myltsev@phystech.edu, Thu Jul 23 21:09:12 2015 +0300]"},
{"name" : "9d609fb25d1e04453734175d6ffbf454ff36ff86", "time" : 1437664127, "y" : 1298, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "YCheck that methods, fields and variables have names that are valid on JVM.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Jul 23 17:08:47 2015 +0200]"},
{"name" : "31010b6fed5f36dfbd3d8a6f23665b5ddee7e088", "time" : 1437662875, "y" : 1298, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "YCheck that all methods are defined in tree\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Jul 23 16:47:55 2015 +0200]"},
{"name" : "5766b9976982071caf6e20a629c04a66ccf5cbb5", "time" : 1437662555, "y" : 1298, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Add Symdenotation. isValueClassConvertMethod\n\nChecks if the symbols is a synthetic symbol that is\ncreated by values class transformation to represent\nconversions between representations of a value class.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Jul 23 16:42:35 2015 +0200]"},
{"name" : "a1087a475717d960cf354cf388a44ecb9c40c8e3", "time" : 1437661247, "y" : 1298, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Compile dotty.*, not only dotty.tools.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Jul 23 16:20:47 2015 +0200]"},
{"name" : "f1a9c4d8edbfc024bc54a8cb88e968749d27f56b", "time" : 1437661179, "y" : 1317, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Compile dotty.*, not only dotty.tools.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Jul 23 16:19:39 2015 +0200]"},
{"name" : "b3ca8e167bd2f3871dab7d394ee70c6132295a31", "time" : 1437557288, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #724 from dotty-staging/labels-Ycheck\n\nEnable Ycheck after labelDef. Fixes #701", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed Jul 22 11:28:08 2015 +0200]"},
{"name" : "7eef035ea617be1f38c9d901b6c08ee8982fb73e", "time" : 1437406270, "y" : 1319, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Disable Ycheck:all until #725 is fixed.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Jul 20 17:31:10 2015 +0200]"},
{"name" : "8d266198c5ef3fd82511a6c6882d94bf5d7e50e4", "time" : 1437406250, "y" : 1319, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Enable -Ycheck:all in Jenkins.\n\nDone by setting an environment variable and checking it in runtime.\nThis enables Ycheck:all for all kinds of tests, including partest.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Jul 20 17:30:50 2015 +0200]"},
{"name" : "ed8b3f0f7581174887ae1c7c8fc3b01609a3a9cb", "time" : 1437405946, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #706 from dotty-staging/fix-676\n\nGenerate less code for lazy vals", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon Jul 20 17:25:46 2015 +0200]"},
{"name" : "fa3265e37a1e480861cc09102ec0dc94dd4a7557", "time" : 1437401344, "y" : 1319, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Remove .travis.yml\n\nWe no longer use Travis, and testing infrastructure is not guaranteed to work there.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Jul 20 16:09:04 2015 +0200]"},
{"name" : "9bc95782f628f26bec402173f34013fbeb49d2ca", "time" : 1437386383, "y" : 1298, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Address review comments of #693\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Jul 20 11:59:43 2015 +0200]"},
{"name" : "10ea7125998b0246e899706f407cc57719f37086", "time" : 1437386358, "y" : 1298, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Fixes to name comparison\n\nUse x.length - y.length trick,\nNames are hash-consed.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Jul 20 11:59:18 2015 +0200]"},
{"name" : "d07e5d1ea36e4457c3491711bc65251d4a5290b9", "time" : 1437385722, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #719 from dotty-staging/fix/doubledefs\n\nAvoid crashes on double definitions", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon Jul 20 11:48:42 2015 +0200]"},
{"name" : "1f45c67773c0910dd51563f61e4c8b57ac7d8e85", "time" : 1437304936, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #730 from smarter/fix/constructor-prefix\n\ntpd#New: Make constructor TermRefs non-ambiguous", "author" : "PersonIdent[odersky, odersky@gmail.com, Sun Jul 19 13:22:16 2015 +0200]"},
{"name" : "1f1f1a29e6d4a3486a513baa90502f193920fdcc", "time" : 1437061624, "y" : 1327, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "tpd#New: Make constructor TermRefs non-ambiguous\n\nBefore this change, the prefix of a constructor TermRef was the prefix\nof the class, this means that it was possible for two constructors to\nhave the same prefix, the same name (\"<init>\") and the same signature.\nThis could cause double binding errors.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Thu Jul 16 17:47:04 2015 +0200]"},
{"name" : "b8da1ee6cc98e33aeeb296b07c638261ccacc451", "time" : 1436975952, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #727 from dotty-staging/genbcode-annotations\n\nImplement emission of annotations in GenBCode.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed Jul 15 17:59:12 2015 +0200]"},
{"name" : "3440c7b99f02d38b1dd1da0eb5d46ecfc184d8c6", "time" : 1436973983, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #714 from smarter/add/vc-inline-before-erasure\n\nMove the inlining of value class methods before Erasure", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed Jul 15 17:26:23 2015 +0200]"},
{"name" : "73354cdb374c15715a83cab381133ea267e25478", "time" : 1436968436, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #721 from smarter/fix/implicit-scope-bounds\n\nDon't add lower bounds of abstract types to the implicit scope", "author" : "PersonIdent[odersky, odersky@gmail.com, Wed Jul 15 15:53:56 2015 +0200]"},
{"name" : "6b246b29f2901e6aa2f3f80c83ba9dd41724391a", "time" : 1436960698, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #722 from smarter/fix/productPrefix\n\nSyntheticMethods: override productPrefix for case classes", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed Jul 15 13:44:58 2015 +0200]"},
{"name" : "644e0689dbdd05a3a4ccf8f19f72aedd8d74c6cc", "time" : 1436960433, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #726 from dotty-staging/fix-713\n\nFix #713. Put tasty attribute on mirror class of modules.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed Jul 15 13:40:33 2015 +0200]"},
{"name" : "41c484f27ec3a0016a8117ab4bd9b1801f52c1fd", "time" : 1436949408, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #728 from dotty-staging/rehash-SO-fix\n\nFix StackOverflow in Names.rehash", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed Jul 15 10:36:48 2015 +0200]"},
{"name" : "843ec4f90b104281cea6fa4086b43cd98ef5f54e", "time" : 1436887953, "y" : 1298, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Remove warning from .check file that is not emitted by Dotty\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Jul 14 17:32:33 2015 +0200]"},
{"name" : "b2f64b6d22c7c39de5f5dff6d55c226de6ee9e86", "time" : 1436887693, "y" : 1335, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Fix StackOverflow in Names.rehash\n\nTesting suite of specialization is creating huge amount of names,\nthat triggered a StackOverflow in non-tail-recursive method.\nNot rehash is tail-recursive.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Jul 14 17:28:13 2015 +0200]"},
{"name" : "18a034c784d2b89e953e657e3da7ed169ac703a7", "time" : 1436881385, "y" : 1298, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Update version of shared backend.\n\nIncludes fix to emission of invokeDynamic instructions\nin positions where expected type isn't the type of lambda being returned.\nSI-9387\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Jul 14 15:43:05 2015 +0200]"},
{"name" : "90c2bed395f4b449cf25392504ad39462cb99b72", "time" : 1436879792, "y" : 1337, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Implement emotion of annotations in GenBCode.\n\nFixes #688\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Jul 14 15:16:32 2015 +0200]"},
{"name" : "8419e566a56d74713abe59cb4d6b74837ded367f", "time" : 1436879459, "y" : 1338, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Fix #713. Put tasty attribute on mirror class of modules.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Jul 14 15:10:59 2015 +0200]"},
{"name" : "6369d6f39dd411e940264cde7ad7cc82d0292793", "time" : 1436803068, "y" : 1319, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Enable Ycheck after labelDef. Fixes #701\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Jul 13 17:57:48 2015 +0200]"},
{"name" : "50f45714051bb980b2169f1fbb74d987a34390e0", "time" : 1436802661, "y" : 1340, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "SyntheticMethods: override productPrefix for case classes\n\nThe productPrefix of a case class should be the name of the class itself\nto match Scala 2.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Mon Jul 13 17:51:01 2015 +0200]"},
{"name" : "61c30f8d949a43ad0580ef421c4fe94acc3c340e", "time" : 1436801986, "y" : 1319, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Relax Ycheck for labels after LabelDefs\n\nLabelDefs reorders labels. As a result of reordering\nlabel-def defined inside other label-def could be lifted outside.\nLabelDefs doesn't update owner chains to represent this.\n\nMaking treeChecker aware of this.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Jul 13 17:39:46 2015 +0200]"},
{"name" : "5481589edfb663b5fb162cac41d0fe22ad3656c1", "time" : 1436794276, "y" : 1298, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Upgrade shared backend.\n\nFixes bugs in handling try-finally blocks.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Jul 13 15:31:16 2015 +0200]"},
{"name" : "91772a62e2f9ca41127e9e36d96e9a86d4acb05c", "time" : 1436794276, "y" : 1298, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Patmat: fix sub patterns of Product-1's\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Jul 13 15:31:16 2015 +0200]"},
{"name" : "04b12536bc3482ebd4490d414be4358c35687db9", "time" : 1436794276, "y" : 1298, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Make symbols have predictable hash codes.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Jul 13 15:31:16 2015 +0200]"},
{"name" : "ef536f00d9d480f28db3093b9dc09a90041cfb74", "time" : 1436794276, "y" : 1298, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Enable 61 tests that succeed.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Jul 13 15:31:16 2015 +0200]"},
{"name" : "9185428b63b138f8c05ade5592e59956296b5128", "time" : 1436794275, "y" : 1298, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Fix ClassCastException in patmat when using Product1.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Jul 13 15:31:15 2015 +0200]"},
{"name" : "d8985603b5d670414ea7844a628168f92a09c402", "time" : 1436794275, "y" : 1298, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "SpecializeNames: Duplicate scalac behaviour, sort tparams\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Jul 13 15:31:15 2015 +0200]"},
{"name" : "c76d63da11e8456422c0bd0fd3e38cfdad049e50", "time" : 1436794275, "y" : 1298, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Make trees have predictable hash codes.\n\nSimplifies debugging for me.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Jul 13 15:31:15 2015 +0200]"},
{"name" : "688feee9def94a0aef478b38ebc5188070f9690f", "time" : 1436784728, "y" : 1349, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Address review comments.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Jul 13 12:52:08 2015 +0200]"},
{"name" : "74c2e2326f6a68a889347ef3052d88a586aca84f", "time" : 1436654300, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #709 from alexander-myltsev/703-fix_dotc_cygwin\n\nFix Cygwin launch", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Sun Jul 12 00:38:20 2015 +0200]"},
{"name" : "0efa171e8ccca0d49fc6d800fd21e29f7b7336fd", "time" : 1436572356, "y" : 1351, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Don't add lower bounds of abstract types to the implicit scope\n\nAs the spec[1] says:\n\"The parts of a type T are [...] if T is an abstract type, the parts of\nits upper bound;\"\n\n[1]: http://www.scala-lang.org/files/archive/spec/2.11/07-implicits.html#implicit-parameters\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Sat Jul 11 01:52:36 2015 +0200]"},
{"name" : "5feab112fb7d5a5c8ae1de1bbb2ad9e430b1f452", "time" : 1436521897, "y" : 1352, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Added test\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jul 10 11:51:37 2015 +0200]"},
{"name" : "3daa5ceceb5c84fa0386294e4af1febd00b229eb", "time" : 1436462935, "y" : 1353, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Closes 703\n\n- Fix typo in JLINE_JAR\n- Implement proper Java launch in Cygwin\n", "author" : "PersonIdent[Alexander Myltsev, alexander.myltsev@phystech.edu, Thu Jul 9 20:28:55 2015 +0300]"},
{"name" : "2655d756e0f7a8000ecabd31a96313fe74e2b70f", "time" : 1436456302, "y" : 1352, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Add test case\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 9 17:38:22 2015 +0200]"},
{"name" : "426e20579b0939266087d025c084f2deaa7afd2c", "time" : 1436453703, "y" : 1352, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Make use of freshened in LambdaLift.newName\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 9 16:55:03 2015 +0200]"},
{"name" : "cfb3ffc4c40640dd0c8359381ea0b85e8a0e6f03", "time" : 1436453680, "y" : 1352, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Avoid generating dupliocate names\n\nIf a name clash is detected, the a fresh name is chosen instead.\nPreviously, test file clashes.scala caused a crash because of a\nduplicate name in enter. That is now avoided.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 9 16:54:40 2015 +0200]"},
{"name" : "a1206b99253d230684823c2f22fa42f648124672", "time" : 1436453596, "y" : 1352, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "New name utility method: freshened\n\nCreates a fresh name by appending a $N suffix. Takes care\nof unwrapping/rewrapping module class suffixes.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 9 16:53:16 2015 +0200]"},
{"name" : "3bf22d31148ab077d34fa0a94b3f9e926719e81b", "time" : 1436298286, "y" : 1358, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Move the inlining of value class methods before Erasure\n\nVCInline is split into two phases:\n- VCInlineMethods (before Erasure) replaces value class method calls\n  by calls to extension methods\n- VCElideAllocations (after Erasure) handles == and optimizing the\n  unboxing of a boxed value class, as VCInline did before.\n\nThis should not affect anything currently, but in the future we will have\nphases before Erasure that mangle names (like TypeSpecializer, see #630),\nbeing able to put these phases after VCInlineMethods means that\nVCInlineMethods does not need to know anything about how these phases\nmangle names, this reduces the coupling between phases. The trade-off is\nthat VCInlineMethods needs to deal with type parameters and multiple\nparameter lists whereas VCInline didn't.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Tue Jul 7 21:44:46 2015 +0200]"},
{"name" : "58e2c9b429dc53a865fdcfd60459966513110058", "time" : 1436203842, "y" : 1358, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "tpd#select: Make it possible to select a TypeSymbol\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Mon Jul 6 19:30:42 2015 +0200]"},
{"name" : "b82313268b912c62f9ddc89fefd02be96f2de64c", "time" : 1436202105, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #708 from dotty-staging/add/check-reentrant\n\nCheck that dotty is reentrant", "author" : "PersonIdent[odersky, odersky@gmail.com, Mon Jul 6 19:01:45 2015 +0200]"},
{"name" : "6561d4cadc2e1af354486c34817b86131ffbe1e7", "time" : 1436199883, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #702 from dotty-staging/fix/#692-transitive-selfrefs\n\nFix/#692 transitive selfrefs", "author" : "PersonIdent[odersky, odersky@gmail.com, Mon Jul 6 18:24:43 2015 +0200]"},
{"name" : "c7cc6d851b660c97e80cda806bf5366200c8836b", "time" : 1436199833, "y" : 1362, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Make Resident compiler a class.\n\nAvoids the need of an @unshared annotation.\n\nFor now I leave the annotation in, maybe it will be\nuseful later.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jul 6 18:23:53 2015 +0200]"},
{"name" : "e32448cea1a5c67f71cf6578d962aec4f4ccf7d1", "time" : 1436199771, "y" : 1362, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Drop dead transformInfo definition\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jul 6 18:22:51 2015 +0200]"},
{"name" : "5675d7c1442dea88b2b8913da02caaea08ecf8bd", "time" : 1436197609, "y" : 1362, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Fix omission in CtxLazy\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jul 6 17:46:49 2015 +0200]"},
{"name" : "a939ac843291cc5080546c66272a4310c0657ed8", "time" : 1436197608, "y" : 1362, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Try to avoid datarace involving NoDenotation\n\nThe thread-shared value NoDenotation has a validity with  run-id that got updated to the run-id\nof the current thread. This caused a partest failure with a \"demanding denotation outside its range\"\nerror. We now treat NoDenotation specially in current, hoping this will avoid the condition.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jul 6 17:46:48 2015 +0200]"},
{"name" : "4315ed21e564713e606c04eced62ddec2494183b", "time" : 1436197608, "y" : 1362, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Make sharing violations errors\n\nand use ctx.log for other output.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jul 6 17:46:48 2015 +0200]"},
{"name" : "7cdd006e25fecce309c5843721660b1de1827dba", "time" : 1436197608, "y" : 1362, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "More @sharable annotations\n\nAlso, some code movements in Names to make it more obvious that mutating operations\nare only called from synchronized blocks.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jul 6 17:46:48 2015 +0200]"},
{"name" : "b7f1899cb7f0fa31c8dc140706a822b2d9e7346a", "time" : 1436197607, "y" : 1362, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Make partest run in parallel\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jul 6 17:46:47 2015 +0200]"},
{"name" : "bcbd6a213b23e8576ee9badacd86d7694433a0c4", "time" : 1436197607, "y" : 1362, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Eliminate global _nextId field in Symbols\n\n_nextId is used to set Symbol's id fields. That field is actually used for more\nthan priunting. In LambdaLift, it determines Symbol ordering when constructing\n(tree-) sets of symbols.\n\nInstead of a thread-unsafe global counter, we not use existing infrastructure\nin ConetxtState.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jul 6 17:46:47 2015 +0200]"},
{"name" : "6c09236f6ee4b9194f12bcb553c803d337c54052", "time" : 1436197606, "y" : 1362, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Add -Ycheck-reentrant to dotty test.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jul 6 17:46:46 2015 +0200]"},
{"name" : "ab8e63a2a94201a8f23193271e58d62371bfc7b9", "time" : 1436197606, "y" : 1362, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Mark gloabl entry point @unshared\n\nThe resident compiler is not supposed to be called from multiple\nthreads; mark as unshared to avoid spurious re-entrancy errors.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jul 6 17:46:46 2015 +0200]"},
{"name" : "fd1a732273ce57d8558a5dc81920dc1833d9d9ec", "time" : 1436197606, "y" : 1362, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Turn global vars into vals\n\nSome globally accessible vars were never updated; should be vals.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jul 6 17:46:46 2015 +0200]"},
{"name" : "c73b989fff953a4a71721697e6d30858bc37f189", "time" : 1436197605, "y" : 1362, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Remove unused global roots\n\nSome global roots were pointing to shared mutable state but were never used.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jul 6 17:46:45 2015 +0200]"},
{"name" : "84ad34ad7a50a7f9d39d6958a7b8840e16c37a3c", "time" : 1436197605, "y" : 1362, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Add @sharable annotation\n\nAdd @sharable annotation for classes and vals that are presumed\nto be safely sharable between threads.\n\nAlso: Document CtxLazy.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jul 6 17:46:45 2015 +0200]"},
{"name" : "64f65182f6e4f80b03d45923e02441dafe0755b4", "time" : 1436197604, "y" : 1362, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Add reentrancy checking\n\nNew miniphase CheckRentrant verifies that compiled program is\nwithout vars accessible through global roots if -Ycheck-reentrant\noption is set.\n\nKnown shortcoming: Array elements are currently not considered as vars. This\nis because in many programs arrays are used as an efficient container\nfor immutable fields.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jul 6 17:46:44 2015 +0200]"},
{"name" : "175499537c87c78d0b926d84b7a9030011e42c00", "time" : 1436194937, "y" : 1376, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Check that a self type T is closed.\n\nWhat is checked: A self type T is a subtype of all\nselftypes of classes refernced by T. That is, a self type\nhas to subsume all self types of its required type. Ot,\notherwise said, requirements must be closed; you cannot\ndiscover new ones in following them.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jul 6 17:02:17 2015 +0200]"},
{"name" : "1061743aaaf2b18419c8fdb1cc89cb1498c9673f", "time" : 1436194551, "y" : 1376, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Error instead of crash when sigName comes up with a missing reference.\n\nA TypeRef can have be unresolved, either because it refers to something that's missing\nfrom the classpath or because of transitive self type references. Instead of crashing\nin sigName, we now report the error.\n\nAchieved by defining a new exception type, MissingType, which derives from TypeError.\n\nThis catches t7933.scala, now integrated in the neg/selfreq.scala. The problem there was\na reference to AbsSettings, which was not a member of StandardScalaSettings.this,\nbut was a member of the required type of AbsSettings, which itself appeared in the\nrequired type of StandardScalaSettings. We will outlaw in the next commit such transitive\nrequired references.\n\nAlso collapsed TypeError and FatalTypeError. It was a misnomer anyway. Fatal were those\ntype errors that were caught and reported!\n\nOpen: Where else we should check for unresolved NamedTypes.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jul 6 16:55:51 2015 +0200]"},
{"name" : "c277b9865b8a9a0f72279e0a33184ec3a4efcc33", "time" : 1436194550, "y" : 1376, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Put proper parentheses around complex widened types of singletons.\n\nIn the type `(A & B)(C.this)`, the first parens were missing, so the type\ndisplayed as A & B(C.this), which is confusing.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jul 6 16:55:50 2015 +0200]"},
{"name" : "70f18eb4aa5aff64aa8571c16026c456bc1db5fc", "time" : 1436194479, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #694 from dotty-staging/fix/dependent-methods\n\nFix/dependent methods", "author" : "PersonIdent[odersky, odersky@gmail.com, Mon Jul 6 16:54:39 2015 +0200]"},
{"name" : "6a36dd83e78fe2d6269626480577f8166ab7e37e", "time" : 1436117004, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #715 from dotty-staging/repeated-arrays\n\nFixes to generic arrays in backend.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Sun Jul 5 19:23:24 2015 +0200]"},
{"name" : "8fba722d616618962455d5fe5167e0f6e34817c7", "time" : 1436109242, "y" : 1381, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Arrays.newRefArray has multiple symbols that coexist during bootstrap.\n\nMore magic is needed, as enumerating array symbols does not work in backend.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sun Jul 5 17:14:02 2015 +0200]"},
{"name" : "fc5cd47d5380d3dc2e4d32a6d9c2eec1fb7cfa4f", "time" : 1436086813, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #712 from smarter/add/vc-test\n\nTests that objects nested in value class methods work", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Sun Jul 5 11:00:13 2015 +0200]"},
{"name" : "7a25e65f828a04825d1b4a20491892b5a724f812", "time" : 1436030622, "y" : 1383, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Tests that objects nested in value class methods work\n\nThis confirms that SI-6359 does not apply to Dotty.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Sat Jul 4 19:23:42 2015 +0200]"},
{"name" : "8f47f1694a283c0dc280913eb0c6a895ebd7ef1e", "time" : 1435850239, "y" : 1349, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "#676 generate less code for lazy vals\n\nModules which are entirely synthetic now are eager\nThis fix additionally makes inner objects of other objects remain static classes, instead of becoming lazy vals.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Jul 2 17:17:19 2015 +0200]"},
{"name" : "d4e80f46339d25aa7c0bcf474ac8b091cd8b97c8", "time" : 1435849250, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #695 from dotty-staging/fix/source-positions\n\nAvoid crasher when first token of a program is in error", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Thu Jul 2 17:00:50 2015 +0200]"},
{"name" : "52b720a09eee8de47a35aea8e424a2ea66906fb1", "time" : 1435849211, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #710 from dotty-staging/fix/#705-inner-value-class\n\nValue class related checks", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Thu Jul 2 17:00:11 2015 +0200]"},
{"name" : "f57a6d9db6b8119bef1a78aabef4a527a0f9905c", "time" : 1435840632, "y" : 1387, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Check value class member restrictions\n\nAccording to SIP 15 a value class C must obey the following restrictions:\n\nC may not have secondary constructors.\nC may not declare fields (other than the parameter of a value class).\nC may not contain object definitions.\nC may not have initialization statements.\n\nThese are enforced by this commit. We are still missing restrictions on\nvalue class paremeters. We should review what the right set of conditions\nis (probably we want to admit non-vals, and maybe even multiple\nparameters).\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 2 14:37:12 2015 +0200]"},
{"name" : "257bf52c3d205359896e3c391274091b3fab732e", "time" : 1435838892, "y" : 1387, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Check that value classes are static\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 2 14:08:12 2015 +0200]"},
{"name" : "b0084dafdc4742960696829c358cfbbbcb6e5e45", "time" : 1435838832, "y" : 1387, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Make value classes implicitly final\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 2 14:07:12 2015 +0200]"},
{"name" : "983875084b103f9d46749372c750ff71bf139181", "time" : 1435838562, "y" : 1387, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Check final and sealed conditions\n\nSo far no error was raised for illegal inheritance\nfrom final or sealed classes.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 2 14:02:42 2015 +0200]"},
{"name" : "3512840ca6389898fa38c86282dd4c6671ba6863", "time" : 1435762426, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #707 from dotty-staging/fix-println\n\nFix println", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed Jul 1 16:53:46 2015 +0200]"},
{"name" : "4de4403479254ecba7cca6a78df2e04d06641e59", "time" : 1435758473, "y" : 1392, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Fix #704, make reporters print messages\n\nPreviously was swallowed in `isHidden` inside `report`\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Jul 1 15:47:53 2015 +0200]"},
{"name" : "7f2f283a1dff4e2dc03ee5aefcdf2feeb0462aa1", "time" : 1435758429, "y" : 1392, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Make Reporter.doReport public\n\nAs reporter.report could actually not report dues to mode flag, we need a way to enforce printing.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Jul 1 15:47:09 2015 +0200]"},
{"name" : "11b796371b48e14bcb2987bc67089fbf51d88271", "time" : 1435754587, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #700 from dotty-staging/fix/#689-lifted-modules\n\nDrop Module flag from lifted symbols.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed Jul 1 14:43:07 2015 +0200]"},
{"name" : "65b0c374dccd68ba4362198fc73016c739a782a5", "time" : 1435741138, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #699 from dotty-staging/fix/trait-constructors\n\nFix trait constructors", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed Jul 1 10:58:58 2015 +0200]"},
{"name" : "bf6d805103f8d859c98f09e2dc12fe8f48208597", "time" : 1435565141, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #662 from dotty-staging/add/resident-compiler\n\nAdd/resident compiler", "author" : "PersonIdent[odersky, odersky@gmail.com, Mon Jun 29 10:05:41 2015 +0200]"},
{"name" : "840aa9354a9708548cf0e21be08a552403851c97", "time" : 1435562614, "y" : 1397, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Fix rebase breakage around reporters.\n\nReporters are part of the context which is passed into a compiler run. Passing them\nas a separate option is an unnecessary complication.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jun 29 09:23:34 2015 +0200]"},
{"name" : "5fff6d8c3d67685c0deb7a375a96e479029137eb", "time" : 1435561261, "y" : 1397, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "New main file for resident compiler mode.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jun 29 09:01:01 2015 +0200]"},
{"name" : "24825d6862a137f69cf2e6687742173b01cc79c7", "time" : 1435561261, "y" : 1397, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Make reporter ised in Compiler configurable\n\nNot needed right now, but will be useful later.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jun 29 09:01:01 2015 +0200]"},
{"name" : "6beb1b402f84d4a3f3096a1fca2f71b69fb03c1a", "time" : 1435561179, "y" : 1397, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Refactor Driver\n\n - Make parts more reusable\n - Introduce hook \"sourcesRequired\" that controls whether\n   no sources on the command line give a help message.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jun 29 08:59:39 2015 +0200]"},
{"name" : "de8368d5db436bb126e2f327d58fa1882e427e51", "time" : 1435561150, "y" : 1397, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Remove -resident setting\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jun 29 08:59:10 2015 +0200]"},
{"name" : "2e33ba9dd22913b5e7aab472f70dc2f645079636", "time" : 1435561006, "y" : 1397, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Fix doc comment\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jun 29 08:56:46 2015 +0200]"},
{"name" : "1510db96e56ed2fd18fafd1ce1aa411ad282ce28", "time" : 1435420432, "y" : 1403, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Add comment\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jun 27 17:53:52 2015 +0200]"},
{"name" : "a5eae5a79212f76c8a8ad3e4ea39ce0bb3302b9e", "time" : 1435412646, "y" : 1403, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Drop TraitConstructors phase\n\nIt did not do enough to carry its own weight, in particular because DenotationTransformers do have\na price - every encountered denotation in the whole program is passed through them. The name change\nfrom <init> to $init$ was all it did, that is now rolled into Mixin.\n\nAlso renamed IMPLCLASS_CONSTRUCTOR to TRAIT_CONSTRUCTOR.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jun 27 15:44:06 2015 +0200]"},
{"name" : "78f5e1cb9c0b186e4835d0a69e551ed5e988829b", "time" : 1435351362, "y" : 1403, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Drop redundant import\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jun 26 22:42:42 2015 +0200]"},
{"name" : "68b4e6ce51ee8b4981d8a8369d84a45bba8a237c", "time" : 1435351287, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #697 from dotty-staging/fix/erasure-thistypes-vcs\n\nFix erasure of this types and refactor value class erasure", "author" : "PersonIdent[odersky, odersky@gmail.com, Fri Jun 26 22:41:27 2015 +0200]"},
{"name" : "b50f9abef672221a4706f0819eca2cfc1068751c", "time" : 1435335476, "y" : 1407, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Drop Module flag from lifted symbols.\n\nReason: A lifted module is no longer a module (i.e. singleton object) in the scope\nto which it is lifted.\n\nFixes #689.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jun 26 18:17:56 2015 +0200]"},
{"name" : "ef0184826b784fda9e2e1ef9aab31cab692cf3d2", "time" : 1435335295, "y" : 1403, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Restored full test\n\nUncommented parts that were left accidentally commented out when debugging.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jun 26 18:14:55 2015 +0200]"},
{"name" : "3290164f06715bbdf1cc2283b70e6234f74c3606", "time" : 1435335295, "y" : 1403, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Fix trait constructors\n\nTrait constructors added a this to the constructor of a trait, which is useless\nbecause the constructor's type is unit. By contrast, it's good to rename the DefDef\nto the new name.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jun 26 18:14:55 2015 +0200]"},
{"name" : "28751a117f32fb163b54e36e20915fd6f2cc39ff", "time" : 1435335131, "y" : 1403, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Get rid of semiEraseVCs boolean parameters\n\nReplace by the pair of methods erasure/valueErasure.\nThe boolean parameter is still kept, but only as a\nconfuration parameter of the erasure objects.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jun 26 18:12:11 2015 +0200]"},
{"name" : "8017c54da7b512478a78367f9b31a6b13260b311", "time" : 1435335131, "y" : 1403, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Disable checkConstraintClosed by default\n\nChecking that constraints are closed caused cyclic reference exceptions in\nDottyBackedInterface. What's worrying is that these were seemingly not checked\nby the checkin tests. Or maybe there is some dependcy on compilation order that triggers\nthe erros only in my setup.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jun 26 18:12:11 2015 +0200]"},
{"name" : "830a66276c40d9552f0d55b1b560a85a26d0b56c", "time" : 1435335131, "y" : 1403, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Simplify logic in erasure.\n\nThere's one behavioral change: on typedSelectFromTypeTree, we use erasedType as for a notmal ref.\nBefore semiEraseVCs was always set to false here. I don't see how the treatment should be different.\nE.g. it should not matter if we see a\n\n     x.y\nor\n\n     T#y\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jun 26 18:12:11 2015 +0200]"},
{"name" : "aac4c28e4358bd6ff55cf5391508a9196cfb36ad", "time" : 1435335131, "y" : 1403, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Remove check file.\n\nThe file consisted of just a deprecation warning. Not sure what was deprecated; neither dotty\nnor scalac find anything wrong with it.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jun 26 18:12:11 2015 +0200]"},
{"name" : "4b48243a24e533ba81149df956fdc16cdaf1460e", "time" : 1435335131, "y" : 1403, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Fix erasure of Thistypes.\n\nThistypes erased to the underlying class. This is wrong. When seen as part of some other type,\na ThisType has to erase to the erasure of the underlying type (i.e. the erasure if the selftype\nof the class). unittest-collections.scala failed with a MethodNotFound error because the erasure\nwas computed incorrectly.\n\nOn the other hand, a tree with a ThisType type, should keep the type, analogous to a\ntree with a TermRef type.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jun 26 18:12:11 2015 +0200]"},
{"name" : "5e6a9a28241ea8c64617bf90f9c331a352409035", "time" : 1435308888, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #691 from vsalvis/vsalvis-partest-output\n\nPartest output redirection over context.reporter", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri Jun 26 10:54:48 2015 +0200]"},
{"name" : "6dbb991ab81dccc42230ca1c3b94300051deb164", "time" : 1435305045, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #680 from smarter/simplify/erasure\n\nTypeErasure#erasure: do not semi-erase types by default", "author" : "PersonIdent[odersky, odersky@gmail.com, Fri Jun 26 09:50:45 2015 +0200]"},
{"name" : "67aef97ccac65be6390fed93e5c22cc0c0fa974d", "time" : 1435265521, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #678 from dotty-staging/fix/#670-orphan-polyparam\n\nAvoid junk produced by Constraint#replace.", "author" : "PersonIdent[odersky, odersky@gmail.com, Thu Jun 25 22:52:01 2015 +0200]"},
{"name" : "49ae820f3e8d08cf5db4a1165df980328172b42f", "time" : 1435264927, "y" : 1418, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Updated check file.\n\nSeems partest adds code to the sources so that line numbers are not the same.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jun 25 22:42:07 2015 +0200]"},
{"name" : "e984e232bb21c8b24f7f591239afd1672fcf504e", "time" : 1435264700, "y" : 1419, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Cleanups\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jun 25 22:38:20 2015 +0200]"},
{"name" : "41944a049064fffc3065d3077fad7c832bb444a2", "time" : 1435263263, "y" : 1418, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Update check file.\n\nLine numbers were wrong in previous file.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jun 25 22:14:23 2015 +0200]"},
{"name" : "9e77285fc4487330da1bc2ed210dadda92de9303", "time" : 1435229524, "y" : 1418, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Document that lines and columns start at 0.\n\nAnd adjust for it in DottyBackendInterface\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jun 25 12:52:04 2015 +0200]"},
{"name" : "de1042ac04085b496b006c6567d8e737ca5d8ee7", "time" : 1435229478, "y" : 1418, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Make columns start at 0.\n\nLines already start at 0, so columns should, too.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jun 25 12:51:18 2015 +0200]"},
{"name" : "d00572d159a3a15664afbf09d1ff914df4d2c512", "time" : 1435226552, "y" : 1418, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Avoid crasher when first token of a program is in error\n\nThis used to give a crash in SourcePositiom, promoted by feeding\nits calculations with a negative offset.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jun 25 12:02:32 2015 +0200]"},
{"name" : "1e9ffd45ed3c7782ae2f21ed0361e776a122897b", "time" : 1435218446, "y" : 1419, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Add test from pending.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jun 25 09:47:26 2015 +0200]"},
{"name" : "f3f75cad600d616db43138b09b01fcea93affd58", "time" : 1435217833, "y" : 1419, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Sharpen prototypes of implicit methods.\n\nNecessary to make implicit resolution of type-level peano numbers work.\nThe current commit makes takes the inimal steps to make this happen. We\ncould also consider sharpening using followAlias every type we constrain\na result, or every time we adapt a type.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jun 25 09:37:13 2015 +0200]"},
{"name" : "bb90c8457ab91e3c4cd707fa1a68e75e6dd96128", "time" : 1435159134, "y" : 1419, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "setNewTyperState -> setExploreTyperState when computing shadoing implicits\n\nNothing will be committed here, so setExplore... is the right method to pick.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Jun 24 17:18:54 2015 +0200]"},
{"name" : "4b42a198a1db7bb2613e9553e7e4250e6c66f4e3", "time" : 1435156897, "y" : 1427, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Partest 3/3: Proper compiler output redirection\n", "author" : "PersonIdent[vsalvis, salvisbergvera@gmail.com, Wed Jun 24 16:41:37 2015 +0200]"},
{"name" : "5e4e0cf35036906423e13eb74093af07a29f0521", "time" : 1435156424, "y" : 1427, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Partest 2/3: Compiler prints via context instead of println\n", "author" : "PersonIdent[vsalvis, salvisbergvera@gmail.com, Wed Jun 24 16:33:44 2015 +0200]"},
{"name" : "919f5b2e5c5a091326a0693db49ac30ca1e6bf0f", "time" : 1435155299, "y" : 1427, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Partest 1/3: Pass PrintWriter as argument for context creation\n", "author" : "PersonIdent[vsalvis, salvisbergvera@gmail.com, Wed Jun 24 16:14:59 2015 +0200]"},
{"name" : "5395414a68bdcf682bbfc8de5d1c47e86fce708a", "time" : 1435152404, "y" : 1419, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Drop redundant adapt.\n\nThe term in a SearchSuccess has already been adapted to the expected type.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Jun 24 15:26:44 2015 +0200]"},
{"name" : "d4d2ada60864eb6c509aa6e5ae376d4c73a59a20", "time" : 1435137940, "y" : 1431, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "ClassOf: remove special case for value classes\n\nAfter the previous commit this special case is not needed anymore,\nTypeErasure#erasure does the correct thing for value classes.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Wed Jun 24 11:25:40 2015 +0200]"},
{"name" : "428c6918f948e3b4e1107487a96fafc24c535e4e", "time" : 1435134516, "y" : 1431, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "TypeErasure#erasure: do not semi-erase types by default\n\nThis method can be called from other phases than Erasure, and in most\ncases we do not want the result to be semi-erased as this is an\nimplementation details of value classes only useful to do type\nadaptation in the Erasure phase.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Wed Jun 24 10:28:36 2015 +0200]"},
{"name" : "ffac03ab718637c414f5e23524f458b4f4e8f817", "time" : 1435053708, "y" : 1419, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Handle normalization of implicit dependent methods.\n\nNow handles included test if toplevel implicit is given, but not yet without.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Jun 23 12:01:48 2015 +0200]"},
{"name" : "890b8a45cc9d83a6ef67fee3ee05084313f34688", "time" : 1435052946, "y" : 1419, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Avoid follow-on errors after implicit argument errors.\n\nPreviously, we could die with a <notype> when an implicit argument was not found.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Jun 23 11:49:06 2015 +0200]"},
{"name" : "d973e5d15e51aa8a74f4b1141eef6c4064509dd3", "time" : 1435048953, "y" : 1435, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Rename SimpleMap#mapValues -> mapValuesNow\n\nThe operation on SimpleMap is eager. As suggested by @retronym we should\nfind a name different from the lazy Map#mapValues operation.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Jun 23 10:42:33 2015 +0200]"},
{"name" : "53996d2952ddaeae9fd80a5ad79452d56be72678", "time" : 1435048773, "y" : 1435, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Polish code.\n\nFind a nicer way to express the same logic.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Jun 23 10:39:33 2015 +0200]"},
{"name" : "d5b14bf614fe9f25d10f63b71ca081a828562169", "time" : 1435048750, "y" : 1435, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Revert test to original\n\nUncomment two lines that were commented out by accident.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Jun 23 10:39:10 2015 +0200]"},
{"name" : "0fba8757b444d96c748df1e034d39f7626a39d1e", "time" : 1435048575, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #677 from alexander-myltsev/am-579-implement_class_of\n\nCloses #579 Implement mini-phase for classOf[T]", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Tue Jun 23 10:36:15 2015 +0200]"},
{"name" : "12caa2fd4c6774604704d09d0ba7932f9aca674e", "time" : 1434973881, "y" : 1439, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Closes #579 Implement mini-phase for classOf[T]\n", "author" : "PersonIdent[Alexander Myltsev, alexander.myltsev@phystech.edu, Mon Jun 22 14:51:21 2015 +0300]"},
{"name" : "d2c96d02fccef3a82b88ee1ff31253b6ef17f900", "time" : 1434971364, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Merge pull request #667 from dotty-staging/fix/#646-array-addition\n\nFix/#646 array addition", "author" : "PersonIdent[odersky, odersky@gmail.com, Mon Jun 22 13:09:24 2015 +0200]"},
{"name" : "7c88469bdaf212cfdccce565d6ffe638dd5c1dff", "time" : 1434970748, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Merge pull request #675 from dotty-staging/fix/#652-erase-constructors\n\nFix/#652 erase constructors", "author" : "PersonIdent[odersky, odersky@gmail.com, Mon Jun 22 12:59:08 2015 +0200]"},
{"name" : "74e9107e25a2b2f50a8d80b3b13136e5ab9eb6e9", "time" : 1434966125, "y" : 1442, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Fixed typo\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jun 22 11:42:05 2015 +0200]"},
{"name" : "c3bcad807db47ee4ab27ac4a725ba5f402667b4d", "time" : 1434966125, "y" : 1442, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Do not check for ambiguous implicits in viewExists\n\nPreviously `viewExists(X, Y)` failed if there were ambiguous\nimplicit conversions from X to Y. This is too fragile, as\ndemonstrated by test case run/array-addition.scala. Here,\nthe `genericArrayOps` implicit was not inserted because its\nresult type `Array[?T]` was deemed to be incompatible with\n`? { +: : ? }`. It was incompatible because there were multiple\nimplicits that added :+ to arrays of various element types.\nBut once `genericArrayOps` gets applied, the type parameter\n`?T` of the array result is fixed, and the ambuity goes away.\n\nThe scenario shows that we should not test for ambiguous implicits\nin viewExists. Such a test is fragile because it depends on the\nprogress of type inference when the test is made. It's preferable\nto just test for any implicit conversion to exist and to check\nfor ambiguities later, when the implicit conversion is actually\napplied. This has also the potential of speeding up implicit search\nin situations where `viewExists` is called often (e.g. when coupled\nwith overloading resolution).\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jun 22 11:42:05 2015 +0200]"},
{"name" : "204158d4141254d1148534e14d3d26b361b7bc12", "time" : 1434966020, "y" : 1442, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Stratify classTags in DottyPredef\n\nTest case in pending/run/array-addition.scala. The problem was that\nimplicit search failed to insert `genericArrayOps` around `Array()`.\nThe reason was that the implicit parameter for `genericArrayOps` was\nambiguous, multiple `classTag` methods matched the expected type\n`ClassTag[?T >: Nothing]`.\n\nStratifying ClassTags in DottyPredef into layers according\nto implicit priority avoids this problem. This is a temporary solution\nuntil we have proper ClassTag handling in place.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jun 22 11:40:20 2015 +0200]"},
{"name" : "131ab5c1261608715cf2fde3aa44a04777cbda64", "time" : 1434966020, "y" : 1442, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Avoid double context creation when modes change on a fresh context.\n\nMove addMode and friends to two decorators, one for Context, the other\nfor FreshContext. Implement behavior accordingly.\n\nThis avoids creating two contexts in situations like:\n\n     c.fresh.setxploreTyperState.addMode(...)\n\nMow we can write\n\n     c.fresh.addMode(...).setExploreTyperState\n\nBecause addMode returns a fresh context when applied to a fresh context.\nNote that we specifically do not want virtual dispatch of addMode, that's\nwhy it was moved to a decorator.\n\nAlso: removed mention of \".fresh: when just forllowed by an addMode, because\nthat one is redundant.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jun 22 11:40:20 2015 +0200]"},
{"name" : "6f4b38cf9d1711ec525219d9b0b8049c95047f38", "time" : 1434966020, "y" : 1442, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Insert a space between symbol and `:' when printing SelectionProtos\n\nPreviously, we'd see something like `? { :+: Int }`, which is confusing.\nNow we see instead `? { :+ : Int }`.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jun 22 11:40:20 2015 +0200]"},
{"name" : "8d8942a843b86e50eebea4016d65f40e94e93e9c", "time" : 1434964968, "y" : 1447, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Fix typo\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jun 22 11:22:48 2015 +0200]"},
{"name" : "f03f5b0bea0296564c3f41e4375ead48819254d0", "time" : 1434964658, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Merge pull request #668 from lampepfl/fix/#650-self-types\n\nFix checking whether types are instantiable.", "author" : "PersonIdent[odersky, odersky@gmail.com, Mon Jun 22 11:17:38 2015 +0200]"},
{"name" : "c61892842cebdee0dbb0c7a80bb468ae20ea57e1", "time" : 1434964102, "y" : 1435, "branches" : [0, 3, 4, 5, 6, 7, 11], "comment" : "Avoid junk produced by Constraint#replace.\n\nThere were two instances where a constraint undergoing a replace would still refer\nto poly params that are no longer bound after the replace.\n\n1. In an ordering the replaced parameters was n ot removed from the bounds of the others.\n2. When a parameter refers to the replaced parameter in a type, (not a TypeBounds), the\nreplaced parameter was not replaced.\n\nWe now have checking in place that in globally committable typer states, TypeVars are not instantiated\nto PolyParams and (configurable) that constraints of such typer states are always closed.\n\nFixes #670.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jun 22 11:08:22 2015 +0200]"},
{"name" : "478be16e8d6af6004215682dda4730b78533c543", "time" : 1434884516, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Merge pull request #641 from dotty-staging/change/early-annotations\n\nEvaluate annotations in Namer", "author" : "PersonIdent[odersky, odersky@gmail.com, Sun Jun 21 13:01:56 2015 +0200]"},
{"name" : "a654d206d80e3f88cbd79f71ca84ac842988527f", "time" : 1434884473, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Merge pull request #674 from dotty-staging/fix/#655-eta-expansion\n\nFix/#655 eta expansion", "author" : "PersonIdent[odersky, odersky@gmail.com, Sun Jun 21 13:01:13 2015 +0200]"},
{"name" : "5057418d6c16115641e0047ef5c812ce5014e242", "time" : 1434798434, "y" : 1447, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Re-enable sanitized printing\n\nWs disabled by accident.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jun 20 13:07:14 2015 +0200]"},
{"name" : "2550f4161c1e6f9caa014bfd48d22a29082b71c8", "time" : 1434790879, "y" : 1447, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Avoid noise introduced by printing anonymous class numbers\n\nWe seem to have an instability where the testing framework influences what numbers\nanonymous classes are given. We have to deal with this, but not now. For the moment\nI am masking numbers from the test output.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jun 20 11:01:19 2015 +0200]"},
{"name" : "2deaea3481e1825357a97e3d03e403d8f0b38478", "time" : 1434789069, "y" : 1447, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Updated check file\n\nDifference was in generated number for anonymous classes only.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jun 20 10:31:09 2015 +0200]"},
{"name" : "91e69cbf65821bfe0346d0d0960f4b211c2dc849", "time" : 1434754605, "y" : 1447, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Fix mapOuter to be type-preserving\n\nOnly outer references that point to the same class as the outer parameter should be\nmapped. Other outer references should be left alone. Such references can appear\nafter the initial supercall of a constructor.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jun 20 00:56:45 2015 +0200]"},
{"name" : "9a4b5e7c306eb3f1c82ace10dd62576473b1dec1", "time" : 1434753902, "y" : 1447, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Map outer fields to parameters in primary constructor\n\nPreviously this was only done in secondary constructors; need\nto do it in primary constructor as well to avoid \"reference to\nthis before super\" problems.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jun 20 00:45:02 2015 +0200]"},
{"name" : "c093792189f49c3e72ada99ca0fdb97e4023ef78", "time" : 1434753817, "y" : 1447, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Map proxy references in constructors to parameters\n\nProxy references in constructors can't be left as fields because\nthey can happen before the supercall.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jun 20 00:43:37 2015 +0200]"},
{"name" : "0c60f215a1afb225330d01b2bed47bef20cb7bd2", "time" : 1434750031, "y" : 1458, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Improve naming of parameter type.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jun 19 23:40:31 2015 +0200]"},
{"name" : "dfa0ef767b884cd5d00fe0508f2dc4b262fa9221", "time" : 1434749915, "y" : 1458, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Fixed typo in doc comment.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jun 19 23:38:35 2015 +0200]"},
{"name" : "9bf44f867c1a9f4625dd7fac9575c3e74373402b", "time" : 1434748377, "y" : 1447, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Map outer accessors to outer paramaters\n\nMap references to outer accessors in secondary constructors to outer parameters. This\nwas the second source of \"reference to this before super call\" errors.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jun 19 23:12:57 2015 +0200]"},
{"name" : "f3a676a33e075b93d99689f26e76632e57a4d8c3", "time" : 1434748291, "y" : 1447, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Create lazyval bitmaps only after super call.\n\nThis was one source of the \"reference to this before super\" errors.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jun 19 23:11:31 2015 +0200]"},
{"name" : "4a3be27db24c8a28da88d9a79d547849a7b28c2f", "time" : 1434748091, "y" : 1447, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "The expected type of a constructor body is Unit\n\nThsi was not true for erased typechecking.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jun 19 23:08:11 2015 +0200]"},
{"name" : "bb75d4039ee127dfee2630609924f7f3c9132ff6", "time" : 1434732281, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Merge pull request #669 from dotty-staging/fix-patmat-seq\n\nFix sequence matching.", "author" : "PersonIdent[odersky, odersky@gmail.com, Fri Jun 19 18:44:41 2015 +0200]"},
{"name" : "c03b9655be4ea08d02c28771b3e203a4a91d29f2", "time" : 1434731623, "y" : 1458, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Fix problem in eta expansion.\n\nFailure to do a widen caused by-name parameters to go undetected.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jun 19 18:33:43 2015 +0200]"},
{"name" : "76a056f5e1ea01b3cfdc8832e2a164562da770ab", "time" : 1434731478, "y" : 1458, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Refactor viewExists\n\nFactor out isValueSubClass into separate method. Will probably come in handly\nelsewhere, and makes the code easier to understand.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jun 19 18:31:18 2015 +0200]"},
{"name" : "ad6c4ad920bfed6c7c9a87850f51433260a2acf5", "time" : 1434726119, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Merge pull request #671 from dotty-staging/fix/#659-lambdalift-proxies\n\nFix/#659 lambdalift proxies", "author" : "PersonIdent[odersky, odersky@gmail.com, Fri Jun 19 17:01:59 2015 +0200]"},
{"name" : "d3819ce631310baab00c44a0d1845b267d60bcdd", "time" : 1434725330, "y" : 1381, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Enable t5629b.\n\nWas also fixed in this PR.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri Jun 19 16:48:50 2015 +0200]"},
{"name" : "b71650f367a97536a2fbb6ecaae0e046651ae9f5", "time" : 1434725330, "y" : 1381, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Fix wrong test in PatMat.\n\nCall drop method directly if class derives from sequence.\nI do not understand how callRuntime works in scalac. Calling this method requires implicit search.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri Jun 19 16:48:50 2015 +0200]"},
{"name" : "7269b37ce4a5db902513ee96678823a6921a4593", "time" : 1434725330, "y" : 1381, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Make named repeated parameters discoverable during PatMat.\n\nThey used to be discoverable using repeatedType, but ElimRepeated eliminates it.\nInstead I'm using internal synthetic Typed nodes name, similar to how it's done for non-star Wildcards.\nThis makes handling Wildcards and Wildacard_Star more symmetric in patmat.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri Jun 19 16:48:50 2015 +0200]"},
{"name" : "c54debead6d12527469b9d69f4ab0d54cc13f7e9", "time" : 1434723511, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Merge pull request #665 from dotty-staging/fix/#647-expected-type-overloading\n\nTake expected result type into account for overloading resolution", "author" : "PersonIdent[odersky, odersky@gmail.com, Fri Jun 19 16:18:31 2015 +0200]"},
{"name" : "25304a028e6d1426b14ead4a469c362b8536d893", "time" : 1434723304, "y" : 1381, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Add initializers for lambdalift proxy fields\n\nIf an inner class has proxy fields, we missed so far the assignment sfrom\nthe proxy parameters in the primary constructor of the class to the proxy\nfields.\n\nTest case tries several variations of this.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jun 19 16:15:04 2015 +0200]"},
{"name" : "bbc584f0ac3586ce4e4a92e58f74ad69a15f0ed5", "time" : 1434720938, "y" : 1381, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Fix problem with explicit outer accessors\n\nEven if an explicit outer accessor was a method, it got a TermRef as type.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jun 19 15:35:38 2015 +0200]"},
{"name" : "0bbc85895807aa4df05f46b1f0794a8c2fc4d095", "time" : 1434720676, "y" : 1473, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Add test that succeeds\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jun 19 15:31:16 2015 +0200]"},
{"name" : "f121d8a53cb91451e3635711887d7992f3e28d08", "time" : 1434718443, "y" : 1474, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Fix oversight causing a type error on build.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jun 19 14:54:03 2015 +0200]"},
{"name" : "faa7078fffb868c22f783388df0a6d80f64ee0c1", "time" : 1434718183, "y" : 1473, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Add failing test for #670.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jun 19 14:49:43 2015 +0200]"},
{"name" : "631f7c1c9195c91e47403c9b1582f5f998ed2e66", "time" : 1434717321, "y" : 1473, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Refine result type checking\n\nNew test case: array-overload.scala. Failed before, succeeds now.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jun 19 14:35:21 2015 +0200]"},
{"name" : "aef3d5734e27898bd7e06a7f940509ce14ef684c", "time" : 1434712794, "y" : 1473, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Always take results into account for resolveOverloading\n\nPreviously, this was not done when resolving through tpd.\nAlso, improve comments to explain why we picked the \"check\nafterwards\" strategy.\n\nFinally, refactor so that the new logic is all inside\nresolveOverloaded.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jun 19 13:19:54 2015 +0200]"},
{"name" : "54835b6fb19ab0758c7503fb6f0e990ee4c25491", "time" : 1434711529, "y" : 1473, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Take expected result type into account more often for overloading resolution\n\nPreviously, the expected result type of a FunProto type was ignored and taken into\naccount only in case of ambiguities. arrayclone-new.scala shows that this is not enough.\nIn a case like\n\n    val x: Array[Byte] = Array(1, 2)\n\nwe typed 1, 2 to be Int, so overloading resulution would give the Array.apply of\ntype (Int, Int*)Array[Int]. But that's a dead end, since Array[Int] is not a subtype\nof Array[Byte].\n\nThis commit proposes the following modified rule for overloading resulution:\n\n  A method alternative is applicable if ... (as before), and if its result type\n  is copmpatible with the expected type of the method application.\n\nThe commit does not pre-select alternatives based on comparing with the expected\nresult type. I tried that but it slowed down typechecking by a factor of at least 4.\nInstead, we proceed as usual, ignoring the result type except in case of\nambiguities, but check whether the result of overloading resolution has a\ncompatible result type. If that's not the case, we filter all alternatives\nfor result type compatibility and try again.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jun 19 12:58:49 2015 +0200]"},
{"name" : "1b31f068a1a01619ba2ee2635d5f3c90162bf1d1", "time" : 1434711271, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Merge pull request #639 from dotty-staging/add/trait-parameters\n\nAdd/trait parameters", "author" : "PersonIdent[odersky, odersky@gmail.com, Fri Jun 19 12:54:31 2015 +0200]"},
{"name" : "9ee21cfb57164b41c27e9afa83871fa5ab3cccbf", "time" : 1434711250, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Merge pull request #638 from dotty-staging/change/simplify-tasty\n\nChange/simplify tasty", "author" : "PersonIdent[odersky, odersky@gmail.com, Fri Jun 19 12:54:10 2015 +0200]"},
{"name" : "abbc707f3aafad5e2f7bf4be486e6783da31508e", "time" : 1434711213, "y" : 1474, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Remove dead code and rename addTypedModifiersAnnotations\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jun 19 12:53:33 2015 +0200]"},
{"name" : "0369f1ec8df932e75ce974121083bc3e160aebc2", "time" : 1434710128, "y" : 1482, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Fix merge breakage\n\nLazy Scala2 fields and trait parameters touched the same code in Mixin and the merge\ndropped essential logic. Also cleaned up some of the code having to do with lazy\nScala2 fields.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jun 19 12:35:28 2015 +0200]"},
{"name" : "e4db53a62f3484717098f04cabb0f477401e2940", "time" : 1434708678, "y" : 1482, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Fixed typo introduced by merge\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jun 19 12:11:18 2015 +0200]"},
{"name" : "b8628c13a56db5335249a79ccd7772c3245999db", "time" : 1434708678, "y" : 1482, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "References to trait parameter accessors do not have an elidable prefix.\n\nReason: The ParamAccessor flag will be reset later in Mixin. We do not\nwant to rewrite the references to a trait parameter accessor then, so it's\nbetter to generate all references with a `this.` prefix from the start.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jun 19 12:11:18 2015 +0200]"},
{"name" : "321f04e9caf04589320a99a897441d4e1baefff9", "time" : 1434708678, "y" : 1482, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "More explicit test of trait parameter initialization order\n\nAs suggested by @retronym\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jun 19 12:11:18 2015 +0200]"},
{"name" : "0de976828e54b2e407f84bd098aea950ef52dbf1", "time" : 1434708678, "y" : 1482, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Drop parameter accessor flag in traits\n\nParameter accessors in traits have the ParamAccessor flag removed\nin the Mixin transformSym method.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jun 19 12:11:18 2015 +0200]"},
{"name" : "ece6ed49412802909a0e57405331a834cff8d6dc", "time" : 1434708678, "y" : 1482, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Revert: Implementations of mixin getters are never ParamAccessors\n\n(reverted from commit 2c559003534d4441688bcf1664e53993c6187bde)\n\nMixin should drop the ParamAccessor flag anyway in traits, so there is no\nneed to mask it when creating implementations of trait definitions.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jun 19 12:11:18 2015 +0200]"},
{"name" : "da773fb91df35684034f106544fe59f197b4ec80", "time" : 1434708678, "y" : 1482, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Extend test to verify initialization order\n\nVerify that the initilialization order described in #640 is correctly implemented.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jun 19 12:11:18 2015 +0200]"},
{"name" : "d19c30cbf691f55c471aebeb906435dc1824691e", "time" : 1434708678, "y" : 1482, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Convert pos test to be a run test.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jun 19 12:11:18 2015 +0200]"},
{"name" : "2813b01235aaebdae1522bc31d69b830e1830b9b", "time" : 1434708678, "y" : 1482, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Implement trait parameters\n\nAdd necessary logic to Mixin. Also add tests\nthat all parameterized traits are called with\nparameters set.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jun 19 12:11:18 2015 +0200]"},
{"name" : "8c28293fd52213616ed8ca3a2f600eb1e19debe0", "time" : 1434708678, "y" : 1482, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Implement checking for illegal parent trait constructor calls.\n\nA parent trait may not be parameterized (as in T()) if the calling class does not\ndirectly implement that trait.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jun 19 12:11:18 2015 +0200]"},
{"name" : "065a0b4c9cb34b448e070a80e4ad4af9e5ade20a", "time" : 1434708644, "y" : 1482, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Implementations of mixin getters are never ParamAccessors\n\nNeed to suppress the flag when copying symbols.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jun 19 12:10:44 2015 +0200]"},
{"name" : "d70d184d793971a598452b02ea3ab87e3ff4cf03", "time" : 1434708218, "y" : 1474, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Evaluate annotations in Namer\n\nAnnotations were evaluated in Typer, which meant that they could be used only after type checking was\ncomplete (or compilation order dependencies would be introduced). This commit makes annotations be\ninstalled as part of completion in Namer. However, annotations are now lazy so as to avoid cyclic\nreferences. This is completely analogous to the scheme in unpickler and ClassfileParser.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jun 19 12:03:38 2015 +0200]"},
{"name" : "0a504655329dc01a0dc91b847de7ac2b1a688692", "time" : 1434708039, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Merge pull request #666 from dotty-staging/fix/shadowing-so\n\nFix stack overflow when testing for shadowing", "author" : "PersonIdent[odersky, odersky@gmail.com, Fri Jun 19 12:00:39 2015 +0200]"},
{"name" : "084d4bde8ab869c5f98c2720f03db112ea13531b", "time" : 1434706522, "y" : 1495, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Add missing test\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jun 19 11:35:22 2015 +0200]"},
{"name" : "06690117f3b67d947df5ef14cd02a55341b94d1c", "time" : 1434706522, "y" : 1495, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Fix stack overflow when testing for shadowing\n\nShadowing tests could go into an infinite recursion when\nthe found sahdwoing member itself needs an implicit that\nis resolved and then shadowed again by the same member.\n\nA test case is neg/arrayclone-new.scala. This caused\na SO before, now gives two errors.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jun 19 11:35:22 2015 +0200]"},
{"name" : "05e81c1548be6b350111982d7d166046a1665ff8", "time" : 1434705684, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Merge pull request #663 from dotty-staging/fix/#643-scala2-noinits\n\nFix #643 - Scala2 unpickling now sets NoInits flag for interfaces.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri Jun 19 11:21:24 2015 +0200]"},
{"name" : "815209e12e76c61fcf992a4966c976f4c2ec5597", "time" : 1434702993, "y" : 1498, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Fixed compilation error.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jun 19 10:36:33 2015 +0200]"},
{"name" : "19ff3d64242f8260659d1f1e4a4e5492e9e75063", "time" : 1434702992, "y" : 1498, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Eliminate ABSOVERRIDE from TASTY\n\nReplace by ABSTRACT and OVERRIDE. No need to expose the representation detail\nthat they are a single flag.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jun 19 10:36:32 2015 +0200]"},
{"name" : "b34d57ce447f819f258aad02030accca3906e845", "time" : 1434702992, "y" : 1498, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Don't keep SkolemTypes in TASTY\n\nSkolemTypes are no longer needed when Pickling because they exist only\nfor checking type-safety. After the typer, we can safely eliminate them.\nNot having skolem types in TASTY simplifies the format and avoids having\nto explain a difficult concept.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jun 19 10:36:32 2015 +0200]"},
{"name" : "d982038e00ceb02673e8a6c0f6b995f772456417", "time" : 1434702839, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Merge pull request #634 from dotty-staging/fix/refs-to-inner-objects\n\nRefactorings for small style improvements.", "author" : "PersonIdent[odersky, odersky@gmail.com, Fri Jun 19 10:33:59 2015 +0200]"},
{"name" : "c89e85c45ad3f0398990526572f071f35e781baf", "time" : 1434702693, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Merge pull request #599 from dotty-staging/add/existential-skolemization\n\nTighten comparison of skolem types", "author" : "PersonIdent[odersky, odersky@gmail.com, Fri Jun 19 10:31:33 2015 +0200]"},
{"name" : "0ec9c927941ab3155d0c5edacfe3a21c8c4b74ca", "time" : 1434702482, "y" : 1503, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix checking whether types are instantiable.\n\nThe logic for checking aginst the self type was wrong, as demonstrated\nby pos/checkInstantiable.scala.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jun 19 10:28:02 2015 +0200]"},
{"name" : "2ce159fa1707c1e57e22af9b2fe5a87fee94ee8d", "time" : 1434617887, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Merge pull request #664 from dotty-staging/more-tests\n\nEnable tests that pass, move macro tests to disabled.", "author" : "PersonIdent[odersky, odersky@gmail.com, Thu Jun 18 10:58:07 2015 +0200]"},
{"name" : "797bfd74b0900d18d62082b842f6a330ce414ebd", "time" : 1434469921, "y" : 1505, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Scala2 mixin: For some lazy vals inside traits, Lazy flag isn't set on implementation method.\n\nCannot rely on it. Instead use method signature.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Jun 16 17:52:01 2015 +0200]"},
{"name" : "0129468dca4127a6dcdd49b98c7f5060b441b027", "time" : 1434468616, "y" : 1505, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Support overloaded lazy vals coming from Scala2 traits.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Jun 16 17:30:16 2015 +0200]"},
{"name" : "0e6b857ae9501ce3708f273618caafee6b614f82", "time" : 1434465774, "y" : 1507, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Add NoInits when reading a Scala2 pure interface\n\nNoInits is implied for pure interfaces, so has to be set. The Java classfile parser\nalready does the right thing here.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Jun 16 16:42:54 2015 +0200]"},
{"name" : "112f39aa1c3a9e36848b30d7d2709fb1b2ef7949", "time" : 1434465774, "y" : 1507, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Use FlagSet directly instead of defKind\n\nInstead of classifying class members with a TreeInfo.DefKind, we\nuse directly the flags into which kinds were previously translated.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Jun 16 16:42:54 2015 +0200]"},
{"name" : "4eb107258458801b72e5c34ab4ccf3729b9e12d6", "time" : 1434465774, "y" : 1507, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Produce PureInterface flag together with NoInits flag\n\nThe previous stale symbol was discovered because NormalizeFlags looks\nat all declarations of a MoInits trait in the SymTransformer. I.e it does\nthis for all no-init traits, whether loaded from a classfile or currently\ncompiled. This is wasteful because it forces too many definitions.\n\nThe new scheme drops the scan in favor of producing PureInterface\ntogether with NoInits. PureInterface is already read as a flag from\nJava snd Scala2 classfiles. For source and Tasty it is now generated\nas members are indexed.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Jun 16 16:42:54 2015 +0200]"},
{"name" : "d25497a92f425c8966dce47cd17fba456ef2660f", "time" : 1434465774, "y" : 1507, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Avoid double negation in isJvmSam.\n\nFound while trying to chase down the problem with stale symbols in last commit. Double negation\nis confusing. The new formulation avoids it.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Jun 16 16:42:54 2015 +0200]"},
{"name" : "bb940560529ba460af4caa967caaa7f34f944b04", "time" : 1434465774, "y" : 1507, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Avoid spurious StaleSymbol error in <refinement> members\n\nRefinement classes and their members could give spurious stale symbol errors if the\nsymbol is loaded in a different run than the classfile containing it. The problem\nis that refinement classes do not form part of the scope of their owners. The fix\nassumes that refinement classes are always \"stillValid\".\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Jun 16 16:42:54 2015 +0200]"},
{"name" : "78fae1152a7b381af4639d3d66ed637eac3ca9d0", "time" : 1434456195, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #661 from dotty-staging/fix/#651-opassign\n\nFix #651 Generalize criterion for isOpAssign", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Tue Jun 16 14:03:15 2015 +0200]"},
{"name" : "75d5eee8c7f4d83dd64bca989027925e5ff081b6", "time" : 1434385146, "y" : 1505, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Move tests that have \" macro\" or \"reify\" to disabled.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Jun 15 18:19:06 2015 +0200]"},
{"name" : "f9cb7aa3071bfb614efd23e2a14771b0bfd4ccf8", "time" : 1434384267, "y" : 1514, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Revert changes in test\n\nChanges were made by accident.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jun 15 18:04:27 2015 +0200]"},
{"name" : "a9863ab9b947180f04fd2302e86a4410dc27934b", "time" : 1434383459, "y" : 1505, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Update origins.check with origins that match dotty.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Jun 15 17:50:59 2015 +0200]"},
{"name" : "e2a9573288485c29371f51179266661a5b392863", "time" : 1434383436, "y" : 1505, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Remove warnings that dotty doesn't emit from check files.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Jun 15 17:50:36 2015 +0200]"},
{"name" : "506a5e334d57084322fa89119d72fa96beb824b6", "time" : 1434383404, "y" : 1505, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Enable tests that succeed.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Jun 15 17:50:04 2015 +0200]"},
{"name" : "495b07ea1509a1bf3a7091f9fc0a95fccf1b183e", "time" : 1434382271, "y" : 1514, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix #651 Generalize criterion for isOpAssign\n\nMethods like + can have multiple parameters. In that case\n+= also takes multiple parameters.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jun 15 17:31:11 2015 +0200]"},
{"name" : "c4c29e393afb7175422053924b7e1e5a30131c4c", "time" : 1434375178, "y" : 1505, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Mixin: implementations of Scala2 LazyVals need a rhs.\n\nUnlike normal fields, they aren't initialised in $init method, and need to know a bit about class layout of implementation class.\nLuckily AugmentScala2Traits added just enough symbols to make this work.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Jun 15 15:32:58 2015 +0200]"},
{"name" : "ae8a24638551913a60097a5a07c74f5e98e43af0", "time" : 1434108338, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #635 from dotty-staging/fix/private-scala2-trait-setters\n\nSome fixes around mixin and memoization", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri Jun 12 13:25:38 2015 +0200]"},
{"name" : "5c5145d944a772315bbc04aeaf77611dc0faebb6", "time" : 1433771958, "y" : 1505, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Annotate lazy vals in Scala2 traits with @volatile\n\nScala-2 lazy vals are @volatile according to Dotty conventions.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jun 8 15:59:18 2015 +0200]"},
{"name" : "0584e0ff783419b927145509f8c1dfea5e0510f4", "time" : 1433764313, "y" : 1505, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "New SymDenotation method: expandedName.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jun 8 13:51:53 2015 +0200]"},
{"name" : "2ce940ad11786aae4486f37fb5f17bfc4d6e6589", "time" : 1433763058, "y" : 1505, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Copy @field annotations from getters to fields.\n\nFor the moment, we keep all annotations on getters and setters, but this could be changed.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jun 8 13:30:58 2015 +0200]"},
{"name" : "291aecabf400df4a85af498d1045b9ec618dda13", "time" : 1433762987, "y" : 1505, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Methods for filtering annotations carrying meta information.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jun 8 13:29:47 2015 +0200]"},
{"name" : "8191c86cba985e9edb596fbd1a2190c02cf45e0b", "time" : 1433760066, "y" : 1505, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Copy annotations from trait members to their implementations\n\nImplementations inherit all annotations on the implemented trait methods.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jun 8 12:41:06 2015 +0200]"},
{"name" : "674e6bb0ed9ab7a45bf0016585c2c020eb50351b", "time" : 1433754299, "y" : 1505, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix to trait setter generation\n\nThe logic to add trait setters to Scala 2 traits was wrong. This led\nto AbstractMethodErrors in the formerly commented out part of scala-trait.scala.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jun 8 11:04:59 2015 +0200]"},
{"name" : "656dd5122ffd10cebd37aa274156aece2bc03678", "time" : 1433742174, "y" : 1527, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Refactorings for small style improvements.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jun 8 07:42:54 2015 +0200]"},
{"name" : "1962ada58fcd2333a2e40179ab0ac6efb6167ed2", "time" : 1433700794, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #633 from dotty-staging/fix/refs-to-inner-objects\n\nFix/refs to inner objects", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Sun Jun 7 20:13:14 2015 +0200]"},
{"name" : "4c659a31e658a661af44d07bdc003d0ecbf86c3b", "time" : 1433694674, "y" : 1527, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Rename helper method.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Jun 7 18:31:14 2015 +0200]"},
{"name" : "5733fdbd3ed3e8036992ee690bbd8270a36471a2", "time" : 1433694413, "y" : 1527, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix mergeDenot one more time.\n\nIt's easy to get this wrong. What happened was that when\ncomputing deferred members of a class a deferred member\nwas preferred over a concrete one because the types did not match.\nThsi should not happen. We now change the scheme to always\nprefer concrete over abstract, and subclass-owned over superclass-owned.\nBut we pick a denotation only if the overrides relationship on types\ncoincides with the preference on symbols.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Jun 7 18:26:53 2015 +0200]"},
{"name" : "cb2d81df7ef98e79874bf74227045a64ce86e75f", "time" : 1433694232, "y" : 1527, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Better error message for RefChecks\n\nTrying to diagnose failure of t2503 and t5577 which were moved\nto disabled in the time the tests did not work. These failed\nlocally for me, but the checkin tests succeeded (since the checkin\ntests tested something else).\n\nAdded better diagnostics to RefChecks which now mention candidate\nimplementations of missing abstract members that have the right name but\nnot the right type.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Jun 7 18:23:52 2015 +0200]"},
{"name" : "94821afbdc8f6adbbad992972a89cc843b3e27a8", "time" : 1433688404, "y" : 1527, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Bring back tests from disabled.\n\nThe tests in this commit pos were verified to work again.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Jun 7 16:46:44 2015 +0200]"},
{"name" : "ce1780fbcbafd7be298f930a611743386aa0d6a6", "time" : 1433688365, "y" : 1527, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix refs to inner objects\n\nA reference to an object from anywhere in its module class can be\nestablished by the This of the module class. The previous behavior always\nreferenced the object as a term ref which might cause a reference to\nthe outer This which might not be available (since this is not tracked\nby ExplicitOuter). Brings t3174.scala back from disabled.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Jun 7 16:46:05 2015 +0200]"},
{"name" : "310615e717262243aa899959c3178d7465af74a7", "time" : 1433605448, "y" : 1534, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Better printing of skolem types\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jun 6 17:44:08 2015 +0200]"},
{"name" : "081b6ad358467b620f584779737f1fdc8c8300d0", "time" : 1433581528, "y" : 1534, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Document asSeenFrom\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jun 6 11:05:28 2015 +0200]"},
{"name" : "63aaa797a00f8a0361bb74d105c9f856a233fdd1", "time" : 1433581528, "y" : 1534, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Delete test which no longer applies\n\nneg/projections required certain types of the form C#T to be ill-formed.\nThis is no longer done.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jun 6 11:05:28 2015 +0200]"},
{"name" : "540aa23583b12483580c8fbb05f1f392758cd8df", "time" : 1433581527, "y" : 1534, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Remove no longer needed Skolemization.scala\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jun 6 11:05:27 2015 +0200]"},
{"name" : "91dd827a726a12395d7b84c03d45ca6822bf8f12", "time" : 1433581527, "y" : 1534, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Deskolemize types inferred for vals and defs\n\nWe want to establish the invariant (optionally checked by assertNoSkolems)\nthat symbols do not contain skolemized types as their info. This avoids unsoundness situations\nwhere a skolem gets exported as part if the result type of a method, so different instantiations\nlook like their are the same instance.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jun 6 11:05:27 2015 +0200]"},
{"name" : "0ee8e506dac87bae6ec432b2cd277109df872145", "time" : 1433581527, "y" : 1534, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Skolemize unstable prefixes in asSeenFrom\n\nSkolemize unstable prefixes in asSeenFrom provided\n\n - the prefix appears at least once in non-variant or contra-variant position\n - we are in phase typer.\n\nAfter typer, we have already established soundness, so there's no need to\ndo skolemization again. We can simply do the (otherwise unsound) substitution\nfrom this-type to prefix.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jun 6 11:05:27 2015 +0200]"},
{"name" : "84bf5902dba61c88f1b50229bb3afa5a335ded94", "time" : 1433581527, "y" : 1534, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Move deskolemization from TypeComparer to TypeOps\n\nIt's no longer needed in TypeComparer. We now deskolemize when locally inferring types of vals and defs.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jun 6 11:05:27 2015 +0200]"},
{"name" : "d5ba5fb89f41432c710e253d084497658be077f8", "time" : 1433581527, "y" : 1534, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Track unstability in asSeenFrom\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jun 6 11:05:27 2015 +0200]"},
{"name" : "9c63c8b56f65d78c4da2b006ac74a260ae748b26", "time" : 1433581527, "y" : 1534, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Make SkolemTypes cached but generative.\n\nSkolem[T] != Skolem[T]\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jun 6 11:05:27 2015 +0200]"},
{"name" : "080ed2f3d8b5d8fd249691aacc0fe4f9596bb772", "time" : 1433581527, "y" : 1534, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Split RefinedThis and SkolemType\n\nSkolemTypes need to behave differently form RefinedThis types in TypeMap\nand TypeAccumulator. For skolem types these should follow through to the\nunderlying type. For RefinedThis types, these need to do nothing, in order\nnot to start an infinite recursion.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jun 6 11:05:27 2015 +0200]"},
{"name" : "eaf3095494af2b0ea028452450a6af44e27f5284", "time" : 1433581494, "y" : 1534, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Disable deskolemization in narrowGADTBounds\n\nWill use deskolemize later, when method result types\nare inferred.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jun 6 11:04:54 2015 +0200]"},
{"name" : "3d241f3ddbb1d364d163612f643adb57b355f554", "time" : 1433581494, "y" : 1534, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "More inclusive isStable test.\n\n(1) Refinements of stable types are stable\n(2) TypeVars instantiated to stable types are stable.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jun 6 11:04:54 2015 +0200]"},
{"name" : "bf203a52ef0933498a88c2c60e4dad6005bf51cb", "time" : 1433581494, "y" : 1534, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Follow aliases when deskolemizing\n\nBe more aggressive doing this than with lookupRefined in that we compute\nthe member of a projected name, instead of just analyzing the type structurally.\nReason: (1) If we do not follow aliases, skolemization will lose information\n(2) Skolemization is applied rather late, less risk of cyclic references by\ncomputing members.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jun 6 11:04:54 2015 +0200]"},
{"name" : "3352ffc97f3577fd6de5c22a22c7c7c887e9b1f9", "time" : 1433581493, "y" : 1534, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Tighten isStable predicate\n\nA term ref is stable only if its prefix is also stable. At the same time, we\ndrop stability requirements where they no longer make sense (e.g. in isLegalPrefix).\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jun 6 11:04:53 2015 +0200]"},
{"name" : "c8a479255745d7de391f386bbf8946233ff46f7d", "time" : 1433581493, "y" : 1534, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Make skolemsstate three valued\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jun 6 11:04:53 2015 +0200]"},
{"name" : "8e9233b9fce1c7e15d0d1111e88edd5139b3ced7", "time" : 1433581493, "y" : 1534, "branches" : [0, 3, 4, 5, 6, 7, 11, 12], "comment" : "Tighten comparison of skolem types\n\nSkolem types are =:= only if they are reference-equal. Two skolem types\nwith the same underlying type are not necessarily equal.\n\nTests continue to run under this tightened definition.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jun 6 11:04:53 2015 +0200]"},
{"name" : "6ca52b0f23f0c3425d054d0918a149e0e7afb765", "time" : 1433581259, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #622 from dotty-staging/add/implement-scala2-traits\n\nImplement Scala2 traits", "author" : "PersonIdent[odersky, odersky@gmail.com, Sat Jun 6 11:00:59 2015 +0200]"},
{"name" : "c0770edba1f5ba85b5a48f2c2ce68704dbe00087", "time" : 1433349227, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #628 from dotty-staging/fix/initializer-deadlocks\n\nFix/initializer deadlocks", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed Jun 3 18:33:47 2015 +0200]"},
{"name" : "bcf70e27e0eef1b55c2e4afd8f680c0351810073", "time" : 1433347845, "y" : 1552, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Test case for problems with lambda lifting.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Jun 3 18:10:45 2015 +0200]"},
{"name" : "6c8a2425148753d040ab2dbde6ac57349893b736", "time" : 1433347845, "y" : 1552, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Compute outer.path in lambdaLift at correct phase.\n\nLambdaLift needs to compute outer.path at the phase in which\nthe results are constructed, i.e. phase lambdaLift.next. Or else\nwe get an error in outer.path for lost fo files, including pos/Fileish.scala\nas a minimized test case. Previously outer as computed at phase lambdaLift.\nThe reason for this is that lambdaLift name mangles inner classes, which\ncauses outer acessors to be not found. We now correct for the problem\nin outer.path itself, by calling outerAccessor only at a safe phase.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Jun 3 18:10:45 2015 +0200]"},
{"name" : "5cb4ecb19cb551609ebee97aa1b199de8468a98a", "time" : 1433347844, "y" : 1552, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Narrow liftedOwner also for static objects\n\nLambdas should stay inside static objects if they reference to them with\na This or Ident. Fixes test case `llist.scala` but demonstrates another problem.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Jun 3 18:10:44 2015 +0200]"},
{"name" : "367c9d36622dd0a37304efd042374c20944d75bd", "time" : 1433249349, "y" : 1552, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Move test from lambdaLift.scala to a separate file in pending.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Jun 2 14:49:09 2015 +0200]"},
{"name" : "0cdb29904affbf55d5f08a005e8b96acfd73aa81", "time" : 1433245432, "y" : 1556, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixed test.\n\nUntil the previous fix to Denotation-& the test here spuriously passed.\nThe Dotty spec is that value classes synthesize equals and hashCode only\nif no concrete definitions are inherited except the ones from Any. That\nwas previously miscalculated.\n\nThe test has been updated to reflect the specified behavior.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Jun 2 13:43:52 2015 +0200]"},
{"name" : "82f8a81e60fde5750301457d5f2319ee58038d40", "time" : 1433242798, "y" : 1556, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make LazyVals respect scope hygiene.\n\nThe previius commit on \"Refine & for Denotations\" caused\nNotDefinedHere errors in the backend when compiling dotc/typer.\nThese were tracked down to three occurrences in LazyVals where `enter` instead\nof `enteredAfter` was used. `enter` will enter a symbol in an unknown set of\nprevious phases. Transformations that traverse scope (like erasedMembers in\nTypeErasure will then see the denotations of these symbols outside the\nscope in which they are defined.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Jun 2 12:59:58 2015 +0200]"},
{"name" : "4182fb78ce173ed234a184cee4fc4493b706c77f", "time" : 1433242571, "y" : 1556, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Refine \"&\" for denotations.\n\nThe policy is now made clear in a doc comment. The new part is that we will prefer\na symbol defined in a subclass over a symbol defined in a superclass. With the previous\ncommit 0a0d3dd1 on \"More precise and uniform modelling of isCurrent\" we got runtime test\nfailures for Course-2002-03.scala because the new definition isCurrent assumed a behavior\nof `member` which was not assured: Namely that the merged denotation would prefer symbols\nin subclasses over symbols in superclasses.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Jun 2 12:56:11 2015 +0200]"},
{"name" : "4afa3ffe68f450c1f47018892489a0f2a9b4b9b5", "time" : 1433236435, "y" : 1552, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Revert \"Fix ElimStaticThis#transformIdent\"\n\nThis reverts commit 3d240ad40ccfb570174ec9758bfe68ba4e91eefb.\nThis commit got in without succeding the review.\nIt broke what already was working(inner static objects),\nand made impossible moving static methods from companion object to companion class.\n\nAdditionally, commenting or removing assertions is not the way to go, and should not pass review.\n\nSee discussion here: https://github.com/dotty-staging/dotty/commit/3d240ad40ccfb570174ec9758bfe68ba4e91eefb\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Jun 2 11:13:55 2015 +0200]"},
{"name" : "f0787353e407a01a4b0a5f814c3d0feeff7cd87e", "time" : 1433235761, "y" : 1552, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Revert \"Update t6260-delambdafy.check to account for change in lambda generation\"\n\nThis reverts commit cafd71af4902c76561f27a479c14e53729600bb9.\nFor the future refference: tests and checkfiles should be modified only after carefull thought.\nOtherwise our tests will stop indicating the correct behaviour.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Jun 2 11:02:41 2015 +0200]"},
{"name" : "0a0d3dd1a79cb211e5caf93f37b7ef6f484508b2", "time" : 1433186776, "y" : 1556, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "More precise and uniform modelling of \"isCurrent\"\n\nFor implemented getters and forwarded methods we need a notion of \"isCurrent\",\nwhich means: would the getter or method before the implementation is added be\na member of the implementing class? Only in this case do we need to do anything.\nThe method formulation was previously weaker than the getter formulation, which\nled to an error when compiling core (duplicate methods: andThen and size).\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jun 1 21:26:16 2015 +0200]"},
{"name" : "5aaa40607f65d0f3c1af121df226d715c0d02673", "time" : 1433165721, "y" : 1556, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add test case.\n\nWe are still lacking the setup to do this right for mixed Scala 2/Dotty runtime tests. So I checked into `pos` for now.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jun 1 15:35:21 2015 +0200]"},
{"name" : "9e56405ee979831cdccef6ed26dbe445c6808877", "time" : 1433165605, "y" : 1556, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Avoid generating trait setters for constants.\n\nScalac does not generate them either.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jun 1 15:33:25 2015 +0200]"},
{"name" : "2ab65fdee6c8d3c1c15bf137818c611c0a2e985d", "time" : 1433165585, "y" : 1556, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Uncomment important test for Scala trait forwarding\n\nScala 2 doe snot generate default methods, so we always need forwarders.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jun 1 15:33:05 2015 +0200]"},
{"name" : "86f954cb0bf518086688640bb610db7018592655", "time" : 1433165523, "y" : 1556, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix missing implementation class forward\n\nA transformFollowingDeep was missing, so LinkScala2ImplClasses never got to see\nthe call.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jun 1 15:32:03 2015 +0200]"},
{"name" : "922084456e5fd8497c3ed924102d9ed0911c88be", "time" : 1433163886, "y" : 1556, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Elim ElimWildcardIdents\n\nInstead of cleaning up, generate sensical code in the first place. This is shorter and\n(I would argue) clearer, and also has the advantage that some initializing assignments\nare not generated at all.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jun 1 15:04:46 2015 +0200]"},
{"name" : "9b85e308cfae87b9decd13ac4862668e7720648e", "time" : 1433163886, "y" : 1556, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make elimWildcardIdents apply to Assignments\n\nFixes junit failure in dotty where a lazy val was initialized with\na \"...$lazy = _\" assignment.\n\nMoved ElimWiildcard to one group before. It does not really matter where it goes\nso it might as well go someshere in the middle of the pack.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jun 1 15:04:46 2015 +0200]"},
{"name" : "0b34395ab28180d6e3fcd621e399d840f8303714", "time" : 1433163886, "y" : 1556, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Improve comments\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jun 1 15:04:46 2015 +0200]"},
{"name" : "8263d33b047b926ef9750b73fe1a97ea09237df3", "time" : 1433163886, "y" : 1556, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "New phase: LinkScala2ImplClasses\n\nThis phase rewrites supercalls to calls to static implementation class methods.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jun 1 15:04:46 2015 +0200]"},
{"name" : "e4dc4fabd3e34e96ce60311b60219fa8c0064bc2", "time" : 1433163885, "y" : 1556, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make memberSignature work after erasure.\n\nErasure uncurries arguments, need to track that in memberSignature.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jun 1 15:04:45 2015 +0200]"},
{"name" : "71067e64900b212068328d114edc741c6e12049b", "time" : 1433163885, "y" : 1556, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "New phase: AugmentScala2Traits\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jun 1 15:04:45 2015 +0200]"},
{"name" : "4f50e8fa5b48b5a931224d40b7c6fc0aed3da44b", "time" : 1433163885, "y" : 1556, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Avoid referring to initial$x methods when implementing Scala2 traits\n\nThey don't exist for Scala2 traits. Instead we let the initializer be `_'\nand rely on trait setters (to be implemented) to initialize the field.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jun 1 15:04:45 2015 +0200]"},
{"name" : "31a7f6492729ad1ddf7f8e233a452a6ccd517af5", "time" : 1433163884, "y" : 1556, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "New utility method tpd.Underscore\n\nA typed `_'. This is needed in a few places.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jun 1 15:04:44 2015 +0200]"},
{"name" : "6cdb3d45bf2b0b9ebfad73991be37a80f0c8639f", "time" : 1433163884, "y" : 1556, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make ensureMethodic work after erasure.\n\nPreviously it didn't, because it created an ExprType, which is\nillegal after erasure.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jun 1 15:04:44 2015 +0200]"},
{"name" : "4f0af8ec7916503d878712eb99a7a64ea8191bc8", "time" : 1433163883, "y" : 1556, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Use $init$ as the name of trait constructors\n\nThis brings it in line with Scala2 conventions.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jun 1 15:04:43 2015 +0200]"},
{"name" : "9a167ded3bdecc16eb9636fc3f1b58d3405e2248", "time" : 1433163883, "y" : 1556, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Move needsForwarder logic from ResolveSuper to MixinOps.\n\nWe'd like to make it reusable for a phase that treats Scala2 traits.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jun 1 15:04:43 2015 +0200]"},
{"name" : "11848a8c620be514ea43ea4383ca2b91a1aa8627", "time" : 1433163883, "y" : 1556, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "New NameOps methods for Scala2 traits\n\nAlso: generalize expandedName so that it can cater for trait setters.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jun 1 15:04:43 2015 +0200]"},
{"name" : "069010b36cdad9cbaaf2d48e70b17e08ee5eb224", "time" : 1433163883, "y" : 1556, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make Mutable a ModifierFlag.\n\nIt definitely does appear in trees, so should be included in the set.\nAffects how things are printed. Before, typed var's would still show up\nas vals.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jun 1 15:04:43 2015 +0200]"},
{"name" : "54d4d3d96e0771b0aafd12d6349b952fe368f16e", "time" : 1433163882, "y" : 1556, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge postConditions of memoize and constructors\n\nIf memoize and constructors are run in different groups,\nmemoize's previous postcondition \"all concerete methods are implemented\"\nis wrong, because constructors are not implemengted yet. Solved\nby moving the postcondition to phase Constructors.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jun 1 15:04:42 2015 +0200]"},
{"name" : "bb7d6ddfeb22f07658466f731038e270e0af99e9", "time" : 1433146955, "y" : 1552, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Avoid static initialization deadlock in run tests (2).\n\nSee https://github.com/lampepfl/dotty/pull/624#issuecomment-107064519\nfor a lengthy explanation.\n\nWe now solve the problem in LambdaLift. The formerly failing tests are\nall reverted to theor original, failing, version.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jun 1 10:22:35 2015 +0200]"},
{"name" : "07ed3f159b79e53874f53a2c5aa2b00aa2ae0ded", "time" : 1433145956, "y" : 1552, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Revert \"Avoid static initialization deadlock in run tests.\"\n\nThis reverts commit 8f90105dc4e62e78d53b385df1b2eb29f2855183.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jun 1 10:05:56 2015 +0200]"},
{"name" : "57a2a014593278c752fb645f9005ed16b4447242", "time" : 1433078827, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #626 from smarter/fix/ast-tostring\n\nAdd missing string interpolator prefix in some AST nodes' toString", "author" : "PersonIdent[odersky, odersky@gmail.com, Sun May 31 15:27:07 2015 +0200]"},
{"name" : "6d31c9bb6b92309d17779ec5820fcffe4e59e601", "time" : 1433069363, "y" : 1583, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add missing string interpolator prefix in some AST nodes' toString\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Sun May 31 12:49:23 2015 +0200]"},
{"name" : "12ad67419ca4cb7dcf4463990902d9e3e2b1ece6", "time" : 1433065422, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #625 from smarter/add/ast-toString\n\nTrees: Add toString for AST nodes which are not case classes", "author" : "PersonIdent[odersky, odersky@gmail.com, Sun May 31 11:43:42 2015 +0200]"},
{"name" : "5d99a49133d0a89840bb4d839972e0eb588aa529", "time" : 1433065367, "y" : 0, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #623 from dotty-staging/make-tests-pass\n\nMake tests pass", "author" : "PersonIdent[odersky, odersky@gmail.com, Sun May 31 11:42:47 2015 +0200]"},
{"name" : "3d240ad40ccfb570174ec9758bfe68ba4e91eefb", "time" : 1433017512, "y" : 1586, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix ElimStaticThis#transformIdent\n\n- Only transform static methods which are inside module classes.\n- Make sure that the prefix of the underlying type of the Ident\n  is a ThisType of the current module class. For example in\n  \"scala.Int.box(42)\", \"box\" is an Ident whose underlying type is\n  \"TermRef(ThisType(TypeRef(ThisType(TypeRef(NoPrefix,scala)),Int$)),box)\",\n  but we should not trigger an assertion in this case.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Sat May 30 22:25:12 2015 +0200]"},
{"name" : "cafd71af4902c76561f27a479c14e53729600bb9", "time" : 1433010032, "y" : 1586, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Update t6260-delambdafy.check to account for change in lambda generation\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Sat May 30 20:20:32 2015 +0200]"},
{"name" : "8f90105dc4e62e78d53b385df1b2eb29f2855183", "time" : 1433008411, "y" : 1586, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Avoid static initialization deadlock in run tests.\n\nSee https://github.com/lampepfl/dotty/pull/624#issuecomment-107064519\nfor a lengthy explanation.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Sat May 30 19:53:31 2015 +0200]"},
{"name" : "61219786e33a0a038fd5ec00f51c153c03de3077", "time" : 1432939632, "y" : 1589, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Trees: Add toString for AST nodes which are not case classes\n\nThis makes debugging trees easier.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Sat May 30 00:47:12 2015 +0200]"},
{"name" : "dd80fe09cdf4f83efbdf3b7e88f9c686e2a6c137", "time" : 1432918561, "y" : 1586, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "New phase: ElimStaticThis\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri May 29 18:56:01 2015 +0200]"},
{"name" : "878b55a95b3567cd2d83753208ea3c43c9cb6434", "time" : 1432914903, "y" : 1586, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Bring back disabled test.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri May 29 17:55:03 2015 +0200]"},
{"name" : "c65504d92444ffb63b385aaa0900f08912033f74", "time" : 1432912918, "y" : 1586, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Eliminate `_' from rhs of ValDefs\n\nPreviously was only done for DefDefs. Caused backend failure.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri May 29 17:21:58 2015 +0200]"},
{"name" : "3350907bf1ec570a7a7f645c57f74a620cc49664", "time" : 1432907775, "y" : 1586, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Stop running scala/scala tests instead of our junit tests.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri May 29 15:56:15 2015 +0200]"},
{"name" : "d471211cf023a9aaf2c866fb0360cfed306d17d7", "time" : 1432907733, "y" : 1586, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Move test that fails again to disabled.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri May 29 15:55:33 2015 +0200]"},
{"name" : "78aa68223cc0869d2b103805ccc85d6bdf54a4e7", "time" : 1432907165, "y" : 1586, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Revert \"Fix #580: use isContainedIn to support cases where the enclosing class is also the top-level class\"\n\nThis reverts commit 6898d2c296326779d373ef0e0b84e4451550120a.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri May 29 15:46:05 2015 +0200]"},
{"name" : "7bc7c9ba5e04b9a17ed7d548f3ea8caf7bd8c4a7", "time" : 1432907119, "y" : 1586, "branches" : [0, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix compilation failure by refining adaptation of constants\n\nConstants that are adapted to a different supertype need to do this\nexplicitly (not just by changing the type). Otherwise tree checkers\nwill compute the original type and fail.\n\nThis caused a test failure in pos/harmonize. The mystery is why this\nwas not caught in the checkin tests.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri May 29 15:45:19 2015 +0200]"},
{"name" : "ef274600378cc55b78ad62ac9afc8ce9a21efb89", "time" : 1432826013, "y" : 0, "branches" : [0, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #611 from dotty-staging/supercalls-traits-test\n\nAdd a test for supercalls in traits.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Thu May 28 17:13:33 2015 +0200]"},
{"name" : "c533f81750d66a7c99bfb24aafc56a738db064bf", "time" : 1432815647, "y" : 0, "branches" : [0, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #616 from dotty-staging/partest-package\n\nPackage dotty before running partest.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Thu May 28 14:20:47 2015 +0200]"},
{"name" : "e693e66c105e8f13f0e056eccb43b8a65146c8e8", "time" : 1432809064, "y" : 1599, "branches" : [0, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Package dotty before running partest.\n\nTo make sure that artifact is the same.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu May 28 12:31:04 2015 +0200]"},
{"name" : "7779b8fefa745e8b034bc33f46d21bd8599ac4a0", "time" : 1432801093, "y" : 1600, "branches" : [0, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Refine definition of isCurrent\n\nFixes problem with run/t261.scala.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu May 28 10:18:13 2015 +0200]"},
{"name" : "ad2a52ff1eda4ac42649ac9f4e52b72b2f36d337", "time" : 1432800354, "y" : 0, "branches" : [0, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #617 from smarter/fix/param-forwarding\n\nParamForwarding: do not require param accessors to be private[this]", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Thu May 28 10:05:54 2015 +0200]"},
{"name" : "beba9703e6a8cfd9d0f541c6a75125cef9eff726", "time" : 1432772907, "y" : 1602, "branches" : [0, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "ParamForwarding: do not require param accessors to be private[this]\n\nAlso mark the forwarder as Stable otherwise we get a RefChecks error.\n\nThis fixes #608.\n\nNote that we do less parameter forwarding than scalac. See for example D\nand Y in tests/run/paramForwarding.scala which don't get their own local\nfields in scalac but do in dotty.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Thu May 28 02:28:27 2015 +0200]"},
{"name" : "c0b693060c666f66cc5f26462e95f74b68975f31", "time" : 1432761806, "y" : 0, "branches" : [0, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #612 from vsalvis/vsalvis-fix-showdiff\n\nFix --show-diff for partest issue #609", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed May 27 23:23:26 2015 +0200]"},
{"name" : "3940818a996264f67b6ea05c6b6141d8a36b6a92", "time" : 1432761580, "y" : 0, "branches" : [0, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #615 from dotty-staging/dotc-improve\n\nRebuild dotc if new *.scala files are found in `dotty/src`", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed May 27 23:19:40 2015 +0200]"},
{"name" : "f870c31d2a1c26a51399944cf48626383a918ef9", "time" : 1432760929, "y" : 1605, "branches" : [0, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Support rebuilding tests in dotc, be smart about sbt incremental compilation.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed May 27 23:08:49 2015 +0200]"},
{"name" : "e6508e7a5351a74c91b6de46ea241d4c526e92b3", "time" : 1432760631, "y" : 1605, "branches" : [0, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Rebuild dotc if new *.scala files are found in `dotty/src`\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed May 27 23:03:51 2015 +0200]"},
{"name" : "b9c3f9624bd74c4f8bd5856ddbf86ccc52f21546", "time" : 1432757542, "y" : 1607, "branches" : [0, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix --show-diff for partest\n", "author" : "PersonIdent[vsalvis, salvisbergvera@gmail.com, Wed May 27 22:12:22 2015 +0200]"},
{"name" : "2bfbb8ecd20954841069efda4950d833fb3bfcee", "time" : 1432752437, "y" : 0, "branches" : [0, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #610 from lampepfl/DarkDimius-patch-1\n\nShow be more verbose when running partest on Jenkins", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed May 27 20:47:17 2015 +0200]"},
{"name" : "996ad361430d67fc77a81a49df52da2a6b30eba4", "time" : 1432751390, "y" : 0, "branches" : [0, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #598 from dotty-staging/add/simplify-primitives\n\nAdd/simplify primitives", "author" : "PersonIdent[odersky, odersky@gmail.com, Wed May 27 20:29:50 2015 +0200]"},
{"name" : "d07d669ae03ad4cb5eb8352bcbb5a0be7f3aa0f0", "time" : 1432750108, "y" : 1610, "branches" : [0, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Improve doc comments\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed May 27 20:08:28 2015 +0200]"},
{"name" : "5d02fe14e07a66ab219258565b10ff51baada5a0", "time" : 1432750108, "y" : 1610, "branches" : [0, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Uncomment tests\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed May 27 20:08:28 2015 +0200]"},
{"name" : "421f29573190fca94e595bbfe30619a23b052aad", "time" : 1432750108, "y" : 1610, "branches" : [0, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Introduce harmonization of numeric arguments\n\nHarmonization is Dotty's alternative to Scala 2's notion of weak conformance. It is less powerful but also\nless entangled with the core type system. The idea is that in some specific contexts trees that\nall have primitive numeric types will be converted as necessary so that they all have the same numeric type.\nThese tree sets are:\n\n - the two branches of an if\n - the alternatives of a match\n - the body together with the catch blocks of a try\n - the arguments of a vararg parameter\n\nExamples are in the test file, harmonize.scala.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed May 27 20:08:28 2015 +0200]"},
{"name" : "8dd3466ff605db006934697edd7b8ffd9af4bf7f", "time" : 1432750108, "y" : 1610, "branches" : [0, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add harmonization method for harmonizing numeric types.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed May 27 20:08:28 2015 +0200]"},
{"name" : "05679f3afccc2a3085bc089bccbdc03096fb90a0", "time" : 1432747332, "y" : 1600, "branches" : [0, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Extended test case.\n\nAlso added non-unit fields and a class that directly implements two traits with the same fields.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed May 27 19:22:12 2015 +0200]"},
{"name" : "d81fc0395d525f4dd0ec7d1707b3f0249b014edb", "time" : 1432747243, "y" : 1600, "branches" : [0, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Mixin: generate a getter in implementing class only if current\n\nA class might implement several fields in inherited traits with the same and type.\nIn that case only one getter should be produced, but all initializing expressions\nhave to be executed.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed May 27 19:20:43 2015 +0200]"},
{"name" : "c6425f0e103194e50576c591ebab87b19c4b83c3", "time" : 1432747030, "y" : 1600, "branches" : [0, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix bug in typer erasure's transformInfo\n\n   ()Unit  translates to   ()BoxedUnit   not   BoxedUnit.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed May 27 19:17:10 2015 +0200]"},
{"name" : "c1f1d2d6e01e3f483dd0b3d3721354d4fe035b1c", "time" : 1432747030, "y" : 1600, "branches" : [0, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "workaround https://issues.scala-lang.org/browse/SI-7666\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed May 27 19:17:10 2015 +0200]"},
{"name" : "79516efe0e3c43af2a7084bc2c61316ad7879f91", "time" : 1432747030, "y" : 1600, "branches" : [0, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add super calls to trait initialization test)\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed May 27 19:17:10 2015 +0200]"},
{"name" : "f987eb08e5323ec60856f29fbbd67827f5fee55b", "time" : 1432747030, "y" : 1600, "branches" : [0, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add a test for trait initialization.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed May 27 19:17:10 2015 +0200]"},
{"name" : "abe2a47dc08ad888caf2c7c2c365d63b328d01b3", "time" : 1432747030, "y" : 1600, "branches" : [0, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add a test that tests supercalls in traits.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed May 27 19:17:10 2015 +0200]"},
{"name" : "574be04ee3bb8a0c29691b5075ab606193376008", "time" : 1432743529, "y" : 1621, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Show be more verbose when running partest on Jenkins\n\nEnables printing of diffs after test failure and a more summary in the end of test suite.\r\nDiffs do not work yet #609", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed May 27 18:18:49 2015 +0200]"},
{"name" : "6ec4b0a7753ffadaf85e4ffee0ad8bd1749cde01", "time" : 1432743456, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #607 from dotty-staging/fix/datarace-flags\n\nFix/datarace flags", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed May 27 18:17:36 2015 +0200]"},
{"name" : "397dfd6d564b032e5f1d52dda015ffb4238a595f", "time" : 1432715456, "y" : 1623, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "New pos tests\n\nSome of them were moved from disabled after verifiying that they compile now.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed May 27 10:30:56 2015 +0200]"},
{"name" : "20f6e9d9efb6ece9a8844cfe011ac1cc663c378e", "time" : 1432715455, "y" : 1623, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Categorize disabled tests into pos/run\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed May 27 10:30:55 2015 +0200]"},
{"name" : "26788d4caef75fdbe5ed81d50723d36afc21d2ee", "time" : 1432715455, "y" : 1623, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Disable failing test\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed May 27 10:30:55 2015 +0200]"},
{"name" : "6a728ebabe02423bd1f172f6e75d419f8a4837a4", "time" : 1432668773, "y" : 1623, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make ClassfileConstants thread-safe.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue May 26 21:32:53 2015 +0200]"},
{"name" : "0c4ca21dafd067af3d2953356b57ffb2f30093c3", "time" : 1432668556, "y" : 1623, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Disabled two failing tests\n\nBoth tests fail with the same error: \"Cannot create object because\nprotected[this] newBuilder is not implemented\". Not clear why partests\nclaim to succeed here.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue May 26 21:29:16 2015 +0200]"},
{"name" : "b2634a85acbaad6125a675009db8dd73837e1f58", "time" : 1432548783, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #585 from dotty-staging/fix/collection-related\n\nImprovements to higher-kinded types", "author" : "PersonIdent[odersky, odersky@gmail.com, Mon May 25 12:13:03 2015 +0200]"},
{"name" : "afe910dbc4a430708066db51ae8c4b6e0d724985", "time" : 1432479817, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #603 from smarter/fix/vc-bridges\n\nFix bridge creation for value classes", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Sun May 24 17:03:37 2015 +0200]"},
{"name" : "818afa813d12bec63c5d1bb8604e60b1672c6996", "time" : 1432479808, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #601 from smarter/add/vcRunTests\n\nAdd value class run tests", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Sun May 24 17:03:28 2015 +0200]"},
{"name" : "3fa6782bbe54afeebb7fca229cebff271421f73a", "time" : 1432400394, "y" : 1631, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix bridge creation for value classes\n\nAs the comment in the code says:\n\"In general, a bridge is needed when the signature of the closure method after\nErasure contains an ErasedValueType but the corresponding type in the functional\ninterface is not an ErasedValueType.\"\nSo we need to check if _at least one_ of the type needs to be adapted,\nnot if _all of them_ need to, the use of \"forall\" was an error.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Sat May 23 18:59:54 2015 +0200]"},
{"name" : "e61e59f739d889549993afdd743cbaf71a95c45e", "time" : 1432400140, "y" : 1631, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add some run tests related to value classes\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Sat May 23 18:55:40 2015 +0200]"},
{"name" : "14051fb457a3a9a9f80cd37ca97fff196f6fccb4", "time" : 1432399887, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #600 from smarter/fix/overriden-message\n\nFix #597: Improve double def error message", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Sat May 23 18:51:27 2015 +0200]"},
{"name" : "942c41b1bdc6db60d530eee70d9dba68acfb54e6", "time" : 1432396457, "y" : 1631, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Disable the use of VC*Companion super classes for now\n\nThey declare final methods which are overriden in SyntheticMethods,\nwhich means that all value classes fail at runtime.\nDisabling them makes it possible to add run tests for value classes\nwhich will make it easier to experiment with changes to value classes.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Sat May 23 17:54:17 2015 +0200]"},
{"name" : "d7224353811b6acbd3f5171976215e143eee9f72", "time" : 1432391428, "y" : 1635, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix #597: Improve double def error message\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Sat May 23 16:30:28 2015 +0200]"},
{"name" : "c8b16397e099cf0733ab142202d25ccf2b18c8e1", "time" : 1432389450, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #595 from dotty-staging/enable-partest\n\nEnable 440 run tests that pass.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Sat May 23 15:57:30 2015 +0200]"},
{"name" : "26f558cc8418e07a32356e4621eb8c52f622448a", "time" : 1432303762, "y" : 1637, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Do not run pos tests on partest.\n\nNo need to run them twice.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri May 22 16:09:22 2015 +0200]"},
{"name" : "718bffedfad111a44dcebfcd327d52dbeee30491", "time" : 1432303686, "y" : 1637, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Remove tests from pending.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri May 22 16:08:06 2015 +0200]"},
{"name" : "6965b470d433f501203c4e3d77b0919f826691ba", "time" : 1432303643, "y" : 1637, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Enable 440 run tests that pass.\n\nNote that some of them may pass due to several bugs that interfere.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri May 22 16:07:23 2015 +0200]"},
{"name" : "91bb668c5f1b6e5c51dad9b373c9398521508bc3", "time" : 1432300378, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #578 from smarter/fix/traitInit\n\nMixin: fix the initialization of traits", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri May 22 15:12:58 2015 +0200]"},
{"name" : "cc50729f8e088f1687193199a81108f0984127b8", "time" : 1432296457, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #587 from vsalvis/vsalvis-partest-run\n\nLess verbose partest", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri May 22 14:07:37 2015 +0200]"},
{"name" : "4f27848d63bd388caeea86c032c85ecc2c5d31fe", "time" : 1432293380, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #593 from dotty-staging/fix-intellij\n\nClone scala/scala to ./scala-scala instead of ./scala", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri May 22 13:16:20 2015 +0200]"},
{"name" : "76c639283934faef5d3a9fd86bbaa6417aa2c8b2", "time" : 1432293340, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #594 from dotty-staging/use-utf8\n\nUse UTF-8 by default on jenkins.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri May 22 13:15:40 2015 +0200]"},
{"name" : "adfe78d740b2443dd09c9008c78bc98f0f3894a0", "time" : 1432286021, "y" : 1644, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Update-check option for partest, added \"do not edit\" header\n", "author" : "PersonIdent[vsalvis, salvisbergvera@gmail.com, Fri May 22 11:13:41 2015 +0200]"},
{"name" : "ed31c2a82d6b59ef092e17bd8811278f5ffd15e9", "time" : 1432285964, "y" : 1644, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Less verbose partest with compiler output redirected, better --verbose output\n", "author" : "PersonIdent[vsalvis, salvisbergvera@gmail.com, Fri May 22 11:12:44 2015 +0200]"},
{"name" : "12f7dcba50671361f3de04d3a23b049f74a79280", "time" : 1432285964, "y" : 1644, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Added partest-only sbt target and less verbose file generation\n", "author" : "PersonIdent[vsalvis, salvisbergvera@gmail.com, Fri May 22 11:12:44 2015 +0200]"},
{"name" : "9fff1ac663f80a0477a2464216c608dc2ecd81b0", "time" : 1432285964, "y" : 1644, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Partest command line options (same as scala) useable from sbt\n", "author" : "PersonIdent[vsalvis, salvisbergvera@gmail.com, Fri May 22 11:12:44 2015 +0200]"},
{"name" : "78640ebad658ddd38e86a9d98c6bbcdd83708397", "time" : 1432222876, "y" : 1648, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Calibrate findMember logging thresholds and test case\n\nAdds IterableSelfRec.scala which caused lockup of the compiler.\nAfter a lot of work the problem was determined to be polyomial or\nexponential behavior of the compiler when executing findMember\non refined types that contain several bindings where the\nresutling & causes a recursive invokation of findMember with\nthe same name. We do have a stop for this now, but if the\nstop comes too late the runtime will grow very fast.\n\nProblem addressed by kiccking in earlier with the stopping logic.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu May 21 17:41:16 2015 +0200]"},
{"name" : "10bb6a0e5efa8cc76f7bd6215ca3d2a44070850a", "time" : 1432222876, "y" : 1648, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Move findMember count tracking from TypeComparer to Context\n\nTypecomparer is not a good place because it gets re-generated for new context,\nwhich causes the counts to be reset.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu May 21 17:41:16 2015 +0200]"},
{"name" : "1746ae11926e2f09ed50e62273669b6196e60547", "time" : 1432222876, "y" : 1648, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Rename Reporter#echo -> println\n\nMore refular that way. Also, change some raw printlns in low-level\ncode to reporter.printlns in order to harden them against prints over prints.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu May 21 17:41:16 2015 +0200]"},
{"name" : "de7a5bb049fadaa2078107358e51de273a15d515", "time" : 1432222876, "y" : 1648, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Harden display logic\n\nDisplaying stuff should never report an exception or cause more messages to be displayed that\nrelate to the displaying.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu May 21 17:41:16 2015 +0200]"},
{"name" : "02f5ba8f72b043854aec5729f2b30fe813027435", "time" : 1432222876, "y" : 1648, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Avoid cycle between findMember and &\n\nAs test case IterableDotty shows, there can be a cycle\n\n  findMember  -->  &  -->  <:<  -->  hasMatchingMember -->  findMember\n\nwhich leads to an infinite recursion. This commit avoids this by\nkeeping track of names of outstanding findMember searches and falling\nback to forming AndTypes instead of `&' is we repeat a findMember\nsearch on a name seen before after a certain recursion depth.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu May 21 17:41:16 2015 +0200]"},
{"name" : "709c657b3963ec3d3d4f0933fe05bf25f697b48f", "time" : 1432222876, "y" : 1648, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add equals and hashcode to LazyRef\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu May 21 17:41:16 2015 +0200]"},
{"name" : "53496b83e62b06435800d11069a64f529c29f03f", "time" : 1432222875, "y" : 1648, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Show LazyRefs nicely\n\nPreviously, this fell back to toString\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu May 21 17:41:15 2015 +0200]"},
{"name" : "24a95aa44a02d438d4df179a6475edfc690f9d9a", "time" : 1432222875, "y" : 1648, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Move threshold values to Config\n\nIt's a more logical home for them than the Context object.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu May 21 17:41:15 2015 +0200]"},
{"name" : "110a438c000cd77caff28ebe9725d2a00f8060d6", "time" : 1432222875, "y" : 1648, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Implement type beta reduction in lookupRefined\n\nlookupRefined now reduces fully instantiated lambdas.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu May 21 17:41:15 2015 +0200]"},
{"name" : "d5975dc740bd55ea72477e9f726882edcd18dbe3", "time" : 1432222875, "y" : 1648, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Generaize canWiden to classBounds\n\nThis gives us a cheap way to bound the search of all baseclasses in\ntestLifted.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu May 21 17:41:15 2015 +0200]"},
{"name" : "17f1c5fc26d2b1390ef5a224c8187dcc10ce0784", "time" : 1432222875, "y" : 1648, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Rename for clarity\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu May 21 17:41:15 2015 +0200]"},
{"name" : "3fa6c8a698c48c40c75871015c59c4d8f1912c0b", "time" : 1432222875, "y" : 1648, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add test case for higher-kinded operations on collections\nThe test case that caused all previous commits in this branch.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu May 21 17:41:15 2015 +0200]"},
{"name" : "74490a2315ce8c38fdf6905e713e57005bf085c7", "time" : 1432222874, "y" : 1648, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix DenotationNotDefinedHere in pattern matcher\n\nThis was uncovered by previous commit \"Fix isSubType bug ...\".\nAlso removed two redundants \".fresh\" calls in \"fresh.addMode\".\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu May 21 17:41:14 2015 +0200]"},
{"name" : "ff96f13f0fb7f69d6dd747908281373031b9c545", "time" : 1432222874, "y" : 1648, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix isSubType bug related to testLifted\n\ntestLifted widened a type to an some base type constructor when comparing with\na type lambda. This can return false positives if the widened type is on the\nright of the comparison. The fix adds a parameter to testLifted indicating\nwhether widening is permitted.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu May 21 17:41:14 2015 +0200]"},
{"name" : "98ae292662828954c86652b42b7fd42fc2782cbc", "time" : 1432222874, "y" : 1648, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Specialize printing of Lambda abstractions.\n\nUse the proposed Lambda syntax\n\n  [HK$0, ..., HK$n] => body\n\nfor them.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu May 21 17:41:14 2015 +0200]"},
{"name" : "85dcf168b68ac23c619ca88b5f511cb4010895eb", "time" : 1432222874, "y" : 1648, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix error in derivedTypeAlias\n\nNeed to generate new type if variance differs from old one.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu May 21 17:41:14 2015 +0200]"},
{"name" : "acc1e15e675ce8c0b022ec4fc30d20d0e78d11c2", "time" : 1432222873, "y" : 1648, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Harden isLambdaArgName\n\nPreviously we could have returned true here yet a subsequent\nlambdaArgIndex would fail with a Numberformat error. This scenario\nis prevented now.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu May 21 17:41:13 2015 +0200]"},
{"name" : "42feebf6aeb2c523f1d69ff9fcad3ba22d9a1ba5", "time" : 1432222873, "y" : 1648, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Shorten lambda arguments to HK$\n\n... makes diagnostics more legible.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu May 21 17:41:13 2015 +0200]"},
{"name" : "9ab86534d7225edcafd3e16849b638c1d99aea69", "time" : 1432222873, "y" : 1648, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add \"Printing\" mode\n\nIdea: when printing, we should be more lenient about conditions that\nwould otherwise cause an assertion failure, because we want to avoid\ntriggering further assertions while diagnosing previous errors. As a start\nwe generalize an assertion that RefinedTypes cannot be created after erasure.\nThis gets triggered when playing around with printing lambdas at erasure time\n(see following commit): erasure runs at phase erasure + 1, so ctx.erasedTypes is true,\nbut we might still want to print lambdas then, and printing lambdas will create new\nrefined types as of next commit.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu May 21 17:41:13 2015 +0200]"},
{"name" : "3d9d90e1a29a80f9df968a0e53e01ecb31c397c7", "time" : 1432222873, "y" : 1648, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make normalizeToRef survive annotated types\n\nDid not handle this case before.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu May 21 17:41:13 2015 +0200]"},
{"name" : "89145d0e166a3042d7530b037a5664f3b1d4f22e", "time" : 1432222872, "y" : 1648, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Disallow {...} arguments for annotations\n\nThis mimics scalac's behavior (but not the official syntax; in fact the\nofficial syntax seems to be ambiguous.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu May 21 17:41:12 2015 +0200]"},
{"name" : "1f908b420e4efe944ea764bbba239472c9c3cc92", "time" : 1432222872, "y" : 1648, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Allow AnnotatedType in operands of `with`.\n\nBrings in line with Scala 2 spec.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu May 21 17:41:12 2015 +0200]"},
{"name" : "0e5851ba8ed3b87dc4dbe12647edb97b6683c769", "time" : 1432221334, "y" : 1644, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Use UTF8 by default on jenkins.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu May 21 17:15:34 2015 +0200]"},
{"name" : "ccbbe261b7ba2d41b01ca1df1d4655e07086b088", "time" : 1432220503, "y" : 1671, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Clone scala/scala to ./scala-scala instead of ./scala\n\nOtherwise Intellij stops running JUnit tests correctly. No idea why.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu May 21 17:01:43 2015 +0200]"},
{"name" : "c48badad54f90047f690d02e8af80153c6634412", "time" : 1432218568, "y" : 1672, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Mixin: fix the initialization of traits\n\nBefore this commit, the following code:\ntrait Hello {\n  println(\"Hello\")\n  val x: Int = 1\n  println(\"World\")\n}\n\nBecame:\n<trait> trait Hello extends Object {\n  def <init>(): Hello = {\n    {\n      ()\n    }\n    this\n  }\n  <accessor> def x(): Int\n  protected def initial$x(): Int = {\n    println(\"Hello\")\n    1\n  }\n}\n\nNotice that the initialization statements after the last getter were\nmissing, this is now fixed:\n<trait> trait Hello extends Object {\n  def <init>(): Hello = {\n    {\n      println(\"World\")\n      ()\n    }\n    this\n  }\n  <accessor> def x(): Int\n  protected def initial$x(): Int = {\n    println(\"Hello\")\n    1\n  }\n}\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Thu May 21 16:29:28 2015 +0200]"},
{"name" : "bf81fb62084f9e04e43906396c3ac5e307caca63", "time" : 1432198915, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #589 from smarter/fix/trait-init-name\n\nTraitConstructors: Use a valid method name for the initializer (fix #577)", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Thu May 21 11:01:55 2015 +0200]"},
{"name" : "ca07c71c2040ec836808fcc8a985c8a9ba9fa677", "time" : 1432198888, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #572 from dotty-staging/fix/#569-newRefArray\n\nFix/#569 new ref array", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Thu May 21 11:01:28 2015 +0200]"},
{"name" : "93667bebe5cbd67311b8a34adb45343740d50123", "time" : 1432195283, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #590 from smarter/fix/lifted-inner-uses-this\n\nFix #580: use isContainedIn to support cases where the enclosing class is also the top-level class", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Thu May 21 10:01:23 2015 +0200]"},
{"name" : "36ab621f5dc1fd9a9e2513a02059681478f25887", "time" : 1432194701, "y" : 1676, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix comment\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu May 21 09:51:41 2015 +0200]"},
{"name" : "d01a0c9fe994eaeec4a20f4d2486a1dc0d1081c3", "time" : 1432194701, "y" : 1676, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Better fix for $569\n\nWe now provide a ndew symbol for the `newRefArray` definition, which makes\nany further treatment after erasure unnecessary.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu May 21 09:51:41 2015 +0200]"},
{"name" : "07f346efac3e4187f6243f6348a944db41c05dc5", "time" : 1432194701, "y" : 1676, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix #569 - newRefArray\n\nnewRefArray needs to be treated specially at and after erasure because\nit is the only source-defined method that's still polymoprhic.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu May 21 09:51:41 2015 +0200]"},
{"name" : "8f885892f80c988beb8206358214291ec445696f", "time" : 1432194600, "y" : 1679, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "TraitConstructors: Use a valid method name for the initializer (fix #577)\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu May 21 09:50:00 2015 +0200]"},
{"name" : "6898d2c296326779d373ef0e0b84e4451550120a", "time" : 1432194203, "y" : 1680, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix #580: use isContainedIn to support cases where the enclosing class is also the top-level class\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu May 21 09:43:23 2015 +0200]"},
{"name" : "4bac1a5fe9fcb0e0154c670fe766b3ea0faee814", "time" : 1432130129, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #591 from dotty-staging/scala-infra\n\nMake dotty use scala-infra for CI.", "author" : "PersonIdent[odersky, odersky@gmail.com, Wed May 20 15:55:29 2015 +0200]"},
{"name" : "371a60cd9b131fd30b9a64cd757a4d59995ffdf0", "time" : 1432112706, "y" : 1682, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add -e to bash options in scripts.\n\nSee discussion in #591\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed May 20 11:05:06 2015 +0200]"},
{"name" : "e0c2c423e8a399fd00090bf23e37d335a1a46029", "time" : 1432080325, "y" : 1682, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Run builds in parallel on the same machine.\n\nAllows sbts not to lock on the same ivy cache.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed May 20 02:05:25 2015 +0200]"},
{"name" : "6b1cd332579feb2a6c79568b72d568ec6b2ccbc4", "time" : 1432076356, "y" : 1682, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Disable byNameVarargs. Kills JVM.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed May 20 00:59:16 2015 +0200]"},
{"name" : "b67142410d2f91d670e0be573d9ff5b6d76e0a8b", "time" : 1432076214, "y" : 1682, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Move `scala/scala` sources to ./scala/ from ../scala/\n\nNeeded for scala-infra.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed May 20 00:56:54 2015 +0200]"},
{"name" : "0199dc41764667d0529d18bbf68e278e3f2617a5", "time" : 1432075957, "y" : 1682, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Integrating with scala-infra for CI.\n\nSee https://github.com/scala/scala-jenkins-infra/pull/56\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed May 20 00:52:37 2015 +0200]"},
{"name" : "3dcb286ac40ab2c9ba7d10e984c85541e0d0a78a", "time" : 1431901535, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #584 from smarter/fix/isUnbox\n\nFix null unboxing of primitives (fixes #582)", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon May 18 00:25:35 2015 +0200]"},
{"name" : "b033f14dc28122d2b1795f1411c7b290c5d7bc67", "time" : 1431900791, "y" : 1688, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix null unboxing of primitives (fixes #582)\n\nErasure#isUnbox was incorrect: the unbox methods are defined on the\nvalue classes, not the boxed classes.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Mon May 18 00:13:11 2015 +0200]"},
{"name" : "0edb02b43fec0fd26cf7ed3977a489f20ab06621", "time" : 1431714080, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #574 from dotty-staging/fix/#568\n\nMake Child annotation lazy", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri May 15 20:21:20 2015 +0200]"},
{"name" : "6d36499ce515d3931c9c6f319f0f082e9d3ae0e0", "time" : 1431712213, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #575 from dotty-staging/fix/#566\n\nAs i566 shows, it is possible to have a package as prefix, a package", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri May 15 19:50:13 2015 +0200]"},
{"name" : "6674b3563011a84e0389598573feb77cecb37cbc", "time" : 1431702325, "y" : 1691, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "As i566 shows, it is possible to have a package as prefix, a package\nobject as owner and be followed by type arguments:\n\n     reflect.classTag[T]\n\nexpands to\n\n     reflect.`package`.classTag[T]\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri May 15 17:05:25 2015 +0200]"},
{"name" : "743c6bb43334c70581f99c849b14ecab5981544e", "time" : 1431701309, "y" : 1692, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make Child annotation lazy\n\nOtherwise we get bootstrap problems when trying to compile Child:\nCompleting Predef with the Scala2Unpickler causes Child annotations\nto be added to parents of case classes. But completing Child would depend\non completion of Predef. Making child annotations lazy avoids the cycle.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri May 15 16:48:29 2015 +0200]"},
{"name" : "49e537e10f572340e2d8f8ac632a5c05227b694f", "time" : 1431699918, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #558 from dotty-staging/run-tests\n\nAdd run tests to pending.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri May 15 16:25:18 2015 +0200]"},
{"name" : "595f245880229fc2bf77a6ca759a537a5ce05a73", "time" : 1431698680, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #565 from retronym/topic/cleanups\n\nFix typos, scaladoc tags, and some minor code smells.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri May 15 16:04:40 2015 +0200]"},
{"name" : "0679784bd8928e040e2c2d5ab0b57772209cef89", "time" : 1431698437, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #563 from dotty-staging/classtags\n\nClassTags: New phase which synthesises class tags.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri May 15 16:00:37 2015 +0200]"},
{"name" : "d2b6f3c13a8c242ba8ab42216a7fff6c89e7510e", "time" : 1431697703, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #570 from dotty-staging/no-clearable\n\nDo not depend on scala.collection.generic.Clearable in dotty.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri May 15 15:48:23 2015 +0200]"},
{"name" : "9f63b0e1362148d67715ae4458bd2ae3181c6464", "time" : 1431692212, "y" : 1697, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Do not depend on scala.collection.generic.Clearable in dotty.\n\nMakes bootstrap easier.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri May 15 14:16:52 2015 +0200]"},
{"name" : "d3d13f6a729cd8399226535bc9f43aac5c6f7565", "time" : 1431691023, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #567 from dotty-staging/fix/ScalaRunTime2\n\nDropped ??? in arrayclass", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri May 15 13:57:03 2015 +0200]"},
{"name" : "c04bf229fcf1eb92749059e4049f507d49efe299", "time" : 1431690146, "y" : 1699, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Dropped ??? in arrayclass\n\nThe patch caused the built dotty not to run anymore. Since the prupose of the ???\nwas to find out where it was called I inserted the stacktrace that caused dotc\nto fail.\n\nI wonder how this passed the tests? Dotc became completely useless for me when I\nran it from the command line.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri May 15 13:42:26 2015 +0200]"},
{"name" : "d4e4e24fdf472031299fbb9a058a4ed1e28033cc", "time" : 1431683299, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #564 from dotty-staging/fix/#560\n\nFix/#560", "author" : "PersonIdent[odersky, odersky@gmail.com, Fri May 15 11:48:19 2015 +0200]"},
{"name" : "736682e306ae3c9cb48d83b2750e9d36dee4e9b5", "time" : 1431681092, "y" : 1701, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Extension methods: address reviewers comments #563\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri May 15 11:11:32 2015 +0200]"},
{"name" : "a1fda63908b24c0b5287c2a3425891d0add25026", "time" : 1431681056, "y" : 1701, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "ClassTags: handle Or and AndTypes, and Arrays.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri May 15 11:10:56 2015 +0200]"},
{"name" : "b6bb0340fdc6b7b523b011940dc99cc899663368", "time" : 1431681015, "y" : 1701, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Remove duplicate spaces in ClassTags\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri May 15 11:10:15 2015 +0200]"},
{"name" : "db11aaacfe01daff72732ba4588cb006512abcd2", "time" : 1431680993, "y" : 1701, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Move names from ClassTags to StdNames.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri May 15 11:09:53 2015 +0200]"},
{"name" : "d894335f03b667ce3d3f6c4a29bfe6fcdf6be7a6", "time" : 1431680966, "y" : 1701, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Move classTags before ElimByName.\n\nTo have less interactions with erasure.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri May 15 11:09:26 2015 +0200]"},
{"name" : "ea71c6f70f464a68a4c7afd6115ba82f31816a9f", "time" : 1431572131, "y" : 1706, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix an ironic typo in the typo fixing commit\n", "author" : "PersonIdent[Jason Zaugg, jzaugg@gmail.com, Thu May 14 12:55:31 2015 +1000]"},
{"name" : "37298814b95871ec871a3679d19bae82adf1edaf", "time" : 1431569143, "y" : 1706, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "val is redundant for case class parameters.\n", "author" : "PersonIdent[Jason Zaugg, jzaugg@gmail.com, Thu May 14 12:05:43 2015 +1000]"},
{"name" : "f14f5c8ce119e656f818c62ef8bcbd2490edf0fc", "time" : 1431569112, "y" : 1706, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Remove redundant parentheses.\n", "author" : "PersonIdent[Jason Zaugg, jzaugg@gmail.com, Thu May 14 12:05:12 2015 +1000]"},
{"name" : "b6b1fb3e8234cb3df406b26e97c6f58ed77bfedc", "time" : 1431568823, "y" : 1706, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix a few Scaladoc warnings\n", "author" : "PersonIdent[Jason Zaugg, jzaugg@gmail.com, Thu May 14 12:00:23 2015 +1000]"},
{"name" : "448953056d695c5137b079bb66fc5c6f6cdb9e8a", "time" : 1431568605, "y" : 1706, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Correct a large number of typos.\n\nI scanned the main sources with IntellIJ's spell checker and\ncorrected what showed up.\n", "author" : "PersonIdent[Jason Zaugg, jzaugg@gmail.com, Thu May 14 11:56:45 2015 +1000]"},
{"name" : "275b2c37dfbba3fa026c3821742c81b1d16e8db2", "time" : 1431566319, "y" : 1706, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix parameter name in Scaladoc.\n", "author" : "PersonIdent[Jason Zaugg, jzaugg@gmail.com, Thu May 14 11:18:39 2015 +1000]"},
{"name" : "0fde1ac4607ca26f759c037c43535123f4e7b2d8", "time" : 1431566278, "y" : 1706, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Remove docs of non-existent positions/pos params of Modifiers\n", "author" : "PersonIdent[Jason Zaugg, jzaugg@gmail.com, Thu May 14 11:17:58 2015 +1000]"},
{"name" : "e89a118af157a408297f25d1fa7065c9695a1ded", "time" : 1431566217, "y" : 1706, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix Scaladoc references\n", "author" : "PersonIdent[Jason Zaugg, jzaugg@gmail.com, Thu May 14 11:16:57 2015 +1000]"},
{"name" : "a61c9d7571b0045969985a274bb01436d272f5f0", "time" : 1431548301, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #562 from dotty-staging/fix/ScalaRunTime\n\nPut ScalaRunTime into its proper place.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed May 13 22:18:21 2015 +0200]"},
{"name" : "45521484c5acb8f3174aebcd23674c0af955dc06", "time" : 1431531819, "y" : 1715, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix #560 - refactor flatName\n\n- Merge flatName and fullNameSeparated\n- Treat nested members of modules specially, to conform to scalac conventions\n- Use `~` as separator for term members.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed May 13 17:43:39 2015 +0200]"},
{"name" : "fe903c00027f0440207dc70c8b1d50ef3d0b3701", "time" : 1431530289, "y" : 1701, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "ClassTags: New phase which synthesises class tags.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed May 13 17:18:09 2015 +0200]"},
{"name" : "d1bb4d333de08502e19db620adc1f92aaa9fca94", "time" : 1431530257, "y" : 1701, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "ExtensionMethods: companions of value classes become class tags.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed May 13 17:17:37 2015 +0200]"},
{"name" : "bf134bcce241f42f2e5a7ad58f1125ad0b29d753", "time" : 1431530222, "y" : 1701, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Relax requirement in enterNoReplace\n\nAllows entering new symbols in future scope of a denotation.\nOnly past scope is already frozen, and we should be free to modify future one.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed May 13 17:17:02 2015 +0200]"},
{"name" : "4b82e83052de948c6a3b77c40892766421e259c2", "time" : 1431528993, "y" : 1715, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Put ScalaRunTime into its proper place.\n\nEclipse freaked out because ScalaRunTime was in the ScalaRunTime directroy,\nwhereas it should have been in runtime.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed May 13 16:56:33 2015 +0200]"},
{"name" : "0064286422fedefab88247f21ec48f68e95e001a", "time" : 1431524991, "y" : 1701, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Relax restriction on entering symbols into mutable scopes.\n\nThe restriction here is used to make sure that the latest scope is being updated.\nPrevious was to harsh and allowed only typer to call normalizeToClassRefs\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed May 13 15:49:51 2015 +0200]"},
{"name" : "9c55450be3514fd3c4741dd3a618ad24606792e5", "time" : 1431522584, "y" : 1701, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Rename variables in ExtensionMethods\n\nref       => moduleClass\norigClass => value class\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed May 13 15:09:44 2015 +0200]"},
{"name" : "629f4ac808a72e9b7191212de649185a68405a0e", "time" : 1431521026, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #546 from dotty-staging/fix-#545\n\nFix #545: no need to make members of static classes static.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed May 13 14:43:46 2015 +0200]"},
{"name" : "929e8893522d1cbfdfbb7d2e7c6531d3435420ec", "time" : 1431519062, "y" : 1723, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Compute enclosingClass and topLevelClass once in LambdaLift.liftLocals\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed May 13 14:11:02 2015 +0200]"},
{"name" : "32a70042fc8a0338e093dba0424c98d25fb3a754", "time" : 1431518969, "y" : 1723, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Guard agains lifting symbols defined in super-calls to non-static members of package.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed May 13 14:09:29 2015 +0200]"},
{"name" : "e0952285ba9d2fa44fbb236290a78e7588c5ea00", "time" : 1431518850, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #557 from dotty-staging/cleanup-non-deviation\n\nCleanup non-deviation.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed May 13 14:07:30 2015 +0200]"},
{"name" : "f9040627638d619683988e9aec268b43777ee7fd", "time" : 1431518457, "y" : 1726, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix i499 test. fails due to #546\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed May 13 14:00:57 2015 +0200]"},
{"name" : "31fbfcc04b4933ee5464b40949a80d849a31d3cf", "time" : 1431517767, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #515 from dotty-staging/classTags\n\nForked ScalaRuntime and minimal classtags for arrays of value classes.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed May 13 13:49:27 2015 +0200]"},
{"name" : "28bb27672bf7e4fb2bb80df48ee8c70628de19c4", "time" : 1431515469, "y" : 1726, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Use LegacyApp in run tests.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed May 13 13:11:09 2015 +0200]"},
{"name" : "1d13da929f7cce642efde39dff2944dfc5b276f9", "time" : 1431515435, "y" : 1726, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Introduce LegacyApp to simplify porting run tests. #559\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed May 13 13:10:35 2015 +0200]"},
{"name" : "e9e394093e4cb885ce11d597cd94b4c8f1a0e0ae", "time" : 1431514212, "y" : 1726, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Partest command line options (same as scala) useable from sbt\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed May 13 12:50:12 2015 +0200]"},
{"name" : "cb5b6a0d85be25b76946b8bfc6821c7e399463a6", "time" : 1431514094, "y" : 1726, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Run partest directory as whole by default.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed May 13 12:48:14 2015 +0200]"},
{"name" : "73a93505c432b410ae39fb3c4d6168b2e49832ce", "time" : 1431511707, "y" : 1726, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Running rewrite tool on run tests.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed May 13 12:08:27 2015 +0200]"},
{"name" : "89bacb9c25a58454ff1878e67f7ea07ffc8c269f", "time" : 1431448253, "y" : 1726, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Run tests as they were in scala.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue May 12 18:30:53 2015 +0200]"},
{"name" : "a0fa33deafbea1bf53edc068c5ed9db5592822f9", "time" : 1431448111, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #554 from vsalvis/vsalvis-partest-run\n\nRun tests for partest", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Tue May 12 18:28:31 2015 +0200]"},
{"name" : "f64762b150f7d3510ae783ab632b0aa849fae3a1", "time" : 1431424088, "y" : 1735, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Removing pickle tests because directory doesn't exist anymore.\n", "author" : "PersonIdent[vsalvis, salvisbergvera@gmail.com, Tue May 12 11:48:08 2015 +0200]"},
{"name" : "ef22b1d0f878e97a7602dabd1a90ba871bf1fccb", "time" : 1431422375, "y" : 1735, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "More robust partest/test switching for concurrent sbt instances\n", "author" : "PersonIdent[vsalvis, salvisbergvera@gmail.com, Tue May 12 11:19:35 2015 +0200]"},
{"name" : "7e3595d1f7efa34ef3ea2409529643cd8864e926", "time" : 1431422374, "y" : 1735, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Better documentation for partest dottyJar option\n", "author" : "PersonIdent[vsalvis, salvisbergvera@gmail.com, Tue May 12 11:19:34 2015 +0200]"},
{"name" : "ca3fc43bb3f9eb0068669acf6e64b3c6bd310511", "time" : 1431422374, "y" : 1735, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Run tests for partest\n", "author" : "PersonIdent[vsalvis, salvisbergvera@gmail.com, Tue May 12 11:19:34 2015 +0200]"},
{"name" : "7669286edec331dedbb43b3a74c30df0e972257f", "time" : 1431419792, "y" : 1739, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Cleanup non-deviation.\n\nThere was a \"dotty deviation - does not work\" in DottyBackendInterface, which does work after all.\nReverting to more idiomatic code.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue May 12 10:36:32 2015 +0200]"},
{"name" : "2da8afdca1c357d6cada891c70e68e386c44c2f3", "time" : 1431366933, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #556 from AlexSikia/fix/unset-tree-pos\n\nFix unset tree position", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon May 11 19:55:33 2015 +0200]"},
{"name" : "9dd4aec79b8d05211a77c929ad6684b7e1d89c58", "time" : 1431361765, "y" : 1741, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix unset tree position\n\nDebugs some cases where `tree.pos` wasn't initialised properly.\n", "author" : "PersonIdent[AlexSikia, alexandre.sikiaridis@gmail.com, Mon May 11 18:29:25 2015 +0200]"},
{"name" : "c80b04dd8ebf378823cb4ff3a947683390544046", "time" : 1431343898, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #555 from dotty-staging/fix/reenable-tests\n\nRe-enable tests", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon May 11 13:31:38 2015 +0200]"},
{"name" : "be0bcc7c675d8b70c9414eadd5a47c3f11ae5243", "time" : 1431337032, "y" : 1743, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Re-enable tests\n\nMost tests were still commented out in last merge. Also,\nan outdated comment in TreeTypeMap was removed.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon May 11 11:37:12 2015 +0200]"},
{"name" : "258775ecb01060397bb47c9ebc35945a87915451", "time" : 1431200756, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #519 from smarter/fix/isSourceMethod\n\nFix isSourceMethod", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Sat May 9 21:45:56 2015 +0200]"},
{"name" : "839e47cc8a527a5777361bf750095739adb3c7eb", "time" : 1431200211, "y" : 1745, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Companion methods are not real methods\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Sat May 9 21:36:51 2015 +0200]"},
{"name" : "37851350754403323b26c0c32417cbecc0c44584", "time" : 1431199999, "y" : 1745, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "rename isSourceMethod to isRealMethod, the previous name was inaccurate\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Sat May 9 21:33:19 2015 +0200]"},
{"name" : "a1790ebc08d8498f86440cd0534343b11319fc6d", "time" : 1431168121, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #550 from dotty-staging/lazy-vals-fixes\n\nVarious fixes to LazyVals.", "author" : "PersonIdent[odersky, odersky@gmail.com, Sat May 9 12:42:01 2015 +0200]"},
{"name" : "36ebabd0349715af3bbf1231526b985a8a363d63", "time" : 1431167872, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #535 from dotty-staging/Build-scala\n\ndotc: Get versions of all dependencies from Build.scala", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Sat May 9 12:37:52 2015 +0200]"},
{"name" : "2a4576136e0aa49d86d44ca9b0d375d27d644c77", "time" : 1431167846, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #551 from dotty-staging/fix/#547-overloaded-varargs\n\nFix #547: Vararg overload", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Sat May 9 12:37:26 2015 +0200]"},
{"name" : "8838aefb3dab8cf59106c0a038758eae08a6657b", "time" : 1431167759, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #543 from dotty-staging/compile-dotty\n\nMake dotty compile backend.", "author" : "PersonIdent[odersky, odersky@gmail.com, Sat May 9 12:35:59 2015 +0200]"},
{"name" : "7645024a9c17c24d0c2facbc76cc250512d4fa91", "time" : 1431101143, "y" : 1751, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix #547: Vararg overload\n\nWhen comparing to types in isAsSpecific, onvert repeated parameters to their underlying type\nonly if both types are vararg methods. This mimics scalac behavior.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri May 8 18:05:43 2015 +0200]"},
{"name" : "de97de5a5fa3b278f3e76f22721a1aff79f65337", "time" : 1431095643, "y" : 1752, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add a postcondition to constructors.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri May 8 16:34:03 2015 +0200]"},
{"name" : "10424c6c8e4310ceffea929115e27cf658773d85", "time" : 1431094905, "y" : 1752, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Workaround #548.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri May 8 16:21:45 2015 +0200]"},
{"name" : "8f05dd93a3d2a4e29e22023d5b1a62d77b88cc89", "time" : 1431094793, "y" : 1752, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "LazyVals: inject Offset definitions in Template.\n\nOtherwise Constructors is not able to see them and they get lost.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri May 8 16:19:53 2015 +0200]"},
{"name" : "338dcfa80cd5ecff0cb4a961ba8eabf061fc7f12", "time" : 1431094748, "y" : 1752, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "LazyVals: fix initialisers of local lazy vals to be called.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri May 8 16:19:08 2015 +0200]"},
{"name" : "04492dfa72f58f26dc48858ad5a9232abe197eb2", "time" : 1431094707, "y" : 1752, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix printing of Constant(Claz), ie getClass[Claz]\n\nPrevious scheme did not work after erasure.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri May 8 16:18:27 2015 +0200]"},
{"name" : "c0d265a52c34ddfd77f4237d215a085675b25a57", "time" : 1431087179, "y" : 1757, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Give implicit ClassTags in DottyPredef explicit types.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri May 8 14:12:59 2015 +0200]"},
{"name" : "14e5ae5063c7524cde99e79a2ad907a337f5f214", "time" : 1431085699, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #542 from dotty-staging/fix/#540-unbounded-generic-array\n\nFix #540 - unbounded array test for wildcard array arguments", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri May 8 13:48:19 2015 +0200]"},
{"name" : "6edf859c9dae24aa4232110244a8b1119b0c63e0", "time" : 1431084832, "y" : 1759, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Reload denotations that are not defined at current phase\n\nUp to now a NotDefinedHere exception was thrown if a denotation\nwas not defined at the current phase, but was defined elsewhere\nin the current run. However, if the denotation is a SingleDenotation\nor MultiDenotation it is possible that the particular Single- or Multi-Denotation\nwas not computed at the current phase, but the underlying SymDenotation\nis valid. With the changes in this commit, we reaload the denotation as\na second try.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri May 8 13:33:52 2015 +0200]"},
{"name" : "7972f3d6864429dad967b19d0673c403fb80d208", "time" : 1431084832, "y" : 1759, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Update scala-compiler fork.\n\nIncludes fixes to lambas, and no type projections in signatures.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri May 8 13:33:52 2015 +0200]"},
{"name" : "1206a813e8550cb49ebc3fbcc1de51c6daa3eadd", "time" : 1431084832, "y" : 1759, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "PatternMatcher: fix bug with undefined variable inside huge patterns.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri May 8 13:33:52 2015 +0200]"},
{"name" : "ebe3290f487b12cf4778c5affeeb42324cd5fbc6", "time" : 1431084831, "y" : 1759, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Remove NonExistentTree.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri May 8 13:33:51 2015 +0200]"},
{"name" : "ff091be1075911d5979d7b34ebcec7153eb5486e", "time" : 1431084831, "y" : 1759, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Workaround dotty deviation in for loop patterns.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri May 8 13:33:51 2015 +0200]"},
{"name" : "1838eb04314f30afd74d7ce1bce61ff08989786b", "time" : 1431084831, "y" : 1759, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Do not try to compile dotty runtime yet. Problems with DottyPredef.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri May 8 13:33:51 2015 +0200]"},
{"name" : "38e4f578a68ede3f246484ad9f0354c21fe9015e", "time" : 1431084831, "y" : 1759, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Address some of dotty deviations in backend.\n\nImplicit vals need explicit type, anonymous classes are widened.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri May 8 13:33:51 2015 +0200]"},
{"name" : "f15e9b2bd1ee0ade14216582f1726028a3dca8df", "time" : 1431084831, "y" : 1759, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Data race in typer: seems due to presence of DottyPredef both on class path and in compiled source.\n\n[error] Test dotc.tests.dotty failed: java.lang.AssertionError: assertion failed: data race? overwriting symbol of dotty.DottyPredef$ / TypeRef(ThisType(TypeRef(NoPrefix,dotty)),DottyPredef$) / class dotty.tools.dotc.core.Types$CachedTypeRef / 9007 / 9748, took 1.276 sec\n[error]     at scala.Predef$.assert(Predef.scala:165)\n[error]     at dotty.tools.dotc.core.Types$NamedType.checkSymAssign(Types.scala:1263)\n[error]     at dotty.tools.dotc.core.Types$NamedType.setDenot(Types.scala:1293)\n[error]     at dotty.tools.dotc.core.Types$NamedType.withDenot(Types.scala:1286)\n[error]     at dotty.tools.dotc.core.Types$TypeRef$.apply(Types.scala:1669)\n[error]     at dotty.tools.dotc.core.Types$Type.select(Types.scala:819)\n[error]     at dotty.tools.dotc.typer.Namer.moduleValSig(Namer.scala:602)\n[error]     at dotty.tools.dotc.typer.Namer$Completer.typeSig(Namer.scala:465)\n[error]     at dotty.tools.dotc.typer.Namer$Completer.completeInCreationContext(Namer.scala:499)\n[error]     at dotty.tools.dotc.typer.Namer$Completer.complete(Namer.scala:495)\n[error]     at dotty.tools.dotc.core.SymDenotations$SymDenotation.completeFrom(SymDenotations.scala:161)\n[error]     at dotty.tools.dotc.core.SymDenotations$SymDenotation.info(SymDenotations.scala:143)\n[error]     at dotty.tools.dotc.core.SymDenotations$SymDenotation.ensureCompleted(SymDenotations.scala:253)\n[error]     at dotty.tools.dotc.core.SymDenotations$SymDenotation.flags(SymDenotations.scala:97)\n[error]     at dotty.tools.dotc.core.SymDenotations$SymDenotation.is(SymDenotations.scala:119)\n[error]     at dotty.tools.dotc.core.SymDenotations$SymDenotation.isStable(SymDenotations.scala:464)\n[error]     at dotty.tools.dotc.core.Types$Type.widenIfUnstable(Types.scala:691)\n[error]     at dotty.tools.dotc.core.Types$Type$$anonfun$member$1.apply(Types.scala:394)\n[error]     at dotty.tools.dotc.core.Types$Type$$anonfun$member$1.apply(Types.scala:394)\n[error]     at dotty.tools.dotc.util.Stats$.track(Stats.scala:35)\n[error]     at dotty.tools.dotc.core.Types$Type.member(Types.scala:393)\n[error]     at dotty.tools.dotc.typer.Typer$$anonfun$typedIdent$1.wildImportRef$1(Typer.scala:192)\n[error]     at dotty.tools.dotc.typer.Typer$$anonfun$typedIdent$1.findRef$1(Typer.scala:240)\n[error]     at dotty.tools.dotc.typer.Typer$$anonfun$typedIdent$1.apply(Typer.scala:263)\n[error]     at dotty.tools.dotc.typer.Typer$$anonfun$typedIdent$1.apply(Typer.scala:79)\n[error]     at dotty.tools.dotc.util.Stats$.track(Stats.scala:35)\n[error]     at dotty.tools.dotc.typer.Typer.typedIdent(Typer.scala:79)\n[error]     at dotty.tools.dotc.typer.Typer.typedNamed$1(Typer.scala:1017)\n[error]     at dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:1076)\n[error]     at dotty.tools.dotc.typer.Typer$$anonfun$typed$2.apply(Typer.scala:1088)\n[error]     at dotty.tools.dotc.typer.Typer$$anonfun$typed$2.apply(Typer.scala:1086)\n[error]     at dotty.tools.dotc.reporting.Reporting$class.traceIndented(Reporter.scala:147)\n[error]     at dotty.tools.dotc.core.Contexts$Context.traceIndented(Contexts.scala:51)\n[error]     at dotty.tools.dotc.typer.Typer.typed(Typer.scala:1086)\n[error]     at dotty.tools.dotc.typer.Typer.typedExpr(Typer.scala:1125)\n[error]     at dotty.tools.dotc.typer.Typer$$anonfun$typedPackageDef$1.apply(Typer.scala:961)\n[error]     at dotty.tools.dotc.typer.Typer$$anonfun$typedPackageDef$1.apply(Typer.scala:960)\n[error]     at dotty.tools.dotc.util.Stats$.track(Stats.scala:35)\n[error]     at dotty.tools.dotc.typer.Typer.typedPackageDef(Typer.scala:960)\n[error]     at dotty.tools.dotc.typer.Typer.typedUnnamed$1(Typer.scala:1066)\n[error]     at dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:1078)\n[error]     at dotty.tools.dotc.typer.Typer$$anonfun$typed$2.apply(Typer.scala:1088)\n[error]     at dotty.tools.dotc.typer.Typer$$anonfun$typed$2.apply(Typer.scala:1086)\n[error]     at dotty.tools.dotc.reporting.Reporting$class.traceIndented(Reporter.scala:147)\n[error]     at dotty.tools.dotc.core.Contexts$Context.traceIndented(Contexts.scala:51)\n[error]     at dotty.tools.dotc.typer.Typer.typed(Typer.scala:1086)\n[error]     at dotty.tools.dotc.typer.Typer.typedExpr(Typer.scala:1125)\n[error]     at dotty.tools.dotc.typer.FrontEnd$$anonfun$typeCheck$1.apply$mcV$sp(FrontEnd.scala:41)\n[error]     at dotty.tools.dotc.typer.FrontEnd.monitor(FrontEnd.scala:18)\n[error]     at dotty.tools.dotc.typer.FrontEnd.typeCheck(FrontEnd.scala:39)\n[error]     at dotty.tools.dotc.typer.FrontEnd$$anonfun$runOn$3.apply(FrontEnd.scala:52)\n[error]     at dotty.tools.dotc.typer.FrontEnd$$anonfun$runOn$3.apply(FrontEnd.scala:52)\n[error]     at scala.collection.immutable.List.foreach(List.scala:381)\n[error]     at dotty.tools.dotc.typer.FrontEnd.runOn(FrontEnd.scala:52)\n[error]     at dotty.tools.dotc.Run$$anonfun$compileSources$1$$anonfun$apply$mcV$sp$3.apply(Run.scala:55)\n[error]     at dotty.tools.dotc.Run$$anonfun$compileSources$1$$anonfun$apply$mcV$sp$3.apply(Run.scala:52)\n[error]     at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)\n[error]     at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:186)\n[error]     at dotty.tools.dotc.Run$$anonfun$compileSources$1.apply$mcV$sp(Run.scala:52)\n[error]     at dotty.tools.dotc.Run$$anonfun$compileSources$1.apply(Run.scala:47)\n[error]     at dotty.tools.dotc.Run$$anonfun$compileSources$1.apply(Run.scala:47)\n[error]     at dotty.tools.dotc.util.Stats$.monitorHeartBeat(Stats.scala:68)\n[error]     at dotty.tools.dotc.Run.compileSources(Run.scala:46)\n[error]     at dotty.tools.dotc.Run.compile(Run.scala:33)\n[error]     at dotty.tools.dotc.Driver.doCompile(Driver.scala:20)\n[error]     at dotty.tools.dotc.Bench$.dotty$tools$dotc$Bench$$super$doCompile(Bench.scala:38)\n[error]     at dotty.tools.dotc.Bench$$anonfun$doCompile$1.apply(Bench.scala:38)\n[error]     at dotty.tools.dotc.Bench$$anonfun$doCompile$1.apply(Bench.scala:36)\n[error]     at dotty.tools.dotc.Bench$$anonfun$ntimes$1.apply(Bench.scala:30)\n[error]     at dotty.tools.dotc.Bench$$anonfun$ntimes$1.apply(Bench.scala:30)\n[error]     at scala.collection.TraversableOnce$$anonfun$foldLeft$1.apply(TraversableOnce.scala:142)\n[error]     at scala.collection.TraversableOnce$$anonfun$foldLeft$1.apply(TraversableOnce.scala:142)\n[error]     at scala.collection.immutable.Range.foreach(Range.scala:166)\n[error]     at scala.collection.TraversableOnce$class.foldLeft(TraversableOnce.scala:142)\n[error]     at scala.collection.AbstractTraversable.foldLeft(Traversable.scala:104)\n[error]     at scala.collection.TraversableOnce$class.$div$colon(TraversableOnce.scala:136)\n[error]     at scala.collection.AbstractTraversable.$div$colon(Traversable.scala:104)\n[error]     at dotty.tools.dotc.Bench$.ntimes(Bench.scala:30)\n[error]     at dotty.tools.dotc.Bench$.doCompile(Bench.scala:36)\n[error]     at dotty.tools.dotc.Driver.process(Driver.scala:31)\n[error]     at dotty.tools.dotc.Bench$.dotty$tools$dotc$Bench$$super$process(Bench.scala:53)\n[error]     at dotty.tools.dotc.Bench$$anonfun$process$1.apply(Bench.scala:53)\n[error]     at dotty.tools.dotc.Bench$$anonfun$process$1.apply(Bench.scala:53)\n[error]     at dotty.tools.dotc.Bench$$anonfun$ntimes$1.apply(Bench.scala:30)\n[error]     at dotty.tools.dotc.Bench$$anonfun$ntimes$1.apply(Bench.scala:30)\n[error]     at scala.collection.TraversableOnce$$anonfun$foldLeft$1.apply(TraversableOnce.scala:142)\n[error]     at scala.collection.TraversableOnce$$anonfun$foldLeft$1.apply(TraversableOnce.scala:142)\n[error]     at scala.collection.immutable.Range.foreach(Range.scala:166)\n[error]     at scala.collection.TraversableOnce$class.foldLeft(TraversableOnce.scala:142)\n[error]     at scala.collection.AbstractTraversable.foldLeft(Traversable.scala:104)\n[error]     at scala.collection.TraversableOnce$class.$div$colon(TraversableOnce.scala:136)\n[error]     at scala.collection.AbstractTraversable.$div$colon(Traversable.scala:104)\n[error]     at dotty.tools.dotc.Bench$.ntimes(Bench.scala:30)\n[error]     at dotty.tools.dotc.Bench$.process(Bench.scala:53)\n[error]     at test.CompilerTest.compileArgs(CompilerTest.scala:159)\n[error]     at test.CompilerTest.compileDir(CompilerTest.scala:104)\n[error]     at dotc.tests.dotty(tests.scala:141)\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri May 8 13:33:51 2015 +0200]"},
{"name" : "918cea1e9f7e93d0a5263a1fff073cc2d704a323", "time" : 1431084831, "y" : 1759, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Compile Dotty including runtime and utils.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri May 8 13:33:51 2015 +0200]"},
{"name" : "66899f85cdeedf823da3f45c2ef0a55ccd6c3d99", "time" : 1431084831, "y" : 1759, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Do not use deprecated procedure syntax in GenBCode.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri May 8 13:33:51 2015 +0200]"},
{"name" : "2350f4d5db9fc20acedf784bc57fac33a6b27805", "time" : 1431084831, "y" : 1759, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Remove debug println\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri May 8 13:33:51 2015 +0200]"},
{"name" : "1f1359349787b571a3c1b1d570548f71da8a767f", "time" : 1431084830, "y" : 1759, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Drop the requirement that extractors with `get` must implement Product\n\nWe used to require that the result type of an extractor `get` is a product,\nor else the type of the `get` itself would be taken as the result type of the\nunapply. This is now relaxed so that we automatically select with _1, _2, ...\nas soon as there are multiple argument patterns, and (1) the result type is not\na Seq, (2) the number of consecutive product conselectors matches the number\nof arguments.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri May 8 13:33:50 2015 +0200]"},
{"name" : "10610cbc65cce2e5056b8606968c738532e55bfd", "time" : 1431084773, "y" : 1759, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make isTerm/isType not force the denotation of a symbols defined in this run.\n\nSee discussion in #544\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri May 8 13:32:53 2015 +0200]"},
{"name" : "d109796791b1c2e4b96c172531f248902afb2755", "time" : 1431076546, "y" : 1723, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Update comment on liftedOwner.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri May 8 11:15:46 2015 +0200]"},
{"name" : "b0856feefb90d1c0647bb3725ed9797fc76e0603", "time" : 1431076394, "y" : 1723, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix #545: no need to make members of static classes static.\n\nOtherwise we will need to rewrite references to `This` of class be references on ModuleVal.\nThis is less efficient(instead of calling method statically known to be final, you have virtual call) and less jvm-friendly,\nas needs additional instructions to get to ModuleVal.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri May 8 11:13:14 2015 +0200]"},
{"name" : "df0e140645ec558db8385a0d2322f159aa9bbda4", "time" : 1431076271, "y" : 1774, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixed foc of isUnboudnedGenericArray\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri May 8 11:11:11 2015 +0200]"},
{"name" : "f1d4e8494b2a345ed165ae75077b72fa7c4e6161", "time" : 1430991519, "y" : 1759, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Rename localClasses -> definedClasses\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu May 7 11:38:39 2015 +0200]"},
{"name" : "7481babc3c5d72b2f86fdb50c043a608ad4f8dc0", "time" : 1430991287, "y" : 1759, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make isTerm/isType not force the denotation of a symbol to be up-to-date.\n\nSymbols never change betwene terms and types. So we do not need to the current\ndenotation to decide what they are. Less forcing -> less potential for cyclic\nreferences.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu May 7 11:34:47 2015 +0200]"},
{"name" : "8f020bb6632d5d68e169f8caa7d9cbc1bc819d35", "time" : 1430991188, "y" : 1759, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix #536 - only load member classes of classes that are currently compiled.\n\nIt seems wasteful to load the member classes even of classes that are not currently compiled.\nIt also makes us vulnerable to any misinterpretation of Java file formats. In th particular\ncase of #536, we parsed a class an anonymous Collection$1 which was referring to the type\nparameter of its enclosing class, but was not diagnosed as an inner class of the enclosing class.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu May 7 11:33:08 2015 +0200]"},
{"name" : "905c541ba39f667f8b08fae85cb875470e283492", "time" : 1430921247, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #541 from dotty-staging/fix/#537-extractors\n\nDrop the requirement that extractors with `get` must implement Product", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed May 6 16:07:27 2015 +0200]"},
{"name" : "650ef40888b585d10e0a87a4a9544c1c6e17c96f", "time" : 1430900959, "y" : 1774, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Remove debug println\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed May 6 10:29:19 2015 +0200]"},
{"name" : "d26604fd50bd2c444c9dd108781d36864380b5f2", "time" : 1430900545, "y" : 1774, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix #540 - unbounded array test for wildcard array arguments\n\nArrays with wildcard arguments such as Array[_ <: Foo] where Foo is a\nuniversal trait are now diagnosed as unbounded generic arrays and are\nerased to Object.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed May 6 10:22:25 2015 +0200]"},
{"name" : "8f5f07fd16e5cff662a0b919ba562004b4096925", "time" : 1430858476, "y" : 1781, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Remove debug println\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue May 5 22:41:16 2015 +0200]"},
{"name" : "dcb25c73739f1b5d40e92cd07acae5f7940f82a6", "time" : 1430858330, "y" : 1781, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Drop the requirement that extractors with `get` must implement Product\n\nWe used to require that the result type of an extractor `get` is a product,\nor else the type of the `get` itself would be taken as the result type of the\nunapply. This is now relaxed so that we automatically select with _1, _2, ...\nas soon as there are multiple argument patterns, and (1) the result type is not\na Seq, (2) the number of consecutive product conselectors matches the number\nof arguments.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue May 5 22:38:50 2015 +0200]"},
{"name" : "5ae3e10f28db0b7945c27032e5154716c35d82ce", "time" : 1430849366, "y" : 1757, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add primitive ClassTags to DottyPredef\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue May 5 20:09:26 2015 +0200]"},
{"name" : "a40da8fc916baa1c068598bb4e50a684b89e5b2c", "time" : 1430849311, "y" : 1757, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge all VC prototypes into single file\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue May 5 20:08:31 2015 +0200]"},
{"name" : "0e71743b1622716a99f4783ac5cb41c5012f5a49", "time" : 1430849311, "y" : 1757, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Implement implicit defs that return class tags for value classes.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue May 5 20:08:31 2015 +0200]"},
{"name" : "744ffb5d7b5325c2ac14a27c493a6c2749e741d4", "time" : 1430849311, "y" : 1757, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Introduce VCArray.clone in scala.\n\nIt can be done with non-abstract rhs of method.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue May 5 20:08:31 2015 +0200]"},
{"name" : "cb8fa8278ce690a800e6454d3fcd2058100e0d71", "time" : 1430849311, "y" : 1757, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "It seems one cannot define clone member in scala trait. Do it in Java.\n\n[error] /Users/dark/workspace/dotty/src/dotty/runtime/vc/VCPrototype.scala:10: overriding method clone in class VCArrayPrototype of type ()Object;\n[error]  method clone in class Object of type ()Object has weaker access privileges; it should be public;\n[error]  (Note that method clone in class VCArrayPrototype of type ()Object is abstract,\n[error]   and is therefore overridden by concrete method clone in class Object of type ()Object)\n[error] abstract class VCArrayPrototype[T <: VCPrototype] extends Object with Cloneable {\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue May 5 20:08:31 2015 +0200]"},
{"name" : "6bbf35496c2cb4f4b4fa55ef80b4eaa85e0de63f", "time" : 1430849311, "y" : 1757, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Implement clone on VCArrays without mutable field.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue May 5 20:08:31 2015 +0200]"},
{"name" : "9c09330347fee4361fc9f14abdd630ade21ddbc2", "time" : 1430849311, "y" : 1757, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Implement clone for VCArrays.\n\nUnfortunately needed to sacrifice the immutability of inner field.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue May 5 20:08:31 2015 +0200]"},
{"name" : "63b88728a2377a7b5cd9b7f2012886d35e6f7c7d", "time" : 1430849311, "y" : 1757, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Extend methods of ScalaRuntime to support arrays of value classes.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue May 5 20:08:31 2015 +0200]"},
{"name" : "1d378bfe836c27b507636aac0c0cd73a980e2665", "time" : 1430849311, "y" : 1757, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Change VCArray naming scheme.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue May 5 20:08:31 2015 +0200]"},
{"name" : "955874613eb31b3709d178d0ff5d7e02bad7bcc4", "time" : 1430849310, "y" : 1757, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fork ScalaRuntime to support arrays of value classes.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue May 5 20:08:30 2015 +0200]"},
{"name" : "68d12d3745e8e7f71d98d9101e9aaa348070c3b0", "time" : 1430849310, "y" : 1757, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Remove VCCompanionPrototype: it is not used.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue May 5 20:08:30 2015 +0200]"},
{"name" : "5c68af8badf42954ad8eeedb7845d458eab50692", "time" : 1430849310, "y" : 1757, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add array creations to class tags of value classes.\n\nWorks as Array[T] is erased to Object.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue May 5 20:08:30 2015 +0200]"},
{"name" : "7eca8788ef9c16de94263c3b3ebdcbac262307a6", "time" : 1430849310, "y" : 1757, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "implement templates for value class companions.\n\nDecreases the size of companion of case value class to 1/8 of it's original size.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue May 5 20:08:30 2015 +0200]"},
{"name" : "fa4b46a8a4337411eefac61d58d68f6497974bd5", "time" : 1430849310, "y" : 1757, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add Value classes and array prototypes.\n\nMaking actual value classes extend this prototypes serves two goals:\n - This is a basis for implementing arrays of value classes.\n - Having underlying final in those glasses makes all unbox methods monomorphic and final.\n - this decreases size of an empty case-class to 1/3 of previous size.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue May 5 20:08:30 2015 +0200]"},
{"name" : "b2523fee17389a876af48c683b92e64209ca6105", "time" : 1430849310, "y" : 1757, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Allow disabling value classes entirely from command line.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue May 5 20:08:30 2015 +0200]"},
{"name" : "a52ca600f2ad427276d1cdabd56133ffd0ed7610", "time" : 1430847671, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #539 from dotty-staging/fix/bootstrap-predef\n\nAllow to compile root import classes without special option.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Tue May 5 19:41:11 2015 +0200]"},
{"name" : "2fdf660aba6a23a5adb665bd1af4d54e8952034c", "time" : 1430832324, "y" : 1799, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Allow to compile root import classes without special option.\n\nCan now compile Predef/DottyPredef without -Yno-import option.\nAchieved by making some parts of imports more lazy.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue May 5 15:25:24 2015 +0200]"},
{"name" : "7129cbe60c062be49aef8c27da461a11416e189c", "time" : 1430818050, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #534 from dotty-staging/fix/computeDenot\n\nFix #518 - compute denotations", "author" : "PersonIdent[odersky, odersky@gmail.com, Tue May 5 11:27:30 2015 +0200]"},
{"name" : "3edf285a48f4208b209571580f8aa418ca8a794f", "time" : 1430815796, "y" : 1801, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Rename isWeakRef -> isTightPrefix\n\nisWeakRef was confusing because this has nothing to do with\nweak pointers.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue May 5 10:49:56 2015 +0200]"},
{"name" : "04436699427d14cb45080104c3bc781f90da3bb2", "time" : 1430772229, "y" : 1802, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "dotc: Get versions of all dependencies from Build.scala\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon May 4 22:43:49 2015 +0200]"},
{"name" : "cb73668c691a5cab77cd8503856754834f4a9ba4", "time" : 1430770191, "y" : 1802, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Get rid of build.sbt.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon May 4 22:09:51 2015 +0200]"},
{"name" : "c4dba2420be56e628e37732a3369533951cc7ef1", "time" : 1430769802, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #509 from dotty-staging/add/expandSAMs\n\nExpand SAM closures to anonymous classes if needed", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon May 4 22:03:22 2015 +0200]"},
{"name" : "7c8693b62bfa73a47eb781bf0e372f68acc0db52", "time" : 1430769064, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #512 from dotty-staging/fix-511\n\nFix #511. Lambdas of traits that inherit abstract member.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon May 4 21:51:04 2015 +0200]"},
{"name" : "6780dbd0a66fdaec6a7be2faac78620e8922cbd4", "time" : 1430767247, "y" : 1801, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make data race detection more liberal.\n\nAllow to rebind a NmedType to refer to a symbol in a subclass\nof where the previous symbol was defined. This generalizes the\nprevious rule that we allow to rebind from a root method to\nits synthetic implementation.\n\nThe change is not necessary to make the new scheme of computeDenot pass\nthe tests, but it seems useful to avoid spurious errors elsehere.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon May 4 21:20:47 2015 +0200]"},
{"name" : "cfa2ba030becec1f0e12994f120b65ca5e99badb", "time" : 1430766946, "y" : 1801, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add test case\n\nTests #518.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon May 4 21:15:46 2015 +0200]"},
{"name" : "0c637364a92536a968e4f3c88fce805b6eb95aec", "time" : 1430766811, "y" : 1801, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix infinite recursion when creating extension methods\n\nPhase ExtensionMethods creates new symbols for extension methods\nand then installs these symbols into the companion object of a value class.\nIt's important that the creation of these symbols is done in the phase\nExtensionMethods itself, and not in the next phase, as was done before.\nIf we do it in the next phase, we need the owner at the next phase\nand with the new scheme of computeDenot that owner might be forced,\nleading to an infinite cycle.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon May 4 21:13:31 2015 +0200]"},
{"name" : "d86372f4ca72d64dad750b2d22b40a2c08e82218", "time" : 1430766607, "y" : 1801, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make computeDenot take overrides into account\n\nIf previous denotation was a sym denotation, it might be overridden\nby a different symbol in a new phase or run. So it is not correct to\nsimply return the current version of the symbol, as was done before.\n\nWe now recompute the member if there is a chance that the symbol could\nbe overridden.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon May 4 21:10:07 2015 +0200]"},
{"name" : "ee51ea9ab9bab7852c4eaa16a099436b1cd2bc2f", "time" : 1430758856, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #529 from dotty-staging/fix/#503\n\nFix of #503", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon May 4 19:00:56 2015 +0200]"},
{"name" : "61ddff45164aa23a06c255596c1c2d53cdf0e76c", "time" : 1430758812, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #532 from smarter/fix/vc-java-compat\n\nFix compatibility of Java with value classes", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon May 4 19:00:12 2015 +0200]"},
{"name" : "e8f32243cf25656f1ffc751d48bb792f73219e95", "time" : 1430752831, "y" : 1812, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix compatibility of Java with value classes\n\nThis avoids getting a runtime error when calling a Java-defined method\nwhose signature contains value classes. It happened because we erased\nthe value classes in this signature even though it comes from a\nclassfile.\n\nAmusingly, this problem also exists in scalac:\n<https://issues.scala-lang.org/browse/SI-9298>\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Mon May 4 17:20:31 2015 +0200]"},
{"name" : "3b3a51f793c8fb65f94c121c1dcc2ce3aa0afb39", "time" : 1430750698, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #531 from dotty-staging/fix/528-compile-predef\n\nFix/528 compile predef", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon May 4 16:44:58 2015 +0200]"},
{"name" : "c3a7f461cd8e9a2f6c69ff85745da7892d0aa124", "time" : 1430747409, "y" : 1812, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "add an isCompanionMethod convenience method\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Mon May 4 15:50:09 2015 +0200]"},
{"name" : "7500b7ff73c130a49ce6da7ad31288eb6a4e05f0", "time" : 1430737492, "y" : 1815, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Test case for #530: symbolic import failure.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon May 4 13:04:52 2015 +0200]"},
{"name" : "d935bb06fc6746413b3ba86ac0afe02996d4684d", "time" : 1430737460, "y" : 1815, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make DottyPredef compilable with -Yno-imports\n\nDottyPredef needs to be compiled with -Yno-imports because it would\nclash otherwise with the DottyPredef in the root context.\n\nNote that ??? has to be written in fully qualified form because of #530.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon May 4 13:04:20 2015 +0200]"},
{"name" : "eb3c8e52dadb6244645adbc1443aed96dc24402e", "time" : 1430737377, "y" : 1815, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Honor -Yno-imports flag\n\nIf the flag is set, no root imports are added.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon May 4 13:02:57 2015 +0200]"},
{"name" : "73f74cb2d40bc6a8ff3a0944a1706de91fe7f535", "time" : 1430737163, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Update README.md", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon May 4 12:59:23 2015 +0200]"},
{"name" : "14d506a86f5920ac50777f1bbb7aade0557d6122", "time" : 1430729679, "y" : 1819, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "New tests\n\nAdded test for previous PR on super accessors.\nUpdated test for #503 to check both inner classes and inner traits.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon May 4 10:54:39 2015 +0200]"},
{"name" : "99b9dbd3246fb2906dc082f6c6175a406259fae7", "time" : 1430729496, "y" : 1819, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Re-use MethodOrLazy in constructors.\n\nA search revealed duplicates, which are eliminated now.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon May 4 10:51:36 2015 +0200]"},
{"name" : "7bf29f00c85a0efe59bbca548767dcd21ec2b14e", "time" : 1430729440, "y" : 1819, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Treat references to modules and lazy vals as outer references\n\nPreviously, we considered only methods. #503 shows that this is wrong.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon May 4 10:50:40 2015 +0200]"},
{"name" : "4808d1ddf94ddfcab5e6b5dd9a8d2a3b003b89e0", "time" : 1430723564, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #517 from dotty-staging/add/expand-privates\n\nExpand private members if necessary", "author" : "PersonIdent[odersky, odersky@gmail.com, Mon May 4 09:12:44 2015 +0200]"},
{"name" : "6ad6ca73c9893eb20d908c383ea24ff2cc200406", "time" : 1430676664, "y" : 1823, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Refchecks runs before resolveSuper: superAccessors not yet materialised.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sun May 3 20:11:04 2015 +0200]"},
{"name" : "a0f5c20abb925b60ae879dc928e29f3f38eb24e1", "time" : 1430676588, "y" : 1823, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "TreeChecker: check for absence of private abstract methods.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sun May 3 20:09:48 2015 +0200]"},
{"name" : "24e20af9ea7f778ea96321eb24082c465e188eda", "time" : 1430676561, "y" : 1823, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "SuperAccessors: Do not create abstract private members.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sun May 3 20:09:21 2015 +0200]"},
{"name" : "c69075a4278450f000c7252304fbc391ebb2853e", "time" : 1430674105, "y" : 1823, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "ExpandPrivate: Make sure Deferred members are not Private.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sun May 3 19:28:25 2015 +0200]"},
{"name" : "c834118d819ed0decbf4c969ccb078030213ecb0", "time" : 1430673369, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #520 from dotty-staging/refactor/pickling\n\nPickling modularization reorg", "author" : "PersonIdent[odersky, odersky@gmail.com, Sun May 3 19:16:09 2015 +0200]"},
{"name" : "2a85b43b6d6264bf2b2cf0a2f09a050be973b347", "time" : 1430673339, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #526 from dotty-staging/fix/#522\n\nFix #522.", "author" : "PersonIdent[odersky, odersky@gmail.com, Sun May 3 19:15:39 2015 +0200]"},
{"name" : "090a6a606f22ceb0b2800556f5d5de825a3941b8", "time" : 1430672469, "y" : 1829, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Moved tests from pending\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun May 3 19:01:09 2015 +0200]"},
{"name" : "8718d46194df369014d975e83a45215a5dfd88c9", "time" : 1430672081, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #527 from smarter/enable/strip-tvars-test\n\nEnable test strip-tvars-for-lubbasetypes.scala and disable debug message", "author" : "PersonIdent[odersky, odersky@gmail.com, Sun May 3 18:54:41 2015 +0200]"},
{"name" : "8708fb93b61707d6992d4171fda54bc376840330", "time" : 1430670219, "y" : 1831, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "addToConstraint: Disable debug message by default\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Sun May 3 18:23:39 2015 +0200]"},
{"name" : "f162eb2d9e7effbad2676e92139fe5676a92d6ad", "time" : 1430669991, "y" : 1831, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Enable test strip-tvars-for-lubbasetypes.scala\n\nThe test had to be slightly modified because of dotty's stricter\nchecking of type bounds validity, see #525 where this was discussed.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Sun May 3 18:19:51 2015 +0200]"},
{"name" : "220fe53ad0638c33572a9e11db0b6dc3aabd6c27", "time" : 1430664089, "y" : 1829, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix #522.\n\nWe were missing a substitution in full parameterization. Embarraingly, this\nmade even the example in the doc comment of `fullyParameterizedDef` fail.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun May 3 16:41:29 2015 +0200]"},
{"name" : "bb6582bd265d22186570bef81d2a2f9ab3e23f9d", "time" : 1430603225, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #524 from dotty-staging/fix/#523\n\nFix #523: Instantiate lower bound when bounds checking", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Sat May 2 23:47:05 2015 +0200]"},
{"name" : "160f63f3ceba49d4a0b9a24efbd162acc79fc9a7", "time" : 1430595905, "y" : 1835, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix #523: Instantiate lower bound when bounds checking\n\nLower bounds need to be instantiated just like upper bounds.\nF-bounded polymorphism (which only applies too upper bounds)\nis one reason for instantiating arguments, but parameters\nreferring to other parameters is another one. An the latter\napplies to lower bounds as well.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat May 2 21:45:05 2015 +0200]"},
{"name" : "60ab9f8f525d319aa5b6d5052018c6781da036eb", "time" : 1430587388, "y" : 1836, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Pickling modularization reorg\n\nThe pickling package got rather large and confusing with three\nseparate tasks that each had their own conventions: read JVM classfiles,\nread Scala2 pickle info, read Tasty. The classes for each task are now in\nseparate packages.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat May 2 19:23:08 2015 +0200]"},
{"name" : "349c436348407b0e862e3feb65c959275549d86b", "time" : 1430586459, "y" : 1837, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Failing test\n\nThe test included here fails in backend.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat May 2 19:07:39 2015 +0200]"},
{"name" : "dbe0456b740e841ddd35fd0d9802aff95c7c4426", "time" : 1430586459, "y" : 1837, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "More conditions under which SAMs are converted to anonymous classes\n\nAlso included are\n\n  - Closures implementing classes that inherit from a class other than Object\n  - Closures that implement traits which run initialization code.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat May 2 19:07:39 2015 +0200]"},
{"name" : "9be27ae2750b2554cf8d0719a4737f6420042995", "time" : 1430586458, "y" : 1837, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Refactoring and renaming of superClass/superInterfaces\n\nsuperClass was a duplicate; we already have one in SymDenotation,\nso we delete the one in SymUtils.\n\nsuperInterfaces is too easy to confused with the JVM notion, which\nis different. I replaced with directlyInheritedTraits.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat May 2 19:07:38 2015 +0200]"},
{"name" : "7c121a808bdd1cb3112d1471bc5c017e1e1de465", "time" : 1430586458, "y" : 1837, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix noInitMember to apply to DefDefs\n\nThanks for pointing it out, @smarter.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat May 2 19:07:38 2015 +0200]"},
{"name" : "c395a2543ac0ad9ea53568b6b52d0effc5964645", "time" : 1430586458, "y" : 1837, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Generalize tpd.AnonClass\n\nNow takes a list of parent types. We needed only one parent for SAM implementation\nbut it makes sense to generalize this.\n\nAlso, removed redundant code accidentally left in.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat May 2 19:07:38 2015 +0200]"},
{"name" : "464ef81915cd428fc8918a2943ea4401ab0ef30a", "time" : 1430586458, "y" : 1837, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Remove worksround in ExpandSAMs\n\nRemoved the workaround of the original crasher which was addressed in the last commit.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat May 2 19:07:38 2015 +0200]"},
{"name" : "3df53946319d7f6c7af6e0eca757e548b6bc5cef", "time" : 1430586458, "y" : 1837, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make sure types of pattern bound variables are fully-defined.\n\nLike all other variables, pattern-bound vars need a fully defined type. I was\nthinking originally that demanding a fully defined selector type is sufficient\nto ensure this, but that's not true: An outer pattern might call a polymorphic\nunapply and its type variables need not be fully instantiated.\n\nWith the fix, the minimized test case from ExpandSAMs works.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat May 2 19:07:38 2015 +0200]"},
{"name" : "5cd90e5afd73c6f8354d0d3687fb2ee3a9f413e7", "time" : 1430586458, "y" : 1837, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "New miniphase: ExpandSAMs\n\nThe phase replaces SAM closures with anonymous classes when necessary.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat May 2 19:07:38 2015 +0200]"},
{"name" : "e2c23bd56ef739682699384cf1956b62b75c1ae0", "time" : 1430586458, "y" : 1837, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Avoid prepare actions form earlier phases when doing a transformFollowinfDeep\n\nSee comment in the code.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat May 2 19:07:38 2015 +0200]"},
{"name" : "959a112c6278ef06e501f117fbc3aba50f280eb7", "time" : 1430586458, "y" : 1837, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "New utility method tpd.AnonymousClass\n\nAs the name implies, this creates an anonymous class.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat May 2 19:07:38 2015 +0200]"},
{"name" : "a5eb07633581962289bf6ee32c2cc7de00333cf6", "time" : 1430586389, "y" : 1837, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make tpd.ClassDef work for polymorphic parent classes.\n\nThe handling of the first parent of ClassDef was broken if\nthat parent had type parameters. This was exposed by following\ncommites which use ClassDef more intensively than before in\ncreating anonymous classes representing closures.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat May 2 19:06:29 2015 +0200]"},
{"name" : "0da6780f503c85064f7228b8f3866a0defe88221", "time" : 1430586389, "y" : 1837, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "New symbol creation method: `newNormalizedClassSymbol`.\n\nIt's common that one wants to create class symbols with arbitary parent types,\nnot just TypeRefs. But for the casual user it's non-obvious how to do it.\nHence the new creation method.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat May 2 19:06:29 2015 +0200]"},
{"name" : "9ea42b02f07136ffd4bd8954cb619a3b3a791278", "time" : 1430586389, "y" : 1837, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix to error reporting of compiled units\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat May 2 19:06:29 2015 +0200]"},
{"name" : "c01413e08b0a95e4d93616ac8a2d00c8ddf3b52e", "time" : 1430586240, "y" : 1823, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixed doc comment.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat May 2 19:04:00 2015 +0200]"},
{"name" : "ac46a0e4489bba4f76863cc1491bf2b8441ed1cb", "time" : 1430585288, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #507 from dotty-staging/add/from-tasty\n\nCompile from Tasty", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Sat May 2 18:48:08 2015 +0200]"},
{"name" : "592f2d50a18637d79cbba4f1a28f32cda3822ffe", "time" : 1430498946, "y" : 1823, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Expand name should use initial owner.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri May 1 18:49:06 2015 +0200]"},
{"name" : "55c7232696040a68816f8958ddae3411faab33cb", "time" : 1430498531, "y" : 1823, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Get rid of NotPrivate flag.\n\nIt is now redundant.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri May 1 18:42:11 2015 +0200]"},
{"name" : "d9c215757f49d7984889e8e695828f71f685f163", "time" : 1430498336, "y" : 1823, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "New miniphase: ExpandPrivate\n\nA late miniphase which resets private flag of all\nmembers that are not accessed from within same class.\nReplaces logic in RefChecks. Doing this late has two\nadvantages\n\n - we can use name expansion, because references are\n   symbolic, so the names of symbols and references\n   to them do not need to correspond anymore.\n - we can automatically correct for symbols moved in earlier\n   phases (e.g. lifted out by LambdaLift).\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri May 1 18:38:56 2015 +0200]"},
{"name" : "a263b5f3aaabe96e7ad238cb18e8f9b98d287ffc", "time" : 1430497811, "y" : 1823, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make sure mixin accessors are not private.\n\nLogic moved from RefChecks to Mixin; implementation\nis now by name expansion instead of setting NotJavaPrivate\nflag.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri May 1 18:30:11 2015 +0200]"},
{"name" : "d5df72a6cbedf740ee76290fb9d7dbcc7678411f", "time" : 1430497488, "y" : 1823, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "New method for SymDenotations: ensureNotPrivate\n\nResets private flag, and expands the name if necessary.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri May 1 18:24:48 2015 +0200]"},
{"name" : "661068a331eaba1737b4b27e87a09d12e8595045", "time" : 1430493740, "y" : 1823, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Drop reference to NotJavaPrivate in access checks.\n\nVerified that all tests still run. This is a first step, so that\nwe can later on eliminate NotJavaPrivate altogether.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri May 1 17:22:20 2015 +0200]"},
{"name" : "2dbabca38cee0ff27c92a9a7079959b2461c9869", "time" : 1430483289, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #411 from smarter/add/value-classes\n\nImplement value classes", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri May 1 14:28:09 2015 +0200]"},
{"name" : "d012f93635184dc8aa6325b715a133861c74ab08", "time" : 1430479662, "y" : 1859, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Erasure: Box closures of value classes when needed\n\nAfter erasure, we may have to replace the closure method by a bridge.\nLambdaMetaFactory handles this automatically for most types, but we have\nto deal with boxing and unboxing of value classes ourselves.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri May 1 13:27:42 2015 +0200]"},
{"name" : "449055db733a78a44b15addc3ddcbb51bfdc3aa4", "time" : 1430479662, "y" : 1859, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix companionClass not working after Erasure for value classes\n\nFor a module class V$, the synthesized companion class method looks\nlike:\n  val companion$class: V\nIf V is a value class, after erasure it will look like:\n  val companion$class: ErasedValueType(V, ...)\nThis will break SymDenotation#companionClass which relies on the type of\ncompanion$class.\nThe solution is to not semi-erase the type of companion$class.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri May 1 13:27:42 2015 +0200]"},
{"name" : "e5b02a88e66af0d5e9c37a881ac0237bf1d38387", "time" : 1430479662, "y" : 1859, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Enable pending pos tests related to value classes\n\nEach test needs to have its own package because pos_all will try to\ncompile the whole valueclasses directory at once.\n\nThe remaining tests with \"extends AnyVal\" in tests/pending/pos are\nrelated to separate compilation, except for:\n- t6482.scala and t7022.scala which were fixed by\n  https://github.com/scala/scala/pull/1468 in scalac and seem to\n  trigger a similar bug in FullParameterization\n- strip-tvars-for-lubbasetypes.scala which was fixed by\n  https://github.com/scala/scala/pull/1758 in scalac\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri May 1 13:27:42 2015 +0200]"},
{"name" : "06e1905aed315d5199936797c9e9493326b74595", "time" : 1430479662, "y" : 1859, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Enable untried pos tests related to value classes\n\nEach test needs to have its own package because pos_all will try to\ncompile the whole valueclasses directory at once.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri May 1 13:27:42 2015 +0200]"},
{"name" : "411d5be477cc862b14d8938c591524d8bf37d4cd", "time" : 1430479662, "y" : 1859, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "New phase: VCInline which inlines value classes calls\n\nThis corresponds roughly to step 2 of SIP-15 and to the peephole\noptimizations of step 3.\n\nThe extractors in TreeExtractors are copied or inspired from\nsrc/compiler/scala/tools/nsc/ast/TreeInfo.scala in scalac.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri May 1 13:27:42 2015 +0200]"},
{"name" : "3fca64e2dfd53e376b3a45605100ef6f768b07a4", "time" : 1430479662, "y" : 1859, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make ExtensionMethods#extensionMethods an object method\n\nThis method will be needed to implement VCInline.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri May 1 13:27:42 2015 +0200]"},
{"name" : "8bd4139db4dd89e83b71a49b39c0747b9f5fc68a", "time" : 1430479662, "y" : 1859, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Erasure: properly handle null in value classes\n\nThis fixes the issues reported in SI-5866 and SI-8097\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri May 1 13:27:42 2015 +0200]"},
{"name" : "9c94605d5464936cc156680c5db5344d5ff092ef", "time" : 1430479661, "y" : 1859, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "New phase: ElimErasedValueType\n\nThis phase erases ErasedValueType to their underlying type, in scalac\nthis was done in PostErasure.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri May 1 13:27:41 2015 +0200]"},
{"name" : "5dec4ce8a64d44ee602c09d468414b13eecba389", "time" : 1430479583, "y" : 1859, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Erasure: properly erase value classes\n\nThere are three ways to erase a value class:\n- In most case, it should be semi-erased to an ErasedValueType, which will be\n  fully erased to its underlying type in ElimErasedValueType.\n  This corresponds to semiEraseVCs = true in TypeErasure.\n- In a few cases, it should be erased like a normal class, so far this\n  seems to be necessary for:\n  * The return type of a constructor\n  * The underlying type of a ThisType\n  * TypeTree nodes inside New nodes\n  * TypeApply nodes\n  * Arrays\n  In these cases, we set semiEraseVCs = false\n- When calling `sigName` it should be erased to its underlying type.\n\nThis commit implements all these cases. Note that this breaks most tests\nbecause ElimErasedValueType has not been implemented yet, it is part of\nthe next commit.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri May 1 13:26:23 2015 +0200]"},
{"name" : "391c80c4dfb2489e4098af33265b22332ef3d5f1", "time" : 1430479582, "y" : 1859, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add synthetic casts to and from ErasedValueType\n\nFor a value class V, let U be the underlying type after\nerasure. We add to the companion object of V two cast methods:\n\n  def u2evt$(x0: U): ErasedValueType(V, U)\n  def evt2u$(x0: ErasedValueType(V, U)): U\n\nThe casts are used in Erasure to make it typecheck, they are then removed\nin ElimErasedValueType (not yet present in this commit). This is\ndifferent from the implementation of value classes in Scala 2 (see\nSIP-15) which uses `asInstanceOf` which does not typecheck.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri May 1 13:26:22 2015 +0200]"},
{"name" : "f168970f38df1d1ccc2b262f1a77f72cd4ec9f39", "time" : 1430479582, "y" : 1859, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "RefinedPrinter: Pretty-print ErasedValueType\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri May 1 13:26:22 2015 +0200]"},
{"name" : "a02ce561ca7078414141dbb326ea235af2e80e4b", "time" : 1430479582, "y" : 1859, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Cache the instantiations of ErasedValueType\n\nThis reduces the number of objects created and speeds up subtyping tests\nAlso make ErasedValueType extend ValueType\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri May 1 13:26:22 2015 +0200]"},
{"name" : "926d48e91fafc54d5f82f892c01a7f95bca3ff61", "time" : 1430479582, "y" : 1859, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "TypeComparer: Add support for ErasedValueType\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri May 1 13:26:22 2015 +0200]"},
{"name" : "a1f31a56705243b4a90d512b1bd6083120a776d5", "time" : 1430479582, "y" : 1859, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "TypeErasure: replace isSemi by semiEraseVCs and simplify the code\n\n- isSemi is replaced by semiEraseVCs with a different meaning (but is\n  still unimplemented):\n  * If true, value classes are semi-erased to ErasedValueType\n    (they will be fully erased in ElimErasedValueType which is not\n    yet present in this commit).\n  * If false, they are erased like normal classes.\n- Fix the documentation of the TypeErasure class which was wrong.\n- Remove intermediate functions scalaErasureFn, scalaSigFn, javaSigFn\n  and semiErasureFn. It's clearer to just use erasureFn directly\n  instead.\n- Add an optional parameter semiEraseVCs to TypeErasure#erasure which\n  will be used in Erasure#Typer when we need to disable semi-erasure.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri May 1 13:26:22 2015 +0200]"},
{"name" : "f2c5b50e75e49c1947378d2e9c29dda559ea5cb9", "time" : 1430479582, "y" : 1859, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "TypeErasure: simplify and fix bugs\n\nThis commit tries to disentangle the TypeErasure class and the\nTypeErasure object thereby fixing #386.\n- Remove the `eraseInfo` method in the TypeErasure object, use `transformInfo`\n  instead which takes care of using the correct instance of TypeErasure\n  depending on the symbol to erase.\n- Remove the unused method `eraseResult` in the TypeErasure class.\n- In `transformInfo`, use the correct instance of the TypeErasure class when\n  calling `eraseInfo`.\n- In the `eraseInfo` method of the TypeErasure class, do not call the\n  `erasure` method of the TypeErasure object, instead use the `apply`\n  method of the current instance of TypeErasure.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri May 1 13:26:22 2015 +0200]"},
{"name" : "57c893e5ddb2c976ae2e6098b06a3ec854996504", "time" : 1430479582, "y" : 1859, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Don't create extension methods for Scala2x value classes\n\nFixes #387\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri May 1 13:26:22 2015 +0200]"},
{"name" : "00b4fceb8e15f816b517226bd4b1c609d03e5aa6", "time" : 1430479582, "y" : 1859, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Don't consider the temporary refinement classes as derived value classes\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri May 1 13:26:22 2015 +0200]"},
{"name" : "b9a98a61cdbbc4ffe106fa0965b5175dbfc172f2", "time" : 1430479581, "y" : 1859, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Remove obsolete comment about t2667 failing\n\nIt was fixed by #390 and the test was added back in #408.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri May 1 13:26:21 2015 +0200]"},
{"name" : "275c340b609ae113c93d8c004a2d8bd7be1b12c1", "time" : 1430406228, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #500 from dotty-staging/implement/i499\n\nImplement/i499", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Thu Apr 30 17:03:48 2015 +0200]"},
{"name" : "3392ef7077acad7c8543b6802c7537cd2dcea458", "time" : 1430406096, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #493 from dotty-staging/fix-modules\n\nMake LazyVals implement non-static modules. Move LV after erasure.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Thu Apr 30 17:01:36 2015 +0200]"},
{"name" : "cb999323b9e1cb2097a6257e01e32539678533b9", "time" : 1430405569, "y" : 1879, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Reuse Type.abstractTermMembers in DottyBackendInterface.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 30 16:52:49 2015 +0200]"},
{"name" : "be61c7813fbf7cab90b5d70ef6e506e296c510dc", "time" : 1430405020, "y" : 1880, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add tests for #499\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 30 16:43:40 2015 +0200]"},
{"name" : "d23e71a42de6713ceda4b28dfd2f1bb83d051304", "time" : 1430404452, "y" : 1881, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Replace .entered by .enteredAfter in LazyVals.\n\nDoes not fail tests anymore.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 30 16:34:12 2015 +0200]"},
{"name" : "2af532926bd4735c7f68b8e3305b39511e8ba7d3", "time" : 1430403975, "y" : 1879, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix #511. The fix will not be effective until we update scalac fork dependency.\n\nhttps://github.com/DarkDimius/scala/commit/9c054bd687bbbcaa75f3f10a1d343998c6c1a2ba\nAs bug is minor I do not want to update scalac fork dependency just yet.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 30 16:26:15 2015 +0200]"},
{"name" : "10a5f9198f03ae5b8dc54f1113f98da585c4e81a", "time" : 1430401978, "y" : 1883, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Force TASTY trees read by unpickler in FromTasty\n\nWe want to ensure that the whole tree is read at phase\nfrontend. To achieve this, we run an empty traverser over the tree.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Apr 30 15:52:58 2015 +0200]"},
{"name" : "3964a181906c68e59a5af1d7bb023a0db7acb490", "time" : 1430401356, "y" : 1881, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "LV: change naming convention.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 30 15:42:36 2015 +0200]"},
{"name" : "61f0517d17b2dab40643d26f2bd1c111ad3792e9", "time" : 1430401327, "y" : 1881, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Comment why LazyVals needs to reorder stats in blocks.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 30 15:42:07 2015 +0200]"},
{"name" : "98f8ab8537043a0a611158ee7deb01abbb07ff5f", "time" : 1430400644, "y" : 1881, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "LV: Rename methods.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 30 15:30:44 2015 +0200]"},
{"name" : "dc21d958f07f8bd750cb729a0d783fb5269d15fd", "time" : 1430400633, "y" : 1881, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Leave traces for future profiling.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 30 15:30:33 2015 +0200]"},
{"name" : "ceb2eddd75882106105b36a8db24ddb555b4cfb2", "time" : 1430399935, "y" : 1881, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix two ArrayIndexOutOfBoundsExceptions in TastyBuffer.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 30 15:18:55 2015 +0200]"},
{"name" : "10d05f34a8c3f006c6a0aabed04c47cb7566cc46", "time" : 1430399272, "y" : 1881, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Decrease default sizes of buffers.\n\nValues are the ones that I got as maximum values for compiling dotty itself.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 30 15:07:52 2015 +0200]"},
{"name" : "c4b61af8b20dd9f763ffa34e27625e3ffd966f5c", "time" : 1430398203, "y" : 1881, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "DottyBackendInterface: interface members cannot be final\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 30 14:50:03 2015 +0200]"},
{"name" : "3b4c230d6a9fe9dd926b369831fbd6f3a8fa749a", "time" : 1430396769, "y" : 1881, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Increase heap and stack size on travis.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 30 14:26:09 2015 +0200]"},
{"name" : "b5f76e56ebb112de35106057d1013ee1be997689", "time" : 1430396769, "y" : 1881, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Enable emmiting byte code for all tests. Compile Dotty.\n\nHurray!\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 30 14:26:09 2015 +0200]"},
{"name" : "9bf697cd31a3897735cd9bcca258ac0ebd8c7f8a", "time" : 1430396769, "y" : 1881, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "LazyVals: last fix that allows to compile -deep dotc.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 30 14:26:09 2015 +0200]"},
{"name" : "4e277dcf4b60931776f6d38f6545382777de8891", "time" : 1430396769, "y" : 1881, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix spurious warnings in TreeChecker.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 30 14:26:09 2015 +0200]"},
{"name" : "56195fcd64432078a5ddb5e7669614bb694f86aa", "time" : 1430396769, "y" : 1881, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix bug in transformAfter: transform the last denotation in cycle.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 30 14:26:09 2015 +0200]"},
{"name" : "19c82207f5e42e10c48299658f3863bf1da4eb8b", "time" : 1430396769, "y" : 1881, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "fix a bug in transformAfter: iterate over a new denotation instead of an old one.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 30 14:26:09 2015 +0200]"},
{"name" : "52c56a275561cd43e7ed06a2bc70084e87d1b18e", "time" : 1430396769, "y" : 1881, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "LazyVals: eagerly enter private symbols.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 30 14:26:09 2015 +0200]"},
{"name" : "4a379ecc5f3d75b6c09370290a4025233dcb806d", "time" : 1430396769, "y" : 1881, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "LazyVals: Synchronized is `Object => Object` after erasure, #505\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 30 14:26:09 2015 +0200]"},
{"name" : "e24a24ded594817e40e13ca9fb98a19d1feeb24f", "time" : 1430396768, "y" : 1881, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "LazyVals - do not rely on absence of name clashes in scope.\n\nWas creating correct code, but was assuming that all objects with the same name share\nsame bits. No need to do it.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 30 14:26:08 2015 +0200]"},
{"name" : "7ef1bd5464f63fcb1873349d2fc13f58476d9a27", "time" : 1430396768, "y" : 1881, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Disable failing tests. See #503\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 30 14:26:08 2015 +0200]"},
{"name" : "086b1c29af6014c1a714276bf87fcd3c6505aafe", "time" : 1430396768, "y" : 1881, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "LazyVals: expected value of flag takes only tree values, no need to use long.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 30 14:26:08 2015 +0200]"},
{"name" : "dd65b3ebb391e89a8a6f32230c8e91c9d6f670bd", "time" : 1430396768, "y" : 1881, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "We do not plan to have more than Int.MaxValue of lazy vals.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 30 14:26:08 2015 +0200]"},
{"name" : "f892614dd6ebc6008687175555143a2eff0f3845", "time" : 1430396768, "y" : 1881, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Update comment on ExplicitOuter.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 30 14:26:08 2015 +0200]"},
{"name" : "fc205564f964b7d8dc284b78129d27b62edb2e7e", "time" : 1430396768, "y" : 1881, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix tpd.ref(sum) to work after erasure.\n\nErasure finishes work done by Explicit outer, and registers a post condition that This(outer) is not allowed.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 30 14:26:08 2015 +0200]"},
{"name" : "ca11f55fdd906881e57188946d32f237117d4fa3", "time" : 1430396768, "y" : 1881, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make Lazy-vals generated fields private.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 30 14:26:08 2015 +0200]"},
{"name" : "f322c989c6e7919662a151421cb96c96eefe5251", "time" : 1430396768, "y" : 1881, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "LazyValues: minor post-erasure changes.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 30 14:26:08 2015 +0200]"},
{"name" : "d75d8721bc86ae99c487228fa9d6175098c19197", "time" : 1430396767, "y" : 1881, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Remove code duplication in LazyVals.\n\nAlso fixes problem with capturedVars, as no local vars are created.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 30 14:26:07 2015 +0200]"},
{"name" : "4615f76b21e55ba84a1036b751f4ff41f4a72014", "time" : 1430396767, "y" : 1881, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make LazyVals.getOffset work on j.l.Class instead of taking the instance.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 30 14:26:07 2015 +0200]"},
{"name" : "f8f908f6580d123d402f9850fdbace31b361bdb3", "time" : 1430396767, "y" : 1881, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "LazyVals: Emitting switch instruction requires default case.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 30 14:26:07 2015 +0200]"},
{"name" : "7517d992f3fe10c3c4fe00ad89abfe4f1576978b", "time" : 1430396767, "y" : 1881, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "LazyVals: create less names.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 30 14:26:07 2015 +0200]"},
{"name" : "c201309b99cf96784e42e659e7a9405ed2dc99bb", "time" : 1430396767, "y" : 1881, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "LazyVals: filter out flag combinations that do not make sense.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 30 14:26:07 2015 +0200]"},
{"name" : "74054a4221a6e79feb212db9ae82fe64cbeeac12", "time" : 1430396767, "y" : 1881, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "LazyVals needs to run after Mixin.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 30 14:26:07 2015 +0200]"},
{"name" : "75588e966906ddb89edb1ffde9ea7af8d6185dab", "time" : 1430396767, "y" : 1881, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "tpd.WhileDo helper.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 30 14:26:07 2015 +0200]"},
{"name" : "d0f9d6df8bfa185019004740ea8dd6472f3e7ed9", "time" : 1430396766, "y" : 1881, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Compiler: add comment on problems in late phases.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 30 14:26:06 2015 +0200]"},
{"name" : "f9a15df76853071b8643c30509a92321040047de", "time" : 1430396766, "y" : 1881, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Mixing should make initialisers out of lazy vals.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 30 14:26:06 2015 +0200]"},
{"name" : "a049c82093c02c471e0cd44e9de916fd1c1c0724", "time" : 1430396766, "y" : 1881, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix two infinite cycles in transformAfter.\n\nif symbol is defining starting from this phase\ncurrent.validFor.firstPhaseId < phase.id is always true.\nIf additionally f changes the initial symbol,\n(current ne symbol.current) will always be true.\n\nElse if a symbol has a single denotation that spawns all periods,\nwhich is changed, second cycle becomes infinite.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 30 14:26:06 2015 +0200]"},
{"name" : "cf4ee1dda912125f19a891062112e2c71b7fc907", "time" : 1430396766, "y" : 1881, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "LV runs after memoize. Use setters.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 30 14:26:06 2015 +0200]"},
{"name" : "a274d8dfc86d95e359c45e8f13db58983a2f041b", "time" : 1430396766, "y" : 1881, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Generate getters for modules in LV.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 30 14:26:06 2015 +0200]"},
{"name" : "9c150c572ee7bb308e87cf4f0ae51a6fef22c00b", "time" : 1430396766, "y" : 1881, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Getters now also makes getters for lazy vals.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 30 14:26:06 2015 +0200]"},
{"name" : "fe8c717be04397efba4fff43acdc62d7b6dd14f2", "time" : 1430396766, "y" : 1881, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add a test for a deferred object in interface.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 30 14:26:06 2015 +0200]"},
{"name" : "5937b881a0e169e0b6f8d583924528f4a9773d91", "time" : 1430396766, "y" : 1881, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make LazyVals implement non-static modules. Move LV after erasure.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 30 14:26:06 2015 +0200]"},
{"name" : "a2813d2ef76cea23ff8a503af8a4a8c6c84f2fa3", "time" : 1430396765, "y" : 1881, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Mixin: do not remove Module Flag.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 30 14:26:05 2015 +0200]"},
{"name" : "bcc6bf711d2a0110db7c9dc091a8e81697ae6a3c", "time" : 1430396765, "y" : 1881, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Remove dead code in Constructors\n\nThe intoConstr method is never called with argument inSuperCall = true.\nSo code dependent on it can be dropped.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 30 14:26:05 2015 +0200]"},
{"name" : "979ee0ff41c2a957b22e886ea43ad4f070a9777d", "time" : 1430396765, "y" : 1881, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix changeOwnerAfter by adding transformDenotations method.\n\nWith the previous commit, we get a bad owner for the \"typedArgs\" var\nin `dotc.typer.Applications`. What happens is the following (@DarkDimius\nfigured it out):\n\nHere's the code in question:\n\n      val result = {\n         var typedArg = ...\n         (code that captures typedArg)\n      }\n\nThere's an interplay between 3 mini-phases, which run in interleaved succession in the same\ngroup:\n\n    Memoize\n    CapturedVars\n    Constructors\n\nThe following events happen in the order they are written:\n\n1. typedArg is noted to be captured, so prepareValDef in CapturedVars\n   installs a new denotation, valid after CapturedVars, with a Ref type.\n\n2. Memoize in transformDefDef creates a field for `result` and changes\n   the owner of all definitions in the right-hand side to the field,\n   using `changeOwnerAfter`. This gives `typedArg` a new denotation\n   with the owner being the field `result$local` and a validity period\n   from Memoize + 1 to CapturedVars + 1 (because CapturedVars has already\n   installed a new denotation).\n\n3. Constructors runs intoConstructor which changes the owner again. All code\n   with the field as current owner becomes owned by the constructor. But\n   unfortunately `typedArg` is owned by the getter `result`, because that's\n   the denotation installed by the preceding phase, CapturedVars. So its\n   owner stays the `getter` even though its definition is now part of the\n   constructor. Boom, -Ycheck fails.\n\nThe fix applied here adds a new method `transformAfter` which can transform\nall future denotations of a symbol. `changeOwnerAfter` uses this method to become\ninsensitive to the order in which denotations are installed.\n\nMorale: State is hard.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 30 14:26:05 2015 +0200]"},
{"name" : "ebb3917fe33041586160fd1ff4b904ac65aeed5c", "time" : 1430396765, "y" : 1881, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Reset some flags for bridges.\n\nBridges are never accessors, deferred, or lazy. Scalac removes these flags, I guess\nthis was dropped as an oversight. The change is needed to make the next commit work.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 30 14:26:05 2015 +0200]"},
{"name" : "de67c05e45f3d8234dedf4e41250366a47a6ba77", "time" : 1430396765, "y" : 1881, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Allow FutureDefs in changeOwner\n\nWithout it, the previous commit make LazyVals blow up wgen compiling dotc/transform. I could not fugure out why, but here is the stacktrace I saw.\n\ndotty.tools.dotc.core.Denotations$NotDefinedHere: demanding denotation of method $anonfun at phase seqLiterals(17) outside defined interval: defined periods are Period(22..22, run = 2)\n	at dotty.tools.dotc.core.Denotations$SingleDenotation.current(Denotations.scala:598)\n	at dotty.tools.dotc.core.Types$NamedType.computeDenot(Types.scala:1221)\n	at dotty.tools.dotc.core.Types$NamedType.denotAt(Types.scala:1206)\n	at dotty.tools.dotc.core.Types$NamedType.denot(Types.scala:1194)\n	at dotty.tools.dotc.ast.Trees$DenotingTree.denot(Trees.scala:270)\n	at dotty.tools.dotc.ast.Trees$Tree.symbol(Trees.scala:187)\n	at dotty.tools.dotc.ast.TypedTreeInfo$$anonfun$localSyms$1.apply(TreeInfo.scala:437)\n	at dotty.tools.dotc.ast.TypedTreeInfo$$anonfun$localSyms$1.apply(TreeInfo.scala:437)\n	at scala.collection.TraversableLike$WithFilter$$anonfun$map$2.apply(TraversableLike.scala:728)\n	at scala.collection.immutable.List.foreach(List.scala:381)\n	at scala.collection.TraversableLike$WithFilter.map(TraversableLike.scala:727)\n	at dotty.tools.dotc.ast.TypedTreeInfo$class.localSyms(TreeInfo.scala:437)\n	at dotty.tools.dotc.ast.tpd$.localSyms(tpd.scala:19)\n	at dotty.tools.dotc.ast.TreeTypeMap.transformDefs(TreeTypeMap.scala:116)\n	at dotty.tools.dotc.ast.TreeTypeMap.transform(TreeTypeMap.scala:98)\n	at dotty.tools.dotc.ast.Trees$Instance$TreeMap$$anonfun$transform$2.apply(Trees.scala:1181)\n	at dotty.tools.dotc.ast.Trees$Instance$TreeMap$$anonfun$transform$2.apply(Trees.scala:1181)\n	at scala.collection.immutable.List.loop$1(List.scala:172)\n	at scala.collection.immutable.List.mapConserve(List.scala:188)\n	at dotty.tools.dotc.ast.Trees$Instance$TreeMap.transform(Trees.scala:1181)\n	at dotty.tools.dotc.ast.Trees$Instance$TreeMap.transform(Trees.scala:1100)\n	at dotty.tools.dotc.ast.TreeTypeMap.transform(TreeTypeMap.scala:108)\n	at dotty.tools.dotc.ast.Trees$Instance$TreeMap$$anonfun$transform$2.apply(Trees.scala:1181)\n	at dotty.tools.dotc.ast.Trees$Instance$TreeMap$$anonfun$transform$2.apply(Trees.scala:1181)\n	at scala.collection.immutable.List.loop$1(List.scala:172)\n	at scala.collection.immutable.List.mapConserve(List.scala:188)\n	at dotty.tools.dotc.ast.Trees$Instance$TreeMap.transform(Trees.scala:1181)\n	at dotty.tools.dotc.ast.Trees$Instance$TreeMap.transform(Trees.scala:1100)\n	at dotty.tools.dotc.ast.TreeTypeMap.transform(TreeTypeMap.scala:108)\n	at dotty.tools.dotc.ast.Trees$Instance$TreeMap.transform(Trees.scala:1100)\n	at dotty.tools.dotc.ast.TreeTypeMap.transform(TreeTypeMap.scala:108)\n	at dotty.tools.dotc.ast.Trees$Instance$TreeMap.transform(Trees.scala:1094)\n	at dotty.tools.dotc.ast.TreeTypeMap.transform(TreeTypeMap.scala:108)\n	at dotty.tools.dotc.ast.Trees$Instance$TreeMap.transform(Trees.scala:1100)\n	at dotty.tools.dotc.ast.TreeTypeMap.transform(TreeTypeMap.scala:108)\n	at dotty.tools.dotc.ast.TreeTypeMap.apply(TreeTypeMap.scala:129)\n	at dotty.tools.dotc.ast.tpd$TreeOps$.loop$1(tpd.scala:565)\n	at dotty.tools.dotc.ast.tpd$TreeOps$.changeOwner$extension(tpd.scala:568)\n	at dotty.tools.dotc.transform.LazyVals.transformLocalValDef(LazyVals.scala:110)\n	at dotty.tools.dotc.transform.LazyVals.transformValDef(LazyVals.scala:64)\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 30 14:26:05 2015 +0200]"},
{"name" : "b50d209d52f066e5bcf415d9def6ea503b8aea5d", "time" : 1430396765, "y" : 1881, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make Constructors change owners.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 30 14:26:05 2015 +0200]"},
{"name" : "e1c482a98b5d07b227f6415aac9aaff0ab06e8ff", "time" : 1430396765, "y" : 1881, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make Memoize not depend on prepareForDefDef.\n\n[@darkdimius] I see no good reason for this, as it creates tight coupling between `ifs` in two methods.\n[@odersky] The reason is probably in the deleted comment:\n\n     // allocate field early so that initializer has the right owner for subsequent phases in\n     // the group.\n\nWe now transform the rhs in subsequent phases with the getter as owner, where before it was the field.\nIt is not clear to me whether this matters or not.\n\n[Update] We figured out the problem: It was a missing changeOwnerAfter in Constructor. Added to next commit.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 30 14:26:05 2015 +0200]"},
{"name" : "b1ce9c260fba3bac1c57886b6d8039feb635740f", "time" : 1430396765, "y" : 1881, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Mixin: needs to call transformFollowing to make memoize run on traitInits.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 30 14:26:05 2015 +0200]"},
{"name" : "cf7c2459492d00106e6e38a2b5065df3197cd6bc", "time" : 1430228878, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #506 from dotty-staging/update-comments\n\nUpdate comments on ParamForwarding and SuperAccessors.", "author" : "PersonIdent[odersky, odersky@gmail.com, Tue Apr 28 15:47:58 2015 +0200]"},
{"name" : "114963430eb0ef5519e7ec073a18eef0bc264237", "time" : 1430223761, "y" : 1931, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Display compiled files in case of exception\n\nThis is useful for reproducing a problem. It tells us in particular in what order\nfiels were compiled.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Apr 28 14:22:41 2015 +0200]"},
{"name" : "9e2dd75a8c229239b59a75fe6f9ddf201946032e", "time" : 1430218774, "y" : 1883, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Move addrOfTree, addOfSym from CompilationUnit to Pickler.\n\nThese only exist if there was a pickler, and they are not unique\nper CompilationUnit.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Apr 28 12:59:34 2015 +0200]"},
{"name" : "a347632d48390a986c3bb44cf7b3cc2f3f988110", "time" : 1430216721, "y" : 1883, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add usage documentation to FromTasty\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Apr 28 12:25:21 2015 +0200]"},
{"name" : "12d5dbcfa405dbb8ef56f4983d8fd08d33f97438", "time" : 1430215649, "y" : 1883, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Handle missing delta positions when unpickling\n\nA missing delta position signifies that the node has\nthe same position as its parent. Once that case was\nadded, we can now enable positions when reading from Tasty.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Apr 28 12:07:29 2015 +0200]"},
{"name" : "014ad9bc44ae8abaac5ec40c8993f09fa289eff3", "time" : 1430215649, "y" : 1883, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Maintain source files in pickled info\n\nSo far: Only one source file is recorded. Should evaluate\nwhether more are needed. Will programs composed from several\nsource files be pickled? They will certainly be generated after\ninlining, but maybe all that happens after pickling?\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Apr 28 12:07:29 2015 +0200]"},
{"name" : "512689c11348144023e7b55298cc5d9be3203eb0", "time" : 1430215649, "y" : 1883, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Unpickler should not label parameter accessors Deferred.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Apr 28 12:07:29 2015 +0200]"},
{"name" : "a4d86e9640e33506d9c9cec625567907a82cd16f", "time" : 1430215649, "y" : 1883, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix definition of empty package so that it can persist members\n\nPreviously, the empty package was always initialized with the empty scope.\nThis means that separate compilation between files in the empty package\nwas not possible.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Apr 28 12:07:29 2015 +0200]"},
{"name" : "12f2ee7042c8f44a81afa54bdf261d4cd2a31b9c", "time" : 1430215648, "y" : 1883, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Compiler for embedded TASTY info.\n\n`FromTasty` is a main module which compiles TASTY info instead of sources.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Apr 28 12:07:28 2015 +0200]"},
{"name" : "dad799912e80377310d6f2408a78344dc2112d8b", "time" : 1430215648, "y" : 1883, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "ClassfileParser and SymbolLoader should return embedded unpicklers\n\nTo be able able to post process pickled TASTY tree we let ClassfileParser#run\nreturn any embedded unpickler. The unpickler is further propagated by a new\nmethod ClassFileLoader#load in SymbolLoaders.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Apr 28 12:07:28 2015 +0200]"},
{"name" : "36dbbfaa3a01ab9bc8f1f52132aa6524410013c8", "time" : 1430215648, "y" : 1883, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Rename Unpickler -> Scala2Unpickler\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Apr 28 12:07:28 2015 +0200]"},
{"name" : "25b7a16700120910dee828d8e745df6400ba01d0", "time" : 1430213910, "y" : 1931, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Update comments on ParamForwarding and SuperAccessors.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Apr 28 11:38:30 2015 +0200]"},
{"name" : "a18b3faeda0a33843bb60cb1475c974aff3a1621", "time" : 1430213734, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #495 from dotty-staging/refactor/SuperAccessors\n\nRefactor/super accessors", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Tue Apr 28 11:35:34 2015 +0200]"},
{"name" : "6d1138e2ce2d212c051faa20e1f4bf419ede3fdf", "time" : 1430213699, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #498 from dotty-staging/save-tasty\n\nSave TASTY in attribute of classfiles.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Tue Apr 28 11:34:59 2015 +0200]"},
{"name" : "d55b7190fbba2794a020347241e838eeeca978da", "time" : 1430205547, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #501 from smarter/fix/arrayClone\n\nTypeAssigner: fix return type of clone() for arrays", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Tue Apr 28 09:19:07 2015 +0200]"},
{"name" : "96d75318959156c71628d8878fc5bcf0185821b4", "time" : 1430147104, "y" : 1945, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "TypeAssigner: fix return type of clone() for arrays\n\nGiven the following code:\n  val x: Array[String] = new Array[String](1)\n  x(0) = \"foo\"\n  println(x.clone().apply(0))\n\nBefore this commit, the last line was rewritten in Erasure to:\n  println(x.clone().[]apply(0))\nThis is incorrect: clone() returns an Object, so a cast is necessary,\nthis resulted in the following failure at runtime:\n  java.lang.VerifyError: Bad type on operand stack in aaload\n\nAfter this commit, the last line is rewritten in Erasure to:\n  println(x.clone().asInstanceOf[String[]].[]apply(0))\nThis corresponds to adding a \"checkcast\" instruction in the generated\nbytecode, and is enough to fix the runtime error.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Mon Apr 27 17:05:04 2015 +0200]"},
{"name" : "9ba09d426dcc3fa0e0fb8422df9722bc95b1d611", "time" : 1430139278, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #491 from smarter/simplify/makeBridgeDef\n\nErasure#Typer: Document makeBridgeDef", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon Apr 27 14:54:38 2015 +0200]"},
{"name" : "0ee9f234b41b46d98685330c26020ac815a6162d", "time" : 1430087878, "y" : 1947, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Erasure#Typer: Document makeBridgeDef\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Mon Apr 27 00:37:58 2015 +0200]"},
{"name" : "3639cf84389860be14f428d33a80eee9aeea6efc", "time" : 1429962200, "y" : 1948, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Update .gitignore\n\nAdd test-classes to .gitignore. (The change is produced persistently by my Eclipse IDE).\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Apr 25 13:43:20 2015 +0200]"},
{"name" : "8cec943e961c4d82c132855e56d1747cf968830b", "time" : 1429962104, "y" : 1948, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Allow separate compilation of Dotty using TASTY\n\nClassfile parser now reads TASTY attributes or annotations and\nunpickles them in order to allow for separate compilation.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Apr 25 13:41:44 2015 +0200]"},
{"name" : "7ebc9e2f74e5452749a39f9423de0ba4bd91d7c2", "time" : 1429961993, "y" : 1948, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Better error message constructor applications\n\nIf a constructor for class C was called with wrong number of parameters,\nthe previous error message referred to `method <init>`. Now it is\n`constructor C`.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Apr 25 13:39:53 2015 +0200]"},
{"name" : "7a8bc797ac4d84f22707671ad535dc53b577bea3", "time" : 1429961816, "y" : 1880, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add test for by-name varargs\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Apr 25 13:36:56 2015 +0200]"},
{"name" : "d94f0b8d7b2bc06c0f0642a714f7940d2f2a9348", "time" : 1429949331, "y" : 1948, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Change name of TASTY attribute to TASTY\n\nIt does not matter whether it comes from Dotty or elsewhere. We can record the\nname of the producer in a section of the format itself.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Apr 25 10:08:51 2015 +0200]"},
{"name" : "f0fc5c1aa6a9c73483a45e9d64417ac3270d495b", "time" : 1429891483, "y" : 1880, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Print ByNameTypeTrees in RefinedPrinter\n\nWas missing before, ffell back to raw printing.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 24 18:04:43 2015 +0200]"},
{"name" : "6a3aab8241cc5379bcffb7644bdbaa04ba12ce5b", "time" : 1429891449, "y" : 1880, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Allow byname repated parameters\n\nImplements #499\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 24 18:04:09 2015 +0200]"},
{"name" : "2cab739534ba259efbfabffd417250930e7700a2", "time" : 1429885837, "y" : 1948, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Produce one TASTY pickling per top-level class.\n\nIf a unit has several top-level classes or object (which are not linked classes\nof each other) each gets its own pickle information, which contains\nany enclosing package clauses and imports and then just the top-level\nclass/object and its companion object.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 24 16:30:37 2015 +0200]"},
{"name" : "1e9c012a0c61b2031ecaf11de3f2e99a5fdff7af", "time" : 1429862807, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #497 from dotty-staging/fix-bin-dotc\n\nFix quadratic running type of bin/dotc bash script.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri Apr 24 10:06:47 2015 +0200]"},
{"name" : "6927c1aa76c19c1232609adb53b17e008ea04030", "time" : 1429862361, "y" : 1948, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Save TASTY in attribute of classfiles.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri Apr 24 09:59:21 2015 +0200]"},
{"name" : "2b3591cec6a1d58f3346b6c8933ca0742f13c1cf", "time" : 1429816002, "y" : 1958, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Remove trailing whitespace\n\nI have figured out how to make this the default in Eclipse, so hopefully\nwe won't see many repeats of this.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Apr 23 21:06:42 2015 +0200]"},
{"name" : "4efcfa6a17eb04021cdeec85283bed786e2d15be", "time" : 1429815367, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #475 from dotty-staging/fix/pickle-homogenization\n\nFix/pickle homogenization", "author" : "PersonIdent[odersky, odersky@gmail.com, Thu Apr 23 20:56:07 2015 +0200]"},
{"name" : "e47ecb138efae9a1fd80034b6925a2a517931cf3", "time" : 1429809541, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #496 from dotty-staging/fix-sams-static\n\nFix #492. Traits that require an outer pointer are not SAMs.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Thu Apr 23 19:19:01 2015 +0200]"},
{"name" : "eae898570297735af66efa439f3a124c60a75022", "time" : 1429805871, "y" : 1961, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix quadratic running type of bin/dotc bash script.\n\nSee https://github.com/scala/scala/pull/4465 for details.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 23 18:17:51 2015 +0200]"},
{"name" : "dee11526fc5f917589a5148b776de74752f4d57a", "time" : 1429797315, "y" : 1962, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add a neg test for SAMs.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 23 15:55:15 2015 +0200]"},
{"name" : "c01389d170bb0f1c8a925a25c145396007a75106", "time" : 1429789135, "y" : 1962, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix #492. Traits that require an outer pointer are not SAMs.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 23 13:38:55 2015 +0200]"},
{"name" : "f1c191aec5cfdbd63f8ed1e63b2085978c2fa3e0", "time" : 1429779019, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #488 from dotty-staging/functionalInterfaces\n\nNew phase: FunctionalInterfaces.      Rewires closures to implement more specific types of Function SAMs.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Thu Apr 23 10:50:19 2015 +0200]"},
{"name" : "3462e98f2b834b83f67fa3da03e53c563f9c6b4c", "time" : 1429777987, "y" : 1965, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make var fields of FunctionalInterfaces private.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 23 10:33:07 2015 +0200]"},
{"name" : "36c229ba8c3d44546b34446ca36c8f335a9c5f47", "time" : 1429719518, "y" : 1958, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add runsAfterGroupOf constraint to ExtensionMethods\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Apr 22 18:18:38 2015 +0200]"},
{"name" : "ba9db4e44b77302542a76040c456d70e513769f9", "time" : 1429715975, "y" : 1958, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Swap Pickler and FirstTransform\n\nThis means we now also pickle Imports and NamedArgs.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Apr 22 17:19:35 2015 +0200]"},
{"name" : "1d56a547b56b2c82bf70d8701a077c13ffb7f80d", "time" : 1429715975, "y" : 1958, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Unpickle Imports\n\nWas missing before. Needed a tweak in PlainPrinter for printing\nimport symbol references (their denotation is not current after pickling, so\nthey would have printed differently after and before pickling).\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Apr 22 17:19:35 2015 +0200]"},
{"name" : "a884556d910b333f6d550ef7624c100d476862b7", "time" : 1429715975, "y" : 1958, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Anchor import symbols at current owner\n\nNeeded to harmonize behavior of Typer/Namer and tpd. This is needed\nfor making pickling, then unpickling the identity.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Apr 22 17:19:35 2015 +0200]"},
{"name" : "79958518b4f95b3dd8e34d543757034d181e4514", "time" : 1429715975, "y" : 1958, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Roll some of FirstTransform functionaility into PostTyper\n\nEverything that needs to be done before pickling moves to PostTyper.\nThe idea is that we want to make Pickler come before FirstTransform.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Apr 22 17:19:35 2015 +0200]"},
{"name" : "1d4e4a6d4784edfe1d2490de7ceff9d3c82d4d27", "time" : 1429715975, "y" : 1958, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Remove dead skipJava code from FirstTransform.\n\nFrontend already drops all Java compilation units, so there's\nnothing to do for FirstTransform.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Apr 22 17:19:35 2015 +0200]"},
{"name" : "3a158c0a047d2842c0604faf75251c0828408bc9", "time" : 1429715975, "y" : 1958, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Roll SyntheticMethods into PostTyper\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Apr 22 17:19:35 2015 +0200]"},
{"name" : "7e60221120015be2607947f2de55ca4984db7077", "time" : 1429715975, "y" : 1958, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Roll InstChecks into PostTyper\n\nMove InstChecks functionality into PostTyper in order\nto save a separate traversal.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Apr 22 17:19:35 2015 +0200]"},
{"name" : "158c9632e9138a91a47ce13386bce0ab41db434b", "time" : 1429715975, "y" : 1958, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Super accessor refactoring\n\nNew phase: PostTransform, runs after Typer.\n\nSuperAccessors and ParamForwarders (renamed from ForwardParamAccessors) are\nhelper objects of post transform.\n\nNext: Add instChecks as well.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Apr 22 17:19:35 2015 +0200]"},
{"name" : "ed160675ddfc4410d1dcaa55ecbd2dec7f842013", "time" : 1429715975, "y" : 1958, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make currentClass available from Symbols\n\nIt's needed beyond MacroTransform, and its definition\nis independent.\n\nAlso, make `defn` in Symbols not implicit. (I think its\nimplicitness was an oversight).\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Apr 22 17:19:35 2015 +0200]"},
{"name" : "65596eecc3c7670e7000f064a31dc61f575217eb", "time" : 1429715974, "y" : 1958, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Be smarter about validity of owners\n\nPrevious scheme never went back once owner was taken to be invalid:\nall enclosed code was assumed to be with invalid owners. This is not\ntrue if the enclosed code contains a class or method.\n\nAlso previous scheme looked at the owner, whereas the only thing that\nmatters is the enclosing class. Therefore, by-name arguments are no longer\nconsidered to be regions with invalid owners.\n\nAlso: run everything at thisTransform.next, except install forwarders\nat thisTransform. Previous scheme was weird in that it switched to\nthisTransform.next in an Apply node, but never switched back, even\nif said Apply node contains nested classes that need forwarders.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Apr 22 17:19:34 2015 +0200]"},
{"name" : "d72645211880225d13764cd2d0764eee0efb069e", "time" : 1429715974, "y" : 1958, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Drop restriction that SuperAccessors should not touch patterns\n\nNot sure why we need to do this, and in any case it's not sure\nwhat constitutes a pattern. There are certainly some parts of\npatterns (e.g. prefixes of unapplies, or their implicit arguments)\nthat should be transformed under SuperAccessors, so the previous\ncondition was too coarse.\n\nWe include the test case that motivated the restriction. It looks like\nit works now.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Apr 22 17:19:34 2015 +0200]"},
{"name" : "dab8aa18419e7b6354d979440cae5105e2672061", "time" : 1429715974, "y" : 1958, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Move checkCompanionNameClashes from SuperAccessors to RefChecks\n\nDone in the interest of slimming down and modularizing SuperAccessors.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Apr 22 17:19:34 2015 +0200]"},
{"name" : "e439a1ad248dad77cb71e824e19c348d8498cc85", "time" : 1429715974, "y" : 1958, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Breakout and re-enable forward param accessors code.\n\nThe code got accidentally disabled when refactoring SuperAccessors for\npickling. The forwardParamAccessor method was applied only to non-parameters\nwhere it is the identity (we really shopuld get test paramAccessors working,\nthen this would not have happened.\n\nIn the interest of better modularity, the code was placed in its own trait,\nbecause it overlaps only marginally with the rest of SuperAccessors functionality.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Apr 22 17:19:34 2015 +0200]"},
{"name" : "2152b4b85fcfb48cb49868200c96fd47023602ea", "time" : 1429715974, "y" : 1958, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "New utility method in TypeUtils: ensureMethodic\n\nUsed in at least two places, so it's of general use.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Apr 22 17:19:34 2015 +0200]"},
{"name" : "66802ac94d9091052d6cc96833aa15a997ec9e3c", "time" : 1429531864, "y" : 1965, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Discover present java8-compat classes during compilation.\n\nFunction0, Function1, Function2 are all specialized for different type params.\nFunctionalInterface filters out classes that are known to not exists\nand relies on getClassIfDefined for a precise check.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Apr 20 14:11:04 2015 +0200]"},
{"name" : "815516b239f6ec6d649e71c355b803a5620abe97", "time" : 1429531603, "y" : 1965, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Implement getClassIfDefined.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Apr 20 14:06:43 2015 +0200]"},
{"name" : "5f31ce4633b76b610a397d587303dba1ce5a9b02", "time" : 1429531312, "y" : 1965, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "FunctionInterfaces: more specific filters for FunctionX signatures\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Apr 20 14:01:52 2015 +0200]"},
{"name" : "ad57a507be0bba0014b3f2d8f39f8f77b1fe6fa8", "time" : 1429530806, "y" : 1965, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Load functions duringTyper in FunctionalInterfaces.\n\nIt seems that loading a class from class path does not define\nthe class in previous phases. Are InfoTransformers applied?\nIt seems to violate a lot of assumptions of what types&symbols are after erasure,\nas unerased types could leak into trees.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Apr 20 13:53:26 2015 +0200]"},
{"name" : "bacc9f0272b4e95467e8558e174b4ffc8e907e28", "time" : 1429530652, "y" : 1965, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "New phase: FunctionalInterfaces.\n\n Rewires closures to implement more specific types of Function SAMs.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Apr 20 13:50:52 2015 +0200]"},
{"name" : "6dfeaa26c93e8110a54c6e2f6ebf6480dfc74257", "time" : 1429530566, "y" : 1965, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Specialization-specific names.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Apr 20 13:49:26 2015 +0200]"},
{"name" : "9a80b7de405a1e3c41f39383daf9b5b68c737030", "time" : 1429530475, "y" : 1965, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add specialized versions of Function SAM's\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Apr 20 13:47:55 2015 +0200]"},
{"name" : "e3449e9fdbb3801eb07680e4938bc4c3c77ec3a8", "time" : 1429523144, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #474 from dotty-staging/alt/instantiation-checks\n\nAlt/instantiation checks (2)", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon Apr 20 11:45:44 2015 +0200]"},
{"name" : "187480b55bcf3b37936802daa3a31ffb89bfdcc6", "time" : 1429523130, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #482 from vsalvis/vsalvis-partest2\n\nPartest for Dotty with pos tests and neg tests with error count", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon Apr 20 11:45:30 2015 +0200]"},
{"name" : "9608854a81f3bea438e21fbf005683fda77b166a", "time" : 1429522470, "y" : 1990, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "trigger travis, update .gitignore\n", "author" : "PersonIdent[vsalvis, salvisbergvera@gmail.com, Mon Apr 20 11:34:30 2015 +0200]"},
{"name" : "fb98e832439819b11649a878320d30938fc30abb", "time" : 1429521512, "y" : 1990, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Robuster FileLock test to prevent exception if fork in Test is ever disabled\n", "author" : "PersonIdent[vsalvis, salvisbergvera@gmail.com, Mon Apr 20 11:18:32 2015 +0200]"},
{"name" : "346ad4ff58f32397ec943353bf5ebe54aca5a3c8", "time" : 1429521008, "y" : 1990, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Using FileLock to distinguish between test and partest mode\n", "author" : "PersonIdent[vsalvis, salvisbergvera@gmail.com, Mon Apr 20 11:10:08 2015 +0200]"},
{"name" : "72d91a32888d6e35cb7ee33437329c8c751f2af1", "time" : 1429520935, "y" : 1993, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "All package refs should use TERMREFpkg for pickling\n\nPreviously, some references used TermRef and a name with signature,\nwhich gave  two different ways to represent a package.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Apr 20 11:08:55 2015 +0200]"},
{"name" : "c3844e5ff0722561045f65fff55f24ed0a581c0c", "time" : 1429520133, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #478 from dotty-staging/fix-restoreScopes\n\nFix #476, restoreScopes should maintain companion links", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon Apr 20 10:55:33 2015 +0200]"},
{"name" : "4d60c901df4563536aa9bd153c5c4345e3d70a3a", "time" : 1429300006, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #486 from dotty-staging/fix/lambdaLift\n\nFix #480 in LambdaLift", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri Apr 17 21:46:46 2015 +0200]"},
{"name" : "0b4e4cb7e71367752558fac29129f7e182d9206a", "time" : 1429299125, "y" : 1996, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix #342 Lambda lift idents need to get new prefix\n\nIdents of lifted symbols become class members, need to carry the right\nreference with the right prefix as type.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri Apr 17 21:32:05 2015 +0200]"},
{"name" : "b0b690285bf46ba7e4df91e131bff6921430be48", "time" : 1429299043, "y" : 1996, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Reset inSuperCall when lifting methods\n\nAfter lambdaLift, methods are no longer local to cosntructors, so their\ninSuperCall flag is reset.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri Apr 17 21:30:43 2015 +0200]"},
{"name" : "6bcc3187a81ec1f2078709a1a9249ec57a393aad", "time" : 1429299043, "y" : 1996, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Improve documentation and minimze test\n\nDocumentation around markFree and narrowLiftedOwner was added.\ni480 was minimzed and dependencies on dotc were removed. (+1 squashed commit)\nSquashed commits:\n[1a84054] Test cases for #480\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri Apr 17 21:30:43 2015 +0200]"},
{"name" : "8d08915765848d1370542742c8b7482bd1bf86d0", "time" : 1429287224, "y" : 1990, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Partest for Dotty with pos tests and neg tests with error count\n", "author" : "PersonIdent[vsalvis, salvisbergvera@gmail.com, Fri Apr 17 18:13:44 2015 +0200]"},
{"name" : "e0a0c39a2578eca9927fa4c435ce14654422a825", "time" : 1429260531, "y" : 1996, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix #480 in LambdaLift\n\nFix two errors, where the first masked the second:\n\n1) Variables defined in a method are not free variables of that method. This was mispredicated before\nand caused liftedOwner to be updated to the class enclosing the method, thereby preventing any method\nthat refers to a local parameter or symbol to be hoisted.\n\nOnce this was fixed, methods were hoisted too far out. Test case in #480a, which takes code from Definitions.\nThis was fixed by\n\n2) markFree is updated to do an additional narrowLiftedOwner so that, if a free variable gets a proxy\nin an enclosing class, any inner classes and methods are kept within that class.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 17 10:48:51 2015 +0200]"},
{"name" : "85b48de299fcdba17397c59c9bcaa0a69da93350", "time" : 1429215602, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #483 from dotty-staging/fix-java8-alt\n\nFix jvm8 lamba related issues.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Thu Apr 16 22:20:02 2015 +0200]"},
{"name" : "ad5b08c041e7411985e7ae84747dfff83ddb1846", "time" : 1429215575, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #485 from dotty-staging/interceptedM\n\nSimplify InterceptedMethods. Fix #439", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Thu Apr 16 22:19:35 2015 +0200]"},
{"name" : "afaec8245018b4f2a1ec945d132daf558236380e", "time" : 1429207942, "y" : 2003, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Simplify InterceptedMethods. Fix #439\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 16 20:12:22 2015 +0200]"},
{"name" : "b6c3ab9136c0e1e25e56f7df4adb14dbe5633a40", "time" : 1429202036, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #479 from dotty-staging/fix/#477\n\nMake dotty Select-like Idents transparent for scalac common interface", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Thu Apr 16 18:33:56 2015 +0200]"},
{"name" : "42b541ad055ab0fae42991362bc88ec16b74f30a", "time" : 1429196415, "y" : 2005, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Better workaround for #342. This one works also for symbols which are InSuperCall.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 16 17:00:15 2015 +0200]"},
{"name" : "4efca0f2e6d8fb91cd68da09809fe8165011aab3", "time" : 1429193208, "y" : 2006, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make checkCompanion stable against future Defs\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 16 16:06:48 2015 +0200]"},
{"name" : "235df32bffcfbc58f83f113bec81072f8de50ee9", "time" : 1429193082, "y" : 2005, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Update version of scalac-compiler fork.\n\nThis update allows to have non-static lambdas.\nIt doesn't mean that we should emit such,\nas they are potential memory leak. See #480\nFixes #470\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 16 16:04:42 2015 +0200]"},
{"name" : "58a6c76019bde728dcfe43bd6a7c682cc33d71ee", "time" : 1429193082, "y" : 2005, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Force loading LambdaMetaFactory.\n\nCommon interface with scalac tries not to load it it wasn't loaded already.\nWe need it.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 16 16:04:42 2015 +0200]"},
{"name" : "7a347a0c9b9e6c1030eff7d994bf3c502ee8d297", "time" : 1429175405, "y" : 2005, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Give more precise types in desugarIdent.\n\nIt is known to return an actual Select.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 16 11:10:05 2015 +0200]"},
{"name" : "62ac97d16a9231b71de84a50b3c0d32f554b34e4", "time" : 1429175399, "y" : 2005, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Refactor BackendInterface.Select: desuggar only once.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 16 11:09:59 2015 +0200]"},
{"name" : "31c56ee54e16e94016a0f46579863eef1f19efc6", "time" : 1429173474, "y" : 2006, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Revert \"Disable checking of presence of companion objects: forces to much.\"\n\nThe problem was due to cycles in ExtensionMethod themselves.\n\nThis reverts commit 1ce894e06a3a7b3ca64e62c1de515c2125e89343.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 16 10:37:54 2015 +0200]"},
{"name" : "e74587fae00c1ca61934f3387f9bcfb6b0ddc6d2", "time" : 1429173468, "y" : 2006, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Companion_Module method is not a method with extension.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 16 10:37:48 2015 +0200]"},
{"name" : "1ce894e06a3a7b3ca64e62c1de515c2125e89343", "time" : 1429127735, "y" : 2006, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Disable checking of presence of companion objects: forces to much.\n\nTriggers cycles in ExtensionMethods.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Apr 15 21:55:35 2015 +0200]"},
{"name" : "3c9fb037658e5b9ff5775ca34edbf1e228d91685", "time" : 1429126883, "y" : 2006, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix RestoreScopes from destroying companion links.\n\nFixes #476\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Apr 15 21:41:23 2015 +0200]"},
{"name" : "bd9e18f2b2c8f0550fc0daab5473d9f6856cc329", "time" : 1429126880, "y" : 2006, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Ycheck that companions do not disappear.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Apr 15 21:41:20 2015 +0200]"},
{"name" : "2b307b4551ea3cb5827ee6db2e0c08f5852b4770", "time" : 1429125112, "y" : 2005, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make dotty Idents transparent for common interface\n\nScalac in some location(assigns for example) assumes that tree is a Select.\nIn dotty it could also be an Ident.\nSimulate this.\nFixes #477\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Apr 15 21:11:52 2015 +0200]"},
{"name" : "61f1f4dddb8e760d628cdeeb88c579f1ef0fb2a9", "time" : 1429123530, "y" : 2006, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Companion methods should have Method flag.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Apr 15 20:45:30 2015 +0200]"},
{"name" : "5efd0070d241b7dd464dae3d04ac55d64b6597ac", "time" : 1429015173, "y" : 1993, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Always pickle package references as TERMREFpkg\n\nPreviously, package references could also be pickled as ThisTypes, which\npresented a problem for the scalac pickler.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Apr 14 14:39:33 2015 +0200]"},
{"name" : "b6f5c6aba57baf5a32469c749d06af0774f9eb37", "time" : 1429015108, "y" : 1993, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Better homogenization.\n\nNeeded for next commit. Also homogenize types used in prefixes, and never drop \"scala.\", \"Predef.\" in homogenized view.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Apr 14 14:38:28 2015 +0200]"},
{"name" : "35717b7d3029a87a4ec7c9b45d18644b33b560e8", "time" : 1428938904, "y" : 2020, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Allow future defs when printing with i\"...\".\n\nWe saw a failure of accessing a denotation outside its defined interval, which got triggered\nby i\"...\". This should never be the case. We should be more interested in what i\"...\" has to print.\n\n(V2, to see whether this builds with Travis now)\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Apr 13 17:28:24 2015 +0200]"},
{"name" : "6571efa7ea1a5bd973ff010de6e38901cc77387b", "time" : 1428933970, "y" : 2020, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Tweaks relative to error reporting\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Apr 13 16:06:10 2015 +0200]"},
{"name" : "abba939a71423070e29c6035fa973b3291423106", "time" : 1428933970, "y" : 2020, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Print supressed error message if it comes first.\n\nAn error message might be suppressed because it contains internal code. But\nif it is the first one, we should still print it. Otherwise, we risk a scenario where\nwe see \"2 errors\" but none is printed.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Apr 13 16:06:10 2015 +0200]"},
{"name" : "6ca41d5721da042218c81c4851de8333584c54f1", "time" : 1428933970, "y" : 2020, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Drop Java compilation units after Typer\n\nJava compilation units should not be retained after typer,\nas no code will be generated for them. All we need from\nthem are their symbols.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Apr 13 16:06:10 2015 +0200]"},
{"name" : "046376e48bd3c4a294cef239a6cc77a61b62bc6e", "time" : 1428933961, "y" : 2020, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Added phase to check `New` nodes for instantiability.\n\n- Abstract classes cannot be instantiated (exceptions:\n  parent news and Java annotations)\n- Instantiateed class must conform to its self type.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Apr 13 16:06:01 2015 +0200]"},
{"name" : "04eea24326c3a42ad908fe45e204af41b880f2cd", "time" : 1428933912, "y" : 2020, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Self type inheritance check\n\nCheck that the self type of a class conforms to the self types of its parent classes.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Apr 13 16:05:12 2015 +0200]"},
{"name" : "d4dc78c3ebe4e8b559c3a85b6b77c321b239bb90", "time" : 1428933893, "y" : 2020, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "New method on types: givenSelfType\n\nThe self type as given (or implied for module classes) in the source.\nAlso defined and updated for normal types, not just ClassInfo types.\nCommon functionality between this and baseTypeWithArgs has been pulled\ninto RefinedType#wrapIfMember.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Apr 13 16:04:53 2015 +0200]"},
{"name" : "dcfebd88e42afb18d176748fb89f78199f57f8d4", "time" : 1428933879, "y" : 2020, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Better printing of anonymous classes.\n\nNow prints `C{...}` instead of `$anon`.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Apr 13 16:04:39 2015 +0200]"},
{"name" : "52d6ac3833c6daf888d48bcea06a98674243501d", "time" : 1428618376, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #469 from dotty-staging/stylecheck\n\nAdd stylechecking to test suite, fix style errors", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri Apr 10 00:26:16 2015 +0200]"},
{"name" : "a16ab214fe7fa634c299529147f43e4967abc972", "time" : 1428614043, "y" : 2029, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Enable scalastyle on travis.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 9 23:14:03 2015 +0200]"},
{"name" : "f810364780afbfdd40a6a331391323e400cb4f67", "time" : 1428614043, "y" : 2029, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Remove debug message from ClassfileParser.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 9 23:14:03 2015 +0200]"},
{"name" : "dad71ca7c5311c5741aecc497de83f02d5f35f6e", "time" : 1428614042, "y" : 2029, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Ensure spaces after `if` in Dotty tests.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 9 23:14:02 2015 +0200]"},
{"name" : "74957b3b20aae3a0a2c7a41000c5a1424586f412", "time" : 1428614031, "y" : 2029, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Ensure spaces after `if` in Dotty source.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 9 23:13:51 2015 +0200]"},
{"name" : "d0804782ba6956b1f906e646d14e3547adcaa23a", "time" : 1428595890, "y" : 2029, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "EnsureSingleSpaceAfterTokenChecker doesn't work. Use regexp instead.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 9 18:11:30 2015 +0200]"},
{"name" : "ca34e60c2dd57c9fc7afa4380666eecdec515e3d", "time" : 1428594751, "y" : 2029, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Use EnsureSingleSpaceAfterTokenChecker to discover forgotten spaces after `if`\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 9 17:52:31 2015 +0200]"},
{"name" : "05e4c5d8ef34a03944ab18c219c2e77c065a84ce", "time" : 1428594324, "y" : 2029, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Disabling SimplifyBooleanExpressionChecker: not have a hard to rewrite counterexample.\n\nTreeUnpickler: 494, rewriting to reduce/fold isn't equivalent. !exists(false) isn't easier to read.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 9 17:45:24 2015 +0200]"},
{"name" : "be7062c897690ef4afa03ecde7ef1977348c5350", "time" : 1428594123, "y" : 2029, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Disabling SpacesAfterPlusChecker: false positives for variances.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 9 17:42:03 2015 +0200]"},
{"name" : "f63589838344e91f84621162d9e0a4cc2c532949", "time" : 1428593952, "y" : 2029, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add spaces around + in tests.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 9 17:39:12 2015 +0200]"},
{"name" : "d7c44086cc34eee7991753fc2ea284bdefed9670", "time" : 1428593170, "y" : 2029, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add spaces around + in dotty source.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 9 17:26:10 2015 +0200]"},
{"name" : "9f80c0d2e87819f183cf54028824bd338d780dcd", "time" : 1428591836, "y" : 2029, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "We sometimes define object with a lowercase name\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 9 17:03:56 2015 +0200]"},
{"name" : "67a6898b146cf16bcee0445baf31cf6579a57cb5", "time" : 1428591817, "y" : 2029, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Disabling more style checks that do not apply to dotty.\n\nWe use structural types in return values,\nsometimes we override equals without overriding hashcode\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 9 17:03:37 2015 +0200]"},
{"name" : "4d1c9e2212d8d462ad8664904491c378766a65fa", "time" : 1428591523, "y" : 2029, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Remove trailing spaces in Dotty tests.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 9 16:58:43 2015 +0200]"},
{"name" : "afa630a78b4f2cd9bd799b5a0199b99548f18aaa", "time" : 1428591475, "y" : 2029, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Remove trailing spaces in Dotty source.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 9 16:57:55 2015 +0200]"},
{"name" : "33f5d62bcbc6ec649e739958fc19c4524305471c", "time" : 1428589988, "y" : 2029, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Removing whitespaces before `[`\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 9 16:33:08 2015 +0200]"},
{"name" : "d705443159ac69ad0c364323271979bdfc8bc9bb", "time" : 1428589720, "y" : 2029, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Code simplifications stimulated by SimplifyBooleanExpressionChecker.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 9 16:28:40 2015 +0200]"},
{"name" : "d39068a16a2c37b970c73a666ddde03593556dfd", "time" : 1428589438, "y" : 2029, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "ScalaStyle gives spurious errors for braces in ifs.\n\nCommonly used in dotty syntax isn't respected by scalastyle:\n```\nif (...) bar\nelse if (...) foo\nelse foo\n```\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 9 16:23:58 2015 +0200]"},
{"name" : "b9d06ff323c8accf8103e2e5150efb19e029b565", "time" : 1428589027, "y" : 2029, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Disable MethodNameChecker.\n\nIn Dotty we frequently want to make method look like it returns a constructor, when it's actually not.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 9 16:17:07 2015 +0200]"},
{"name" : "956d0bd0aff8f52d91cdec72ad54b018e9064f70", "time" : 1428588940, "y" : 2029, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Allow setters in method name reggae.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 9 16:15:40 2015 +0200]"},
{"name" : "6a5a6cca84221b90b14dbac8730cafef7f60e410", "time" : 1428588784, "y" : 2029, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Replace tabs with 4 spaces in Dotty tests.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 9 16:13:04 2015 +0200]"},
{"name" : "9602523e0b6b89b73f77ac45f9a5b58060fcd6cf", "time" : 1428588719, "y" : 2029, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Replace tabs with 4 spaces in Dotty source.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 9 16:11:59 2015 +0200]"},
{"name" : "34e77a9fe24106728a21d6d88a7ee8e42cca4dae", "time" : 1428588438, "y" : 2029, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Disable style tests that are known not to pass.\n\nDotty uses returns, nulls, and has methods with huge cyclomatic compexity\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 9 16:07:18 2015 +0200]"},
{"name" : "d9b224102c576150fc4791bf639a7aa36e5f8337", "time" : 1428588259, "y" : 2029, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make all dotty tests end in newline\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 9 16:04:19 2015 +0200]"},
{"name" : "f73d46adabe4195f4a68defd2c82382f37f1b7ee", "time" : 1428588211, "y" : 2029, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make all Dotty source files end in newline.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 9 16:03:31 2015 +0200]"},
{"name" : "c832ffc4243d92e4f27dd3a743b73d21cf13bd43", "time" : 1428587745, "y" : 2029, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add scalastyle to dependencies, with default config.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 9 15:55:45 2015 +0200]"},
{"name" : "0c1797a870d5440917f17c36192f9b9050abe5f2", "time" : 1428586860, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #468 from dotty-staging/add/no-double-bindings\n\nAdd/no double bindings", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Thu Apr 9 15:41:00 2015 +0200]"},
{"name" : "d7f6e377899c2450c0919332e184efad9593d8f8", "time" : 1428580863, "y" : 2055, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Disabled -Yno-double-bindings for a neg test.\n\nThe test introduced a double definition, which led to a double\nbinding. With -Yno-double-bindings this cauases an assertion violation\ninstead of a reported error.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Apr 9 14:01:03 2015 +0200]"},
{"name" : "6fc0a0ff71c0692ae7ed49c31bfc4533625b5764", "time" : 1428579358, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #456 from dotty-staging/patmat-eqeq\n\nFix #453, patternMatcher should use ==", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Thu Apr 9 13:35:58 2015 +0200]"},
{"name" : "651b8ddbf518327c059ee053acf586a35903c87f", "time" : 1428579034, "y" : 2055, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make -Yno-double-bindings the default for all tests.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Apr 9 13:30:34 2015 +0200]"},
{"name" : "673842f94e68beb6f8bfa8136b37578464b0e55b", "time" : 1428578124, "y" : 2055, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixed selection in InterceptedMethods that caused a data race\n\nAlso, added comments to the tpd select methods that explain how the data race\ncould arise and how to avoid it.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Apr 9 13:15:24 2015 +0200]"},
{"name" : "a2a12a263467df11fb7ba8a1cc18ec9984530d94", "time" : 1428578124, "y" : 2055, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Rename -YnoDoubleBindings to -Yno-double-bindings\n\nThis aligns with the \"-\" instead of CamelCase convention for\nthe other command line options.\n\nAlso, enable -Yno-double-bindings for dotc_core.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Apr 9 13:15:24 2015 +0200]"},
{"name" : "b574ac0727ab704d0cbb037047021e791e0c70d1", "time" : 1428577895, "y" : 2055, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix #453, patternMatcher should use ==\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Apr 9 13:11:35 2015 +0200]"},
{"name" : "b8ffaf83984dd385fdab187ab83893a64b785519", "time" : 1428570190, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #467 from dotty-staging/drop/invalidateCompanions\n\nDrop the invalidate undefined companions code in restoreScopes", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Thu Apr 9 11:03:10 2015 +0200]"},
{"name" : "a1b7e46b490fe3035d97add614e73af9a19e8276", "time" : 1428569396, "y" : 2062, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Drop the invalidate undefined companions code in restoreScopes\n\nIt is no longer needed because companion classes are now tracked with\ncompanion$ methods. It also causes unncessary inner classes reads.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Apr 9 10:49:56 2015 +0200]"},
{"name" : "957923ec75c71ac9f7efe67823781438177aaa59", "time" : 1428565988, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #465 from dotty-staging/fix/pickling\n\nFix/pickling", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Thu Apr 9 09:53:08 2015 +0200]"},
{"name" : "9a7a7b889c9ded58ceaefb90f6ee208c9d2ab534", "time" : 1428524571, "y" : 2064, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Refactor checking in NamedTypes.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Apr 8 22:22:51 2015 +0200]"},
{"name" : "73e7181becbb2c7393d402c6234c4321d7f2704b", "time" : 1428443639, "y" : 2064, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Simplified unpickling of refined types via nextUnsharedTag\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Apr 7 23:53:59 2015 +0200]"},
{"name" : "2d45d5b23983fa20b353fc83ba4e9b8585e5f662", "time" : 1428443639, "y" : 2064, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Change of TERMREFsymbol/TYPEREFsymbol semantics\n\nUsed to be \"with fixed sym\". Now it is: With initial symbol\nas given in the serialized info.\n\nIt turns out the only previous uses of (TERM|TYPE)REFsymbol were\ntypes that were made symbolic in self types. But exactly that caused\nthat problems in unpickling which we tried to workaround by changing\nWithFixedSym#newLikeThis. And these fixes became less and less intuitive and\nstill could not solve the problem for good. Last hurdle was pickle-testing\nall files in ast together.\n\nIt's much simpler to reserve (TERM|TYPE)REFsymbol for NamedTypes that have\nan initial symbol. Like the previous \"WithFixedSym\" pickling, this avoids\ninifinite recursions in pickling/extmethods.scala. But it also avoids problens\nwith unpickling ast/*.scala. The reason it is better is that it more accurately\nmodels that types that exist before pickling.\n\nThis change also undoes previous changes to WithFixedSym#newlikeThis. Better to keep\nthe more restrictive contract for these.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Apr 7 23:53:59 2015 +0200]"},
{"name" : "3b53a8300f09c11a9fc889dbe59061a6941d21cc", "time" : 1428443639, "y" : 2064, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Homogenize #Apply projections.\n\nSimplify fully applied #Apply projections before comparing trees.\nSuch projections are now (correctly) simplified on unpickling\nbut persist in the original tree before pickling.\n\nThe discrepancy was uncovered by the last commit.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Apr 7 23:53:59 2015 +0200]"},
{"name" : "26881a91ca838708329f6ebdb82b603823a0ad25", "time" : 1428443639, "y" : 2064, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix Deferred flag determination when unpickling\n\nisAbstractType was wrong because it did not follow through SHARED aliases.\nThis was masked before 1b1fb6e5cf7df42000e378c628c8411bce952eb0 but uncovered\nafterwards.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Apr 7 23:53:59 2015 +0200]"},
{"name" : "3ec795a4a22d1cdd72af98d984776ff5bd5c3a60", "time" : 1428443639, "y" : 2064, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixes to double binding check.\n\nThere was a spurious error when doing pickling tests with -YnoDoubleBindings\nThe test manifested itself when compiling `Trees` and `untpd`. The problem was\na sourious double assignment to the `untpd$` TypeRef. The problem was that\nthe old `untpd` symbol did get a runId of 3, because it was looked at immediately\nbefore being overritten with the new symbol. So the system detected a race condition.\n\nThe new test looks at the denotations previous run id instead of the symbol's when\nsetting a denotation. That runId was still 2, so not real double binding occurred.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Apr 7 23:53:59 2015 +0200]"},
{"name" : "0f4111cb798960cbbe642633b623f9c5ce7e2d01", "time" : 1428443638, "y" : 2064, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Allow change of symbols in WithFixedSym#newLikeThis\n\nThe symbol might be overridden, in which case the overriding\nsymbol should be chosen.\n\nThis was observered when trying to pickle test all of ast.\nCompiling Trees and untpd together gave discrepancies involving\n`untpd.dotty$tools$dotc$ast$Trees$$Instance$$T`. It was\nfound that the symbol referred to by that type refers\nto the abstract type in Trees.Instance, not the alias in\nuntpd. The bad type was produced by an asSeenFrom of the\n`WithFixedSym` type\n`Instance.this.untpd.dotty$tools$dotc$ast$Trees$$Instance$$T`\nas seen from `untpd`. The as seen from did not pick the new\ninstance in `untpd`.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Apr 7 23:53:58 2015 +0200]"},
{"name" : "300fad54d986d6e654961cf703fc9a8f5d8b3233", "time" : 1428443638, "y" : 2064, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Move normalizeClassRef to readTemplate\n\nDo a normalizeClassRef immediately after parents are read. Not clear\nwhether this chanegs anything, but it's the prudent thing to do since\nNamer behaves the same way.\n\nThe danger would be that between reading parents and normalizing refs\nsomeone refers to an overridden param and gets the wrong type.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Apr 7 23:53:58 2015 +0200]"},
{"name" : "131054b6f3c380b1c14ece54b725b3e9d9eeaf55", "time" : 1428443638, "y" : 2064, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Some more pickling tests\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Apr 7 23:53:58 2015 +0200]"},
{"name" : "7630d968668c35bdbe18096b5aa97d13f4a28ac4", "time" : 1428443638, "y" : 2064, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Avoid spurious Deferred flag when unpickling classes.\n\nFor classes rhsIsEmpty is true, but they should not be Deferred.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Apr 7 23:53:58 2015 +0200]"},
{"name" : "c675cee97f38e38c5b1e303ce2ee0f251cdcd6a4", "time" : 1428443638, "y" : 2064, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "InSuperCall is always passed explicitly.\n\nThere were spurious InSuperCall flag due to the implicit addition\nof InSuperCall in normalizeFlags. This addition is not necessary, because\ninSuperCall is serialized.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Apr 7 23:53:58 2015 +0200]"},
{"name" : "6d2a2b1dede589c2d3b183d5ac109cab9100d618", "time" : 1428443638, "y" : 2064, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Produce expanded names.\n\nIn the absence of semantic names, this is kludgey. But we need to do it because\notherwise the ExpandedName flag is not correctly set.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Apr 7 23:53:58 2015 +0200]"},
{"name" : "af90fc5dd6606992763206929596bbcb6d5cba3c", "time" : 1428443638, "y" : 2064, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Better homogenized types for testing the pickler\n\nWill now also re-normalize And/OrTypes because sometimes they\nwere not yet normalized before pickling.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Apr 7 23:53:58 2015 +0200]"},
{"name" : "c369fae2fc7dc1a9388b1681276eb3f2dd01e98f", "time" : 1428443638, "y" : 2064, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Reduced coverage of twice tests\n\n... in order to save some time. On my laptop:\n\nWithout twice: 175sec\nWith full twice as in last commit: 220sec\nWith reduced twice: 188sec\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Apr 7 23:53:58 2015 +0200]"},
{"name" : "1a0afa8d5b04cc491bfb72636b2042a506a39f29", "time" : 1428443584, "y" : 2064, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Test stillValid at initial phase, revive -twice\n\nstillValid should always be tested at the phase where the initial\ndenotation is defined. If we do not do this we get false stale symbol errors.\nHere is a scenario:\n\nTo `bringForward` `Predef$$ArrowAsscoc`, we check whether its initial denotation\nhas an owner which contains the denotation as one of its members. But if we do this\nat a later phase (e.g. GenBCode), the owner of the initial denotation is Predef, but\nPredef no longer contains ArraoAssoc - it lost the member at flatten.\n\nWith this fix we can run everything with -twice, except dotc_core. I left a comment what\ngoes wrong there.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Apr 7 23:53:04 2015 +0200]"},
{"name" : "aa11237158ddf5cdbf25acc6304efb50ff10d49d", "time" : 1428442995, "y" : 2064, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Cleanup of installAfter\n\nSame functionality achieved in a simpler way. Also, make sure\ninitial works for stale denotations that refer to some other cycle.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Apr 7 23:43:15 2015 +0200]"},
{"name" : "c2072ad703fc237d494ceae50d4189e85e91a2ae", "time" : 1428442995, "y" : 2064, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Cleanup of import list in JavaPlatform\n\nThe previous one caused a spurious error - I had compiled the config classes\ninto the config directory, resulting in a dotty directory in config. My mistake,\nnot the previous import list's. Still the new imports are much cleaner.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Apr 7 23:43:15 2015 +0200]"},
{"name" : "6bff97afa3fae31b07008eef23c150175c90ba71", "time" : 1428442995, "y" : 2064, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Avoid reading symbol's denotation before overwriting them in Unpickler\n\nPrevious version read a prevDenot denotation of a potential root symbol.\nIf it then went on to replace the symbol instead the old one was already\nread and polluted the caches, similar to what happens in last commit.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Apr 7 23:43:15 2015 +0200]"},
{"name" : "553e89bf5979c7ed5436aa9581fbc3c0f46fdc5c", "time" : 1428442995, "y" : 2064, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Use invalidateInheritedSymbols instead of syncWithParents\n\nsyncWithParents explores the denotations of symbols that might yet to be entered\nin the current run. If such a symbol is looked at in a new run before a new one\nis entered, the validty period of the old denotation is extended to the new run\nand consequently references to that symbol do not know they need to reload. This\npollutes the cache of references and causes StaleSymbol errors down the line.\n\nReplacing with invalidateInheritedSymbols avoids the problem.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Apr 7 23:43:15 2015 +0200]"},
{"name" : "e1e0e9abb6c2b6285d598e260cc1d1c4ac2d3c2a", "time" : 1428107195, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #463 from dotty-staging/dotc-scalac-update\n\nUpdate dotc script with latest version of scalac", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Sat Apr 4 02:26:35 2015 +0200]"},
{"name" : "1696970572454a8651ca24d639b47f9ed1c412bb", "time" : 1428106385, "y" : 2084, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Update dotc script to use scalac 2.11.5-20150402-193021-0c75410da3\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Apr 4 02:13:05 2015 +0200]"},
{"name" : "6c6177cb0f0dbaf5028592dfd4cab442381fdf71", "time" : 1428088629, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #455 from dotty-staging/backend-annotations\n\nBackend: emit annotations", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri Apr 3 21:17:09 2015 +0200]"},
{"name" : "f05eb55d255a3579b077419c18131d657a88e3d6", "time" : 1428088616, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #459 from dotty-staging/fix/toString-stub\n\nFixed test failure for core_pickling.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri Apr 3 21:16:56 2015 +0200]"},
{"name" : "ec7f7f525dfa335ef36b604bc3f1ccd2ec4679db", "time" : 1428080128, "y" : 2087, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixed test failure for core_pickling.\n\nWhen reading external symbols from class Object, need to consider\nmembers of Any as well.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 3 18:55:28 2015 +0200]"},
{"name" : "628bb24683f73d31afa900aaa342917687da4631", "time" : 1428070348, "y" : 2088, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Backend: emit all annotations.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri Apr 3 16:12:28 2015 +0200]"},
{"name" : "293b4e38eb51fe6acb66250ebc2ee702d6b51a30", "time" : 1428070348, "y" : 2088, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Backend: Emmit simple annotations\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri Apr 3 16:12:28 2015 +0200]"},
{"name" : "62433d2877e3c3dd8a5385b2057274c7f36d6ff2", "time" : 1428070179, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #406 from dotty-staging/inner-classes\n\nEmit inner classes table.", "author" : "PersonIdent[odersky, odersky@gmail.com, Fri Apr 3 16:09:39 2015 +0200]"},
{"name" : "d578a53e92a4c315662df28bb3ba65496d204131", "time" : 1428070026, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #457 from dotty-staging/ycheckall\n\nFix #451: support -Ycheck:all.", "author" : "PersonIdent[odersky, odersky@gmail.com, Fri Apr 3 16:07:06 2015 +0200]"},
{"name" : "8bcabd6c57e0883613eb21727502b0ca223b1210", "time" : 1428066278, "y" : 2092, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix #451: support -Ycheck:all.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri Apr 3 15:04:38 2015 +0200]"},
{"name" : "7c8fea786bb1ae218596847a6891bac0a6d3033b", "time" : 1428051430, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #416 from dotty-staging/pickler-modular\n\nPopulate addresses of symbols, types and trees after pickler", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri Apr 3 10:57:10 2015 +0200]"},
{"name" : "e47483aaf9469b4b29f747511a231ebf6e52aa94", "time" : 1428022179, "y" : 2094, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Address reviewer comments on #416\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri Apr 3 02:49:39 2015 +0200]"},
{"name" : "e27655eadb4dbe84d67d95cf5ba00762a88ac2de", "time" : 1427996504, "y" : 2095, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Update version of scalac fork.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 2 19:41:44 2015 +0200]"},
{"name" : "5cbdf5c28b843c79616243e5f1c882d55304b6e9", "time" : 1427991382, "y" : 2095, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Handle inner classes defined in suppercalls.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 2 18:16:22 2015 +0200]"},
{"name" : "0f9132d6fa362e8ff5a8670afcd23f836f22dbd9", "time" : 1427986294, "y" : 2095, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Emit inner classes table.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 2 16:51:34 2015 +0200]"},
{"name" : "63d1f8661a13dc4b6ae087c87a6b30189fb61a8f", "time" : 1427986232, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #436 from dotty-staging/linked-class\n\nuse methods to find companion class", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Thu Apr 2 16:50:32 2015 +0200]"},
{"name" : "e5618d29e37ad50bd1b8c591ed50db63a6d7bc79", "time" : 1427985016, "y" : 2099, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Simplify methods implemented in #436\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 2 16:30:16 2015 +0200]"},
{"name" : "008bf64b47c9e8de41104579457f48edef1706fd", "time" : 1427984888, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #452 from dotty-staging/fixTTM-structural-sharing-between-classes\n\nFix TreeTypeMap and mapSymbols to create a copy of decls for duplicated classes.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Thu Apr 2 16:28:08 2015 +0200]"},
{"name" : "c560648f191f325cc1961f25fdbad48839ca6327", "time" : 1427983260, "y" : 2099, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Revert \"Workaround #440 in FirstTransform.\"\n\nThis reverts commit b653007ed0f30298b44dcc67bf032c1d2d58bcaf.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 2 16:01:00 2015 +0200]"},
{"name" : "17476c22aa69d05ebf7701f23891f65329d35da7", "time" : 1427981832, "y" : 2102, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix TreeTypeMap and mapSymbols to create a copy of decls for duplicated classes.\n\nWithout this fix the duplicated classes and the original ones share the same reference to a scope,\ninstead of having each a separate one.\n\n@alexsikia this should fix your problems\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Apr 2 15:37:12 2015 +0200]"},
{"name" : "d6273d66567a48cdc80df4222232a9857072d323", "time" : 1427910397, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #449 from dotty-staging/fix-context-in-forwarders\n\nFixes that make bridges smaller.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed Apr 1 19:46:37 2015 +0200]"},
{"name" : "668890cb1b467652cecdb3b44361c32476aa405f", "time" : 1427904155, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #448 from smarter/fix/bridge-emission\n\nErasure: actually emit bridges", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed Apr 1 18:02:35 2015 +0200]"},
{"name" : "ccf3951b5fa7dde2c5aa08eb192024c740ec9697", "time" : 1427903678, "y" : 2105, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix refPurity: was using wrong function to detect if term is stable.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Wed Apr 1 17:54:38 2015 +0200]"},
{"name" : "8b704feb57a14b04557b81f5274d5f06c5b2a09c", "time" : 1427903678, "y" : 2105, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix wrong owning context during adaptation inside forwarders.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Wed Apr 1 17:54:38 2015 +0200]"},
{"name" : "a21e106a24268dbf3d02eddc27bb262420bda7df", "time" : 1427833093, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #446 from dotty-staging/tailrec-bring-to-group\n\nBringing tailrec back to group, cannot triger previous failure.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Tue Mar 31 22:18:13 2015 +0200]"},
{"name" : "17ccd8bf72616ff3d28cbe84e73b14516b8a2757", "time" : 1427826534, "y" : 2108, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Erasure: actually emit bridges\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Tue Mar 31 20:28:54 2015 +0200]"},
{"name" : "3391a53cb8a8fb8740414e4bb88a5fee8ff11684", "time" : 1427751647, "y" : 2109, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Bringing tailrec back to group: cannot trigger failure.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Mar 30 23:40:47 2015 +0200]"},
{"name" : "34f165080530d0b4817235b161f89e10d6763da4", "time" : 1427727849, "y" : 2099, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Both module and class being unpickled need to register links.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Mar 30 17:04:09 2015 +0200]"},
{"name" : "14e0f720534397429444fb88d1125e19323dfa4f", "time" : 1427727763, "y" : 2099, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix #443, set moduleClass of class being lazily unpickled.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Mar 30 17:02:43 2015 +0200]"},
{"name" : "fdc92a6ca043bd97d2e27863599d893df94268e1", "time" : 1427727703, "y" : 2099, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Allow to enter private symbols into Frozen scopes.\n\nAs private symbols aren't inherited, this does not break caching.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Mar 30 17:01:43 2015 +0200]"},
{"name" : "e907c78b134066260e68cc25f5adce8338f59ef4", "time" : 1427727667, "y" : 2099, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "companionModule needs to return ModuleVal for Module.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Mar 30 17:01:07 2015 +0200]"},
{"name" : "84602a32172df75f5fea0d9d03df801fff768052", "time" : 1427727607, "y" : 2099, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Do not synthesizeCompanionMethod twice, and do not rewrite the existing symbol.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Mar 30 17:00:07 2015 +0200]"},
{"name" : "2362081bbc80a4edbec954b07698a0729c334947", "time" : 1427721346, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #432 from dotty-staging/patmat-options\n\nFix #431: Options make 2 steps of decoding instead of one", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon Mar 30 15:15:46 2015 +0200]"},
{"name" : "042c2f07a3cbe7e5f80dea282849dc396bdc37e0", "time" : 1427716438, "y" : 2099, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix #442.\nThere's a non-standard interaction between explicitOuter and Pattern matcher,\n as patmat can request outer symbols to be available earlier.\nNote that this fix makes code between pattern matcher & explicitOuter non-Ycheck-able,\n as patmat adds reference to future symbol.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Mar 30 13:53:58 2015 +0200]"},
{"name" : "cdbe81e95cbf5e67fe4289b450440b63147f68ab", "time" : 1427714814, "y" : 2099, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix #440: entering symbol into scope also enters it into future scopes.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Mar 30 13:26:54 2015 +0200]"},
{"name" : "b653007ed0f30298b44dcc67bf032c1d2d58bcaf", "time" : 1427714780, "y" : 2099, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Workaround #440 in FirstTransform.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Mar 30 13:26:20 2015 +0200]"},
{"name" : "57027f7e04b582d47c0727661cdfd5a1c1ba828e", "time" : 1427714660, "y" : 2099, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix companion_class_method name\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Mar 30 13:24:20 2015 +0200]"},
{"name" : "dbb48c85e9960681e97888d18b717d5e23136889", "time" : 1427575031, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #441 from smarter/fix/applyOverloaded-non-init\n\nMake tpd#applyOverloaded work with methods other than <init>", "author" : "PersonIdent[odersky, odersky@gmail.com, Sat Mar 28 21:37:11 2015 +0100]"},
{"name" : "0432bb0a5a754fd51744403721b4eb043f4534d1", "time" : 1427573941, "y" : 2121, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make tpd#applyOverloaded work with methods other than <init>\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Sat Mar 28 21:19:01 2015 +0100]"},
{"name" : "f9910eba54741dc127577010b5728a70622a8c08", "time" : 1427571549, "y" : 2099, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Use methods to find companion modules\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Mar 28 20:39:09 2015 +0100]"},
{"name" : "595c3f6c50da97be3169fe59261ff999e1a70759", "time" : 1427571434, "y" : 2099, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make companion-module links in ClassfileParser\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Mar 28 20:37:14 2015 +0100]"},
{"name" : "f2221d09328d121e82c5c857d744544ebea35939", "time" : 1427571395, "y" : 2099, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make companion-module links in UnPickler\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Mar 28 20:36:35 2015 +0100]"},
{"name" : "7021570065a8932462a62265dd29a9ff01c9051a", "time" : 1427571293, "y" : 2099, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Guard against absent symbols in synthesizeCompanionMethod.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Mar 28 20:34:53 2015 +0100]"},
{"name" : "0cc73c67d69685fccdd0676fced0862b7ee5758f", "time" : 1427569725, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #438 from smarter/fix/viewExists\n\nImplicits#viewExists: return false after typer instead of AssertionError", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Sat Mar 28 20:08:45 2015 +0100]"},
{"name" : "a40df059737a1b523bfa811596f1fce051e07477", "time" : 1427496340, "y" : 2127, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Implicits#viewExists: return false after typer instead of AssertionError\n\nThis way, tpd#applyOverloaded can safely be used after typer. This issue\nwas encoutered while working on value classes, step 3 of SIP-15 contains\nthe following peephole optimization:\n  new C(e) == new C(f) => e == f\nWhich requires us to do overloading resolution.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Fri Mar 27 23:45:40 2015 +0100]"},
{"name" : "0a94d6e694703be747b5e3c72c5d903ecd6b3997", "time" : 1427390688, "y" : 2099, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Remove code duplication between Namer, ClassfileParser and UnPickler\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Mar 26 18:24:48 2015 +0100]"},
{"name" : "f40c49817962235f074174dd740c3668fe9ac03f", "time" : 1427383237, "y" : 2099, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix error message in typer\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Mar 26 16:20:37 2015 +0100]"},
{"name" : "5e09d2dda5a79cfe2e34c9c675fc5db669cb705c", "time" : 1427383237, "y" : 2099, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "#435 Fix conflict between package object and case class with same name\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Mar 26 16:20:37 2015 +0100]"},
{"name" : "880a6f5e10fed1be7df3c4878896fa90e591bb23", "time" : 1427383237, "y" : 2099, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add late companion symbols in firstTransform\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Mar 26 16:20:37 2015 +0100]"},
{"name" : "7baead9f9644bffe51a5c6e884cd6c516205fbe2", "time" : 1427383233, "y" : 2099, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add companion link symbols early only if companion actually exists\n\nOtherwise we'll trigger early creation of companions that could shadow something.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Mar 26 16:20:33 2015 +0100]"},
{"name" : "25af81475b3e4f387caa67194409e9b595a3b2ea", "time" : 1427380853, "y" : 2099, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix installAfter for a Denotation List of single denotation\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Mar 26 15:40:53 2015 +0100]"},
{"name" : "c5d8cba234ace613f5b064fc3cc58c8e547e45ce", "time" : 1427359220, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #425 from smarter/fix/isNullableClass\n\nFix isNullableClass to also work after Erasure", "author" : "PersonIdent[odersky, odersky@gmail.com, Thu Mar 26 09:40:20 2015 +0100]"},
{"name" : "b8807ca85d08d56afd4f44143481608dae32db34", "time" : 1427311756, "y" : 2135, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix #431: Options make 2 steps of decoding instead of one\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 25 20:29:16 2015 +0100]"},
{"name" : "ed1de3a26e00e5b7f4113ce32fa00c2f992deafa", "time" : 1427306927, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #428 from dotty-staging/trait-constructors\n\nNew phase: trait constructors", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed Mar 25 19:08:47 2015 +0100]"},
{"name" : "c22d468e0cf10010c798b1a7d991925a5091700c", "time" : 1427306916, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #430 from dotty-staging/fix/#429-enclosingMethod\n\nFix #429", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed Mar 25 19:08:36 2015 +0100]"},
{"name" : "9b6e0ab897d1bc9cae1702fa439f17a2715d4dcc", "time" : 1427306489, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #426 from smarter/fix/positionCoord\n\nMake implicit conversion from Position to Coord work for NoPosition", "author" : "PersonIdent[odersky, odersky@gmail.com, Wed Mar 25 19:01:29 2015 +0100]"},
{"name" : "d01ecb733dc8990d1f5d432e1fb9eb488bb7e3b4", "time" : 1427304118, "y" : 2099, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add companion class methods for files read from scala & java\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 25 18:21:58 2015 +0100]"},
{"name" : "13a05d5119e33333000f969817434629443d6bb2", "time" : 1427304074, "y" : 2099, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "#353 use methods to find companion class\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 25 18:21:14 2015 +0100]"},
{"name" : "261c87b5859882cd39f3427c59e97d2841937010", "time" : 1427303919, "y" : 2141, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix #429\n\nenclosingMethod should not crash on NoDenotation.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Mar 25 18:18:39 2015 +0100]"},
{"name" : "77997f30b28b3588967052647ad3d5164a585f40", "time" : 1427287193, "y" : 2142, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix failing tets: test instantiated abstract traits.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 25 13:39:53 2015 +0100]"},
{"name" : "e6fc268ae010bb664a0b7efa0a32922fb410e415", "time" : 1427285424, "y" : 2142, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "New phase trait constructors.\n\nRenames constructors in traits so that backend will call them with invokeInterface, instead of invokeSpecial\n Also makes sure that renamed constructor bodies conforms to type of method\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 25 13:10:24 2015 +0100]"},
{"name" : "01fae5d041201e2d8e03dff8c5b9f68c96dad1f5", "time" : 1427285303, "y" : 2142, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Emit abstract flag for non-abstract traits\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 25 13:08:23 2015 +0100]"},
{"name" : "e3191b73ddc50083b66bb143e7dbcf728cf230ad", "time" : 1427285279, "y" : 2142, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Style fixes in InterceptedMethods\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 25 13:07:59 2015 +0100]"},
{"name" : "ee29f47806858766b4010fb254df99cd0bb14d4d", "time" : 1427285258, "y" : 2142, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make CollectEntryPoints stable against type aliases.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 25 13:07:38 2015 +0100]"},
{"name" : "658eb4ba1a080379e7ec7a0217cd9f0b7332c1a2", "time" : 1427244697, "y" : 2147, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make implicit conversion from Position to Coord work for NoPosition\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Wed Mar 25 01:51:37 2015 +0100]"},
{"name" : "d058f98ddc5790b5b3050f6dd10d5d4c84d4eda6", "time" : 1427149434, "y" : 2148, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix isNullableClass to also work after Erasure\n\nIncidentally this means that:\n  val d = null.asInstanceOf[Double]\nis now correctly transformed to:\n  val d = scala.Double.unbox(null)\nPreviously it was translated to:\n  val d = null: Double\nWhich is wrong and fails in the backend.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Mon Mar 23 23:23:54 2015 +0100]"},
{"name" : "c6792189ff2075ac8b90efc7fad42aafd6a7b67e", "time" : 1427131842, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #423 from dotty-staging/silence-val-clashes\n\nRemove check for duplicates in module val names.", "author" : "PersonIdent[odersky, odersky@gmail.com, Mon Mar 23 18:30:42 2015 +0100]"},
{"name" : "c9ed974acfe142d0017a306b15508838cbad0d92", "time" : 1427113268, "y" : 2150, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Remove check for duplicates in module val names.\n\nThey are not lifted and they are allowed.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Mar 23 13:21:08 2015 +0100]"},
{"name" : "1281357f49c85cf8a0b78e9e334d9ff1affda6be", "time" : 1427111056, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #422 from smarter/fix/InterceptedMethods-equals\n\nInterceptedMethods: enable interception of == and !=", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon Mar 23 12:44:16 2015 +0100]"},
{"name" : "38e41951e45a8eac39fb13980a5bc1ac3effcd31", "time" : 1427067329, "y" : 2152, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "InterceptedMethods: enable interception of == and !=\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Mon Mar 23 00:35:29 2015 +0100]"},
{"name" : "93cf7c433f4d5ec2481b2fecb78162b69018eacf", "time" : 1427046253, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #421 from dotty-staging/fix/derivedValueClass-v2\n\nHave derivedValueClass run at initial stage", "author" : "PersonIdent[odersky, odersky@gmail.com, Sun Mar 22 18:44:13 2015 +0100]"},
{"name" : "f71a6da42c6816916fd2c1eee3e8b6075018ce16", "time" : 1427020310, "y" : 2154, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Have derivedValueClass run at initial stage\n\nFixes #412, by calling derivesFrom in isDerivedValueClass\nat initial phase. Rewrite of 789dc0c070bde6ce8634aa89e73e31ec1233a6f8\nby @smarter. Does the same thing in Symbol#isDerivedValueClass.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Mar 22 11:31:50 2015 +0100]"},
{"name" : "bee42c9df96ef3664a27796b6eecdfbc910bd108", "time" : 1426963314, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #420 from dotty-staging/fix/restoreScopes-v2\n\nInvalidate companions of classes lifted by FlatMap", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Sat Mar 21 19:41:54 2015 +0100]"},
{"name" : "7b6964ae3408d2a4676d7d5af884238b44071fba", "time" : 1426959401, "y" : 2156, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Invalidate companions of classes lifted by FlatMap\n\nRestoreScopes enters classes lifted by FlatMap into the\nenclosing package scope. It should also invalidate any companions\nbecause otherwise we risk linking up a new class with a previously\ngenerated companion which exists only as a Java classfile.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Mar 21 18:36:41 2015 +0100]"},
{"name" : "f4400775054c97c90a62df940195dcaa46f7adcd", "time" : 1426723564, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #417 from dotty-staging/ycheck-non-existing-symbols\n\nFix Ycheck printing a lot of errors about symbols that do not actually exist.", "author" : "PersonIdent[odersky, odersky@gmail.com, Thu Mar 19 01:06:04 2015 +0100]"},
{"name" : "d4b16eafa16dac2a80bec2ad1c4d2cf6bb984946", "time" : 1426721835, "y" : 2158, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix Ycheck printing a lot of error about symbols that don't actually exist.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Mar 19 00:37:15 2015 +0100]"},
{"name" : "559701471e8c6e8a6bd18b141008dbf31c87ae9b", "time" : 1426719531, "y" : 2094, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Review of #394\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 23:58:51 2015 +0100]"},
{"name" : "af6f37109e439d8accd66a30546e3d8cf626085b", "time" : 1426719526, "y" : 2094, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Populate addresses of symbols after pickler\n\nTo allow other phases to generate their info.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 23:58:46 2015 +0100]"},
{"name" : "0d1396266c15c9bc88ea922a256a9c3709f33e7e", "time" : 1426719399, "y" : 2094, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Update address maps of symbols after compaction\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 23:56:39 2015 +0100]"},
{"name" : "fbad1dc0b7b09c9fa4d03761734eee49d0145f3c", "time" : 1426711991, "y" : 2094, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Export pickler and pickled addresses so that other phases can pickle their info\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 21:53:11 2015 +0100]"},
{"name" : "c413eec7d5a11afe74dc2513ab2b2da71809b116", "time" : 1426704210, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #394 from dotty-staging/add/unpickling\n\nAdd/unpickling", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed Mar 18 19:43:30 2015 +0100]"},
{"name" : "f5d2bbd4750156bf324cde0074c9040baa97eebd", "time" : 1426700125, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #414 from dotty-staging/ycheck-returns\n\nYCheck that returned value conforms to type of the method", "author" : "PersonIdent[odersky, odersky@gmail.com, Wed Mar 18 18:35:25 2015 +0100]"},
{"name" : "c511f89062adfbdbdb2fe6f9a84e3b40b0d10429", "time" : 1426698587, "y" : 2165, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Erasure postcondition: check that returned value conforms to method result type\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 18:09:47 2015 +0100]"},
{"name" : "0afbd6ce7356ff08f5d27379c71d2e759fb9602f", "time" : 1426674267, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixing conflicts between #361 and #394\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:24:27 2015 +0100]"},
{"name" : "8a991550c4da0a8e837f254580e4936f7d666af3", "time" : 1426673926, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Bringing back fix to TreeMap.transform(ValDef) that was lost during rebase\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:18:46 2015 +0100]"},
{"name" : "1e0856ba575d17df4d2eded5662dde26a5b750e0", "time" : 1426673798, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Tweaks to pickle format\n\nMODULE -> OBJECT, as suggested by Simon.\nHeader is 4 hex digits, not 8 chars.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:16:38 2015 +0100]"},
{"name" : "f7f10c856a5e3ae0f6172e2bb9cac832bb17c592", "time" : 1426673797, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Added missing patch to DefaultInit drop.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:16:37 2015 +0100]"},
{"name" : "cc65c3a4b3193253e894a7b9643e8ee1d246fca5", "time" : 1426673797, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Simplifications to pickled flags\n\n1) Avoiud serializing redunant flags that come with modules\n2) Drop DEFAULTinit flag - it's not used.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:16:37 2015 +0100]"},
{"name" : "cb8667654ede78bd99b695196dd99a0ec6c9bfa6", "time" : 1426673797, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Drop environment from pickled closures.\n\nIt is always empty anyway. Side benefit: We can get rid of NOTYPE, too.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:16:37 2015 +0100]"},
{"name" : "79e22287def4b5bf04e7ecd02507b9e72a4134f5", "time" : 1426673797, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Change to PickleFormat\n\nRemove 3rd argument of BIND types. It can be reconstructed\non unpickling.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:16:37 2015 +0100]"},
{"name" : "8c6339b42d665d2260c56a8050c4b802fdd0576d", "time" : 1426673797, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add support of Shadowed names to TastyPrinter\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:16:37 2015 +0100]"},
{"name" : "83e7b239038282d523f275368d09956f6cc63177", "time" : 1426673797, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Simplifications to TASTy format\n\n1) Drop the length field of BYNAMEparam\n2) Eliminate EMPTYTREE\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:16:37 2015 +0100]"},
{"name" : "5962a931c83622ce065bc1ce9add049ade89bfcf", "time" : 1426673797, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Pickling test reorg\n\nMove pickling tests into separate top-level test directory.\nThat way they are not needlessly pos-tested before.\n\nAlso, disable core tests for now - after rebasing we get a stale symbol error.\nNeed to investigate that.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:16:37 2015 +0100]"},
{"name" : "19bfc0c6c9be9c4c3fdca55480e01e980a493b42", "time" : 1426673797, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Remove Throw from pickling\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:16:37 2015 +0100]"},
{"name" : "90b05b4554f888f458db886f2644445aedadc7fa", "time" : 1426673796, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Two more tweaks to make pickling invariant under printing\n\n1) DefDefs with implicit method types generate implicit parameters\n2) Super accessors are inserted after class parameters.\n\nWith these changes files in core also print the same after pickling,\nwith the exception of Types and TypeOps which have some spurious differences:\nTypes are equal but appear in more simplified form after pickling.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:16:36 2015 +0100]"},
{"name" : "26babc32bcef74aec1526c10a2040de0740c59ba", "time" : 1426673796, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Homogenize printing of super calls.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:16:36 2015 +0100]"},
{"name" : "31a90b4e882dcbae333975d72f50820afbcf5c95", "time" : 1426673796, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Homogenize package ids and literals\n\nThe unpickled term in a package id is different from the original but the\ntype is the same.\n\nIn a literal prefer constants in the types over thsoe in the terms.\n\nWith this change, we get identical typed tree output also for core/pickled.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:16:36 2015 +0100]"},
{"name" : "bb5762a056c3d2ee224cea0f01726d8900745366", "time" : 1426673748, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Further harmonization between typing and unpickling\n\n1) Prefixes in selections are widened if unstable\n2) DefDefs get Method flag set\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:15:48 2015 +0100]"},
{"name" : "53a123064ffe437edc3d9e2f17530d3ce4e2b064", "time" : 1426673748, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Drop choice of separator in expanded name.\n\nIt's not used and is too low-level anyway. Expanded names should\nbe a semantic concept, the choice of separator is irrelevant.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:15:48 2015 +0100]"},
{"name" : "d572ec04a29d4bb70dccd5b01e205233d496d24d", "time" : 1426673748, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Pickle signatures using qualified names.\n\nWould like to do use more semantic names in pickled file, but it's hard without\nhaving semantic names to start with.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:15:48 2015 +0100]"},
{"name" : "78ef6bbe9da970afa0af9d086c305eb36db56b8b", "time" : 1426673748, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Harmonize treatment of simplified between typer and unpickler\n\nWe got some spurious differences in the types in TemplateParents\nbecause simplification was done in Typer but not in Unpickler.\n\nWith the change we get perfect matches for all files in pickleOK\nalso if we print their types.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:15:48 2015 +0100]"},
{"name" : "3d987dfa4904d10878482f2211a0aa3af19cae6f", "time" : 1426673747, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix unpickling parameter aliases\n\nThe type of a parameter alias is an ExprType, was the underlying type.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:15:47 2015 +0100]"},
{"name" : "5a43cb120f33328fdc755488684240dbd517283f", "time" : 1426673747, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Pickle shadowed names\n\nShadowed names in types need to be pickled and treated on\nunpickling.\n\nWe choose to make Shadowed a separate TastyName class, to avoid\nthe ad-hoc name-mangling in current dotc. When names are redone\nShadowed will also become a special class in the compiler proper.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:15:47 2015 +0100]"},
{"name" : "f1ffa4c0a0a32057795c4395aecd990c6ae057e2", "time" : 1426673747, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Rename inheritedName -> shadowedName\n\nThe new name is more consistent with the usage (e.g. NamedType#shadowed).\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:15:47 2015 +0100]"},
{"name" : "a7a8563b8c6e63f76826164495bb4842b29fdf87", "time" : 1426673747, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Show compilation unit which failed pickling in tests.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:15:47 2015 +0100]"},
{"name" : "3bcab098b641c7dfcf9f8788aacf942c06b52764", "time" : 1426673747, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix to pickling literals\n\nNeed to pickle the type, not the constant stored in the literal,\nbecause constant folding might have adapted the type, but leaves\nthe constant value unchanged. An example is in pickleOK/unions.scala\nwhere a float 1.0f was adapted to Double, so should be pickled as\na Double 1.0.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:15:47 2015 +0100]"},
{"name" : "1cd7d0082c93cead1749bcda51fd3b311fb45444", "time" : 1426673747, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add pickling tests\n\nSome pickling tests are now run on every check in.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:15:47 2015 +0100]"},
{"name" : "ac47d1c41a4a1a865ec3b9f1c9dee08f19018c57", "time" : 1426673656, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Re-org of pickling framework to enter before read\n\nNeed to enter all top-level symbols before reading any of them, in order\nto avoid stale symbols.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:16 2015 +0100]"},
{"name" : "2863af2b89af3ac34ebe9374d68b4018fe82edfd", "time" : 1426673656, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Avoid print-types being on by default in testing\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:16 2015 +0100]"},
{"name" : "52c586f10a0e60deffb3a48f2a3e23f268e1dfb1", "time" : 1426673656, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Refinements to pickling testing framework\n\nWe now unpickle all files first, and print afterwards.\nThis helps in avoiding stale symbols that happen otherwise\nwhen we print a reference to a symbol that has not yet been unpickled.\nBut it's not yet enough.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:16 2015 +0100]"},
{"name" : "a4e1ba7da36cd4447edb46338e4c5b7cd7931c57", "time" : 1426673656, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Don't print implicit for classes in homogenized view\n\nImplicits get pickled only for terms. So implicit class\nprints differently when unpickled.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:16 2015 +0100]"},
{"name" : "655555ed613cdd9803e6ada87abcb1b6f09c827d", "time" : 1426673656, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Avoid treating setters as class parameters when pickling\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:16 2015 +0100]"},
{"name" : "8e57bc60978e025b8ef5443a19d995c211ea4661", "time" : 1426673656, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Harmonize parameterless constructors between unpickling and namer\n\nShould get an () parameter list in both cases. (In fact, that's pretty annoying,\nit woul be better if we did not have this restriction. But in any case it has to\nbe the same for Namer and Unpickler.)\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:16 2015 +0100]"},
{"name" : "8d370d4a3d6f6b4ad7a658e8d5afac0c771eb968", "time" : 1426673655, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Deal gracefully with out-of-scope references wehn unpickling\n\nOut-of scope references are evil but do arise. Dotc currently produces them\nin two cases (t1957.scala and Typer.scala) because it does not correctly\nhygenize dependent methods used as closurs. I beleive scalac wil generate them\nin more instances.\n\nThe changes can produce dependent method types used in closures. Essentially the\nproblem was that the depndency was not recognized in Typers when the closure\nwas first created, because it badly interfered with type inference. But when unpickling\nthe same closure the dependency is recognized. It's too late to fail now, we better\ndeal with this gracefully. That's why there is now a mode bit \"AllowDependentFunctions\"\nwhich should be turned on only for unpickling, which reconstitutes dependent functions\nas closures without complaining.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:15 2015 +0100]"},
{"name" : "aa5608378d8f3f542c83b026c199b522f52e480a", "time" : 1426673655, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Revert of interpolation decision when generating APPLIEDTYPEs\n\nThe previous setting did not generate same trees for Typer.scala\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:15 2015 +0100]"},
{"name" : "073449ef52b344e00cf1b19b55676c6a6a4452a6", "time" : 1426673655, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Systematic treatement of homogenized views in printing\n\nA homogenized view makes sure that there are no spurious\ndifferences between trees before and after pickling.\n\nCurrently there are two cases where homogenized is different from\nstandard view:\n\n1) Backquoted idents are not printed in backticks\n2) Instantiated TypeVars so not get an apostroph.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:15 2015 +0100]"},
{"name" : "c6bba9b9b63da5b28fd70409366c191cec5d2acb", "time" : 1426673655, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "More fixes to unpickling\n\n - treated nested Matches correctly\n - treat nested packages correctly\n - SELECT always needs to select with sig\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:15 2015 +0100]"},
{"name" : "4c80f8949c816f944ff20f9fe07b842eb6164554", "time" : 1426673655, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Tweak to printing Typevars\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:15 2015 +0100]"},
{"name" : "35d1160cd65d21076b1f640624663ad7b35f9c56", "time" : 1426673655, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "More tests\n\nBoth some long overdue pos tests and more pickleOK tests\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:15 2015 +0100]"},
{"name" : "3823f29c05cb071cd3a595751543021a4f4cf382", "time" : 1426673655, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix tricky problem with re-establishing denotations of selftypes\n\nSelftypes can be nastily recursive as this example of extmethods shows:\n\n     class T[A, This <: That1[A]] extends AnyVal { self: This => ...\n\nThe problem, of course, is that This is really `this.This` and to determine\nwhat that is we look up the self type which leads us right back to where we were.\nWe fix the problem by special casing references to class members in self-types.\nThese are always written symbolically, and compelmentary logic in unpickling\nmakes sure we do not need to compute the denotation of such members, but\ninstead take the denotation directly from the symbol.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:15 2015 +0100]"},
{"name" : "cf79474621e2272e3cdc1c670a39bb22232f90cc", "time" : 1426673655, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix TastyReader#readLongInt\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:15 2015 +0100]"},
{"name" : "321563940dee1716c19600efd57acb9ed83a7687", "time" : 1426673655, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Compute PureInterface flag after pickling.\n\nElimLocals becomes a slightly less trivial transform: NormalizeFlags.\nIt also computes PureInterface flag, thus relieving Namer and Unpickler\nfrom doing the same in two different ways. Besides, the computation in\nNamer/TreeInfo was flawed because it did not take into account that\nnested non-static classes are not allowed in an interface (only static\nclasses are, but these would not be members of the interface in the Scala\nsense).\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:15 2015 +0100]"},
{"name" : "7fd242f2f1b1d2f536e73ec0fdb92a34b27b2a89", "time" : 1426673654, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "More fixes to pickling\n\n - treat applied higher-kinded types specially when pickling (\n   drop #Apply projection)\n - pickle the original self info sintead of the processed self type\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:14 2015 +0100]"},
{"name" : "a4b2a67fa5d58f7dbd34b8876e8a87e309524e22", "time" : 1426673654, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Changes to Tasty format\n\nUse fewer length fields in type encodings.\n\n- create new category of tags that take exactly one argument tree.\n- avoid using length where a tag fits in one of theopther categories.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:14 2015 +0100]"},
{"name" : "96fbd7bfe252026f59d1f5e8aa33f2d8fae65769", "time" : 1426673654, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Allow several units to be pickle-tested at once.\n\nAlso: Make Pickler a plain phase; it is neither a macro transformer nor\na miniphase.\n\nAdd tests to pickleOK that are known to be stable under pickling/unpicking\nby comparing tree representations via show.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:14 2015 +0100]"},
{"name" : "e926f3167f8d9a1407f131abcb33a02b07477597", "time" : 1426673654, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Various fixes to PickleFormat, pickler and unpickler\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:14 2015 +0100]"},
{"name" : "9d71cb6330986d1ff1ab14f163e43fe190d480fb", "time" : 1426673654, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Avoid annotations being dropped by stripTypeVar\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:14 2015 +0100]"},
{"name" : "de11f332879bbabac6fc997b5c08e013f487742e", "time" : 1426673654, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Tweaks to printing\n\nTo avoid spurious differences and allow all flags in modifiers to be printed.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:14 2015 +0100]"},
{"name" : "fe48a0c4d84aa6f5b4b33cc8db6b10fe03f9a444", "time" : 1426673654, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Change handling of roots when unpickling\n\nOnly roots should have their infos overwritten; other symbols in the\nroot scope should be replaced by same-named symbols in the Tasty file.\nIf we do not do this, we end up with inconsistent caches in root symbols.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:14 2015 +0100]"},
{"name" : "60220781967de8c7efafe1e1b6ed09ae482a8582", "time" : 1426673654, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Keeping track of unpickling definition order in Pickler.\n\nThe Unpickler visits nodes in a certain order and (so far) expects to see\ndefinitions before uses. This commit makes sure that the Unpickler generates\ndefinitions in an order that matches the pickler's behavior. Every definition\nshould be \"pre-registered\" before it can be used. This still allows for mutual\nrecursion between symbols because preregistering enters all symbols of a scope\nin bulk before generating any references to these symbols.\n\nIt would be nice if this was the end of the story, but unfortunately that's not the case.\nIt turned out that dotc produced references that were not legal according to the\nimplemented model, and that are also not legal in the formal type system. Each of these\nviolations referred to a symbol outside its scope. There were two sources:\n\n1) Pattern-bound variables were retained in the type of a case block and, consequently,\nthe type of the enclosing match. This has been fixed by a previous commit a0f8ec21c9ce5381bea780e7be89286653fc676e.\n\n2) Dependent anonymous functions led to (illegal) dependent closures with references\nto their parameters leaking out in the environment. This has been mostly fixed by the previous commits,\nin particular 1c70842036b083652c3eeab83aad0b2490674bfe. But there are still two problems remaining, see:\n89c8bd8a1eb9fb3f0f09f25bedb68de1ef2e2ae8.\n\nWe might fix the two problems. But it's inconceivable to me that scalac could also\nproduce only \"hygienic\" trees that do not have escaping references. There are too many situations\nwhere we know this is not true (existential skolems, for a start).\n\nSo we choose to flag escaping variables in logs instead of treating them as errors, and to deal with the\nsituation in the Unpickler.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:14 2015 +0100]"},
{"name" : "b0d73807db5e441badd48c189ef2bc35771021e7", "time" : 1426673654, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Better tracking of unhygienic closure types\n\nWe have two unhygienic closures left - one in t1957.scala the other in Typer.scala.\nThis commit leaves some printlns that can be uncommented to get more info on these.\nIt would be better to fix them but I am running out of time to do so. Maybe someone\nelse can pick up with the info this commit allows to recover. To find out more,\ngo to t1957.scala and read the comment.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:14 2015 +0100]"},
{"name" : "6220d5c0a31d513cfcb28dba1df14176d527201d", "time" : 1426673653, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Better tracking of unhygienic closure types\n\nWe have two unhygienic closures left - one in t1957.scala the other in Typer.scala.\nThis commit leaves some printlns that can be uncommented to get more info on these.\nIt would be better to fix them but I am running out of time to do so. Maybe someone\nelse can pick up with the info this commit allows to recover.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:13 2015 +0100]"},
{"name" : "6dc3d62d68d7135c055da9589456d27eee89de80", "time" : 1426673653, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Avoid dependent methods being closures.\n\nWe now make sure that a closure's result type does avoid\nreferences to parameter types.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:13 2015 +0100]"},
{"name" : "6801850859cfdd33431ed63618559a224b1227fb", "time" : 1426673653, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "More careful determination of MethodType#isDependent\n\nIf a result type is not fully defined (i.e. has type variables),\ndependency status depends on the instantiation of the variables.\nIn this case we now still ignore the variable but do not cache\nthe status for future uses.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:13 2015 +0100]"},
{"name" : "8f3e32781e9112e1567b9a5a78c52acd55b3506a", "time" : 1426673653, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Avoiding dependent method types in closures\n\nThe previous logic for avoiding dependent method types in closures had a hole.\nThe problem arose when the expected return type of a closure was a type variable.\nThen, the that type variable would be taken as the declared result type of the\nclosure without (at first) checking the body. The type variable would not yet\nbe bounded and therefore would not represent a dependent method type. Afterwards\nwhen typechecking the closure the type variable woul dbe bounded and instantiated.\nBut at that time, all checking and possibly avoiding of depenencies has already\nhappened.\n\nWe solve the problem by typing the body of a closure during Namer whenever the expected\ntype is not fully defined.\n\nDoing so uncovered a problem that anonymus function were seen as the target of returns\n(tehy shoul be skipped instead). Thsi problem is fixed by a patch to SymDenotations#isSourceMethod.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:13 2015 +0100]"},
{"name" : "fb72eaf1ebcdb4e562f98df239465421e862c42f", "time" : 1426673653, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix variance of type prefixes in TypeMap and TypeAccumulator\n\nAccording to the \"new\" interpretation of T#U as \\exists x: T. x.U,\nx.U is not a subtype of T#U. Hence variance in prefixes of named\ntypes should be 0.\n\nThere is one case where this leads to problems. (Typing failure in\nDesugar.scala, to be exact). This is when computing variances\nin local type inference. We solve this problem locally\nby overriding accumulator application to prefixes in the specific\nvariances accumulator. Because the \"variances\" accumulator is now\nirregular wrt to the rest of variance handling, we move it\nfrom Types to Inferencing, which is the only place where it is needed.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:13 2015 +0100]"},
{"name" : "2b4236e755ae3a7182dbffa3e633666bf1b32c8a", "time" : 1426673653, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix problems in avoid\n\nIt turned out that avoid does not always produce a supertype of\nthe original type, which makes the additions in \"ensureNoLocalRefs\"\ntype incorrect. This commit fixes the problems.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:13 2015 +0100]"},
{"name" : "7bd12db9dfad6b5fd28c87e369fa093158840bf7", "time" : 1426673653, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Avoid escaping pattern bound variables\n\n... by applying the same \"ensureNoLocalRefs\" logic we already apply\nto blocks. This change is necessitated by Pickling - escaping variables\nare not defined before being referenced. The change uncovered in turn\nproblems in type avoidance.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:13 2015 +0100]"},
{"name" : "9adaf253f3a15a8cad3c05bd6bbd75732a70fe3f", "time" : 1426673653, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Print templates again in sugared form.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:13 2015 +0100]"},
{"name" : "2009df26bd39093bf40ec76a1b422ff9598d1e75", "time" : 1426673653, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Pass the correct context down in tree accumulators.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:13 2015 +0100]"},
{"name" : "eabef5878959d0443fe5c54bce907b67f110a86c", "time" : 1426673652, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Tweaks to printing\n\n - when traversing a tree, we need to keep the context current so\n   that it always has the right owner. Otherwise recostructing lazy\n   trees will lead to failures in TypeAssigners.\n\n - also, some tweaks concerning how parameters are displayed.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:12 2015 +0100]"},
{"name" : "f2cc1a10a727c46de0147c15dd9c5dc83458703e", "time" : 1426673652, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Run unpickler tests in next run.\n\nWill get cross-talk ob cached symbols otherwise.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:12 2015 +0100]"},
{"name" : "a543ed10445f2d4d61a61cd333fa9273c3a32ea0", "time" : 1426673652, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Bugfixes in unpickling\n\n - better diagnostics, avoid try-finally-assert, because that masks errors.\n - handle paths as terms correctly.\n - need to set flags wholesale from pickling, not just add to them.\n - fix pickling of refined types and skolem types.\n - dealias type aliases representing parameter instantiations before pickling,\n   so that we do not refer to as-yet-undefined symbols.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:12 2015 +0100]"},
{"name" : "dd5be327395cb4a6380467e5e7c85cc0d7a5e70d", "time" : 1426673652, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix implicit problem in RefinedPrinter.\n\nThe implicit def was shadowed by a following import. Scalac did not detect the problem probably because\nthe import and the def were in the same scope. But selecting the member explicitly would have caused an error\nbecause the import came after the definition. So arguably this was in error, but scalac did not detect\nit correctly.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:12 2015 +0100]"},
{"name" : "42333cebbb7329a4488b7ebe1896ff2a723f4cb2", "time" : 1426673652, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Don't suppress ambiguous implicit notes.\n\nAmbiguous implicits notifcations for selection views were propagataed to adapt but\nthen dropped.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:12 2015 +0100]"},
{"name" : "62df23e4b75b1f57a4c110d7aac0e50a3a971074", "time" : 1426673652, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Align PickleFormat with doc spec\n\nNew version number: 0.04\n\nAlso removed dead code in pickler.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:12 2015 +0100]"},
{"name" : "60e520c73d20526f2cf21c90088480f0a971fbc3", "time" : 1426673652, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Pickle trait flag and compute PureInterface and NoInits in unpickler.\n\n1) Trait was missing, needs to be serialized.\n2) The other two flags are not serialized, need to be reconstituted on\nunpickling.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:12 2015 +0100]"},
{"name" : "a0c2d6c5ba6d190d183babb3941b3607b112b8fc", "time" : 1426673652, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Set NoInits also for non-trait classes\n\nThe flag seems useful also for plain classes. No reason to restrict to traits.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:12 2015 +0100]"},
{"name" : "e837105c7ed6aa96e1b4d37b46d17e735ce71acf", "time" : 1426673652, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Tweaks to printing\n\n1) Remove special treatment of PlainPrinter <module>.this.\n2) Always use symbol mods when a symbol is available.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:12 2015 +0100]"},
{"name" : "43a03c39a39b039c28e17485af39d14fea1e5600", "time" : 1426673651, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Added testing hooks for unpickler\n\nNew option -Ytest-pickler compares trees before and after pickling.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:11 2015 +0100]"},
{"name" : "471881d0d51460c93294e006982aa7022a627814", "time" : 1426673651, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Ensure that start position is <= end position in Parser\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:11 2015 +0100]"},
{"name" : "c669d08e84aa05fb8ee849fbc1ddb09502a76256", "time" : 1426673651, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Added pickling part of new scheme.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:11 2015 +0100]"},
{"name" : "66e9c7e74b9548c2f61d6ac7af7de791ee2113f0", "time" : 1426673651, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Finished new position unpickling code.\n\nPickling still has to be written.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:11 2015 +0100]"},
{"name" : "90696143b36f6ef68bf281a739dd3846908aec34", "time" : 1426673651, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Companion objects of abstract case classes are not functions.\n\nThey do not have a generated apply method, so cannot be functions.\nProblem was unvovered when changing the definition of LazyAnnotation.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:11 2015 +0100]"},
{"name" : "af65672ba1020a55c36ea332f86246254680ab43", "time" : 1426673651, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Bugfix: Take account of asSeenFrom in matchingDenotation\n\nWhen disambiguating overloaded alternatives in matchingSymbol we need\nto apply asSeenFrom before comparing signatures. Before this was not done,\nand led to a failure of determining the inherited result type of an\napply method in Checking, which in turn led to a type error.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:11 2015 +0100]"},
{"name" : "252ed1756d6875707e9c09a2b85be5e0f46124a8", "time" : 1426673651, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Bugfix: Avoid importing constructors\n\nWe got an ambiguous import error in PositionReader before.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:11 2015 +0100]"},
{"name" : "21f042ecaf136ce544ec899f42e70e2e1a1addf8", "time" : 1426673651, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Avoid capturing context in lazy trees\n\nLazy trees can live longer than runs, so it is important\nthat they capture as little as possible. In particular they\nshould not capture contexts.\n\nThis change led with a ripple through effect to many changes\nwhere operations now have to parameterzied with contexts, in\nparticular in what concerns tree folding.\n\nThe changes in turn uncovered some areas where dotc was\nincompatible with scalac, and flagged correct things as errors.\nThese will be fixed in the next commits.\n\nAnother small twist: EmptyTrees will not be read in delayed mode,\nso that one can check for lacking definitions without deserializing\nthe rhs.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:11 2015 +0100]"},
{"name" : "76bf36dd64c05fbbf6fd804983379c8c31f52c9d", "time" : 1426673650, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Handle ParsedTry nodes in RefinedPrinter\n\nUsed to print in raw form only.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:10 2015 +0100]"},
{"name" : "bfa5e46d4cddd4b544c77bcef577c837fd403aad", "time" : 1426673650, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Halfway to yet another scheme for handling positions\n\nThe previous attempt was very fragile, and did not play\nwell with lazy trees, despite best intentions. It did\nnot work correctly for normal trees, and it seemed anyeway\nvery hard to extend this to annotations.\n\nThe new scheme, as outlined in PicklerFormat, is\nsimpler and naturally handles lazy trees and annotations.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:10 2015 +0100]"},
{"name" : "1b301e9b8da1fc48b1720cccedafdb7cdb7058a4", "time" : 1426673650, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "New scheme for recording positions\n\nSingle traverser, also handles lazy trees.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:10 2015 +0100]"},
{"name" : "afeb331346d49e8fd0b47178365b3f95bf89b340", "time" : 1426673650, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Various fixes to unpickling\n\n1) Treatment of root symbols simplified. TODO: check for double reads\n2) Self defs no longer get symbols\n3) class symbols now get their proper ClassInfos.\n4) Some other smaller fixes\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:10 2015 +0100]"},
{"name" : "757f3d55e9fa64dca0c4b3fe086b86cc914607c6", "time" : 1426673650, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixed bugs related to Unpickling.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:10 2015 +0100]"},
{"name" : "adac8f7dc8eac450d9f997c44763ed24fa86a267", "time" : 1426673650, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Save pickled bytes in compilation unit\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:10 2015 +0100]"},
{"name" : "5d09a0cea088a193f7e917cbc03187d5b6b7a795", "time" : 1426673650, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Have pkg intsead of static external references\n\nStatic does not tell us whether to start the search it in empty package\nor in root package.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:10 2015 +0100]"},
{"name" : "aebc626de6fa762dcd30fd78d0cc2cf3e5a983d4", "time" : 1426673650, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "First version of unpickler for Positions\n\nRefactored unpickling, splitting into several files.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:10 2015 +0100]"},
{"name" : "8800adb54f3ac279a2006ed024b40241a6f74219", "time" : 1426673650, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix implementation of readEnd\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:10 2015 +0100]"},
{"name" : "92976ded1ad1bd666810e77b246bff31b1a46935", "time" : 1426673649, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Refactor traversals to be in Edge instead of PositionPickler.\n\nWill be used also for unpickling of positions.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:09 2015 +0100]"},
{"name" : "499aeaf70d4126e673698af35b155f826f78f9a2", "time" : 1426673649, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add hooks for unpickling positions to trees.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:09 2015 +0100]"},
{"name" : "f16b12c3a58bdd692089c23288a45a80f14332ab", "time" : 1426673649, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "First version of position pickler.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:09 2015 +0100]"},
{"name" : "8fea2ef8368dc1bf82bb8064dd17368c38bb2347", "time" : 1426673649, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Record pickled trees in a hashmap\n\nThe idea is that we want to use the mapping from tree to Addr\nin other sections, most immeditaely for positions, but it could\nbe others as well.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:09 2015 +0100]"},
{"name" : "4115edaa883f753b675373cbee4997e0cfb889e5", "time" : 1426673649, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "First version of Unpickler\n\nCaused several small changes to Tasty format.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:09 2015 +0100]"},
{"name" : "b32244b5b5e3a1209624966fce7073d2f5594f48", "time" : 1426673649, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add UUID to Tasty\n\nTasty files now always carry a random UUID.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:09 2015 +0100]"},
{"name" : "89c00f601678f58d0ddb424ffe680940f760eaeb", "time" : 1426673649, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add signed ints in Tasty format.\n\n - will be needed for position deltas\n - also simplify format in that negative constants\n   are no longer needed.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:09 2015 +0100]"},
{"name" : "1daa94f860e8b80624d6ab397e3673abb6cb4cfa", "time" : 1426673649, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Move more functionality from Namer proper to context ops.\n\nAim: re-use from Unpickler.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:09 2015 +0100]"},
{"name" : "64beb1138ac3f7258ec9a138fbbe26ae0bd19e1e", "time" : 1426673649, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Change order of fields in PickleFormat\n\nFor Nat/AST trees, have the Nat come first.\nThe main advantage is when unpickling SELECT.\nWe need to know when unpickling the qualifier\nwhether we are in a constructor call (to set\ninConstructor parameter of tpd.Super). We know\nthis only after having read the name in the\nSELECT.\n\nAlso: tweaks to Pickler.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:09 2015 +0100]"},
{"name" : "82f1ac6c326fc0a60b04b05e46c3e5e837249e64", "time" : 1426673648, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Polishings on TastyReader\n\nIn particular: Allow for Addr(0) to point to\nthe middle of the `bytes` array. Needed so that\nwe can read trees without copying the bytes representing\ntrees into a fresh array.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:08 2015 +0100]"},
{"name" : "30f08b095192435b080afe4b1734b8ce48039f84", "time" : 1426673648, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Changes to pickling annotations\n\nProblem is that we need to be strict in the annotation symbol\n(need to force at the latest when checking whether a definition\nhas some specific class of annotation), but should be lazy\nin the rest of the tree.\n\nThis is achieved by pickling annotations with a symbol and a full\ntree.\n\nAt the same time, Annotated trees can be ignored because they\nare eliminated by Typer. We only need AnnotatedTypes.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:08 2015 +0100]"},
{"name" : "ed986b5256a535a50fe3c6095fe7a93376edb0fc", "time" : 1426673648, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add INSUPERCALL flag to pickle format.\n\nReason: It is really hard to establish when a context is a\ninSuperCall context when unpickling trees. The unpickler does\nnot have the ability to look inside (untyped) trees, so  it is\ntricky/messy to detect a super.<init> or this.<init> Apply in a\nconstructor body.\n\nAlso: Always pickle template constructors.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:08 2015 +0100]"},
{"name" : "f922a46b09cd65a421f8a61eb1979e651a8e8110", "time" : 1426673648, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Moved part of computation of types of DefDefs from Namer to TypeOps\n\n... so that this can be re-used in the tree unpickler.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:08 2015 +0100]"},
{"name" : "5b63106448275d6cc4bb6822af33247c2521a63c", "time" : 1426673648, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make some tree fields lazy\n\nLazy fields are\n - the rhs field of a ValDef or DefDef\n - the body field of a Template\n\nThese can be instantiated with Lazy instances.\nThe scheme is such that lazy fields are completely\ntransparent for users of the Trees API.\n\nThe only downside is that the parameter used to initialize\na potentially lazy field has a weak type (now it's Any, with\nDotty it would be a union type of the form `T | Lazy[T]`.\nTherefore, the parameter cannot be recovered through pattern\nmatching.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:14:08 2015 +0100]"},
{"name" : "9262d475e648219eb9ef4410d91621cc5f1f17cc", "time" : 1426673466, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add auxiliary constructor for TastyPrinter\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:11:06 2015 +0100]"},
{"name" : "2031d7569bbec792aa1774adfdef794e5e6af92c", "time" : 1426673466, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Weaks to format\n\nBump version to 0.03. Harmonize doc comment and Google doc.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:11:06 2015 +0100]"},
{"name" : "c078ad338e5e2f10a8229f74b7141e636dba2700", "time" : 1426673466, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Tweaks in comments\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:11:06 2015 +0100]"},
{"name" : "93747cdb576d0a2cb17db1d392e1bdb56e8e6049", "time" : 1426673466, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Stop type inference from creating oprphans.\n\nA tweak in the answer to a fundamental question of inference:\nWhen should type variables be instantiated?\n\nExample: In a call\n\n     f [ TVar ] ( g() )\n\nA syntehsied type variable TVar can be instantiated as soon\nas the call is fully elaborated, but not before - in particular not\nwhen typing the nested call `g()`.\n\nThis is so far achieved by looking at the `owningTree` of a type variable\n(in the example it would be the call above) and instantiating only if the\ncurrent tree contains the owning tree. Problem is that this is fragile.\nIf in the meantime the tree was copied, say due to eta-expansion, the contains\ntest will fail. Now this is not a big deal, as long as we instantiate the type\nvariable eventually. But previously that was never done.\n\nWith the fix we now instantiate type variables also if we have fully elaborated\nthe definition that closest encloses the point where the type variable is created.\nThis is less fragile, as definitions can be compared using their symbols instead\nof looking at trees.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:11:06 2015 +0100]"},
{"name" : "32892db46e66b26e378f765b45983cdac3dec573", "time" : 1426673466, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Tightening of orphans tests.\n\nNeed to always follow TypeVariables, otherwise we will\nnot detect orphan parameters of uninstantiated type variables.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:11:06 2015 +0100]"},
{"name" : "b1cded37763b0b96b9a8881c2d06f85b4d49884e", "time" : 1426673466, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Change scheme of translating array creations new Array(...)\n\nThe previous scheme generated too many newGenericArray expressions because\nat the time newArray was called, the type arguments were not yet determined.\nFurthermore, the type variables somehow did not have the right positions,\nwhich caused them not to be interpolated and led to orphan PolyParams.\n\nThe new scheme converts the expression when the length parameter has been supplied\nand it fully determines the array type before converting.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:11:06 2015 +0100]"},
{"name" : "85e992293e3c48074da0bc0a00b11097d3ac9d25", "time" : 1426673465, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make Definitions#rootPackage a root.\n\nOtherwise it is not static, and pickling the symbol leads astray.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:11:05 2015 +0100]"},
{"name" : "0ed27cc87d1f080836b319f97cbf900c2ba2c234", "time" : 1426673465, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix serialization of Bind-defined types in type patterns.\n\nThese are now represented as BIND nodes in pickled types.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:11:05 2015 +0100]"},
{"name" : "5ae8b128eb3e694c3fbb83124371a9bbb9d698fe", "time" : 1426673460, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make pickling output printer-dependent.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:11:00 2015 +0100]"},
{"name" : "ecb758206e6fddcca66a8aad5e45c9cf62f183f6", "time" : 1426673460, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Turn on pickling.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:11:00 2015 +0100]"},
{"name" : "c28bf8dc6a9cdfba07875175562d1f6dbc9f785b", "time" : 1426673384, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Turn on full compression of Tasty tree buffers.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:09:44 2015 +0100]"},
{"name" : "1026672008b031991b292893fd562fa1c11c0e3a", "time" : 1426673383, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Changes to Tasty format:\n\n1) IDENT nodes if types are not termrefs. (otherwise we lose information)\n2) PRIVATEqualified and PROTECTDqualified always have a type argument\n\nAlso, Pickler guards against previously encountered errors:\n\n - orphan parameters\n - trying to pickle packages as internal symbols.\n\nPlus some small polishings.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:09:43 2015 +0100]"},
{"name" : "4f804782950d6efcd979df2dc60c2bcf9a04f115", "time" : 1426673383, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Eliminate raw numbers from Tasy format\n\nThey are an irregularity and don't buy us much. Might as well pickle these numbers as Nats/Longs.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:09:43 2015 +0100]"},
{"name" : "f9eaa3eebb7d98f9a4163d44d2a70fcd3522b645", "time" : 1426673383, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Avoid pickling for Java-parsed compilation units.\n\nTheir trees make no sense; can't be pickled.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:09:43 2015 +0100]"},
{"name" : "1c5f3b75f7e70e8608d6be442087857bd4a6b2cc", "time" : 1426673383, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add TASTY readers and printers for TASTy info.\n\nSo far printing is the only reader, ie. deserializer.\n\nNumerous bugfixes to make first tests work.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:09:43 2015 +0100]"},
{"name" : "41922c14bf1a45a3dcf7afca7719e0be84c2c29a", "time" : 1426673383, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Treat <root> as static\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:09:43 2015 +0100]"},
{"name" : "df404e51a41020e9385020f6ee123ff07fd4badc", "time" : 1426673383, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make bestFit work for partially filled arrays\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:09:43 2015 +0100]"},
{"name" : "0c755d211fcfeb7d19a3fe87d5513e97a3f47da1", "time" : 1426673383, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Allow up to 64 phases.\n\nDoubles maximal number of phases from 32 to 64. Needed because adding the pickling phase\nwould push us over the edge of 32 phases.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:09:43 2015 +0100]"},
{"name" : "340dc52a567de022c56acb1533c5772d21405f2a", "time" : 1426673383, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "First prototype of pickler.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:09:43 2015 +0100]"},
{"name" : "61cb51acaedbe603add8c4af9e390a27f8b33f09", "time" : 1426673383, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Disallow refinements of types or methods that do not appear in parent.\n\nWe planned this for a long time but never implemented it. Instead, we sometimes\nissued an erro in Splitter, namely if reflection would have been needed to access the\nmember. It turns out that some tests (e.g. neg/t625) fail -Ycheck (we knew that before\nand disabled) but also fail Pickling because they generate orhpan PolyParams. So rather\nthan patching this up it seems now is a good time to enforce the restriction for real.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:09:43 2015 +0100]"},
{"name" : "3f5d15defa7481da1b9d1f20e91569a340c71e8e", "time" : 1426673382, "y" : 2166, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix desugaring of refined types with \"&\"-parent.\n\nneed to generate more than one parent class.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 11:09:42 2015 +0100]"},
{"name" : "8cf176ae6c33015336b654a819e307110a505a76", "time" : 1426673125, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #361 from dotty-staging/fix/testLifted\n\nFix to testLifted", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed Mar 18 11:05:25 2015 +0100]"},
{"name" : "f089c08a28aa261fa992b9b4447cf59747bdd1f4", "time" : 1426672856, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #404 from dotty-staging/backend-merge\n\nFixes to erasure, backend, flatten, restorescopes,", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed Mar 18 11:00:56 2015 +0100]"},
{"name" : "b0022c51585ac68a4bd1048f4e17ee260610e46d", "time" : 1426672353, "y" : 2286, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Disable dotc_ast. It fails randomly\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 10:52:33 2015 +0100]"},
{"name" : "fd3b4e299816a55959c36652c2b664ff42458457", "time" : 1426672353, "y" : 2286, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix printing errors in ClassfileParser.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 10:52:33 2015 +0100]"},
{"name" : "584e9ea042c6d7b0faf6f674e1708ee79e255314", "time" : 1426672353, "y" : 2286, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Update tests to show current errors revealed by backend.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 10:52:33 2015 +0100]"},
{"name" : "f31d30cf9dd1cf06088b098629a1174e91d12a71", "time" : 1426672353, "y" : 2286, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix backend not emitting fields.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 10:52:33 2015 +0100]"},
{"name" : "cbc5ea2231925b19f95330c30cd84fdbbe8bbbe1", "time" : 1426672353, "y" : 2286, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Remove workaround for #348.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 10:52:33 2015 +0100]"},
{"name" : "0f9c3d7931aad86d1373ca31c98b71a2d758520e", "time" : 1426672353, "y" : 2286, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Handle inner classes in RestoreScopes\n\nThey need to be entered into their enclosing package scope, because\nflatten lifted them out to the toplevel.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 10:52:33 2015 +0100]"},
{"name" : "9795e90e81a4723fd896977eee80fa7cd2d28915", "time" : 1426672353, "y" : 2286, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Enabled genBCode for `doc_parsing`. Proceeding with `dotc_tranform`.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 10:52:33 2015 +0100]"},
{"name" : "fbf8f12105e985bca2f4c907433216b48acc6ce3", "time" : 1426672352, "y" : 2286, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix isCoDefinedWith to also work with non-existing symbols\n\nFixes tests when either symbol or companion object don't actually exist and one goes\nfrom non-existing one to an existing one.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 10:52:32 2015 +0100]"},
{"name" : "ab06529a54ab59923b78859f03848a377d3e873f", "time" : 1426672352, "y" : 2286, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "ClassfileParser.innerClasses - fix error message.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 10:52:32 2015 +0100]"},
{"name" : "80a3ebac0e585e50fc9d02e636f00308c5939eae", "time" : 1426672352, "y" : 2286, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix TreeMap transforming ValDef children twice\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 10:52:32 2015 +0100]"},
{"name" : "a226a3ffb176b1e43fd68f601f7c7cf0f3a93a4b", "time" : 1426672352, "y" : 2286, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add comment in Typer.typedReturn\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 10:52:32 2015 +0100]"},
{"name" : "8e3240b43a839506c71c8793f4d904c089918389", "time" : 1426672352, "y" : 2286, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Handle boxing inside labels, jump back to box.\n\nErasure inserts boxing and unboxing of label returned values, ignoring the fact that some labels do not return.\nNow this is taken into account also inside labels which refer labels themselves\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 18 10:52:32 2015 +0100]"},
{"name" : "1a1f878c8d899c646ff7bcc2a2675ebf810dbf24", "time" : 1426596820, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #378 from dotty-staging/ycheck-for-symbls\n\nCheck validity of symbols in Ycheck", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Tue Mar 17 13:53:40 2015 +0100]"},
{"name" : "3cde2496acc50e856c0f199f7966c79c96b17174", "time" : 1426593360, "y" : 2299, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "YCheck now checks symbols for validity.\n\nFor now check if symbol was already defined and if classes have a valid superclass.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Mar 17 12:56:00 2015 +0100]"},
{"name" : "c4fa153b34274dc93c9263fb77e70c98436cd7e2", "time" : 1426279269, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #407 from dotty-staging/fix/#400\n\nFix #400", "author" : "PersonIdent[odersky, odersky@gmail.com, Fri Mar 13 21:41:09 2015 +0100]"},
{"name" : "4d0971d901d6ed9039ac5df35d95018cc3cf158d", "time" : 1426276417, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #408 from dotty-staging/test/#390\n\nNew test for valueclasses", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri Mar 13 20:53:37 2015 +0100]"},
{"name" : "d34a511ab861f3d230a638d1ed22514526f0363b", "time" : 1426276404, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #409 from dotty-staging/add/strict\n\nadd/strict", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri Mar 13 20:53:24 2015 +0100]"},
{"name" : "a56bc34fb850a6dca40c4f8562f3cb2d5b69dcc7", "time" : 1426265103, "y" : 2303, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "add/strict\n\nAdd -strict option to  do some type checks that are encessary to ensure type soundness, but\nare stricter than what Scala 2.x enforces.\n\nThe first such test is the \"pattern cannot be uniquely instantiated\" problem where we reject a\nnon-variant case subclass of a covariant superclass in a pattern match. The error is now only\nissued in -struct mode, otherwise it will be a warning.\n\nWe might move more tests into the same category. This should help the transition.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Mar 13 17:45:03 2015 +0100]"},
{"name" : "591e1518d7928fdd88ea7593b19e73182a8619a6", "time" : 1426264498, "y" : 2304, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "New test for valueclasses\n\nRe-instantiated t2667.scala, which failed before because of issue #390.\n\nAlso changed order of tests in isDerivedValueClass, to make more disriminating test come first.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Mar 13 17:34:58 2015 +0100]"},
{"name" : "3e849296a8563a561f53c92b48bd720897694b63", "time" : 1426263547, "y" : 2305, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix #400\n\nIn a call-by-name arg, replace () => f.apply() with f only if f is pure.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Mar 13 17:19:07 2015 +0100]"},
{"name" : "0ee93122b9e367c08ed1d81c9cfc5919fc3a32af", "time" : 1426262170, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #390 from smarter/fix/isDerivedValueClass\n\n`AnyVal` is not a derived value class", "author" : "PersonIdent[odersky, odersky@gmail.com, Fri Mar 13 16:56:10 2015 +0100]"},
{"name" : "42b34056959878b9ec1a2acc9f7ec7a707adc623", "time" : 1426090223, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #405 from dotty-staging/fix/class-field-initialization\n\nFixes to class field initialization", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed Mar 11 17:10:23 2015 +0100]"},
{"name" : "72dd9ea1ccbb98ee2dc4bf080772e8d9f13f3d75", "time" : 1426087039, "y" : 2308, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixes to class field initialization\n\nClass fields were not initialized from constructor parameters before.\nThis is now fixed. The fix uncovered some problems with the treatement\nof outer parameters which are now also corrected.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Mar 11 16:17:19 2015 +0100]"},
{"name" : "ab24bcf84d64e5d6fa2201056f70fe38a3260cc1", "time" : 1426081386, "y" : 2286, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Workaround #371 module classes read from byte code have no syperclass\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 11 14:43:06 2015 +0100]"},
{"name" : "65dee79159daddd987eee0e5363d00d662e611e1", "time" : 1426081386, "y" : 2286, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Update version of scalac fork.\n\nIncludes fixed for emitting string concatenation if string originates from an array.\nEg `\"hello \" + Array(\"world\")(0)`\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 11 14:43:06 2015 +0100]"},
{"name" : "c1e014c6c7da71987f21ad0db76126261c893f4e", "time" : 1426081386, "y" : 2286, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix eliding of non-elidable prefix in TypeMap.andThen\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 11 14:43:06 2015 +0100]"},
{"name" : "17fd98840927b127cf9aab53d2939176103175c9", "time" : 1426081386, "y" : 2286, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Enable all pos tests for backend.\n\ncompiling dotty is stil WIP\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 11 14:43:06 2015 +0100]"},
{"name" : "aedeab9f49fbbf35ed6817e51420da4de449fd14", "time" : 1426081385, "y" : 2286, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Workaround #348, linkedClass is broken after flatten\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 11 14:43:05 2015 +0100]"},
{"name" : "d7c8d75246fd75d1cc03c1d39f7dd5518f215b47", "time" : 1426081385, "y" : 2286, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "New phase: ElimWildcardIdents.\n\nIdent('_') was reaching backend in rhs of body of initialiser methods.\nThis phase replaces those initialisers with default values of corresponding type.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 11 14:43:05 2015 +0100]"},
{"name" : "8195baf78b3305710174fca6f0e3ba58e60ca156", "time" : 1426010362, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #399 from smarter/fix/ctxReset\n\nCompiler#newRun: reset the context _before_ initializing a new run", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Tue Mar 10 18:59:22 2015 +0100]"},
{"name" : "fad8fdc0c5868a1e2415005cabe7c528c349f789", "time" : 1426004615, "y" : 2316, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Compiler#newRun: reset the context _before_ initializing a new run\n\nPreviously it was incorrectly done after the run was initialized, this\nfixes #391.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Tue Mar 10 17:23:35 2015 +0100]"},
{"name" : "41756e46e151bdd1917b9ff041bc1b3d4581b875", "time" : 1425994740, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #398 from dotty-staging/change/later-elimByName\n\nMove ElimByName as late as possible.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Tue Mar 10 14:39:00 2015 +0100]"},
{"name" : "8783026bc399929331a5ec5d24abbb91c27a73b0", "time" : 1425991161, "y" : 2318, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Move ElimByName as late as possible.\n\nElimByName might be merged with erasure, so we can alreayd move it\nas close a pssoble to it. Verified that it can't be moved beyong ResolevSuper,\nbut not why.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Mar 10 13:39:21 2015 +0100]"},
{"name" : "60312a11c23b5144adf0237cc7238e68296738e4", "time" : 1425671024, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #392 from namin/stealer-fold-reverse\n\nThe fold reverses the order of the typed strings.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri Mar 6 21:43:44 2015 +0200]"},
{"name" : "885457d4f1ee287fa67ba971deafffa3032b3a5e", "time" : 1425667669, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #388 from dotty-staging/drop/throw\n\nDrop/throw", "author" : "PersonIdent[odersky, odersky@gmail.com, Fri Mar 6 19:47:49 2015 +0100]"},
{"name" : "e5465b005d4654beed842682998679a3f732bf23", "time" : 1425649099, "y" : 2321, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "The fold reverses the order of the typed strings.\n", "author" : "PersonIdent[Nada Amin, nada.amin@epfl.ch, Fri Mar 6 14:38:19 2015 +0100]"},
{"name" : "30b56ed7e7c51a73ebfee8fdcfc13c9579eddcbf", "time" : 1425590324, "y" : 2322, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "AnyVal is not a derived value class\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Thu Mar 5 22:18:44 2015 +0100]"},
{"name" : "d274f4d4e0601e44524aae842c8581a2c6ecafd7", "time" : 1425589681, "y" : 2323, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Implement handling of synthetic throw method in backend.\n\nHaving backend abstracted away from AST helps a lot here.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Mar 5 23:08:01 2015 +0200]"},
{"name" : "23681e4f2657fc1cde7a3917c0414cc7601a1216", "time" : 1425567489, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #383 from smarter/fix/fullyParameterizedDef\n\nFullParameterization: fix rewiring of Returns", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Thu Mar 5 16:58:09 2015 +0200]"},
{"name" : "b558d6196bb75217acd466bffd59cd4ee339ba27", "time" : 1425482505, "y" : 2323, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Eliminate Throw as a typed Tree\n\nReplace with\n\n      <compiler-ops>.throw(exception)\n\nOnly leave Throw as an untyped tree.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Mar 4 16:21:45 2015 +0100]"},
{"name" : "2bdce25034d50bc7526dc1d1c8f57e9c20e45b60", "time" : 1425482338, "y" : 2323, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Create OpsPackage to hold compiler-interpreted symbols\n\nCompiler interpreted methods now have a home in OpsPackage.\nThe first such symbol is dummyApply.\n\nBut other symbols representing primitive operations (e.g. array\noperations) could also go there.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Mar 4 16:18:58 2015 +0100]"},
{"name" : "a273f38907f15fbb77f5de77f785509aee2d94f4", "time" : 1425332029, "y" : 2327, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "FullParameterization: fix rewiring of Returns\n\nThe `from` field of a Return tree should either be EmptyTree or an Ident\ncorresponding to the method we're returning from.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Mon Mar 2 22:33:49 2015 +0100]"},
{"name" : "3a6cab46ac2029c57a6c013a47de553781bd96be", "time" : 1425300552, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #384 from dotty-staging/fix/constructor-alias\n\nFix bug which prevented New over type-instantiated aliases.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon Mar 2 13:49:12 2015 +0100]"},
{"name" : "83d435640e0a2645256bc588306fdeef1d5799a2", "time" : 1425128471, "y" : 2329, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix bug which prevented New over type-instantiated aliases.\n\nPreviously,\n\n     type Map = HashMap[Int, String]\n     new Map\n\ndid not work. See test aliasNew.scala for a test.\nFormerly this logic handled in Parsers (wrapNew),\nbut that one does not work for aliastypes.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Feb 28 14:01:11 2015 +0100]"},
{"name" : "9b01e150da8ee1f730a6c60ca7954c2ac57df7a0", "time" : 1425025522, "y" : 2299, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add isAnonymousModuleVal\n\nAs we are now synthesizing companion objects for all classes, this seems reasonable to have.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri Feb 27 09:25:22 2015 +0100]"},
{"name" : "4e9987740f206c2376957d08d626f7c1ed087688", "time" : 1425025425, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #382 from dotty-staging/fix/#375\n\nFix of #375 - adapt returned value in erasure", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri Feb 27 09:23:45 2015 +0100]"},
{"name" : "aa1179a6c58849375527ee7ea4c79bc96f87551d", "time" : 1424960080, "y" : 2332, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix of #375 - adapt returned value in erasure\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Feb 26 15:14:40 2015 +0100]"},
{"name" : "45477e5ba963d1bd992bfab73de0d1cccea9fb82", "time" : 1424956362, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #377 from dotty-staging/ycheck-is-a-phase\n\nmake Ycheck a phase", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Thu Feb 26 14:12:42 2015 +0100]"},
{"name" : "b620e2f0758566b8c0567cc9a37cfa504c4f3532", "time" : 1424955496, "y" : 2334, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Addres reviewers comments #377\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Feb 26 13:58:16 2015 +0100]"},
{"name" : "b94cd57cb5a1228804be61a500e1da5c1c0f74ea", "time" : 1424852602, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #380 from dotty-staging/fix/#371\n\nFix for #371", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed Feb 25 09:23:22 2015 +0100]"},
{"name" : "78243125e9d193d3b4990ad8138257c2c0fbf70d", "time" : 1424851709, "y" : 2336, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "fix ambiguous reference when loading \"equals\" of object \"BoxesRuntime\"\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Feb 25 09:08:29 2015 +0100]"},
{"name" : "379fd874eb9620a9df74bd395cea32698e94acc9", "time" : 1424814097, "y" : 2336, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix for #371\n\nThis causes backend to fail with ambiguous reference when loading\nmember \"equals\" of object \"BoxesRuntime\".\n\nThe reference is indeed ambiguous. BoxesRunTime has a two paremeter\nequals method and, with the fix, inherits the one-parameter method from\nObject. The backend needs to disambiguate, e.g. by demanding the `decl`\nequals in BoxesRunTime instead of the member.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Feb 24 22:41:37 2015 +0100]"},
{"name" : "215b6ac1703630cb300801b0a8386f933d9255f1", "time" : 1424361896, "y" : 2334, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Bring back support for -YstopBefore and -YstopAfter\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Feb 19 17:04:56 2015 +0100]"},
{"name" : "f0853873bd2a0294d9c32ec732b67172178a339e", "time" : 1424361895, "y" : 2334, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Adjust periods to allow up to 64 phases.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Feb 19 17:04:55 2015 +0100]"},
{"name" : "20c6ab2a586b1ea6184c873ef4afcc4258d989cf", "time" : 1424361873, "y" : 2334, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Allow recomputing phase schedule per pun.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Feb 19 17:04:33 2015 +0100]"},
{"name" : "7aa65416ea09470ae24353c36a51f07c5fc1e8a6", "time" : 1424357136, "y" : 2334, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Allow disabling squarshing\n\nDo not die if phases aren't squashed\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Feb 19 15:45:36 2015 +0100]"},
{"name" : "d28125447f734560b3738a2642a29157e8830169", "time" : 1424357082, "y" : 2334, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make TreeChecker a phase\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Feb 19 15:44:42 2015 +0100]"},
{"name" : "37947a09d59824f7e281be4a81295844095f11e4", "time" : 1424179711, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #368 from smarter/type-stealer\n\nType stealer, take 2", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Tue Feb 17 14:28:31 2015 +0100]"},
{"name" : "34853b385cf14dca506c5e93944bc56c534e7708", "time" : 1424178227, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #366 from smarter/fix/value-classes-methods\n\nFix the synthetic methods of value classes", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Tue Feb 17 14:03:47 2015 +0100]"},
{"name" : "63fa5ad4971e3fd93febe5002c4a8eb32965bef5", "time" : 1424178114, "y" : 2345, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Type stealer that allows to steal types after typer\n\nProposed to be used from repl: it gives you internal\nrepresentation of types after frontend and a context to play with them\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Tue Feb 17 14:01:54 2015 +0100]"},
{"name" : "778072d5bd7763d7c5181e405db84e341be27ca3", "time" : 1424178090, "y" : 2345, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add dotty repl & type stealer\n\nDotty requires a mangled bootclasspath to start.\nIt means that `console` mode of sbt doesn't work for us.\nAt least I wasn't able to make sbt fork in console,\nso instead I've added a Scala-repl into dotty itself :-)\n\nIt would be good to make it use dotty one day when we have\na backend :-)\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Tue Feb 17 14:01:30 2015 +0100]"},
{"name" : "b1d6de2e8293c78571d85c09968a26c67cc96619", "time" : 1424175848, "y" : 2347, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix hashCode method for value classes\n\nBefore this commit, we used the same implementation than for case classes.\nAfter this commit, we use the hashCode of the underlying type as defined\nin SIP-15.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Tue Feb 17 13:24:08 2015 +0100]"},
{"name" : "ff8779e7d2e8a1baf9b3655f8c0bea0dc3fc3f36", "time" : 1423957392, "y" : 2347, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix equals method for value classes\n\nBefore this commit, the following class:\n  class VC(val x: Int) extends AnyVal\nresulted in the creation of the method:\n  def equals(val x$0: Any): Boolean =\n    x$0 match {\n      case x$0 @ _: VC => true\n      case _: Any => false\n    }\nAfter this commit, we get instead:\n  def equals(val x$0: Any): Boolean =\n    x$0 match {\n      case x$0 @ _: VC => VC.this.a.==(x$0.a)\n      case _: Any => false\n    }\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Sun Feb 15 00:43:12 2015 +0100]"},
{"name" : "5a81c5db9d3e4b16ff4ac05cc3ee54f81ab91059", "time" : 1423957392, "y" : 2347, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix tests/pos/{i143,extmethods}.scala: value classes must have exactly one val param\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Sun Feb 15 00:43:12 2015 +0100]"},
{"name" : "2e72811fb1cedb94c7967acf96c92172f010a20b", "time" : 1423834318, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #359 from dotty-staging/fix/erasure-lub-alternative\n\nFix/erasure lub alternative", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri Feb 13 14:31:58 2015 +0100]"},
{"name" : "37c2dcc2268e6840cfcd89fc5937d461a493e1fd", "time" : 1423833301, "y" : 2351, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Do not box Unit inside try, match and if branches.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri Feb 13 14:15:01 2015 +0100]"},
{"name" : "19215a819003f962054b49166bbeb2d19baa4939", "time" : 1423832660, "y" : 2351, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Disable backend for dotc_printing need to find out why it fails.\n\nWill do it in a different PR.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri Feb 13 14:04:20 2015 +0100]"},
{"name" : "2d3d1b6468710957792443445c46ea2a2874aab6", "time" : 1423832630, "y" : 2351, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Rework LabelDefs. Fixes boxing of a unit label killing backend.\n\nThough still it would be better if erasure didn't emmit such trees,\nbut still it's better to have this phase kore robust.\n\nAlso made LabelDefs run in linear time on the size of tree\n instead of square on the Block-depth of tree.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri Feb 13 14:03:50 2015 +0100]"},
{"name" : "07385d820e854dd11e174f8e59c9b94019e5eacd", "time" : 1423832467, "y" : 2351, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "A small fix in patmat: doesn't change the behaviour, but makes easier to understand.\n\nif(self eq self) was optimised away, not it's not even emited\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri Feb 13 14:01:07 2015 +0100]"},
{"name" : "c12f21306ea01bd0411f07074a5a0637f23187ff", "time" : 1423768712, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #358 from dotty-staging/backend-backports\n\nBackend discovered issues", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Thu Feb 12 20:18:32 2015 +0100]"},
{"name" : "10167c46191c1b02246635b01dcd3d1e0b75497a", "time" : 1423754556, "y" : 2356, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Check period validity once per run.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Feb 12 16:22:36 2015 +0100]"},
{"name" : "b2ca9fe03adfcdbdf254b2fccd02350f9700c059", "time" : 1423753860, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #362 from dotty-staging/add/orphan-check\n\nAdded test to TreeChecker that guards against orphan parameters.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Thu Feb 12 16:11:00 2015 +0100]"},
{"name" : "b5c3a28f1eabada74827e34743dc264e583f7479", "time" : 1423751168, "y" : 2358, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix of the escaping MethodParam problem\n\nThe issue was in the dependency tracking for MethodTypes. We treated\nmethods with false dependencies as non-dependent (as they should be),\nbut in that case the ResultType could contain orphan MethodParams.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Feb 12 15:26:08 2015 +0100]"},
{"name" : "023c7bcb8a582a64455d23363e13ab84707ffc8b", "time" : 1423678976, "y" : 2358, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Added test to TreeChecker that guards against orphan parameters.\n\nCurrently, tests fail. The failures I checked are all related to tailcalls.\nNot sure whether there are others.\n\nThis is a blocker for serialization. Orphan parameters cannot be serialized.\n\nMaybe rethink the position of tailcalls? It looks to me that the repeated trouble it gives us is\nmore than the effort required to put an efficient tailcall recognition after pattern matching in place.\nBut I might be wrong.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Feb 11 19:22:56 2015 +0100]"},
{"name" : "000461c376807d51964841ae9cb08d5f255ea2a2", "time" : 1423676876, "y" : 2360, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix to testLifted\n\nIf the original type does not have the right type parameters, look in the baseclasses.\nPreviously this was done only if the original type did not have any type parameters.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Feb 11 18:47:56 2015 +0100]"},
{"name" : "f1aa075b818cd7ff110ec3316a7713154c15daf8", "time" : 1423669665, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #320 from smarter/fix/escaping-refs\n\nPrevent block types with references to local symbols", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed Feb 11 16:47:45 2015 +0100]"},
{"name" : "5150cad821a9e7db821732eeb19019b96e1975a0", "time" : 1423668800, "y" : 2362, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Prevent block types with references to local symbols\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Wed Feb 11 16:33:20 2015 +0100]"},
{"name" : "03a2c6e74c07d08e79ee3323d3c1c38eb3d588ef", "time" : 1423655725, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #345 from olhotak/fix-javamethodtype\n\nFix JavaMethodType creation and parameter matching of JavaMethodTypes", "author" : "PersonIdent[odersky, odersky@gmail.com, Wed Feb 11 12:55:25 2015 +0100]"},
{"name" : "144c8ea776b56009b0a0de56d94b3030370a4d86", "time" : 1423654010, "y" : 2351, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Alternative scheme to handle branching\n\nThe new scheme alignes If, Match, Try to the scheme used in SeqLiteral.\nThis favors unboxed over boxed types. It is also simpler than the scheme\nin the previous commit.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Feb 11 12:26:50 2015 +0100]"},
{"name" : "3a74f7c38ac6fd26b5463a4c19b41265f25a953a", "time" : 1423653320, "y" : 2351, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Removed extraneous debug println.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Feb 11 12:15:20 2015 +0100]"},
{"name" : "5027f018be2879d0db5a13037abe4ac706ffbf42", "time" : 1423651068, "y" : 2356, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Assert for overflows in Periods\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Feb 11 11:37:48 2015 +0100]"},
{"name" : "1892e77808b148eba34c409db98d15a886a74069", "time" : 1423651068, "y" : 2356, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Disable t2669 dies in Classfile parser while parsing java.util.Vector(requested by backend)\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Feb 11 11:37:48 2015 +0100]"},
{"name" : "fb84ab55f4fd234c35ad85083092e9c5fe676370", "time" : 1423651068, "y" : 2356, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Disable t2667 that fails inside Extension methods.\n\nThis info transformation was left untriggered before backend was enabled.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Feb 11 11:37:48 2015 +0100]"},
{"name" : "89e897072e75ea0644f6d728cf062f4fa7981443", "time" : 1423651067, "y" : 2356, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix #348 flatten short name shouldn't include package names\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Feb 11 11:37:47 2015 +0100]"},
{"name" : "f2a9a7a9b6d3ae9699f5f50b8683db05d9a1f6e0", "time" : 1423651062, "y" : 2356, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix #349 module class after erasure could have selfType be a MethodType\n\nExprType erases to MethodType and need to be handled.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Feb 11 11:37:42 2015 +0100]"},
{"name" : "0f78b2039d97eb8a1fb813ec7be1b4d4c6c2718a", "time" : 1423650166, "y" : 2351, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Insert correct boxing/unboxing conversions for branches\n\n... of an If, Match, or Try. Fixes #355.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Feb 11 11:22:46 2015 +0100]"},
{"name" : "92013ab00c0180fb1d03484e3b44f9b3382a6ac6", "time" : 1423575898, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #354 from dotty-staging/fix/capturedvars\n\nFix/capturedvars", "author" : "PersonIdent[odersky, odersky@gmail.com, Tue Feb 10 14:44:58 2015 +0100]"},
{"name" : "0fd1ced53a0c450134b064ee9de4cfeaa288833f", "time" : 1423575856, "y" : 2373, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixed doc comment.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Feb 10 14:44:16 2015 +0100]"},
{"name" : "b6efacf0d9e56b0efc480c79f3ecfe52340970fa", "time" : 1423569131, "y" : 2373, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "After boxing its value, a captured var should become a val.\n\nAs noted by @sjrd.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Feb 10 12:52:11 2015 +0100]"},
{"name" : "4316f9440312947ffbc83a0c3c19053f4393bc1a", "time" : 1423333659, "y" : 2375, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Java methods: JavaMethodType instead of MethodType, convert Object to Any\n\nFixes two bugs needed for java-override test:\n\nNamer was creating a MethodType instead of a JavaMethodType even though\nthe JavaDefined flag was set on the DefDef.\n\nFollowing Scalac, Namer needs to convert Java method parameters\nof type j.l.Object to s.Any.\n", "author" : "PersonIdent[Ondrej Lhotak, olhotak@uwaterloo.ca, Sat Feb 7 19:27:39 2015 +0100]"},
{"name" : "b2e8905678781db3a7903ab4b247b551e319408d", "time" : 1423328840, "y" : 2373, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make line search logic in SourcePositions generally available.\n\nCreate an object Util for utility methods that are used in several places.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Feb 7 18:07:20 2015 +0100]"},
{"name" : "9641b2a417f203b5c2e88e6330b2230713471307", "time" : 1423328581, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #339 from dotty-staging/fix/#329-and-others\n\nFix/#329 and others", "author" : "PersonIdent[odersky, odersky@gmail.com, Sat Feb 7 18:03:01 2015 +0100]"},
{"name" : "329b6bfa9929c984b40368a1cc5f2f8cdc15b6c8", "time" : 1423328556, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #344 from dotty-staging/fix/refined-subtyping\n\nRemoved TrackingConstraint", "author" : "PersonIdent[odersky, odersky@gmail.com, Sat Feb 7 18:02:36 2015 +0100]"},
{"name" : "976ed6fd0aa4f0dd3da54889c4d85ef856f6531f", "time" : 1423326767, "y" : 2379, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Revert following underlyingIfRepeated when matching\n\nThis was a left-over from a failed attempt to have OverridingPiars work exclusively by comparing signatures.\nIf we do that then repeated and underlying do have the same signature and therefore are supposed to match.\nBut as @retronym notes, this leads to problems. In any case, we no longer try to make overriding pairs\nwork that way, because it fails for other reasons as well.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Feb 7 17:32:47 2015 +0100]"},
{"name" : "a469fa849cdb2ed1310731de05cfa9ee5d286170", "time" : 1423326767, "y" : 2379, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "New failing test\n\nAs noticed by @retronym, Any and Object are not identified when matching Scala and Java methods. I believe this is because the Java method does not have the Java flag set. @olhotak can you take a look?\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Feb 7 17:32:47 2015 +0100]"},
{"name" : "fb6d1f5f41ac07c7b0ce5105c410455c92945f19", "time" : 1423326767, "y" : 2379, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "More negative override tests\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Feb 7 17:32:47 2015 +0100]"},
{"name" : "86735bf73de4a165a46ce6215af2e7a814adb9f4", "time" : 1423326767, "y" : 2379, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Tweaks to matches\n\n1) Drop redundant signature comparison in overriding pairs\n2) Abstract from repeated parameters when calculating matches\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Feb 7 17:32:47 2015 +0100]"},
{"name" : "945576e421e5f7dc82984c4673884ad4c7ddf969", "time" : 1423326767, "y" : 2379, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "New spec and implementation for matching.\n\nReformulated matchign spec and implemented accordingly. Previous\nfix for #329 would have missed third new error case in over.scala.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Feb 7 17:32:47 2015 +0100]"},
{"name" : "43ee240c3db3820cecb23ab22c93b1df2412cdc8", "time" : 1423326714, "y" : 2379, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix of #329.\n\nOverriding pairs needs to match ExprTypes with field types. Closes #329.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Feb 7 17:31:54 2015 +0100]"},
{"name" : "1f8b5691dabaae336c3c3f568b303eb24e783494", "time" : 1423326713, "y" : 2379, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Test reorg\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Feb 7 17:31:53 2015 +0100]"},
{"name" : "4320e20ff5f3126940f0ecad1dd53573cf03562b", "time" : 1423326713, "y" : 2379, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixes handling of op-assignments for polymorphic apply/update.\n\nSee t3252 for a test case.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Feb 7 17:31:53 2015 +0100]"},
{"name" : "a759714a730f89ddab28a7bb40aab1b8363b3276", "time" : 1423326512, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #346 from dotty-staging/local-lazy-vals\n\nBring back lazy vals. Changed encoding scheme of local(non-field) lazy vals", "author" : "PersonIdent[odersky, odersky@gmail.com, Sat Feb 7 17:28:32 2015 +0100]"},
{"name" : "3ce904f018929b69c4208931decfc1710995765c", "time" : 1423326416, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #352 from olhotak/fix-cacheiscope\n\nFix #347 implicitScope for the case when implicit scopes cannot be cached", "author" : "PersonIdent[odersky, odersky@gmail.com, Sat Feb 7 17:26:56 2015 +0100]"},
{"name" : "5409448ba7c331db3990c16d00ef3462876cce26", "time" : 1423162125, "y" : 2389, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix implicitScope for the case when implicit scopes cannot be cached\n\nThis fixes #347.\n\nWhen Config.cacheImplicitScopes == false or an implicit scope is\nrequested for a type for which it cannot be cached, this change\ncauses the same computation to be applied as if the scope were\nlooked up in the implicit scope cache and not found.\n", "author" : "PersonIdent[Ondrej Lhotak, olhotak@uwaterloo.ca, Thu Feb 5 19:48:45 2015 +0100]"},
{"name" : "1ab02cef0c6ddf173eae7d611ea0356ae0cd90d5", "time" : 1422994880, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #335 from dotty-staging/fix-331\n\nUpdate to scala 2.11.5, fixes #311", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Tue Feb 3 21:21:20 2015 +0100]"},
{"name" : "7ee1d79392ea3c41d8626d5da68eb9d1a760a498", "time" : 1422976188, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #336 from dotty-staging/fix-321\n\nFix transformation of inner tail recursive methods", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Tue Feb 3 16:09:48 2015 +0100]"},
{"name" : "19570936f689af76bc8f43d8084697393f244083", "time" : 1422972637, "y" : 2392, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Addressing review comments of #336\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Feb 3 15:10:37 2015 +0100]"},
{"name" : "3f7b5d26cc89bd372773bcd121c758ca34eb4503", "time" : 1422972629, "y" : 2392, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Bring tailrec back to group.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Feb 3 15:10:29 2015 +0100]"},
{"name" : "12d4182cc9da27eca9d55a94d148f4a8dadbc11d", "time" : 1422972610, "y" : 2392, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Even more careful handling of tailcalls.\n\nSee i321 doc for description of problem and decision taken.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Feb 3 15:10:10 2015 +0100]"},
{"name" : "a14af3e7bf82e793d0b687bf6e53b6bc61f1ec5a", "time" : 1422972602, "y" : 2392, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix i321, tail call needs to be careful with abstracting over class type arguments.\n\nOr it could lead to Ycheck error that was triggered in #321.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Feb 3 15:10:02 2015 +0100]"},
{"name" : "4ecc6dd2d10a295cb8a31776fc9304aaff712576", "time" : 1422972596, "y" : 2392, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Allow FullParametrization to not parametrize over class targs.\n\nNeeded for fixing i321.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Feb 3 15:09:56 2015 +0100]"},
{"name" : "76ce7c7b1275bded2ca59052b99d743b5c993d6d", "time" : 1422971957, "y" : 2397, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix problems with lazy vals and separate compilation\n\nSomehow this error manifested itself in a quite weird way during erasure.\nSo it was hard to track down\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Feb 3 14:59:17 2015 +0100]"},
{"name" : "a6640ab780ab42ea7bc011dd6e58b487a1b616aa", "time" : 1422971951, "y" : 2397, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Getters shouldn't handle LazyVals.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Feb 3 14:59:11 2015 +0100]"},
{"name" : "f34d5630645c8ef608915f10e4ecee23ab3126b4", "time" : 1422971943, "y" : 2397, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Dotty deviation in shadowing rules for names.\n\nping @samuelgruetter Martin told that this is intended,\nI'm not sure if rewriting tool can do something here.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Feb 3 14:59:03 2015 +0100]"},
{"name" : "6689cce56c15027f594dcc782f7823956dc996b7", "time" : 1422971932, "y" : 2397, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Bring back lazyVals. Changed encoding of local lazy vals.\n\nNow the scheme doesn't introduce circular dependencies between container vals.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Feb 3 14:58:52 2015 +0100]"},
{"name" : "b09c2e8d0460a8c6675783b6a31f4269dff7aa3a", "time" : 1422738531, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #332 from olhotak/pr-spelling\n\ncorrect spelling mistakes in (some) comments", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Sat Jan 31 22:08:51 2015 +0100]"},
{"name" : "3f629502887c30231947cd2e0a3ec057365df25d", "time" : 1422737565, "y" : 2402, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "correct spelling mistakes in comments\n", "author" : "PersonIdent[Ondrej Lhotak, olhotak@uwaterloo.ca, Sat Jan 31 21:52:45 2015 +0100]"},
{"name" : "adcc240c565071b2a2b825e413579edddfa3ebd7", "time" : 1422730220, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Removed TrackingConstraint\n\nIt's too hard to keep fixes up-to-date in both constraint implementations.\nAnd anyway, OrderingConstraint is it for now.\n\nAlso added comment suggested by @smarter.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jan 31 19:50:20 2015 +0100]"},
{"name" : "647617d168f8ea2722a0cda30eea2fe9d8e69170", "time" : 1422729201, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #343 from dotty-staging/workaround-324\n\nworkaround #324", "author" : "PersonIdent[odersky, odersky@gmail.com, Sat Jan 31 19:33:21 2015 +0100]"},
{"name" : "698935a661122ea2ba983cdab29805f15f8a153c", "time" : 1422729137, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #338 from dotty-staging/fix/t3152-findMember\n\nFix/t3152 find member", "author" : "PersonIdent[odersky, odersky@gmail.com, Sat Jan 31 19:32:17 2015 +0100]"},
{"name" : "a822fc15235d9cc91302bd82d180830eff357ae2", "time" : 1422728347, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #331 from dotty-staging/fix/refined-subtyping\n\nFix/refined subtyping", "author" : "PersonIdent[odersky, odersky@gmail.com, Sat Jan 31 19:19:07 2015 +0100]"},
{"name" : "ac76968e59453d8006212aa8e92f5c9d04e5c257", "time" : 1422625155, "y" : 2407, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "workaround #342\n\nThat's a hack. That allows to continue to work on backend.\n Should be removed after #342 is fixed.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri Jan 30 14:39:15 2015 +0100]"},
{"name" : "70e55d26100199b99502705233786bbdc15c4c6b", "time" : 1422468235, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixed problem with ensureSingleton\n\nNeed to also ensure that the singleton is stable. This makes\ncompound.scala pass.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Jan 28 19:03:55 2015 +0100]"},
{"name" : "37918e5d1eb53014b1116ea65381a56e93a3c855", "time" : 1422468235, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Cleanups prompted by reviews.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Jan 28 19:03:55 2015 +0100]"},
{"name" : "350b121a42cc9eb37f09254f5eb992d85fe38368", "time" : 1422468235, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Refinement of dependent parameter handling in OrderingConstraint\n\nPrevious code did not recognize some cases of dependent parameters.\nE.g\n\n   P1 <: P2 | P3\n   P2 <: P4\n   P3 <: P4\n\nIn that case it follows that P1 <: P4\nbut that was not recorded in P's upper set.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Jan 28 19:03:55 2015 +0100]"},
{"name" : "a4937916037f74b414c9bab1819681ed2ecd7fdc", "time" : 1422368003, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixups taking into account reviewer's comments.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Jan 27 15:13:23 2015 +0100]"},
{"name" : "57b616c1a7adc78dd46cb3ae5545e312c11e69be", "time" : 1422355130, "y" : 2412, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "New tests\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Jan 27 11:38:50 2015 +0100]"},
{"name" : "f59d1d33d6e9dbb2988f165dc9b5b03792218a4c", "time" : 1422355105, "y" : 2412, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Take constrained parameter bounds into account for findMember\n\nIf a PolyParam has an upper bound in the current constraint, this\nbound needs to be assumed when selecting members. Final patch to fix t3152.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Jan 27 11:38:25 2015 +0100]"},
{"name" : "8a69dcc83a3ea72500d3d70584454224e49512e1", "time" : 1422355022, "y" : 2412, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Handle Apply projections also in lower compared type.\n\nt3152 shows that Apply projections can also appear in the\nlower of two compared types. This patch handles them. It is\nnecessary, but not sufficient, to fix t3152.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Jan 27 11:37:02 2015 +0100]"},
{"name" : "130e9a20755d512b47ca0fe41d8dfc3f6879cf86", "time" : 1422353634, "y" : 2412, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Use normnalized type to report type errors.\n\nWithout it, we get strange error messages like\n\n    found: (implicit X)Y\n    requred: Z\n\nwhen the problem is really that Y is not a subtype of Z.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Jan 27 11:13:54 2015 +0100]"},
{"name" : "ce6f48f8f107e82c695c429f321b220b72b184b4", "time" : 1422270821, "y" : 2416, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Update to scala 2.11.5, fixes #311\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Jan 26 12:13:41 2015 +0100]"},
{"name" : "537c53b2eba195317f0e7f0ede0cf3fdbd80e790", "time" : 1422270317, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #334 from olhotak/pr-annotatedtypevars\n\nfix TypeMap.mapOver to not drop type annotations", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon Jan 26 12:05:17 2015 +0100]"},
{"name" : "eb4d80891bcfaf9ffa402ea36f1562c5f597e479", "time" : 1422120412, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Added explanation to comment.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jan 24 18:26:52 2015 +0100]"},
{"name" : "f0e60d30a529c0ce0ca62cc942c0904595ad33b2", "time" : 1422120370, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Replace only substitutes top-level types.\n\nSee comment in OrderingConstraint#replace.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jan 24 18:26:10 2015 +0100]"},
{"name" : "25761935463a49376bf4462d89877ccbb823951e", "time" : 1422119487, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Some small polishings in TypeComparer\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jan 24 18:11:27 2015 +0100]"},
{"name" : "cdce02dc1d9c957621165545848c1f7bc358bd6d", "time" : 1422095568, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixes suggested by reviews from @smarter.\n\nAlso, added tests trhat work now.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jan 24 11:32:48 2015 +0100]"},
{"name" : "47238eb6c8bbc852d1ec1c55404694110f32120c", "time" : 1422094777, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Some finetunigs in TypeComparer.\n\nSpecial cases for comparing Any (and now also Nothing) restricted\nto comparing TypeBounds, where they occur most often.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jan 24 11:19:37 2015 +0100]"},
{"name" : "80618207e1ec169178f037bfab01a2b3bbd27ebe", "time" : 1422094725, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "New constraint implementation: OrderingConstraint\n\nThis is one both a bit simpler and a faster than TrackingConstraint.\nMain change is to replace the 2-d bitmap for ordering with two SimpleMaps\nwhich record for each parameter the smaller and greater parameters.\nThis is faster in practice because the ordering relation is sparse.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jan 24 11:18:45 2015 +0100]"},
{"name" : "fd3a5beb5176581c07badaaa15beb88dc06752ed", "time" : 1421971440, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "New constraint method: narrowBound\n\nAllows to merge the functionality of addOneLowerBound and addOneUpperBound in\nConstraintHandling.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jan 23 01:04:00 2015 +0100]"},
{"name" : "b45c69fb992acf1bbd9511408193d6d92ef7089a", "time" : 1421970439, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Plugging a possible hole in unify\n\nunify now does a full `replace` of one parameter with the other. The previous\nscheme of just updating the entry of a parameter risks breaking constraint\ninvariants. In particular, other constraint bounds can still refer to the eliminated\nparameter. This might not be a problem, but then we should be systeamtically leaving\nthese references in everywhere. In any case it seems better to harmonize what unify\nand replace are doing.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jan 23 00:47:19 2015 +0100]"},
{"name" : "ac61c266b4be7866160207006a8fdfe04d246fd3", "time" : 1421912126, "y" : 2426, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "make TypeMap also map over types in the annotation tree of AnnotatedType\n", "author" : "PersonIdent[Ondrej Lhotak, olhotak@uwaterloo.ca, Thu Jan 22 08:35:26 2015 +0100]"},
{"name" : "914b0ec0279069f901519b51f8c1e0fc31a29a0a", "time" : 1421857285, "y" : 2426, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "fix widenForMatchSelector to transparently handle annotated types\n\nThe commit fixing #182 uncovered test failures due to\nthis missing case in widenForMatchSelector.\n", "author" : "PersonIdent[Ondrej Lhotak, olhotak@uwaterloo.ca, Wed Jan 21 17:21:25 2015 +0100]"},
{"name" : "cce8cf1491f282368893b81348ec3171486b52e3", "time" : 1421857148, "y" : 2426, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "fix TypeMap.mapOver to not drop type annotations\n\nThis fixes issue #182.\n", "author" : "PersonIdent[Ondrej Lhotak, olhotak@uwaterloo.ca, Wed Jan 21 17:19:08 2015 +0100]"},
{"name" : "eed18aab0d52bd2f7a1cb17433759b51890e40aa", "time" : 1421671217, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Small polishings for isSubType\n\nDrop unused pattern vars, redundant tests, indentation changes.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jan 19 13:40:17 2015 +0100]"},
{"name" : "963af8e852a4234b7739b881dda997a88843ad33", "time" : 1421668883, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Streamline TypeComparer/ConstraintHandling interface.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jan 19 13:01:23 2015 +0100]"},
{"name" : "b9d018e7af67428c7fff74ae5ed0c55af9f621ff", "time" : 1421668197, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make checkPropagated configurable\n\nOnly run if a config option is set.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jan 19 12:49:57 2015 +0100]"},
{"name" : "68d58a651ee5a7853e58d40fa1decadd10df110c", "time" : 1421667045, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Move PolyParam test later in isSubType and simplify addConstraint\n\nMotivation: Would like to profit from normalizations done before, so that\nwe do not have to redo them in addConstraint.\n\nAlso: eliminate solvedConstraint; it is no longer needed and was always false.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jan 19 12:30:45 2015 +0100]"},
{"name" : "01f1a26bbfa6763eba960ac71f9d71cebed478df", "time" : 1421665741, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Refactorings in TypeComparer fourthTry\n\nMostly cosmetic, to make code clearer.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jan 19 12:09:01 2015 +0100]"},
{"name" : "50444f8a2f749cf30a7352a858141c7b987baf0d", "time" : 1421665135, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Refactor handling of NamedTypes in isSubType\n\nGADT handling goes towards the back. Dealiasing is done early.\nEventual aim: Avoid redoing dealising when adding constraints.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jan 19 11:58:55 2015 +0100]"},
{"name" : "6771786961e708178e56b22b1c2869712f6c3891", "time" : 1421657471, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Compare ThisType refactoring\n\nMoved comparisons between ThisType x$.this and NamedType x.type\nwhere x$ is the module class of x. They were uner NamedType, are\nnow under ThisType. That way NamedType reasoning is a bit uncluttered.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jan 19 09:51:11 2015 +0100]"},
{"name" : "5354f88c6ef2dafd5ae876c16c9758155a780783", "time" : 1421654963, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixed soundness hole in TypeComparer\n\nTwo named types with same names and NoPrefix prefixes are not necessarily equal!\nThe fix uncovered an error in tailrec. When run on Decorators.scala, tailrec in its old\nposition at the end of a group produces not -Ycheckable code. Problem was fixed\nby moving TailRec into its own group.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jan 19 09:09:23 2015 +0100]"},
{"name" : "9b260d087a4c63c39e404fd6ba7ade286fdfd8e8", "time" : 1421604245, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Moved previously failing tests to pos\n\nGADTs now work again (they stopped workign when we went to the inductive satisfiability checks).\nThe deep for expression also works, even with some more levels added.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Jan 18 19:04:05 2015 +0100]"},
{"name" : "14f4c964953535cb7375343ec5e8575e37083aba", "time" : 1421603798, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Removed checkBound tests\n\nThey were too sweeping, served essentially as smkoke-screens for debugging until\nnow. Example:\n\n  checkBound(P, P | T)\n\nwould fail even though P | T is a legal upper bound for P. (It's an illegal\nlower bound).\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Jan 18 18:56:38 2015 +0100]"},
{"name" : "23ae8d935ccac3a814140534d4c9df76e0b3d345", "time" : 1421603455, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Dropped non-sensical transform in unify\n\ndropParamsIn extrapolates parameters with Nothing/Any. This has nothing\nto do with unification! The dropParamsIn transform could not be eleiminated\npreviously because it caused faulures. Nice to see that it works now!\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Jan 18 18:50:55 2015 +0100]"},
{"name" : "952aa7f8d17579d3ee1b20ea177206e570de497f", "time" : 1421603103, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Avoid adding constraint under typeVarsMissContext is true\n\nSubType check is true anyway, no need to spend work. Also this allows a more\nconsistent treatment of bounded wildcard types in addConstraint and isSubType. In both cases\nwe now compare with the outer bound of the wildcard type. Previously addConstraint treated\nboundes wildcard types like unbounded ones, which is not consistent.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Jan 18 18:45:03 2015 +0100]"},
{"name" : "179a1bbd2bb40d1c40823d1d3a1f30f8ecdf5c56", "time" : 1421603039, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Removed check from addConstraint\n\naddConstraint contained a special case where a situation like\n\n  P { ... } <: P\n\nwas short-pathed to `return true`. But the same was not done\nif the constraint was added indirectly by propagation. It's not clear\nwhether a special treatement of this is needed for correctness. If\nit is needed, then it would be needed eberywhere. So wince we do\nnot want to implement it everywhere wihtout proof of necessity,\nit is better to fail fast and drop the special treatment entirely.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Jan 18 18:43:59 2015 +0100]"},
{"name" : "fbe4171404ac56a0fe8e6d54fa06bbd53e85bd97", "time" : 1421602692, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "New constraint handling\n\nNew constraint handling scheme using constraints that distinguish more between\nparameter and non-parameter bounds and which track parameter bounds separately.\nThis allows a co-inductive formulation of satisfiability checking without fishy\ncyclicity checks. It should also scale better for long chains of dependent type\nvariables.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Jan 18 18:38:12 2015 +0100]"},
{"name" : "433e9cf0d85bd2b5f99771987751f7a726009114", "time" : 1421312232, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #333 from olhotak/pr-addcomments\n\nAdd/clarify comments for ExprType and TypeVar", "author" : "PersonIdent[odersky, odersky@gmail.com, Thu Jan 15 09:57:12 2015 +0100]"},
{"name" : "1815894b8569ca2b9fad4b4e2c23125946b8df10", "time" : 1421262939, "y" : 2444, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "add comment for ExprType\n", "author" : "PersonIdent[Ondrej Lhotak, olhotak@uwaterloo.ca, Wed Jan 14 20:15:39 2015 +0100]"},
{"name" : "01e19323ee602136b47800c5c4b4105299e573b2", "time" : 1421262933, "y" : 2444, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "clarify comment about TypeVar\n", "author" : "PersonIdent[Ondrej Lhotak, olhotak@uwaterloo.ca, Wed Jan 14 20:15:33 2015 +0100]"},
{"name" : "566dd6e8a44090168ebe8e6703fea27152802286", "time" : 1421258974, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix skolemization logic.\n\nThe skolemsOutstanding flag was reset too early. Just de-skolemizing one type does\nnot guarantee that all further types are skolem-free.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Jan 14 19:09:34 2015 +0100]"},
{"name" : "19234838329aabfe202a2fbf46470528baebd83c", "time" : 1421258974, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Allow to merge TypeBounds and ClassInfos in |, &\n\nThere seems to be no reason why we should not merge\na class and an abstract type that has the class within\nits bounds. I.e. Assume\n\n    class A { type T }\n    class B { class T }\n\nThen (A | B) # T should be legal and refer to type T,\n and (A & B) # T should be legal and refer to class T.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Jan 14 19:09:34 2015 +0100]"},
{"name" : "c0b75098f66d4611683bc308d7f6127e6c6e433b", "time" : 1421258974, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixed bug/typo in comparing prefixes of ClassInfo types.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Jan 14 19:09:34 2015 +0100]"},
{"name" : "a24f73eb145d917863958551ff3f0a7c7db2a9dc", "time" : 1421258974, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Removed redundant test in isSubType.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Jan 14 19:09:34 2015 +0100]"},
{"name" : "1a6cc683f37ea9f57454d1d7f62ac975c98c2a94", "time" : 1421258863, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Rename isConstrained -> canConstrain for clarity\n\nPlus some more comments explaining aspects of isSubType.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Jan 14 19:07:43 2015 +0100]"},
{"name" : "dec46172ea9f38e3f1d9aeaac8e2984c6ea3a878", "time" : 1421256281, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "New test: moduleSubtyping\n\nTests (non)equivalence of modules and their ThisTypes.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Jan 14 18:24:41 2015 +0100]"},
{"name" : "ef9c11f7e34b39229254353e245a53aa4d4777d0", "time" : 1421256157, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix after review: reset state variable needsGc\n\nWithout the reset, states are gc-ed unncessssarily.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Jan 14 18:22:37 2015 +0100]"},
{"name" : "3e3ef5222429beddedd6912feeff7975bdd67bf8", "time" : 1421166912, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Two new hooks in ConstraintHandling\n\nUnlike isSubtypeWhenFrozen, these can be implemented by\nTrackingConstraint without needing full bounds, which is expensive.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Jan 13 17:35:12 2015 +0100]"},
{"name" : "155049286628843eb7aeb2d8d610ac53291ea6f3", "time" : 1421166009, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Added alternative TrackingConstraint\n\nThis is an alternative low-level constraint implementation.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Jan 13 17:20:09 2015 +0100]"},
{"name" : "0b02ede80cfbc9c585114bb0dd51436dbf15de5f", "time" : 1421165957, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Added structural equals method to PolyParams\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Jan 13 17:19:17 2015 +0100]"},
{"name" : "f76e81ed5cc5f57fcbdde6ea98503bd031c903a2", "time" : 1421084267, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Streamline unification\n\nInstead of recording a `TypeAlias(p)` for the entry\nof an eliminated parameter we record directly the\nsolution `p`.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jan 12 18:37:47 2015 +0100]"},
{"name" : "7df0423e49e81904ba703d44b0389d3a544aa946", "time" : 1421062605, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Made constraint data structures pluggable.\n\nFactored out interface for constraints. Current implementation: NaiveConstraint.\nPreparing for a more efficient one.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jan 12 12:36:45 2015 +0100]"},
{"name" : "9c53aaa7e3381eb684ff7eb71ab8b980cfa51abc", "time" : 1420975852, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Adapted Skolemization to new handling of skolems.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Jan 11 12:30:52 2015 +0100]"},
{"name" : "90c8ac30fd0898dfc07b389f742c8baa2f5642e9", "time" : 1420910423, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Simplified condition in isSubType.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jan 10 18:20:23 2015 +0100]"},
{"name" : "1d8c014a0a7872120df2b46e1a7e305c98f5b4c5", "time" : 1420910269, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Rename RefinedThis -> SkolemType\n\nAlso, make binder type of SkolemType refer to arbitrary type,\nnot necessarily RefinedType.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jan 10 18:17:49 2015 +0100]"},
{"name" : "97aced07f273a31be69fd771a4e900a8e0cfa43a", "time" : 1420908475, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Reverting the idea that RefinedThis types take levels.\n\nIn the end, this did not buy us anything. What matters is that\n\n - we can reliably identify RefinedThis types pointing to a given\n   refinement type. Making sure that the `binder` field of q RefinedThis\n   type in a refinedInfo is always the containing refined type is good\n   enough for that.\n\n - we take care to rebind RefinedThis types in isSubType. This was leaky before,\n   is handled now better in the new isSubType.\n\nSo, in the end, adding a level was a needless complication. Also, as a next step\nwe should be able to identify skolem types and RefinedThis types.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jan 10 17:47:55 2015 +0100]"},
{"name" : "5f35b11ceb228e7a803263490f2d8e8a22ee2fe6", "time" : 1420898150, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Split off ConstraintHandling into separate trait.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jan 10 14:55:50 2015 +0100]"},
{"name" : "4429243278ea671ccaf8344f4b65519fe6800a47", "time" : 1420898138, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Removed some checks\n\nChecks are no longer interesting because we will not to migrate to\nRefinedThis(level) scheme after all.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jan 10 14:55:38 2015 +0100]"},
{"name" : "710e40e991db4c1c519cfea1d3112b558ad044e9", "time" : 1420821708, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Made refinement subtype fastpath insensitive to RefineedThis#binder.\n\nSince the binder field in RefinedTypes should not be significant for\nsubtyping, we need to substitute RefinedThis types away before comparing\nrefinements. But this substitution is only done in the slow path.\nThe fix falls back to the slow path if a refinement\nrefers to the refined type via a refined this.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jan 9 17:41:48 2015 +0100]"},
{"name" : "acb64b27c1142b1bf538585347784106fab83767", "time" : 1420819667, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "TypeComparer cleanups.\n\nMove non-essential code to diagnostics plus some other small cleanups.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jan 9 17:07:47 2015 +0100]"},
{"name" : "2ae7f2ab95101f3d68a6e6512704027f01b1b196", "time" : 1420813117, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "More aggressive reduction in lookupRefinedThis.\n\nSee comment for an example what changes.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jan 9 15:18:37 2015 +0100]"},
{"name" : "3c159db66a2a6bb7ead0cec6a945dfe70d03186b", "time" : 1420810881, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Simplification for lookupRefined\n\nDropped a member calculation which was unncessessary and which would not work\nanymore if RefinedThis types lost their RefinedType target field.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jan 9 14:41:21 2015 +0100]"},
{"name" : "ee191f38efc9cd0ca05823499c1a8abf7883ff5e", "time" : 1420810776, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Made fast path for refined subtype checking configurable.\n\nA configuratin now decides whether fast path is taken or not. That way\nwe can more easily test either way if something goes wrong.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jan 9 14:39:36 2015 +0100]"},
{"name" : "dbecebad3180cfc3ba441ac49710b49a819a4b7d", "time" : 1420808208, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #313 from dotty-staging/more-tests\n\nMore tests", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri Jan 9 13:56:48 2015 +0100]"},
{"name" : "f11a0a533dd628684f9d255df97c2af54664b103", "time" : 1420807423, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Remove unnecessary nested methods in TypeComparer.\n\nThe previous idea to keep original types around in `origN` types\nto be accessed from nested methods was not needed in the end.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jan 9 13:43:43 2015 +0100]"},
{"name" : "53db7c8e1090a72ead3d795b4715f04863e62f42", "time" : 1420806607, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "New fast path for checking refined types.\n\nAs before, optimize for the case where correspnding refinements\nhave the same name and the lower one is a type alias.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jan 9 13:30:07 2015 +0100]"},
{"name" : "cb103dbc6fbca9d2ea19030e83dad3690cf394a9", "time" : 1420793821, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix problem in constraint handling\n\nAfter last commit, dotc/config died with the \"isSatisfiable\" assertion\nin TypeComparer. The problem was that when deeling with a variable/variable\nconstraint\n\n  A <: B\n\nwe treated this as the two independent actions of adding\n\n  A <: B\n  B >: A\n\nBut this means we no longer have a clean inductive satisfiability check before\nsomething gets added - A <: B gets added before the satisfiability check of B >: A\nis started. The fix splits satisfiability check and actual constraint update in\ntwo separate actions.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jan 9 09:57:01 2015 +0100]"},
{"name" : "90f2668220645df7b654827c2dfdd1100c878ac2", "time" : 1420793557, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Optimize for case where RefinedThis is absent\n\nSince we cache the information whether a refinement contains RefinedThis\noccurrences to the refinement itself, we can use this info to avoid substututing\nRefinedThis types. Used in findMember and hasMatchingMember.\n\nThe commit uncovered an issue with constraint handling that will be fixed in the next commit.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jan 9 09:52:37 2015 +0100]"},
{"name" : "9f745338242524c6607fa7b2930157b0c71be939", "time" : 1420735920, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Refacttored skolemization logic\n\n... into a new trait \"Skolemization\".\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jan 8 17:52:00 2015 +0100]"},
{"name" : "5acaad68f5221d8474c0ad86d5f41ad1e03f6cfe", "time" : 1420719451, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #317 from dotty-staging/fix/java-varargs\n\nFix/java varargs", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Thu Jan 8 13:17:31 2015 +0100]"},
{"name" : "4e1f4a762e298eac73222a3afc5022954e5684d0", "time" : 1420719423, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #328 from olhotak/pr-nosymbol-associatedfile\n\nmake NoSymbol.associatedFile return NoSource.file", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Thu Jan 8 13:17:03 2015 +0100]"},
{"name" : "07d4a6d76fe63defa75ec35b288abf5508a2055b", "time" : 1420719397, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #327 from olhotak/pr-bindotc\n\nunset CDPATH in bin/dotc to make ( cd && pwd ) work correctly", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Thu Jan 8 13:16:37 2015 +0100]"},
{"name" : "0bc9f680af7670985ff10b1e5fa472655745c90b", "time" : 1420714602, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Remove choice between new and old scheme for subtyping refined types.\n\nNow that new scheme works we can drop the alternative.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jan 8 11:56:42 2015 +0100]"},
{"name" : "979ff5e0dbffc66fd008be0544690dbd194fe066", "time" : 1420713659, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Simplify and fix bounds propagation in constraints.\n\nThe previous scheme did not ensure that transitivity was eliminated.\nExample scenario:\n\nWe have in the constraint\n\n   P <: Q\n\nfor constrained variables P, Q and add\n\n   Q <: T\n\nPrevious propagation added the constraint and then tested\nwhether the bounds of all variables were satisfiable. For\nQ we test\n\n    P <: T\n\nbut that is true because P <: Q and we already added the constraint Q <: T.\nSo we fail to add the constraint P <: T, and transitivity is no longer eliminated.\n\nInstead we now test the new bounds (in this case P <: T) *before* adding\nthe new constraint Q <: T. This is also simpler than the previous scheme.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jan 8 11:40:59 2015 +0100]"},
{"name" : "0a35baa8a1ed91a71398887ae7a1a08910e4faf0", "time" : 1420713398, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "New scheme for subtyping refined types.\n\n- Instead of rebasing, use the DeBrujn level of a RefiendThis.\n- Make sure lower type is a singleton by skolemizing it if necessary.\n- Do the correct rebinding of the upper type's RefinedThis.\n\nRemarks:\n\n - The new scheme discovered quite a lot of errors which are mostly fixded in\nother commits of this branch. i0268 (GADT matching) still does not work, moved to pending.\n\n - Some optimizations are currently missing:\n   (1) fast path refined subtyping\n   (2) faster operations for substituting refined thistypes which\n       explot the fact that RefinedThis is relatively rare.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jan 8 11:36:38 2015 +0100]"},
{"name" : "1309f0fab02337788fba656be19a432d80d59565", "time" : 1420713152, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add transitive check for cycles in constraints.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jan 8 11:32:32 2015 +0100]"},
{"name" : "74b2584e399cca21159dafe433abbef8c821d1fd", "time" : 1420713126, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add deSkolemize method.\n\nWe will need that at some point because type checking refined types will generate skolem\nvariables for representing RefinedThis types if the lower type is not a singleton.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jan 8 11:32:06 2015 +0100]"},
{"name" : "5e6114911cb11336bb53938f2f3b3a70c328921a", "time" : 1420711369, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixed bug that caused error message to be suppressed.\n\nSymptom was: When compiling Definitions.scala with the changes in the subsequent\ncommits, an empty tree was passed as implicit parameter, without an \"implicit not found\"\nerror being reported. The problem needed a fix in TyperState.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jan 8 11:02:49 2015 +0100]"},
{"name" : "0b8f4eabe99d5a3df4907ae6366b529c446a408a", "time" : 1420708104, "y" : 2484, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "unset CDPATH in bin/dotc to make ( cd && pwd ) work correctly\n\nWhen CDPATH is set, cd echoes the directory that it is switching to.\nThe ( cd && pwd ) pattern then prints the directory twice, causing\na mangled path.\n\nSee https://bosker.wordpress.com/2012/02/12/bash-scripters-beware-of-the-cdpath/\n", "author" : "PersonIdent[Ondrej Lhotak, olhotak@uwaterloo.ca, Thu Jan 8 10:08:24 2015 +0100]"},
{"name" : "b06546f18487b763af25b4b5dd95a161c8f645a0", "time" : 1420707987, "y" : 2485, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "make NoSymbol.associatedFile return NoSource.file\n\nOtherwise, associatedFile calls topLevelClass, which fails for NoSymbol.\n", "author" : "PersonIdent[Ondrej Lhotak, olhotak@uwaterloo.ca, Thu Jan 8 10:06:27 2015 +0100]"},
{"name" : "2085ebbeb36c085ede54b8538dd9b74f8cf8a9e6", "time" : 1420538890, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Deleted diagnostics output that caused cyclic references\n\nCyclic reference was caused when compiling pos/i94-nada.scala with\n\n    typer = new Printer\n\nand -Yfront set.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Jan 6 11:08:10 2015 +0100]"},
{"name" : "14f6eb056f9959f178134762e0c6ce78e1dccc28", "time" : 1420308483, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make findMember depend on RefinedThis level.\n\nWhen doing a findMember we now look at the level of a RefinedThis instead\nof its `rt` field. This required several fixes to how levels are assigned\nto RefinedThis types.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jan 3 19:08:03 2015 +0100]"},
{"name" : "a7a603fc8ec431b261e7bceddfb61a935d8ad07b", "time" : 1420307434, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Show level for RefinedThis\n\nTemporary solution for better diagnsitics.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jan 3 18:50:34 2015 +0100]"},
{"name" : "9c1d4868ee8003e6ce11b95b97ddabe347ba00cb", "time" : 1420147461, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "isSubType reorg\n\nCapture original types in enclosing scope instead of passing them\nexplicitly.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jan 1 22:24:21 2015 +0100]"},
{"name" : "bd405e5ae89093c83f7914bd515d82dcdec22f32", "time" : 1420124185, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Extended refinementRefersToThis to alias types.\n\nGiven\n\n    class C { type T }\n    C { type U = this.T } { val x: U }\n\nthe second refinement does refer via the alias to the refinement type itself.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jan 1 15:56:25 2015 +0100]"},
{"name" : "6543f8914cf1582d364d6c0e4395cd878dd6bd4d", "time" : 1420123516, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make use of refinementRefersToThis in lookupRefinement.\n\nThat way we profit from caching.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jan 1 15:45:16 2015 +0100]"},
{"name" : "390ac42ae28d2ea6fbd5da7446b85550c70b8ea7", "time" : 1420123461, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Removed debug println\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jan 1 15:44:21 2015 +0100]"},
{"name" : "95f74c2a999b20ee5f6ddbe6e14511872e8c227f", "time" : 1420120173, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Provide the correct levels for RefinedThis types.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jan 1 14:49:33 2015 +0100]"},
{"name" : "e3a43806a2b5b17982e942a82cabe139c09d971e", "time" : 1420116316, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Reorg of subtyping.\n\nPlus, RefinedThis gets a second parameter, `level`. This will replace the first one in due time.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jan 1 13:45:16 2015 +0100]"},
{"name" : "e50f47c17eea3aee80db2d86e28e7ae016f94cbb", "time" : 1420043001, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Better name for pattern\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Dec 31 17:23:21 2014 +0100]"},
{"name" : "b25325233cbc88707f8757de5e4c028b1cf314b3", "time" : 1420035288, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #309 from dotty-staging/fix/#306-avoidance-problem\n\nAvpid returning ExprTypes from blocks.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed Dec 31 15:14:48 2014 +0100]"},
{"name" : "344b055e23ceea6fd57d6240f5dda732e41028bd", "time" : 1420035265, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #310 from dotty-staging/fix/#305-annot-bootstrap\n\nFix/#305 annot bootstrap", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed Dec 31 15:14:25 2014 +0100]"},
{"name" : "9d8e473739ed4f5618d55738475717872453018a", "time" : 1419242512, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Handle subtyping cases involving null.\n\nCases handled are:\n\n     Null <: (A & B) { ... }\n     Null <: (A | B) { ... }\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 22 11:01:52 2014 +0100]"},
{"name" : "7b5d1b161009e76badaefd7a83ff243d6096498e", "time" : 1419194317, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #312 from dotty-staging/disable-context-escape\n\nDisable context escape detection", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Sun Dec 21 22:38:37 2014 +0200]"},
{"name" : "2833b0107cdd95bdceb4d8aa968e0f66a6eb24e3", "time" : 1419194301, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #315 from dotty-staging/fix/annot-vararg-constr\n\nAllow for varargs passed to Java annotation constructors.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Sun Dec 21 22:38:21 2014 +0200]"},
{"name" : "7c40b03aa9210dc1989cc08c0f03f7d4dd4e9e47", "time" : 1419163174, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "test reorg\n\nMoved working tests to pos, annotated non-working ones.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 21 12:59:34 2014 +0100]"},
{"name" : "b6755f6927c07337b0819d7503f2c7b1674d892f", "time" : 1419162243, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "tests reorgs\n\nMove some tests into proper slots + comments what they are.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 21 12:44:03 2014 +0100]"},
{"name" : "f98ce3f42a77802fc98eb0f12636efc1f25c2d1b", "time" : 1419161913, "y" : 2503, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix passing : _* arguments to Java methods\n\nArguments of the form (xs: _*) which are passed to\nJava methods need to be converted to arrays, not sequences.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 21 12:38:33 2014 +0100]"},
{"name" : "3648ea82d5150d0685bbde3991abcfe007c38987", "time" : 1419161794, "y" : 2503, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix printing of Class constants\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 21 12:36:34 2014 +0100]"},
{"name" : "b9cdafbfa15b672c64f55dfa631863f8d1d41e41", "time" : 1419161777, "y" : 2503, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Create the right method type for Java DefDefs\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 21 12:36:17 2014 +0100]"},
{"name" : "7d513b4f3342c17e8b603a43c40770d0f97424de", "time" : 1419108666, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Don't emit copy method for case classes with repeated parameters.\n\nscalac has the same restriction. The reason is that we do not have a means\nto specify a sequence-valued default for a vararg parameter.\n\nIt would be nice if we could, but this requires a more substantial development\neffort.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Dec 20 21:51:06 2014 +0100]"},
{"name" : "823930308048a26c07bb54ac77923ba8e24e68a4", "time" : 1419026701, "y" : 2507, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixed test\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Dec 19 23:05:01 2014 +0100]"},
{"name" : "b3af6169d06796f3ac57d7082bc9eaeb0db34155", "time" : 1419026293, "y" : 2507, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Allow for varargs passed to Java annotation constructors.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Dec 19 22:58:13 2014 +0100]"},
{"name" : "eb4bb1d092014be19b1669a7c16c6df3e11fda28", "time" : 1419012151, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "New passing tests.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Dec 19 19:02:31 2014 +0100]"},
{"name" : "ed1016201ee3f1784243c6d04d84164369c56254", "time" : 1419012025, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Harden implicit scope computation against CyclicReference errors.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Dec 19 19:00:25 2014 +0100]"},
{"name" : "431b2b73e6558faa6e34bd527c8ed3b9fd6d638f", "time" : 1419011984, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Removed dead code.\n\nisUnboundedGeneric imples !JavaDefined anyway.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Dec 19 18:59:44 2014 +0100]"},
{"name" : "d21310b8baa847f1b0cd14986f8ec1084b59e6fe", "time" : 1419011769, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix isUnboundedGeneric for alias types.\n\nFixes problem in test case SI-7638a.scala which gave an\noverride error before.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Dec 19 18:56:09 2014 +0100]"},
{"name" : "cf6b62f11815fc98fe69e25875668c8709631656", "time" : 1419003785, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Avoid name clashes when generating synthetic companion objects.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Dec 19 16:43:05 2014 +0100]"},
{"name" : "848714377b68eedf0c66b59ff8c57cd0da10109c", "time" : 1419003717, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Eliminate unused method from RefChecks.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Dec 19 16:41:57 2014 +0100]"},
{"name" : "63c582b39ba8a248c9d6ad23db2224ea4a809a58", "time" : 1418998894, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Test re-org.\n\nMoved some working test to pos. I wonder why they were in pending? They did work for me.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Dec 19 15:21:34 2014 +0100]"},
{"name" : "73d008317a6afaa0fea103ec0c84a39386f7d776", "time" : 1418998803, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix NoCyclicReference test\n\nThe problem was that, unlike a classDefSig, a higher-kinded typeDefSig did\nnot get a preset info with its type parameters. So any type-application\nof the defined type in its bounds would fail.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Dec 19 15:20:03 2014 +0100]"},
{"name" : "53cd512eef8f9f28527e7c72d108359f0313d3f5", "time" : 1418996015, "y" : 2403, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Disable context escape detection\n\nI get very frequent build failures due to the mutual Scala<->Java dependency.\nIt builds for a long time, then decides that getCtx overrides nothing. The only\nway to fix is another clean build. Total time lost: >5 minutes. These happened\noccasionally before but have become much more frequent under ScalaIDe4.0, to the\npoint where this becomes a major drag on productity. Context escape detection\nis nice but if it stops us getting work done, not worth the effort.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Dec 19 14:33:35 2014 +0100]"},
{"name" : "13ec91b955b5c10da750b26e10f793ea44a72945", "time" : 1418994959, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #271 from dotty-staging/fix/i268-gadts\n\nFixed #264 - failure to typecheck GADTs", "author" : "PersonIdent[odersky, odersky@gmail.com, Fri Dec 19 14:15:59 2014 +0100]"},
{"name" : "f3c0eaa2a2e02e3bd832bf9d30bc7f8e3397ef88", "time" : 1418938079, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #308 from smarter/change/Ylog-2\n\n-Ylog:X now only log phase X, use -Ylog:X+ to also log phase X+1", "author" : "PersonIdent[odersky, odersky@gmail.com, Thu Dec 18 22:27:59 2014 +0100]"},
{"name" : "7bef54de2fcdb5585031c2d6a81952659f4e5d7c", "time" : 1418918567, "y" : 2520, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "-Ylog:X now only log phase X, use -Ylog:X+ to also log phase X+1\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Thu Dec 18 17:02:47 2014 +0100]"},
{"name" : "83c3f7a64899011fa1260bc699ca06728173bc50", "time" : 1418916897, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #307 from smarter/simplify/TypeAlias-unapply\n\nSimplify TypeAlias#unapply", "author" : "PersonIdent[odersky, odersky@gmail.com, Thu Dec 18 16:34:57 2014 +0100]"},
{"name" : "43fefd527e3ec424a6b1232aed63b50dd6a71342", "time" : 1418916079, "y" : 2522, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "New method on scopes: openForMutations\n\nReplaces `asInstanceOf[MutableScope]` calls.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Dec 18 16:21:19 2014 +0100]"},
{"name" : "064974fd4877bcf77dc495f1dcef9dfd2d626435", "time" : 1418915422, "y" : 2522, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Better encapsulation and naming for preDecls.\n\nAvoid it being confused with unforcedDecls. Hence\n\n   preDecls -> currentPackageDecls\n\nand reduce visibility to private[core].\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Dec 18 16:10:22 2014 +0100]"},
{"name" : "0424e5bcc63d6444e791a1c7722bb4db431f3347", "time" : 1418913839, "y" : 2524, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Added test\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Dec 18 15:43:59 2014 +0100]"},
{"name" : "223fa2bea328fc53f87d6f9d0c28c67545e831af", "time" : 1418913802, "y" : 2522, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "More careful usage of unforced decls in classes.\n\n1) Rename `decls` to `unforcedDecls` to make it clear that\n   it is danegrous to use.\n\n2) Prefer `info.decls` over `unforcedDecls`.\n\nThis fixes the problem reported in #305 where the primary\nconstructor was not found.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Dec 18 15:43:22 2014 +0100]"},
{"name" : "7c2238cd007b23e4fa502eacc3a6bebf988ea891", "time" : 1418908227, "y" : 2524, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Avpid returning ExprTypes from blocks.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Dec 18 14:10:27 2014 +0100]"},
{"name" : "e0bf1758ac32d69cf97d28f449cc0400755e3914", "time" : 1418858745, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #303 from dotty-staging/fix-packageObjects-members-erasure\n\nMake erasure insert `.package` in TermRefs to members of package object.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Thu Dec 18 00:25:45 2014 +0100]"},
{"name" : "341f3370310251471903314bb5a75a4176f8afc7", "time" : 1418849866, "y" : 2528, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Simplify TypeAlias#unapply\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Wed Dec 17 21:57:46 2014 +0100]"},
{"name" : "0a6461812aa5803726a8607546668f624987b140", "time" : 1418834521, "y" : 2529, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Simplified and commented makePackageObjPrefixExplicit\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Dec 17 17:42:01 2014 +0100]"},
{"name" : "6eaf815923e194cd4d0da8faa0f132dbf8de4608", "time" : 1418834521, "y" : 2529, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Refactored common behavior from TypeAssigner and TypeErasure\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Dec 17 17:42:01 2014 +0100]"},
{"name" : "48966b403a638201e7d174f96176351385f85ac7", "time" : 1418834521, "y" : 2529, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Treat  i0239 specially. It shows some problems that could be of interest.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Dec 17 17:42:01 2014 +0100]"},
{"name" : "9a0ca29cd321ef16ca2a2ce160624701f847542b", "time" : 1418834496, "y" : 2529, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make erasure insert `.package` in referneces\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Dec 17 17:41:36 2014 +0100]"},
{"name" : "a68980c1d322095cdd8d7a2b45b05d901072eeb1", "time" : 1418834137, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #251 from dotty-staging/shared-backend\n\nShared backend", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed Dec 17 17:35:37 2014 +0100]"},
{"name" : "7f6d234a6aca6fd0c638aec45d867dedb2077f29", "time" : 1418832691, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #302 from dotty-staging/fix/returns\n\nFix/returns", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed Dec 17 17:11:31 2014 +0100]"},
{"name" : "3582c128983943ed0dc5ddcd7d2b30217a507eb3", "time" : 1418826678, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #301 from dotty-staging/fix/#300-literals\n\nFix #300: Make literals have the same constants as their types.", "author" : "PersonIdent[odersky, odersky@gmail.com, Wed Dec 17 15:31:18 2014 +0100]"},
{"name" : "329b639970194128136cb54f2a8aa9c0e35fc2bc", "time" : 1418825045, "y" : 2536, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Move isSuppressed check from Reporter to ConsoleReporter.\n\nisSuppressed forces computation of the error message; should be\ncalled only when emitting the error.\n\nTODO: Generalize so that other emitting reporters inherit the behavior.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Dec 17 15:04:05 2014 +0100]"},
{"name" : "215be8b1c8c790cbab9260b2d4bb1f6873cbf7d0", "time" : 1418824952, "y" : 2536, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Label defs are not source methods.\n\nIf this commit is made without the previous fixes to returns,\nwe get errors in dotc_parsing (without the fix to polymorphic\nreturns) and in dotc_core (without the fix in tree transform).\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Dec 17 15:02:32 2014 +0100]"},
{"name" : "d5cc9141faef410c129b59c4455084e06d2f1ae9", "time" : 1418824872, "y" : 2536, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Don't transform Return#from\n\nExplanation given in the comment.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Dec 17 15:01:12 2014 +0100]"},
{"name" : "3ac70b64ebfe12dd211377aa2527a4666ec2e243", "time" : 1418824686, "y" : 2536, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix returns from polymorphic methods\n\nReturn proto type was wrong; it was the type of the method\n(with PolyParams if that type is polymorphic), where it should\nhave been the return type instantiated with the local type parameters.\nWe now instantiate the prototype as required.\n\nNote the typing of return nodes is a bit more subtle than in scalac, because\ndotc trees are immutable, so the tree pointed at by the context is of no help -\nit does not have a return type which we could make use of.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Dec 17 14:58:06 2014 +0100]"},
{"name" : "17b82bd239f5965dec7aa095f2637f2b3147c1c8", "time" : 1418818531, "y" : 2540, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix Literalize: (Long(2):Any) == (Int(2): Any) but constants aren't.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Dec 17 13:15:31 2014 +0100]"},
{"name" : "02e2ca2b0d4ddf16f5a3c3173c1fcdccc4216b83", "time" : 1418818022, "y" : 2540, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Check not only value equality of constants in Literalize postcondition but also type eqality\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Dec 17 13:07:02 2014 +0100]"},
{"name" : "d22055814f2442514dbfecbb90a156dc98cad7bf", "time" : 1418818020, "y" : 2540, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add checkPostCondition to Literalize\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Dec 17 13:07:00 2014 +0100]"},
{"name" : "ecbf5f545b46d65858d27173701def9e2a4d113a", "time" : 1418816185, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #285 from dotty-staging/fix/catchNonFatal\n\nFix/catch non fatal", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed Dec 17 12:36:25 2014 +0100]"},
{"name" : "a098fd360a3ef2d1eac86de695412054ec558f6e", "time" : 1418816130, "y" : 2540, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix #300: Make literals have the same constants as their types.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Dec 17 12:35:30 2014 +0100]"},
{"name" : "625ad7ff89e80f29d425b9dcb2077498b11f4e7c", "time" : 1418815626, "y" : 2545, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Remove catch-rethrow in Driver\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Dec 17 12:27:06 2014 +0100]"},
{"name" : "3a68e50073e9c4cef06c44e1dec7e3e492eb3274", "time" : 1418808878, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #270 from dotty-staging/change/type-aliases\n\nChange/type aliases", "author" : "PersonIdent[odersky, odersky@gmail.com, Wed Dec 17 10:34:38 2014 +0100]"},
{"name" : "ca03148fd5ba8b83cfa949f033eeaa82d45a9842", "time" : 1418758426, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #296 from dotty-staging/fix/#288-by-name-params-in-mixins\n\nFix problem with by name params in mixed in methods.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Tue Dec 16 20:33:46 2014 +0100]"},
{"name" : "d489eb4b74e53240b41723a819da49340f4a027e", "time" : 1418758248, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #299 from dotty-staging/try-handling\n\nTry handling inside patternmatcher", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Tue Dec 16 20:30:48 2014 +0100]"},
{"name" : "92305277cda52cd70b71c1fc55f1d647aacf7d71", "time" : 1418753557, "y" : 2549, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Provide a simple implementation of transformTry for backend.\nWill need to revisit it later in order to generate faster code.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 19:12:37 2014 +0100]"},
{"name" : "be18b805a3f95fdc1c0d0756c70c92bbdc92a2de", "time" : 1418753042, "y" : 2549, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix printing of Try nodes with non-empty cases.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 19:04:02 2014 +0100]"},
{"name" : "009a1e69e7bdc3df1b085d2271042607c83b1e82", "time" : 1418749339, "y" : 2551, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Made gadt map better encapsulated.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Dec 16 18:02:19 2014 +0100]"},
{"name" : "16554c0efe2d09ab3ef760522f0811a964f7ee84", "time" : 1418748374, "y" : 2551, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixed #264 - failure to typecheck GADTs\n\nThe previous scheme derived the right bounds, but then failed to use them\nbecause a TypeRef already has a set info (its bounds). Changing the bounds in\nthe symbol by a side effect does not affect that. This is good! But it showed\nthat the previous scheme was too fragile because it used a sneaky side effect\nwhen updating the symbol info which failed to propgate into the cached\ninfo in TypeRef.\n\nWe now keep GADT computed bounds separate form the symbol info\nin a map `gadt` in the current context.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Dec 16 17:46:14 2014 +0100]"},
{"name" : "ba74188596760a0826bc6921358eac22f99265d8", "time" : 1418747042, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #294 from samuelgruetter/tests-rewrite-2\n\nRun rewrite tool on tests (2)", "author" : "PersonIdent[odersky, odersky@gmail.com, Tue Dec 16 17:24:02 2014 +0100]"},
{"name" : "63e1bc95d4f72331fabf2fd838bb4e8d5b94ad67", "time" : 1418746944, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #282 from dotty-staging/fix/i0239-package-objects\n\nFix #239 - handling of package objects", "author" : "PersonIdent[odersky, odersky@gmail.com, Tue Dec 16 17:22:24 2014 +0100]"},
{"name" : "7c22c0dd3449336877e83ed4aaee0400d8189475", "time" : 1418746246, "y" : 2555, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix problem with by name params in mixed in methods.\n\nErasure choked on them before.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Dec 16 17:10:46 2014 +0100]"},
{"name" : "42851ed2675015d42bb341b82a09bd0bef4a8ce4", "time" : 1418744289, "y" : 2556, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "move failing tests from tests/untried/pos to tests/pending/pos\n", "author" : "PersonIdent[Samuel Gruetter, samuel.gruetter@epfl.ch, Tue Dec 16 16:38:09 2014 +0100]"},
{"name" : "5be609fc4e04e3cca5e1435ee41b8cacac9b0513", "time" : 1418733306, "y" : 2556, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "run srewrite version 88d3cd4126d135617a8189f0a855757d7e2ab806 on tests/untried/pos\n", "author" : "PersonIdent[Samuel Gruetter, samuel.gruetter@epfl.ch, Tue Dec 16 13:35:06 2014 +0100]"},
{"name" : "4c112037290a526c66bbb782a61bcd8a60730b4b", "time" : 1418732104, "y" : 2558, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Enable backend specific tests. Flag those that fail\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 13:15:04 2014 +0100]"},
{"name" : "c3bdd0b51b228ad689cf1cb42703b3fc5b28a577", "time" : 1418732104, "y" : 2558, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Stay compatible with scalac and javac in -d cli option\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 13:15:04 2014 +0100]"},
{"name" : "38ac631438adfb0dd06725cfe23cff3552943170", "time" : 1418732104, "y" : 2558, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make String_valueOf_Object agnostic of whether it runs before or after erasure\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 13:15:04 2014 +0100]"},
{"name" : "11e7dd8b12c29bac37a1d1bb2e111206fc5f9f3e", "time" : 1418732104, "y" : 2558, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Update docs and make memberClasses uses typeNameFilter.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 13:15:04 2014 +0100]"},
{"name" : "281da4f0cc61cfa02226bdeb5cf0b210d4f42456", "time" : 1418732104, "y" : 2558, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Update version of scalac fork\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 13:15:04 2014 +0100]"},
{"name" : "4a5e7321399052adb9bfc6fa3ed261aeb2db97f0", "time" : 1418732104, "y" : 2558, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix concatenation of multiple strings\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 13:15:04 2014 +0100]"},
{"name" : "92dceb1694a4160e6e29ff8eb0b09ced96e4fa46", "time" : 1418732104, "y" : 2558, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Handle Array.clone\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 13:15:04 2014 +0100]"},
{"name" : "81d56b0b2814faf70110e936852f53b43a7e56d3", "time" : 1418732104, "y" : 2558, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix loading of static methods in java.lang.String.\n\nDidn't manifest itself previously.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 13:15:04 2014 +0100]"},
{"name" : "e556edf3f904fd40ae485e8f2b9a74db9afdf4d1", "time" : 1418732104, "y" : 2558, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Use correct methods to get super interfaces of a class.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 13:15:04 2014 +0100]"},
{"name" : "72c979ebdc72235971d48827fd89a607dabcfb55", "time" : 1418732103, "y" : 2558, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix #258: string trailing $ in module names in backend.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 13:15:03 2014 +0100]"},
{"name" : "d498b6a4238a765e23ca320f8360799bee845e52", "time" : 1418732103, "y" : 2558, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Rely on Trait flag to generate interfaces.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 13:15:03 2014 +0100]"},
{"name" : "4eccc1b333cfe85de441bed85f64d77252239e46", "time" : 1418732103, "y" : 2558, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Desugar dotty Idents to selects\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 13:15:03 2014 +0100]"},
{"name" : "68e2a8ccb82158e6af6b74857f9681ff46990c59", "time" : 1418732103, "y" : 2558, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Untroduce SumUtils.superInterfaces which is different from mixins.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 13:15:03 2014 +0100]"},
{"name" : "7b2c5ba0b8ba36b443c7d2ca474142e03cb8b16e", "time" : 1418732103, "y" : 2558, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add default methods generation.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 13:15:03 2014 +0100]"},
{"name" : "89c2f12a7fad7a534faece88c370e1cca4ba0ccb", "time" : 1418732103, "y" : 2558, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Handle JavaSeqLiterals.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 13:15:03 2014 +0100]"},
{"name" : "9657586271a905ae8f7b258f1c61f2f628b54c4f", "time" : 1418732103, "y" : 2558, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix #257 ModuleDefs had invalid constructors.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 13:15:03 2014 +0100]"},
{"name" : "e6fcd3fc5d766c15dd9071950d13ae772c696a92", "time" : 1418732103, "y" : 2558, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Mimic scalac originalOwner.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 13:15:03 2014 +0100]"},
{"name" : "4b98e2203dfd2c2e5c17d9e2a9fdd9da92fb96c1", "time" : 1418732103, "y" : 2558, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Stop using deprecated methods in GenBcode.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 13:15:03 2014 +0100]"},
{"name" : "cf53701932db0c791afa2dbd8573ac193082ca17", "time" : 1418732103, "y" : 2558, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Differentiate between scala and java's flags: private and final\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 13:15:03 2014 +0100]"},
{"name" : "ff3de34eccd5f17c036117ac7f40c280542a0fdf", "time" : 1418732102, "y" : 2558, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Adapt backend to changes in scalac: new symbols get positions and types.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 13:15:02 2014 +0100]"},
{"name" : "81130ce45c1a4441023c536993538bcb62bf40d1", "time" : 1418732102, "y" : 2558, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix bugs around emulating scalac linkedClassOfClass.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 13:15:02 2014 +0100]"},
{"name" : "9e15d1630110cc524af3a2ef782d52f78145e26f", "time" : 1418732102, "y" : 2558, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix generation of lambdas for Unit-returning closures.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 13:15:02 2014 +0100]"},
{"name" : "f9d19cec82af03a0d51272c0959ce7a73810121b", "time" : 1418732102, "y" : 2558, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "implement isQualifierSafeToElide\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 13:15:02 2014 +0100]"},
{"name" : "6509f593c4d8530612d9f8796638c270dbc7c8f9", "time" : 1418732102, "y" : 2558, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Disable PrivateToStatic until it is fixed.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 13:15:02 2014 +0100]"},
{"name" : "48d9a2981ab8d9ea2bbeaed1ddf2468dc9acf138", "time" : 1418732102, "y" : 2558, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix TypeSymbol for This references in backend\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 13:15:02 2014 +0100]"},
{"name" : "c165784469214c7d033895e28e747c33bbf81722", "time" : 1418732102, "y" : 2558, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Java8 is the default target\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 13:15:02 2014 +0100]"},
{"name" : "07b4b87f5b02a53ce37585a06d434221fb6ecb75", "time" : 1418732102, "y" : 2558, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Mixin makes all traits Java Interfaces.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 13:15:02 2014 +0100]"},
{"name" : "eb50bc48534edd4ff126d681cedc5aad92e279d8", "time" : 1418732102, "y" : 2558, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix originalOwner for symbols that did not exist at typer.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 13:15:02 2014 +0100]"},
{"name" : "fd21e6ee334bd81e26be84d97d3d0e0642b20ee5", "time" : 1418732102, "y" : 2558, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Implemented handling of Closures.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 13:15:02 2014 +0100]"},
{"name" : "f3c74e15b3f0d61ac73bb03d2e4fdd0306115a3d", "time" : 1418732101, "y" : 2558, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Adapt dotty to changes in BackendInterface that save allocation on Product1s\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 13:15:01 2014 +0100]"},
{"name" : "f7158754e355447d3411cbda5b6b4c8779eae302", "time" : 1418732101, "y" : 2558, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make LambdaLifted methods follow JVM8 lambda parameters order.\n\nLambdaMetafactory expects environment to go first.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 13:15:01 2014 +0100]"},
{"name" : "f2681f5684ba040b31fa8e0b48bf12a97bf65a83", "time" : 1418732101, "y" : 2558, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Update to newer version of scalac fork\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 13:15:01 2014 +0100]"},
{"name" : "7b29889e0a2fdace25ebb5d0f15c102a807e86ee", "time" : 1418732101, "y" : 2558, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Support LabelDef's with Arguments. Fixes tailrec.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 13:15:01 2014 +0100]"},
{"name" : "20e9051eed5bc875d2d84dfee71ff958b8914edb", "time" : 1418732101, "y" : 2558, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix StackOverflow in handling of try. Try is now supported by backend\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 13:15:01 2014 +0100]"},
{"name" : "d23cab1dcff8c28d4817f3dccfefbc8cb58f017f", "time" : 1418732101, "y" : 2558, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Handle Arrays in backend.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 13:15:01 2014 +0100]"},
{"name" : "6446bbb41c48c91388373e5221b9874c676ccbfd", "time" : 1418732101, "y" : 2558, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix bug in dotty interface: wrong symbols used to get box\\unbox methods\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 13:15:01 2014 +0100]"},
{"name" : "15bfcda6e63999cf644cd4e36e3000726e336025", "time" : 1418732101, "y" : 2558, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Implemented handling of <label> DefDefs in backend.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 13:15:01 2014 +0100]"},
{"name" : "f78ef2ca72a1b70db98fa9f6a44bf81d33f3ff28", "time" : 1418732101, "y" : 2558, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Label test with nested cycles and simple patterns.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 13:15:01 2014 +0100]"},
{"name" : "3943aa8359b1e8f5109a616504b8677232ae78c5", "time" : 1418732101, "y" : 2558, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Update class-path dependant tests. Disable one.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 13:15:01 2014 +0100]"},
{"name" : "339b74629196e1c1a81f78924c09dc77b12c147a", "time" : 1418732100, "y" : 2558, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add test for backend.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 13:15:00 2014 +0100]"},
{"name" : "1c5e7b741da45517e96afc2e2553274760d1a193", "time" : 1418732100, "y" : 2558, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Modify runner script to include modified scalac on class path.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 13:15:00 2014 +0100]"},
{"name" : "0b73ed1ce8747ab8b69dffa48f4bc6b264f9e939", "time" : 1418732100, "y" : 2558, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Mixing now also changes Scala2 traits into interfaces.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 13:15:00 2014 +0100]"},
{"name" : "1ba9f18f7109206fa913951f2c4cf8ec6cd4e69a", "time" : 1418732100, "y" : 2558, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Disable backend by default in tests.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 13:15:00 2014 +0100]"},
{"name" : "156b62cce47b7cb68f6b4e5c5599ad87c54312ce", "time" : 1418732100, "y" : 2558, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Enable new phases.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 13:15:00 2014 +0100]"},
{"name" : "6878d9bd7f0ce38f650a33ce68ff3e4d40ad1904", "time" : 1418732100, "y" : 2558, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Complete DottyBackendInterface.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 13:15:00 2014 +0100]"},
{"name" : "e2dbf88f60b979bbceff600dc39db5faad3bb5ef", "time" : 1418732100, "y" : 2558, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add member lookups needed by backend.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 13:15:00 2014 +0100]"},
{"name" : "e51d0d12f7119d7c5578666edf951931021ec4d4", "time" : 1418732100, "y" : 2558, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "GenBcode phase implemented.\n\nThat doesn't mean it works :-)\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 13:15:00 2014 +0100]"},
{"name" : "feff44746b68946871616c577f53250a778b5928", "time" : 1418732100, "y" : 2558, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "remove dependency on Btypes from DottyPrimitives. Rely on symbols instead.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 13:15:00 2014 +0100]"},
{"name" : "7bc36d8186d395d1656c24ab86a0c4dfa0010ae7", "time" : 1418732100, "y" : 2558, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Depend on custom compiler with https://github.com/scala/scala/pull/4136 incorporated\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 13:15:00 2014 +0100]"},
{"name" : "0db32d2d221aed7b727ff79d241894c4f7d5a2a6", "time" : 1418732099, "y" : 2558, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "New phase: collectEntryPoints\n\ncollects entry points and registers them in backend\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 13:14:59 2014 +0100]"},
{"name" : "c742e95b808ab123a43fd10968100fab37321fe2", "time" : 1418732099, "y" : 2558, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Remove duplicate isAnonymousFunction\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 13:14:59 2014 +0100]"},
{"name" : "6aa461385b97efbdc883cc056037633ddd6405a4", "time" : 1418732099, "y" : 2558, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Move methods shared between Mixin and Backend to SymUtils.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 13:14:59 2014 +0100]"},
{"name" : "9c8976ddc62a5d152adc3ffef92309aec8e292e7", "time" : 1418732099, "y" : 2558, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Hack ClassFileParser to not treat Null$ or Nothing$ as modules.\n\nThey are classes.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 13:14:59 2014 +0100]"},
{"name" : "4b948aab11102a59e5224a3b8b1078d6d0e35e0e", "time" : 1418732099, "y" : 2558, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Update to scala 2.11.4\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 13:14:59 2014 +0100]"},
{"name" : "24954cd76ac77d2716ad9b10e48cc357a86d5343", "time" : 1418732099, "y" : 2558, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Erasure is on by default.\n\nRemove historical enabling of erasure for some tests: its enabled by default now\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 13:14:59 2014 +0100]"},
{"name" : "7d470b3e8c09fffd8a5c42e2aa8b22479e087a3a", "time" : 1418732099, "y" : 2558, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Sharing backend between scalac and dotty.\n\nDue to a lot of error and workarounds required for backend not regress in terms of speed, I guess the original idea was to high to be reached..\nNevertheless it was good to try.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Dec 16 13:14:59 2014 +0100]"},
{"name" : "981a21816e4cb10b8fbe4edcf0659fb3995d63f8", "time" : 1418724868, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #292 from dotty-staging/fix/#290-type-bind\n\nFix/#290 type bind", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Tue Dec 16 11:14:28 2014 +0100]"},
{"name" : "78547d17347befa01ffb7379b1e06d1fa07536e2", "time" : 1418724855, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #293 from smarter/fix/multiple-refinements-warning\n\nAvoid spurious warnings about forward references in refinements", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Tue Dec 16 11:14:15 2014 +0100]"},
{"name" : "5fced3a878bc39827f943d1578d63a3626d0f76f", "time" : 1418721305, "y" : 2616, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Avoid spurious warnings about forward references in refinements\n\nThe warning was triggered by cases like:\nclass A\ntype F = A { type T = Int; def f: T }\nWhich is treated differently from the following which did not produce a warning:\ntype F = A { type T = Int } { def f: T }\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Tue Dec 16 10:15:05 2014 +0100]"},
{"name" : "a928d99799be8f9ab567b5aca5e21cdd861fb5df", "time" : 1418663312, "y" : 2617, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix typechecking rules for Binds of type trees.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 15 18:08:32 2014 +0100]"},
{"name" : "4494c16758836296bdcc6567b3042ae3d3d02857", "time" : 1418663312, "y" : 2617, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make Bind nodes type trees depending on bound name.\n\nBind nodes were always TermTrees, which is wrong.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 15 18:08:32 2014 +0100]"},
{"name" : "3d695dd4267897ba14d814b7f12a91100ddb0f30", "time" : 1418658848, "y" : 2545, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Made typedUnApply a hook that has to be overridden in a ReTyper.\n\nChange exhibits a problem in the transformers: pattern matching try's\ndo not seem to be handled.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 15 16:54:08 2014 +0100]"},
{"name" : "332b1af33441b382b3e1efa68c5dab4fcda8b2bc", "time" : 1418657813, "y" : 2545, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Replace Throwable catches with NonFatal\n\nPreviously, stackoverflows led to infinite loops because the catch\nimmediately threw another stack overflow. Anyway, one should never\ncatch Throwable.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 15 16:36:53 2014 +0100]"},
{"name" : "0eec180a686a4425bd3f3089006eda530123fe2e", "time" : 1418657813, "y" : 2545, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add a typedUnApply method.\n\nThe method is needed to be able to survive ReTypers between frontend and\npattern matching.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 15 16:36:53 2014 +0100]"},
{"name" : "21fa5dd1a47727c977848163e2610be745951dbc", "time" : 1418657725, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #291 from dotty-staging/fix-transform-bind\n\nFix Bind node contents not being transformed if phase didn't register transformBind.", "author" : "PersonIdent[odersky, odersky@gmail.com, Mon Dec 15 16:35:25 2014 +0100]"},
{"name" : "4954bd0060124387cbcfcb387512804b792245df", "time" : 1418655114, "y" : 2623, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix Bind node contents not being transformed if phase didn't register transformBind.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Dec 15 15:51:54 2014 +0100]"},
{"name" : "413bcebf5a87102b1f1b2840b92b6a8017aa16df", "time" : 1418644702, "y" : 2624, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix to asSeenFrom for package object members\n\nLike TypeAssigner, asSeenFrom needs to insert a package object if the\nprefix is a package but the class enclosing the type is not.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 15 12:58:22 2014 +0100]"},
{"name" : "8088ef2d162d877119b762ae156824d19afb5f6d", "time" : 1418637076, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #275 from dotty-staging/fix/#266-lambdaLift\n\nFix/#266 lambda lift", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon Dec 15 10:51:16 2014 +0100]"},
{"name" : "d65be09e86302bdf690a6da7a22d7338e869de43", "time" : 1418637056, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #286 from dotty-staging/change/defaultphase\n\nChange/defaultphase", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon Dec 15 10:50:56 2014 +0100]"},
{"name" : "d0848873788d118a9ba73c33e474a7fd104a939d", "time" : 1418583823, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #272 from dotty-staging/cache-nx-info\n\nPrecompute NXTransforms to speedup repeated application of TreeTransformer.macroTransform", "author" : "PersonIdent[odersky, odersky@gmail.com, Sun Dec 14 20:03:43 2014 +0100]"},
{"name" : "b0d3ae041dd8d4b250decda17084ce944442345e", "time" : 1418583788, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #284 from olhotak/pr-annotatedtypes\n\nfixes to handle AnnotatedTypes transparently like the types that they wrap", "author" : "PersonIdent[odersky, odersky@gmail.com, Sun Dec 14 20:03:08 2014 +0100]"},
{"name" : "b7c196e38d6cc9bb9c2331a6d7507b258b30ce29", "time" : 1418568960, "y" : 2629, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Remove fruitless overrides of treeTransformPhase\n\nNow the default phase of treeTransformPhase is phase.next, we\ncan remove all overrides that specify the same phase.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 14 15:56:00 2014 +0100]"},
{"name" : "cf3af0e0e75e8f905eafaa12c29b87b320f7e4b1", "time" : 1418568851, "y" : 2629, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Eliminate GettersSetters\n\nHas been replaced by Getters, but some traces remained.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 14 15:54:11 2014 +0100]"},
{"name" : "a9c38ed050b46267cff902815b87362425df3ed0", "time" : 1418568219, "y" : 2629, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Change default treeTrannsformPhase to phase.next\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 14 15:43:39 2014 +0100]"},
{"name" : "db989f9d6552e1f663474d9983199dea00f87864", "time" : 1418567972, "y" : 2629, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make Literalize run at new default phase thisTransform.next\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 14 15:39:32 2014 +0100]"},
{"name" : "670f6024cfbc97f73d1534e10a602e8bdccf0e48", "time" : 1418567649, "y" : 2629, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Change phase handling in enteredAfter\n\nThis makes it more consistent with related methods ensureFreshScopeAfter,\ninstallAfter.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 14 15:34:09 2014 +0100]"},
{"name" : "b140f85928fd1108f8d462ee5d378a719a03eac7", "time" : 1418567217, "y" : 2629, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Change treeTransformPhase for SyntheticMethods to new default\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 14 15:26:57 2014 +0100]"},
{"name" : "25f4986d3e1a5fcc9f5c1ee5923c302e30673702", "time" : 1418566604, "y" : 2629, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make sure AnnotationTransformers run at own phase\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 14 15:16:44 2014 +0100]"},
{"name" : "4274adf15c6cbe359fd8d98f2f412fe56244f740", "time" : 1418566153, "y" : 2629, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Ensure that transformStats is run at phase thisTransformPhase.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 14 15:09:13 2014 +0100]"},
{"name" : "8a2cbf411888083e810c765bf02242e224e31885", "time" : 1418566095, "y" : 2629, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make sure the period of a context always contains a single phase\n\nMulti-phase periods mean that ctx.phaseId is no longer valid, which means\na lot of invariants break.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 14 15:08:15 2014 +0100]"},
{"name" : "fa62cff53d8d568670eadf64b3accee6f6e6d030", "time" : 1418503963, "y" : 2638, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "handle AnnotatedTypes transparently in Tree.denot\n", "author" : "PersonIdent[Ondrej Lhotak, olhotak@uwaterloo.ca, Sat Dec 13 21:52:43 2014 +0100]"},
{"name" : "a862c6ac14d0645ee0e44ff9b447975a4d7d61ba", "time" : 1418503963, "y" : 2638, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "add stripAnnots method to Type to unwrap AnnotatedTypes\n", "author" : "PersonIdent[Ondrej Lhotak, olhotak@uwaterloo.ca, Sat Dec 13 21:52:43 2014 +0100]"},
{"name" : "ed128df796ce364097865a56865b0a42fa4c1c22", "time" : 1418503963, "y" : 2638, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "fix dealias to handle AnnotatedTypes transparently\n", "author" : "PersonIdent[Ondrej Lhotak, olhotak@uwaterloo.ca, Sat Dec 13 21:52:43 2014 +0100]"},
{"name" : "81a7e9037c8f70dbdf3e75c226bfee133b3300c9", "time" : 1418503963, "y" : 2638, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "fix stripTypeVar to handle AnnotatedType transparently\n", "author" : "PersonIdent[Ondrej Lhotak, olhotak@uwaterloo.ca, Sat Dec 13 21:52:43 2014 +0100]"},
{"name" : "e7a4197cfb7b622893fa0dc99f42824522d89ca1", "time" : 1418500345, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #279 from dotty-staging/test/#91\n\nTwo new tests", "author" : "PersonIdent[odersky, odersky@gmail.com, Sat Dec 13 20:52:25 2014 +0100]"},
{"name" : "6542458dad39115734aa3d9cce9dff08a6176fb9", "time" : 1418500327, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #283 from dotty-staging/fix/#291-null-primitive-conforms\n\nDisable implicit conversions between from `Null` and `Nothing`.", "author" : "PersonIdent[odersky, odersky@gmail.com, Sat Dec 13 20:52:07 2014 +0100]"},
{"name" : "9f87127c40a2b8ac0c8f97d039053e4d2f7577e4", "time" : 1418494558, "y" : 2644, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Disable implicit conversions between from `Null` and `Nothing`.\n\nThis is necessary to reject code like\n\n     val x: Boolean = null\n\nWithout the restriction, this code would typecheck and expand to\n\n     val x: Boolean = Predef.Boolean2boolean(null)\n\nsince `null` counts as a value of type `java.kang.Boolean`.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Dec 13 19:15:58 2014 +0100]"},
{"name" : "9bc3bb2d1fe3348bc7a92e5cb38a7d9f77166a71", "time" : 1418490161, "y" : 2624, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix #239 - handling of package objects\n\nReferences to `.package` are now also inserted if the\naccessed member comes from a class inherited by a package\nobject.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Dec 13 18:02:41 2014 +0100]"},
{"name" : "0cee59bbf965440de813d5813c6086b97e444d5f", "time" : 1418489877, "y" : 2646, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Two new tests\n\n1) Verify we survive illegal infinite paths. Closes #91.\n2) Verify we handle fbounds in and types correctly.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Dec 13 17:57:57 2014 +0100]"},
{"name" : "f3d887f079efbe7dbb53abd22bd212eee8e1c67a", "time" : 1418489573, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #277 from dotty-staging/change/drop-not-null\n\nChange/drop not null", "author" : "PersonIdent[odersky, odersky@gmail.com, Sat Dec 13 17:52:53 2014 +0100]"},
{"name" : "1466e88efacd7247d426974160fd8968f8921b0b", "time" : 1418489503, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #278 from dotty-staging/fix/#248-inherit-refinements\n\nFix #248: Class cannot inherit from refinement types", "author" : "PersonIdent[odersky, odersky@gmail.com, Sat Dec 13 17:51:43 2014 +0100]"},
{"name" : "94027830eb9c38784b141801bcfae996cd63d896", "time" : 1418483393, "y" : 2649, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixed test\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Dec 13 16:09:53 2014 +0100]"},
{"name" : "ae0411cea615b7248464d8a3ad2584528929fbfa", "time" : 1418482786, "y" : 2649, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "One more test case, coming from #214.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Dec 13 15:59:46 2014 +0100]"},
{"name" : "35ba97ca7ac92761cad1a0be43fbe52d9bcb3c92", "time" : 1418482064, "y" : 2651, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Remove obsolete mentions of the NotNull class\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Sat Dec 13 15:47:44 2014 +0100]"},
{"name" : "291b563418011120c9fbe05a05e118a7ec28005d", "time" : 1418476167, "y" : 2649, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix #248: Class cannot inherit from refinement types\n\nWe now check that classes do not inherit from refinement types\n(unless they are an encoding of parameterized types), nor from\n& or | types.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Dec 13 14:09:27 2014 +0100]"},
{"name" : "a4c11eb0004736fd10fa500d7ef0edc7044e5444", "time" : 1418468375, "y" : 2651, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Drop NotNull class and associated code.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Dec 13 11:59:35 2014 +0100]"},
{"name" : "179b9cc31552408c01928e1fca0e0af2a7453843", "time" : 1418466811, "y" : 2651, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix subtyping of null and refined types.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Dec 13 11:33:31 2014 +0100]"},
{"name" : "7cdf3d0dc5709634825b1300d77d1a0ef01c69fa", "time" : 1418459131, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #274 from smarter/fix/period-of-phases\n\nPhases: set the period correctly", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Sat Dec 13 09:25:31 2014 +0100]"},
{"name" : "1ce4c34c65ada5eb6c42fb72a03171467c08ee9b", "time" : 1418402565, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #265 from dotty-staging/fix/type-seqliteral\n\nPass right prototype to SeqLiteral elements.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri Dec 12 17:42:45 2014 +0100]"},
{"name" : "c96482cfd99c04855b48dc146c9e2daf0cbaef87", "time" : 1418402353, "y" : 2657, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixed narrowLiftedOwner in LambdaLift\n\nA lot of cases were missing before and caused failures\nin the newly added test in TreeChecker#typedThis.\n\nNow we assure that all this references appear inside\nthe referenced class.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Dec 12 17:39:13 2014 +0100]"},
{"name" : "699e0d829c7bc3e3bf82776b311d9dd43aa379ac", "time" : 1418402202, "y" : 2657, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Changed erasure of ThisType\n\nWas: erasure of underlying type.\nNow: erased typeRef of underlying class.\n\nThe differ if there is a self type. In this case,\na this type did erase to teh erasure of the self type, which\nis wrong.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Dec 12 17:36:42 2014 +0100]"},
{"name" : "ae655d4300ff62e8951514960da53a256e508596", "time" : 1418398934, "y" : 2659, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Phases: set the period correctly\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Fri Dec 12 16:42:14 2014 +0100]"},
{"name" : "ca2ed3f6e609122781fe9b25ce16b4a4dd80f56a", "time" : 1418398932, "y" : 2659, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Phases: The operator <= does not need a context anymore\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Fri Dec 12 16:42:12 2014 +0100]"},
{"name" : "c327c4cc95270a717b799be05d5d9b19c671050e", "time" : 1418393098, "y" : 2661, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make TreeTransform type check in dotty. There's no magic type behind getClass in dotty.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri Dec 12 15:04:58 2014 +0100]"},
{"name" : "a9867e0282b2a4356d458421d7f7e89f8350de7e", "time" : 1418392745, "y" : 2661, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Precompute initial NXTransformations in TreeTransforms.\n\nHelps Annotation transformers which do not need to reinitialise themselves anymore.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri Dec 12 14:59:05 2014 +0100]"},
{"name" : "56cad14824c512edb9ace536e8e2c2409b50bebe", "time" : 1418392612, "y" : 2661, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Call getClass 30 times less in TreeTransforms initialisation.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri Dec 12 14:56:52 2014 +0100]"},
{"name" : "f420f7af7628faa0b9c83cdd333c7d017af42945", "time" : 1418392567, "y" : 2661, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Remove Separator. It's not used anymore\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri Dec 12 14:56:07 2014 +0100]"},
{"name" : "95ef88f79d4560dde676db9a2439c89a7f9c582a", "time" : 1418390201, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #267 from dotty-staging/fix/byname-args\n\nFix by-name arguments", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri Dec 12 14:16:41 2014 +0100]"},
{"name" : "7c1e76d085734697ccc17c4b21f59c15e078e0aa", "time" : 1418235212, "y" : 2666, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Get rid of TypeBounds.onAlias\n\nThis was the last bit that tested for the fragile `lo eq hi` condition.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Dec 10 19:13:32 2014 +0100]"},
{"name" : "4a4b3106a5ed6ad42261589459c6b7db81df2653", "time" : 1418234088, "y" : 2666, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Revert TypeBounds.real to TypeBounds.apply\n\nTypeBounds.real served its purpose: Flushing out all problems with\ncreating TypeBounds.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Dec 10 18:54:48 2014 +0100]"},
{"name" : "916fe1b49061cbc9a78a984c54d3eef2ac2ba08c", "time" : 1418234087, "y" : 2666, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make derivedTypeBounds always create real TypeBounds.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Dec 10 18:54:47 2014 +0100]"},
{"name" : "5a7ac039cef356b24100cc4e9b2cc384bdc61fbc", "time" : 1418234087, "y" : 2666, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Refactor & and | on TypeBounds\n\nGenerate Type aliases only when original type(s) were\naliases.\n\nAlso, TypeBounds.real never generates an alias.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Dec 10 18:54:47 2014 +0100]"},
{"name" : "a5d2dc330b7d148eec809343d6906b438f11e746", "time" : 1418234087, "y" : 2666, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Distinguish calls to create real type bounds from alias type bounds.\n\nSo far this affects only the calls, both methods are still the same.\nBut their implementation will be changed next.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Dec 10 18:54:47 2014 +0100]"},
{"name" : "b1b76515a66d94e9552f3ccde02cb4d1bacbc0ec", "time" : 1418234042, "y" : 2666, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Moved derivedTypeAlias method to TypeAlias\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Dec 10 18:54:02 2014 +0100]"},
{"name" : "176d677258051fd1eef1d1bf26575919cab03530", "time" : 1418234025, "y" : 2666, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Converted some TypeBounds pattern matches to TypeAlias matches.\n\nReplace all\n\n     case TypeBounds(lo, hi) if lo eq hi =>\n\npatterns with\n\n     case TypeAlias(alias) =>\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Dec 10 18:53:45 2014 +0100]"},
{"name" : "db48496502eb1d86f54365b5a815e45a52f4819d", "time" : 1418233914, "y" : 2666, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "TypeAlias unapply accepts only Type Aliases\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Dec 10 18:51:54 2014 +0100]"},
{"name" : "d4d11fe7732e436178d7fe0350e116c646452cc4", "time" : 1418233913, "y" : 2666, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Create TypeAlias subclass of TypeBouunds\n\nSpecialize hash consing of type aliases.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Dec 10 18:51:53 2014 +0100]"},
{"name" : "63505c28506445216e883309237c84448ce11a7d", "time" : 1418233913, "y" : 2666, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add equality method to TypeBounds.\n\nCuriously, was missing before, which meant variance was ignored when hash-consing\nTypeBounds.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Dec 10 18:51:53 2014 +0100]"},
{"name" : "fc23083675e4b194e42a0c310b1c43ab5d3aed2e", "time" : 1417803984, "y" : 2676, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix by-name arguments\n\nPrevious scheme relying on Attachments was fragile. We now use\na dummy method application, which transmits info reliably to\nErasure.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Dec 5 19:26:24 2014 +0100]"},
{"name" : "0b82c376e771e493e4d595bf22b478790f7b5166", "time" : 1417793353, "y" : 2677, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Better typing of seqLiteral in erasure.\n\nFixed two problems with previous commit.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Dec 5 16:29:13 2014 +0100]"},
{"name" : "042cee21d2d12445d728b19b896a75ba4a4a7bd9", "time" : 1417792280, "y" : 2677, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Pass right prototype to SeqLiteral elements.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Dec 5 16:11:20 2014 +0100]"},
{"name" : "8336a0ddbe78b363394c48e3407b79c72008d2b3", "time" : 1417789457, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #264 from dotty-staging/fix/trait-erasure\n\nFix erasure of trait info", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri Dec 5 15:24:17 2014 +0100]"},
{"name" : "8ee6e185236208c7eae5d735d4291ea2ee0e2362", "time" : 1417787275, "y" : 2680, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixed formatting (wrong indentation)\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Dec 5 14:47:55 2014 +0100]"},
{"name" : "f6eeb18268fabb86e10c89a9f6b9125663f4ed11", "time" : 1417787159, "y" : 2680, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Simplified code a bit\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Dec 5 14:45:59 2014 +0100]"},
{"name" : "45fd08763fa9f1a45114ce8cd6125e6a83bf3409", "time" : 1417786616, "y" : 2680, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix erasure of trait info\n\nAfter erasure, traits always extend object, and no other class.\n\nThe change flushed out three more problems, one in the handling of\nSuper trees in erasure, another in bridge method generation. and a\nthird that class RepeatedParam had Seq, which is a trait, as first parent.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Dec 5 14:36:56 2014 +0100]"},
{"name" : "86eb1bb2b5f9ddd9ed8ff45fc304e29c5f6c668d", "time" : 1417679715, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #261 from dotty-staging/fix/type-seqliteral\n\nFix/type seqliteral", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Thu Dec 4 08:55:15 2014 +0100]"},
{"name" : "a612da844fc7c9e9cc920e4b9c0ecb65e0273d0c", "time" : 1417627655, "y" : 2677, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add new SeqLiterals phase.\n\nReplaces SeqLiterals by JavaSeqLiterals, because the latter's\n(array-)type is preserved after erasure.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Dec 3 18:27:35 2014 +0100]"},
{"name" : "8fb5e1e8ee69f14fec52056d43528755544870b7", "time" : 1417627583, "y" : 2677, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Replace `==` with `eq` when determining unique types\n\nWhen hash-consing TypeBounds, RefinedTypes and NamedTypes, we\nnow check the argument types with `eq`, where before it was `==`.\nThis is necessary for TypeBounds, because it makes a difference\nwhether a TypeBound has `eq` parts (then it is a type alias) or not.\nSo we cannot merge type aliases with non-aliases.\n\nThe symptom of the problem was when compiling Patterns.scala twice with\nthe new SeqLiterals phase (next commit) enabled. On second run, we encountered\nan ArrayType[>: String <: String], even if we only created an ArrayType[String].\nThis was a consequence of the two types being identified by uniques.\n\nTodo: Change the system so that type aliases are recognized more robustly.\nBut the present change seems to be useful anyway because it speeds up\nuniques hashing. I verified that the stricter condition on uniques creates less\nthan 1% more types than before. So the speedup of hashing looks worthwhile.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Dec 3 18:26:23 2014 +0100]"},
{"name" : "a9a8124199eabe8539152f05718a5d44e4b04855", "time" : 1417627219, "y" : 2677, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Simplification in type assigning SeqLiterals\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Dec 3 18:20:19 2014 +0100]"},
{"name" : "95ffe46b6c79ddef3536619cff23134ac8bab010", "time" : 1417627184, "y" : 2677, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "made ArrayType constructor phase aware\n\nAvoid to create ArrayTypes after erase.\n\nNote that the *extractor* does not recognize JavaArrayTypes as\nArrayTypes. Doing so would create an infinite loop in sigName.\nGenerally, we do not want to ppaper over the difference when analysing\ntypes.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Dec 3 18:19:44 2014 +0100]"},
{"name" : "1ec141e089a60a5daa80e97b82ffe13f69321b9a", "time" : 1417614940, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #260 from dotty-staging/fix/method-impls\n\nMake sure all non-deferred methods are implemented", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed Dec 3 14:55:40 2014 +0100]"},
{"name" : "3ee4a25966ead5410351faf40f3aa5745296a3d4", "time" : 1417614498, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #259 from dotty-staging/fix/tree-transforms-seq-literal\n\nFix TreeTransfrom ignoring SeqLiterals.", "author" : "PersonIdent[odersky, odersky@gmail.com, Wed Dec 3 14:48:18 2014 +0100]"},
{"name" : "c16e4b2bd8948be3a250373fb9eac98bb990e43a", "time" : 1417614400, "y" : 2690, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make sure all non-deferred methods are implemented\n\nChecked by a new post condition after memoize.\n\nTwo bugs were detected and fixed by the condition\n\n(1) Memoize did not implement getters and setters of ParamAccessors\n(2) ResolveSuper did not implement super accessors in non-trait classes.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Dec 3 14:46:40 2014 +0100]"},
{"name" : "ff687ee67f4a9caf55eb2f111cebc3f509b5ef63", "time" : 1417610899, "y" : 2691, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix TreeTransfrom ignoring SeqLiterals.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Dec 3 13:48:19 2014 +0100]"},
{"name" : "5ff3d0fe4370c525c8d29f6483892d0bf59cd4c0", "time" : 1417427972, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #254 from dotty-staging/fix/newArray-v2\n\nFix array creation v2", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon Dec 1 10:59:32 2014 +0100]"},
{"name" : "91c61e4694097971b9a0c139048b7239d0f05588", "time" : 1417209171, "y" : 2693, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Previous scheme was buggy; leaked Array types to backend.\nNow: All new Array[T] methods are translated to calls of the form\n\n    dotty.Arrays.newXYZArray ...\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Nov 28 22:12:51 2014 +0100]"},
{"name" : "745c8523ecdd9271b70447332cc2880a3f3ef19a", "time" : 1417022276, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #242 from dotty-staging/fix/mixins\n\nFix/mixins", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed Nov 26 18:17:56 2014 +0100]"},
{"name" : "b18ce863f5f2444a5a00ccc9d55c4ee12115c467", "time" : 1417005849, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #244 from dotty-staging/fix/refinementTypes-v2\n\nAllow refinements that refine already refined types.", "author" : "PersonIdent[odersky, odersky@gmail.com, Wed Nov 26 13:44:09 2014 +0100]"},
{"name" : "fc319b002ff4bc82061250352f1568c612c70d72", "time" : 1416998812, "y" : 2696, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Allow refinements that refine already refined types.\n\nPreviously, a double definition errorfor `T` was produced in a case like this:\n\n     type T1 = C { T <: A }\n     type T2 = T1 { T <: B }\n\nThis was caused by the way T1 was treated in the refinement class\nthat is used to typecheck the type. Desugaring of T2 with `refinedTypeToClass`\nwould give\n\n     trait <refinement> extends T1 { type T <: B }\n\nand `normalizeToClassRefs` would transform this to:\n\n     trait <refinement> extends C { type T <: A; type T <: B }\n\nHence the double definition. The new scheme desugars the rhs of `T2` to:\n\n     trait <refinement> extends C { this: T1 => type T <: B }\n\nwhich avoids the problem.\n\nAlso, added tests that #232 (fix/boundsPropagation) indeed considers all refinements\ntogether when comparing refined types.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Nov 26 11:46:52 2014 +0100]"},
{"name" : "a7d580981c503358de149fa535ccc2075810ea6e", "time" : 1416997396, "y" : 2697, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Allow deep subtypes in dotc_transform.\n\nThe clause got accidentally dropped in the rebase.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Nov 26 11:23:16 2014 +0100]"},
{"name" : "8d2bae9377024d210ff46aa212a2838271416b0c", "time" : 1416990565, "y" : 2697, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Removed println's left accidentally in code base.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Nov 26 09:29:25 2014 +0100]"},
{"name" : "3e7d63e7331807d3b92921fc4b1bc2bcfbf30d83", "time" : 1416990565, "y" : 2697, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixed data race in ResolveSuper\n\nThe datarace happened because for method \"transform\" implemented\nby ResolveSuper which disambiguated overridden methods.\nPreviously, there was a reference FirstTransform.this.transform\nof type termRefWithSig to the method implemented in a super trait. Now the same\nreference points to the newly implemented method.\n\nSolved because ResolveSuper now generates symbolic references.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Nov 26 09:29:25 2014 +0100]"},
{"name" : "03ec379926f1f900f09c50dd038fba86feae70f6", "time" : 1416990528, "y" : 2697, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix of intersection not empty\n\nThe bug caused new version of FirstTransform to compile with errors.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Nov 26 09:28:48 2014 +0100]"},
{"name" : "5733684a4ec6857ece1048d56654dcd749163510", "time" : 1416990340, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #238 from dotty-staging/fix/bounds-propagation-v2\n\nFix/bounds propagation v2", "author" : "PersonIdent[odersky, odersky@gmail.com, Wed Nov 26 09:25:40 2014 +0100]"},
{"name" : "a2884d5338e139fb2ff795b3d08947df58f9b953", "time" : 1416910741, "y" : 2702, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Added test case from SI-6169\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Nov 25 11:19:01 2014 +0100]"},
{"name" : "48f78cd66df9f6cd31201ba79b02891a99f1dfbe", "time" : 1416852082, "y" : 2702, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Simpler cycle detection\n\nTurns out that the last commit was a red herring. None of the hoops\nit jumped though was necessary. Instead there was a bug in isRef\nwhich caused `&` to erroneously compute T & Int as Int.\n\nThe bug was that we always approximated alias types by their high bound. But\nin the present case, this leads to errors because U gets 'bounds >: Nothing <: Any',\nbut it was still an alias type (i.e. its Deferred flag is not set). The fix\ndereferences aliases only if their info is a TypeAlias.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 24 19:01:22 2014 +0100]"},
{"name" : "642c5e4500abfc5cef51eee7ed0a98930a24312f", "time" : 1416845847, "y" : 2702, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixed cycle detection.\n\nNow detects the cycles reported by @retronym\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 24 17:17:27 2014 +0100]"},
{"name" : "9d6c1040448c48dac2ac3f292fd1e3b65b061b78", "time" : 1416837470, "y" : 2702, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Cyclicity checking independent of positions.\n\nMore robust cyclicity check which does not depend on source positions.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 24 14:57:50 2014 +0100]"},
{"name" : "05d286ba8e2a006f8c739f25737d5f86f4554889", "time" : 1416837469, "y" : 2702, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Added and corrected tests\n\nto reflect last commit.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 24 14:57:49 2014 +0100]"},
{"name" : "e26fb448e6b6e62e38fbda0f564a13fc0b149c9f", "time" : 1416837469, "y" : 2702, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Updated refinement checking.\n\nToucher checks, but only deprecated warnings instead of errors.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 24 14:57:49 2014 +0100]"},
{"name" : "917f58fe1de3f0237c9133ccda462f8af52124f8", "time" : 1416837469, "y" : 2702, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Better printing of variant types with wildcard arguments.\n\nWe used to approximate these by their bounds, but this is confusing.\nSee comment in printbounds.scala.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 24 14:57:49 2014 +0100]"},
{"name" : "a468a864dcdb89091985c194737968a979e874fb", "time" : 1416837469, "y" : 2702, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "checkBounds refactoring\n\nMove core logic to TypeOps, only leave error reporting in Checking.\nThat way, we have the option of re-using the code as a simple test\nelsewhere.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 24 14:57:49 2014 +0100]"},
{"name" : "f6ebe1ec66220db511d0080f3807c3a0512fc01c", "time" : 1416837469, "y" : 2702, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Take off the training wheels for refined type comparisons.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 24 14:57:49 2014 +0100]"},
{"name" : "832957339c850a64fb7093f3ed6b19c91c5bdfac", "time" : 1416837469, "y" : 2702, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix to checkBounds\n\nNeed to account for the fact that some argument types may be TypeBoudns themselves.\nThe change makes Jason's latest example work.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 24 14:57:49 2014 +0100]"},
{"name" : "7427c671f9a5321dd13a74b5175bba512699b385", "time" : 1416837469, "y" : 2702, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixes in TypeComparer for RefinedTypes.\n\nThe previous scheme did not propagate bounds correctly. More generally,\ngiven a comparison\n\n     T { X <: A }  <:   U { X <: B }\n\nit would errenously decompose this to\n\n     T <: U, A <: B\n\nBut we really need to check whether the total constraint for X in T { X <: A }\nsubsumes the total constraint for X in T { X <: B }\n\nThe new scheme propagates only if the binding in the lower type is an alias.\nE.g.\n\n    T { X = A }  <:   Y { X <: B }\n\ndecomposes to\n\n    T { A = A }  <:   U, A <: B\n\nThe change uncovered another bug, where in the slow path we too a member relative to a refined type;\nWe need to \"narrow\" the type to a RefinedThis instead. (See use of \"narrow\" in TypeComparer).\nThat change uncovered a third bug concerning the underlying type of a RefinedThis. The last bug was fixed in a previous commit (84f32cd814f2e07725b6ad1f6bff23d4ee38c397).\n\nTwo tests (1048, 1843) which were pos tests for scalac but failed compling in dotc have\nchanged their status and location. They typecheck now, but fail later. They have been\nmoved to pending.\n\nThere's a lot of diagnostic code in TypeComparer to figure out the various problems. I left it in\nto be able to come back to the commit in case there are more problems. The checks and diagnostics\nwill be removed in a subsequent commit.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 24 14:57:49 2014 +0100]"},
{"name" : "a89f48d1c3bef21ecf14048985334de6e0a8e505", "time" : 1416837469, "y" : 2702, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Changed underlying type of RefinedThis\n\nNow: The underlying refined type. Was: The parent of the type.\nWe need the change because RefinedThis is used as a narrowed version\nof the underlying refinedType (e.g. in TypeComparer rebase), and the old\nscheme would lose a binding of that type.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 24 14:57:49 2014 +0100]"},
{"name" : "f4d6c0f829cf3102e31fae020442d5e55998bcee", "time" : 1416837469, "y" : 2702, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "More robust isSetter test.\n\nAvoids cyclic references caused by forcing info too early.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 24 14:57:49 2014 +0100]"},
{"name" : "8d94a935e8b980267c273ea13d2c732b86067f8f", "time" : 1416837469, "y" : 2702, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "More robust TypeVar printing.\n\nAvoid the crash if origin is not associated with a bound in the\ncurrent constraint.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 24 14:57:49 2014 +0100]"},
{"name" : "958e2a0f8b79402b1a430f0fe7802af9de583d71", "time" : 1416837469, "y" : 2702, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixed type adaptation problem in checkBounds\n\nWe need to adapt type parameter bounds with an as-ssen-from to the\nprefix of the type constructor.\n\nMakes pos/boundspropagation pass.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 24 14:57:49 2014 +0100]"},
{"name" : "4df3d2a36162f99ade57e209ce432733e082d2a5", "time" : 1416837368, "y" : 2702, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make reduceProjection use lookupRefined\n\nNeeded some fixes to lookup refined. The potential alias\ntype is now calculated by taking the member of the original\nrefined type, instead of by simply following the refined info.\nThis takes into account refinements that were defined after\nthe refinement type that contains the alias.\n\nThe change amde another test (transform) hit the deep subtype limit,\nwhich is now disabled.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 24 14:56:08 2014 +0100]"},
{"name" : "38b2a61e3dba6160292943a481ccf2b85a695ba7", "time" : 1416837298, "y" : 2702, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Improve simplifications of type projections.\n\nAn example where this helps:\n\nPreviously, the private value `mnemonics` in Coder.scala was fof the form\n\n     Lambda$IP { ... } # Apply\n\nIt now simplifies to a Map[...] type.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 24 14:54:58 2014 +0100]"},
{"name" : "779afd2f65f967ec5af1ac5ec7464ad5851852ad", "time" : 1416833504, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #213 from dotty-staging/javaparser\n\nJavaparser & ElimRepeated fixes & Annotation-fixes", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon Nov 24 13:51:44 2014 +0100]"},
{"name" : "859a7fe21d4e2b9a2f336bc38815b21367a2993b", "time" : 1416684336, "y" : 2720, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Do not skip packages in FirstTransform\n\nPackages also get a JavaDefined flag, but they shouldn't be removed by FirstTransform.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Nov 22 20:25:36 2014 +0100]"},
{"name" : "14654c374a4a843832ddcfaf419f79d756842237", "time" : 1416683423, "y" : 2720, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Drop java-defined trees in FirstTransform\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Nov 22 20:10:23 2014 +0100]"},
{"name" : "31aef8132822b4b57c958e7fa17bad24d47fb8d6", "time" : 1416683423, "y" : 2720, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Address reviewer feedback: restructure applyOverloaded.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Nov 22 20:10:23 2014 +0100]"},
{"name" : "ec104eff6f770c780a26e6cf930063690fb2a340", "time" : 1416683423, "y" : 2720, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Enabling java tests\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Nov 22 20:10:23 2014 +0100]"},
{"name" : "265ac7ac52a920bba0e7c101103d8cbe7d65d18c", "time" : 1416683423, "y" : 2720, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Moving java tests to pos\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Nov 22 20:10:23 2014 +0100]"},
{"name" : "4b71995f9cfe1e16ec2e3343a3bce601158a84e3", "time" : 1416683423, "y" : 2720, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixing memoize transforming java fields.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Nov 22 20:10:23 2014 +0100]"},
{"name" : "38cebe090a97930fe872d37370c66f72da360409", "time" : 1416683423, "y" : 2720, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Adapting branch to absence of modifiers in trees.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Nov 22 20:10:23 2014 +0100]"},
{"name" : "22c9a9bfc96284dc3b827c1e8a6a2a4331ebc9c3", "time" : 1416683422, "y" : 2720, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add handling of parsed annotations to applyOverloaded.\n\nsee annot.scala for examples\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Nov 22 20:10:22 2014 +0100]"},
{"name" : "3bb70e8620e48a4eace118cc05006ab83a112682", "time" : 1416683422, "y" : 2720, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Annotations have JavaSeqLiterals inside.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Nov 22 20:10:22 2014 +0100]"},
{"name" : "e2c5fcdf97e351e471e79502aa7d23bd973241ab", "time" : 1416683422, "y" : 2720, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Java annotations parsing problem\n\nAnnotations in java could be compiled as-if array-only\nannotation had <repeated> arguments constructor.\nThat isn't true for scala.\n\nAlso, type checking creation of single-element array\nrequires implicit resolution to provide ClassTag.\nThis makes problems while reading deferred annotation.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Nov 22 20:10:22 2014 +0100]"},
{"name" : "32954ba55955f4335bb34007269e3d405faa1780", "time" : 1416683422, "y" : 2720, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Extracting ApplyOverloaded to be reused in UnPickler and ClassfileParser\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Nov 22 20:10:22 2014 +0100]"},
{"name" : "cc8ca00fc1718bcbb49e3c61f3c0682eac2a7e7c", "time" : 1416683422, "y" : 2720, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "AnnotationTransformer now also transforms types\n\nRequired as gettersAndSetters ignores modifiers\n in tree and uses ones in the type instead.\nThis means that gettersAndSetters carries over\nmodifiers from type to tree and this one violates postconditions.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Nov 22 20:10:22 2014 +0100]"},
{"name" : "d6fdc8495e6a8e92e1648a801b63a6271adbb7d1", "time" : 1416683422, "y" : 2720, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Extract AnnotationTransformer functionality from ElimRepeated to a trait\n\nto be reused by FirstTransform\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Nov 22 20:10:22 2014 +0100]"},
{"name" : "dd6a7e785c9b7eb11f7c58b55db4af3c4e5c1e5f", "time" : 1416683422, "y" : 2720, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "don't try to make a body for a setter of a Java field\n\ntransformSym explicitly checks that a field is JavaDefined and does not create a symbol for it.\n\nCreation of a setter body looks for the symbol and fails because it does not find it.\n\nWe do not need setter bodies for Java fields because we are not generating bytecode for them.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Nov 22 20:10:22 2014 +0100]"},
{"name" : "4dabffd47955b3e02174598d57c5dd6c9b6752bc", "time" : 1416683422, "y" : 2720, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "create dummy first constructor for Java classes\n\nThe dummy constructor is needed so that the real constructors see the import of the companion object.\n\nThe constructor has a parameter of type Unit so that no Java code can call it.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Nov 22 20:10:22 2014 +0100]"},
{"name" : "f1602ab22bf0b26d2e68bf564e6f53271a5707d2", "time" : 1416683422, "y" : 2720, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "For Java constructors, do not move out to ctx.outer\n\nA Java constructor needs to see the import of the companion object of the class. It is not necessary to move to an outer context because a Java constructor does not have an implementation. scalac also does it this way: see Namers.Namer.createNamer.isConstrParam.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Nov 22 20:10:22 2014 +0100]"},
{"name" : "44ae00661116be3158f0c3dec94fb9a1951f7895", "time" : 1416683421, "y" : 2720, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "make annotation classes abstract (since they are interfaces)\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Nov 22 20:10:21 2014 +0100]"},
{"name" : "baaf851e3a5a74993ee1778d4135344037371dea", "time" : 1416683421, "y" : 2720, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "fix calls to tree copier that now requires multiple parameter lists\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Nov 22 20:10:21 2014 +0100]"},
{"name" : "7983a096ad80a9fe244ccd7361a6ddd9517344f2", "time" : 1416683421, "y" : 2720, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Flags.Static renamed to JavaStatic\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Nov 22 20:10:21 2014 +0100]"},
{"name" : "95d7ff8e71faec79813c0c2a541a395f877b0040", "time" : 1416683421, "y" : 2720, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "remove debugging println\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Nov 22 20:10:21 2014 +0100]"},
{"name" : "6ef59b13f27154da202c0096c7841a0b0ecb9f92", "time" : 1416683421, "y" : 2720, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "add comment to explain why refctx passed explicitly to selectionType\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Nov 22 20:10:21 2014 +0100]"},
{"name" : "36cb1028c0806991fae9e5d33fe9cb0f2d596ed0", "time" : 1416683421, "y" : 2720, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "add comment explaining why checkValue skips Java compilation units\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Nov 22 20:10:21 2014 +0100]"},
{"name" : "95e845ba131b3d2495b7e8664a568858251e5157", "time" : 1416683421, "y" : 2720, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "add mapping ENUM -> Enum to PickleBuffer\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Nov 22 20:10:21 2014 +0100]"},
{"name" : "ef7fc8ff04e54858f593660be69ad92fe45a42ef", "time" : 1416683421, "y" : 2720, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "make elimrepeated addVarArgsBridge at thisTransformer instead of thisTransformer.next\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Nov 22 20:10:21 2014 +0100]"},
{"name" : "2c5959b3a52b468e123a1f75d47cf053ce1e272a", "time" : 1416683421, "y" : 2720, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "support running java-interop tests\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Nov 22 20:10:21 2014 +0100]"},
{"name" : "07c4c96aff715a4ec856ccec405f92448a8610e0", "time" : 1416683421, "y" : 2720, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Java Select: try typing as both SelectFromTypeTree and Select\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Nov 22 20:10:21 2014 +0100]"},
{"name" : "ade0565fcdf6cb95818f538a95f798c7456d4c72", "time" : 1416683420, "y" : 2720, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "desugar Java repeated parms into an Array instead of Seq\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Nov 22 20:10:20 2014 +0100]"},
{"name" : "03627e71d9fdc4b2211d244cc8fd844d57997357", "time" : 1416683420, "y" : 2720, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Initial implementation of Java scanner and parser\n\nPorted from scalac 2.11.x branch SHA 9753f23f9362b25a9f481b11dd8d51187187882a\n\nThis is mostly a direct port, with few significant dotty-specific\nchanges needed. The two more significant changes are:\n\nIn dotty, the first constructor of a class is pulled out separately from\nthe other stats in the Template.\n\nThe keyword detection code (buildKeywordArray) was moved into Tokens so\nthat it can more cleanly be shared by the Scala and Java scanners.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Nov 22 20:10:20 2014 +0100]"},
{"name" : "cc1d36f64d324b972ec3116f93c4f62fafd706bc", "time" : 1416683420, "y" : 2720, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Show full name of doubly defined symbols\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Nov 22 20:10:20 2014 +0100]"},
{"name" : "35bf9148b6054c3651d597f90b7b721845e8734a", "time" : 1416683420, "y" : 2720, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Allow checking that trees and their defined symbols have modifiers in sync.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Nov 22 20:10:20 2014 +0100]"},
{"name" : "e935eaa9220eff300ecca891d41c0c421501faf4", "time" : 1416683420, "y" : 2720, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "#204 check for global uniqueness of definitions.\n\nCheck now fails after erasure.\nShould become error after fixed.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Nov 22 20:10:20 2014 +0100]"},
{"name" : "5a15ee9fde347787227a3fa8e31e17f32fd8a5bb", "time" : 1416683420, "y" : 2720, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Rename PolyType.copy method. It clashes with generated one.\n\nSee #209 for explanation.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Nov 22 20:10:20 2014 +0100]"},
{"name" : "a273c3f33a46b31be629cdbb60f4736642a420be", "time" : 1416683420, "y" : 2720, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix ElimRepeated not transforming modifiers in tree.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Nov 22 20:10:20 2014 +0100]"},
{"name" : "edee88013c1f400e52b474bd2541625d13bb2b8b", "time" : 1416683420, "y" : 2720, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Dotty typer deviation triggered in Unpickler\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Nov 22 20:10:20 2014 +0100]"},
{"name" : "11449db93f426a3fc64eded180852661d889804e", "time" : 1416683420, "y" : 2720, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Infer if overloading resolution should trigger implicit search.\n\nThis doesn't require additional argument. Decision can be made solely from the phaseId.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Nov 22 20:10:20 2014 +0100]"},
{"name" : "68dfe2a7619edfb9829876643c9177723a40bb84", "time" : 1416683419, "y" : 2720, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix StackOveflow due to implicit resolution in readAnnotationContents\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Nov 22 20:10:19 2014 +0100]"},
{"name" : "12209dd492f7cf203030fd86d53cd6be6bd77464", "time" : 1416683419, "y" : 2720, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Allow resolving overloads without inferring views.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Nov 22 20:10:19 2014 +0100]"},
{"name" : "998a5c8e6d6b0613c1e2c1f9f58d657f5332aad1", "time" : 1416683419, "y" : 2720, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "readAnnotationContents that should be able to resolve overloaded constructors.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Nov 22 20:10:19 2014 +0100]"},
{"name" : "3b0349bbf3986dc2e352a95f8eff898ea1714806", "time" : 1416683419, "y" : 2720, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "FunProtoTyped to be used when args are known to be typed\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Nov 22 20:10:19 2014 +0100]"},
{"name" : "cbe4f0a44739a26cfddc45bea33fee6246a240f5", "time" : 1416683419, "y" : 2720, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix underlyingIfRepeated always assuming Scala repeated.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Nov 22 20:10:19 2014 +0100]"},
{"name" : "9bcb3a0bf17352efa22bd50c5d8738b79eeae72c", "time" : 1416683419, "y" : 2720, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix TypeErasure.sigName erasing java repeated params to Seq\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Nov 22 20:10:19 2014 +0100]"},
{"name" : "3c14254d9e8ef9ee1e586ee5f86e3b27771d7dd4", "time" : 1416683419, "y" : 2720, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix typeAssigner ignoring existence of JavaSeqLiteral\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Nov 22 20:10:19 2014 +0100]"},
{"name" : "7e7b2f2927aac6b17883e69b85ccccf2dfcab51a", "time" : 1416683419, "y" : 2720, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add Id's to types.\n\nHelps to track where erroneous type was created.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Nov 22 20:10:19 2014 +0100]"},
{"name" : "cda5addb0e4fca124e0cedcb80237dd7f39ac0b7", "time" : 1416683419, "y" : 2720, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix elimRepeated not transforming annotations.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Nov 22 20:10:19 2014 +0100]"},
{"name" : "9760fb7bbb5ceaeba98b6625470bd9f03755a31d", "time" : 1416683419, "y" : 2720, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Testcase that shows bug in ElimRepeated.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Nov 22 20:10:19 2014 +0100]"},
{"name" : "1e1f260577d8522a5c99052cea5b3ebe64a12830", "time" : 1416683418, "y" : 2720, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add the right constructor to Java annotations\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Nov 22 20:10:18 2014 +0100]"},
{"name" : "33feb9dea9db0695f510654348455133707e0740", "time" : 1416326431, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #236 from smarter/fix/overriding\n\nAdd overriding tests", "author" : "PersonIdent[odersky, odersky@gmail.com, Tue Nov 18 17:00:31 2014 +0100]"},
{"name" : "c02811a66e962269e0423aa808d1cee82393f830", "time" : 1416324962, "y" : 2767, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add tests for the overriding of types\n\nThese tests work correctly since 222e9a478f7b851582550973df6a9d141766e49a\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Tue Nov 18 16:36:02 2014 +0100]"},
{"name" : "59c3848c052fdd64e1232f12c5c5b97a0288849c", "time" : 1416324962, "y" : 2767, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Enable pos/overrides.scala in tests\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Tue Nov 18 16:36:02 2014 +0100]"},
{"name" : "8bdc690e3b70fa302b24a3023f79f0b1c9eab262", "time" : 1416324558, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #228 from dotty-staging/fix/overriding\n\nFix/overriding", "author" : "PersonIdent[odersky, odersky@gmail.com, Tue Nov 18 16:29:18 2014 +0100]"},
{"name" : "7a1f63013197212c91ce4d5830c1f4ce751d712c", "time" : 1416322017, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #230 from dotty-staging/fix/and-or-subtyping\n\nTry to avoid overconstraining when comparing and/or types", "author" : "PersonIdent[odersky, odersky@gmail.com, Tue Nov 18 15:46:57 2014 +0100]"},
{"name" : "f2743f7e62b1322dc6cbbc0b4602e92fee14162b", "time" : 1416320904, "y" : 2771, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixed typos\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Nov 18 15:28:24 2014 +0100]"},
{"name" : "5c5ec48cfa5fb9c43582406ec10100c97016f5f1", "time" : 1416320767, "y" : 2771, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Restored accidentally deleted test code.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Nov 18 15:26:07 2014 +0100]"},
{"name" : "ea06d6618f63339fec0af8ca6835a3f34a100d0f", "time" : 1416320299, "y" : 2773, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Check that overriding members refine the types of overridden ones.\n\nSomehow this was lost in porting (or was this done somewhere else\nin scalac?).\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Nov 18 15:18:19 2014 +0100]"},
{"name" : "0635caeb9bcb17d41dcfe0fbcf2f61c296f49b7b", "time" : 1416250100, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #229 from dotty-staging/change/typevar-printing\n\nWhen printing uninstantiated type variables, include their bounds.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon Nov 17 19:48:20 2014 +0100]"},
{"name" : "b444167c37fed847afa9ff3baaf6b1a8c7e30876", "time" : 1416249945, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #233 from dotty-staging/cleanup/tests\n\nMoved pending tests that work into pos and neg.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon Nov 17 19:45:45 2014 +0100]"},
{"name" : "2cc2c868afb2f8733a52ab92bcbccde171b988a7", "time" : 1416249837, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #234 from smarter/try/jvm-tuning\n\nAdd option to optimize the JVM for short-runnning applications", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon Nov 17 19:43:57 2014 +0100]"},
{"name" : "b73ea2fde3949bcd1366cc8778c007619b627481", "time" : 1416246881, "y" : 2777, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add option to optimize the JVM for short-runnning applications\n\nIdeally, dotc should reuse a resident compiler and we should not fork sbt\nfor every task. Until this happens, this option is useful for\ndevelopment. Fixes #222.\n\nUsage:\n$ sbt -DOshort=\"\"\n$ ./bin/dotc -Oshort foo.scala\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Mon Nov 17 18:54:41 2014 +0100]"},
{"name" : "b60f085e543e71577e0132b938facd0b6d544e81", "time" : 1416242823, "y" : 2773, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixes of reviewers comments.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 17 17:47:03 2014 +0100]"},
{"name" : "e63feffe063987df54cb9a5916003eb400c0b49d", "time" : 1416240522, "y" : 2779, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Moved pending tests that work into pos and neg.\n\nOne test (t2613) required lifting a hard recursion limit in findMember\n(used for debug only, will be removed in the future). The same test\nalso requires -Yno-deep-subtypes to be reset, so it's in pos_special\ninstead of pos.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 17 17:08:42 2014 +0100]"},
{"name" : "a75b21b43962e809284f923741c0aa7a03499ab3", "time" : 1416221635, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #227 from dotty-staging/patmatch/productArity\n\nRename productArity in pattern matcher to prodArity", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon Nov 17 11:53:55 2014 +0100]"},
{"name" : "3c43871ed5acec9315f84e3a481adbaf5fb24897", "time" : 1416138886, "y" : 2771, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Try to avoid overconstraining when comparing and/or types\n\nSee comments in eitherIsSubType for an explanation what the\nproblem is. Some test cases are in subtyping.scala\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 16 12:54:46 2014 +0100]"},
{"name" : "d6d798a61150ecde9dddf48b9d79901ac309ee2b", "time" : 1416138617, "y" : 2782, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "When printing uninstantiated type variables, include their bounds.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 16 12:50:17 2014 +0100]"},
{"name" : "c82a4b59c65c9a0f9416f0004571b6a336d346b6", "time" : 1416088789, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #223 from dotty-staging/fix/elimRepeatedTransformSym\n\nAvoid forcing infos of some symbols in InfoTransforms", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Sat Nov 15 22:59:49 2014 +0100]"},
{"name" : "222e9a478f7b851582550973df6a9d141766e49a", "time" : 1416049708, "y" : 2773, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Some fixes to override checking in RefChecks.\n\n`override` was not recognized at all on types.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Nov 15 12:08:28 2014 +0100]"},
{"name" : "c1b0ab6f6ed36fed7cc4bfa710704ff197c12b31", "time" : 1416049672, "y" : 2773, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixes for type argument handling.\n\n(1) Type arguments now get a coordinate.\n(2) They are labeled Override\n\n(2) avoids having to special case TypeArgs in OverridingPairs.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Nov 15 12:07:52 2014 +0100]"},
{"name" : "387bdf9fa0bafd76b06d91d5e88f74e29143fc06", "time" : 1415987620, "y" : 2773, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fine-tuning override errors for syntehtic companion objects\n\nThese may raise real errors, so we cannot exclude them from\noverriding pairs a priori. But we can avoid reporting any\nerrors if other override errors were reported previously for\nthe same class.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Nov 14 18:53:40 2014 +0100]"},
{"name" : "53e9fd65fd6cff6f46cbe0e18732cd8a0ebea001", "time" : 1415986572, "y" : 2773, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Refactored OverridingPairs\n\nto make it easier to understand.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Nov 14 18:36:12 2014 +0100]"},
{"name" : "4d5a901d10a28c286f8754134f5030daae0d239b", "time" : 1415977891, "y" : 2773, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix OverridingPairs\n\nOverridingPairs had several bugs which caused pairs to be lost, which caused\nmissing overrides checks. Fixing OverridingPairs revealed several test failures\n(and a problem in Synthetics generation which was fixed in the last commit).\nTests that became negative are all moved into neg/overrides.scala, and the\noriginal versions in pos were fixed.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Nov 14 16:11:31 2014 +0100]"},
{"name" : "9dae49b8994f72f2b4b83665c53a63b49896c5de", "time" : 1415977518, "y" : 2773, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Refine merge of nullary and parameterless denotations.\n\nPreviously, two denotations with types => T and ()T could not\nbe merged, only their types could be, but then the denotation\nwould no longer be a SymDenotation. We now treat the two types\nas equivalent so that it will select the symbol in a subclass.\nThis fixes a problem where, once overrding pairs are made to\nwork (see following commit), in core/Types we get an error \"overriding\nfinal method \"hashCode\".\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Nov 14 16:05:18 2014 +0100]"},
{"name" : "c7f824198352e0740a979a8022afc1a6e128dd1c", "time" : 1415977264, "y" : 2773, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Rename productArity in pattern matcher to prodArity\n\nproductArity is a method defined in ProductN which is inherited from\ncase classes. It is possible that it will be usewd in the implementation\nof pattern matching in the future. The previous implementation used\nthe same name to mean something else: Not the arity of the case class\nitself but the arity of the pattern/type it represented.\n\nRenaming to prodArity avoids the confusion.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Nov 14 16:01:04 2014 +0100]"},
{"name" : "4cb35ef98fef6a1c2826568c95117fd7ce84bdad", "time" : 1415953338, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #225 from dotty-staging/fix/ensuring\n\nFixes problem exhibited by ensuring.scala", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri Nov 14 09:22:18 2014 +0100]"},
{"name" : "b7e547c4c3b6c0c867eb2636671106da2994044c", "time" : 1415895380, "y" : 2773, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixes problem exhibited by ensuring.scala\n\nNeed to account for the possibility that function\narguments are wrapped in braces.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Nov 13 17:16:20 2014 +0100]"},
{"name" : "c7ed89d562e497e0ede2c79e29ab884eee169454", "time" : 1415871491, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #224 from dotty-staging/refactor/treeTransformInits\n\nRefactor/tree transform inits", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Thu Nov 13 10:38:11 2014 +0100]"},
{"name" : "35a54f103ddde79322636fcac00dc09a39fee96b", "time" : 1415864810, "y" : 2794, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Avoid computing info of TypeRefs for Object <-> Any comversions in ClassfileParser\n\nAnother bit to help avoid CyclicReferences when reading Java classes\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Nov 13 08:46:50 2014 +0100]"},
{"name" : "e02db3453582bfab8600664f9c03bd8f7285be41", "time" : 1415813767, "y" : 2795, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Eliminate global state in LambdaLift\n\nState moved into local transforms which are allocated one per unit.\nThsi allows lambda lifters on different units to run in parallel.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Nov 12 18:36:07 2014 +0100]"},
{"name" : "8aae56b4f08806eda9745b0a980da151c0a7dc8c", "time" : 1415812247, "y" : 2795, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make CapturedVars a functional transform.\n\nNo global side effect on capturedVars anymore.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Nov 12 18:10:47 2014 +0100]"},
{"name" : "c3b11ceddd46df7ecb2fb5640fd30efcd82b74c2", "time" : 1415812185, "y" : 2795, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Remove init method from TreeTransform\n\nDo not lead to temptation...\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Nov 12 18:09:45 2014 +0100]"},
{"name" : "46dd4a8d78a955dccee8674df3a962b5dae17856", "time" : 1415810808, "y" : 2795, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make CaptguredVars use prepareForUnit instead of init.\n\nRequired some refactoring. Instead of transformSym we now\ntransform ValDefs as we prepare for them. The previous scheme\ncould not control directly whetrher transformSym or collectCaptured would\nrun first. Turns out that init ran before collectCaptured but\nprepareForUnit did not, leading to test failures in pos/capturedvars.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Nov 12 17:46:48 2014 +0100]"},
{"name" : "7ea96f0b48753e62c5643bf119d68c2c5f9fa522", "time" : 1415810682, "y" : 2794, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Setting travis to use oracle jdk8\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Nov 12 17:44:42 2014 +0100]"},
{"name" : "c4aa3c058904912ba1b5696b2aaa4d9234dc5c79", "time" : 1415808764, "y" : 2794, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Avoid forcing infos of some symbols in InfoTransforms\n\nProvides the \"mayChange\" hook to exclude symbols from being completed\nprior to a transformInfo.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Nov 12 17:12:44 2014 +0100]"},
{"name" : "e65f8dae23fac56962a8f27676b0082e4e287c37", "time" : 1415787753, "y" : 2795, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Replaced overridden init methods with prepareForUnit.\n\nThis allows to move to a functional implementation later.\nOnly exception: CapturedVars still uses init() because it\ncontains a (dubious!) interaction with intialization and\ntransformSym. Looking at this next.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Nov 12 11:22:33 2014 +0100]"},
{"name" : "cf12129e286a6056d97068094cbf86491c432395", "time" : 1415787666, "y" : 2795, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Added methods to prepare-for and transform a complete compilation unit tree.\n\nShould replace destructive inits.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Nov 12 11:21:06 2014 +0100]"},
{"name" : "7978a5f6a1be13ca9c482c3f2e9c2102018cfcf0", "time" : 1415710518, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #220 from dotty-staging/refactor/DefTrees\n\nRefactor/def trees", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Tue Nov 11 13:55:18 2014 +0100]"},
{"name" : "cd2f99c5fd4a22ccf1ae1a6f561e279f981bc064", "time" : 1415707127, "y" : 2804, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Factored out Positioned into separate file.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Nov 11 12:58:47 2014 +0100]"},
{"name" : "8d44da55aea6e14c99f66245d6714171c37ceb9b", "time" : 1415705312, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #192 from smarter/fix/ThisType-subtyping\n\nFix subtyping checks involving ThisType and PolyParam", "author" : "PersonIdent[odersky, odersky@gmail.com, Tue Nov 11 12:28:32 2014 +0100]"},
{"name" : "b164b6db3adca42e590099dcb1e12b14e218f367", "time" : 1415705016, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #221 from smarter/fix/Scopes-indexing\n\nScopes: make sure every bucket of the hash table is used", "author" : "PersonIdent[odersky, odersky@gmail.com, Tue Nov 11 12:23:36 2014 +0100]"},
{"name" : "015bbc1c941912ffc43451304c50b6193cb2f4b2", "time" : 1415692584, "y" : 2807, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Scopes: make sure every bucket of the hash table is used\n\nPreviously, one bucket was never used because in binary,\n12*2^n - 1 = 101111...\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Tue Nov 11 08:56:24 2014 +0100]"},
{"name" : "629dae0d00a51c5bb097d968280238da72d01f91", "time" : 1415692064, "y" : 2808, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix subtyping checks involving ThisType and PolyParam\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Tue Nov 11 08:47:44 2014 +0100]"},
{"name" : "02f329c566d10f1928d91efa865d6e164ea757e7", "time" : 1415641594, "y" : 2804, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make withMods produce Untyped trees\n\nwithMods should never be used to produce a typed tree, because typed\nmember defs get their modifiers from their symbols.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 10 18:46:34 2014 +0100]"},
{"name" : "f7a4d811f769583be13a376a3daedd2eadd31447", "time" : 1415640598, "y" : 2804, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Drop modifiers as separate data from MemberDef trees\n\nTyped MemberDef trees now take the modifiers from their symbol's data.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 10 18:29:58 2014 +0100]"},
{"name" : "c9d7eefc0989066e85ca598dff2639d412aabbee", "time" : 1415639080, "y" : 2804, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Align phase name of FirstTransform with class name\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 10 18:04:40 2014 +0100]"},
{"name" : "892f7bdb4c35f701f7d925404ac55ebaa5566ae0", "time" : 1415631743, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #219 from dotty-staging/cleanup/interface-rebased\n\nCleaning up interfaces.", "author" : "PersonIdent[odersky, odersky@gmail.com, Mon Nov 10 16:02:23 2014 +0100]"},
{"name" : "540479ad682fae4278f15e9eb7d4a17f084e21b2", "time" : 1415622660, "y" : 2813, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Clean up code relating to interfaces.\n\nPrevious implementation was confused about the meaning of interface (with default methods\nor without?).\n\nNow instead of Interface/JavaInterface we have\n\n    PureInterface   - all members are abstract methods\n    NoInits         - all members are methods\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Nov 10 13:31:00 2014 +0100]"},
{"name" : "18cd0dde7e949d6ae20f451f98843d48f28e2e26", "time" : 1415622655, "y" : 2813, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Remove unused class\n\nIt functionality is now all implemented in ExplicitOuter.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Nov 10 13:30:55 2014 +0100]"},
{"name" : "42e51d56303c3e43d091dd0ed1a32c28d922a519", "time" : 1415622470, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #217 from dotty-staging/transform/mixin\n\nTransform/mixin", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon Nov 10 13:27:50 2014 +0100]"},
{"name" : "83734e1962c11b3e699ece5787caf845cbfa6c0d", "time" : 1415612154, "y" : 2816, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Generalize symbolic refs\n\nPreviously, there was a switch in SymDenotation#termRef to create a WithFixedSym ref\nwhen after erasure. This was done to fix a broken test, but it's clearly incomplete.\nThe scheme is now replaced by one which always creates WithFixedSym Termrefs after\nerasure.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 10 10:35:54 2014 +0100]"},
{"name" : "a9481bbb42d0439ba98a1bce33051e20c23f74b6", "time" : 1415556621, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #211 from dotty-staging/phase-runOn\n\nPhase.runOn is now List[ComliplationUnit] => List[ComliplationUnit]", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Sun Nov 9 19:10:21 2014 +0100]"},
{"name" : "f2e3489e419a104ad5f30db68eeaf035a0f3339b", "time" : 1415556592, "y" : 2816, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "More docs and removing print statements\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 9 19:09:52 2014 +0100]"},
{"name" : "06c50af6551f56314f0587878035d7d7c4d8307b", "time" : 1415556592, "y" : 2816, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge mixin with the group of miniphases following it.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 9 19:09:52 2014 +0100]"},
{"name" : "60803fa016987e05ebb2e2c80ba84d04aafc6ef3", "time" : 1415556592, "y" : 2816, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge memoize with miniphases following it into one group.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 9 19:09:52 2014 +0100]"},
{"name" : "b07c30b09851334c40298725daa5503e97ae305a", "time" : 1415556592, "y" : 2816, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "New functionality: changeOwnerAfter\n\nChanges owners after a phase without copying the tree. This should be more\nsuitable for the changeOwner operations used in the tree transforms so far,\nwhich are linear, i.e. no tree duplication is needed.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 9 19:09:52 2014 +0100]"},
{"name" : "0ad4dea891701b8ca14014549056806a41d2f385", "time" : 1415556592, "y" : 2816, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixed bug in treating Thickets in TreeTransform\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 9 19:09:52 2014 +0100]"},
{"name" : "383ba355f1688ccdb694bfdb16c0c98feaca6e25", "time" : 1415556592, "y" : 2816, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Reinstantiated full tests.\n\nThe fix to Types in 9bb35512 (Retract of optimization in computeDenot)\nallowed the two tests to compile \"twice\" again.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 9 19:09:52 2014 +0100]"},
{"name" : "0d0a37f755bece2b44de65ce4bbcf34184813fae", "time" : 1415556592, "y" : 2816, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Better error message for adaptations of implicit methods\n\nIg an implicit method has a result type which does not match the expected\ntype, the new case fires. We avoid to diagnose missing arguments, because\nthat's really confusing for an implicit method.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 9 19:09:52 2014 +0100]"},
{"name" : "a8cd662ce26e915fb045bfd34b7ac9aa88f69721", "time" : 1415556592, "y" : 2816, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixed handling of ThisTypes in TypeErasure.\n\nNeed to be treated like TermRefs.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 9 19:09:52 2014 +0100]"},
{"name" : "df0229e4754e8d512aef68c7d2ffbd1d79cb5df5", "time" : 1415556592, "y" : 2816, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Retract of optimization in computeDenot\n\nNeeds a weakening of an assertion in assertErased\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 9 19:09:52 2014 +0100]"},
{"name" : "fea26e104d202f3ac755f309d982af4d7ddd7bba", "time" : 1415556592, "y" : 2816, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "New Mixin scheme.\n\nSplit into two phases, ResolveSuper before Erasure and Mixin after. Likewise GettersSetters\nis split into Getters and Memoize.\n\nAll tests pass, except two tests fail when compiled twice. Will investigate next why.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 9 19:09:52 2014 +0100]"},
{"name" : "0cd63ac2a8ae378d85922cbef4c3b4654fb75ea7", "time" : 1415556591, "y" : 2816, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Adding test for Unit vars.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 9 19:09:51 2014 +0100]"},
{"name" : "75c06fcb0116a9cb68aa06573431401a05713856", "time" : 1415556591, "y" : 2816, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "More robost handling of isSetter/isGetter\n\nNow survives the case where a field is written x_=, dissumulating\na setter.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 9 19:09:51 2014 +0100]"},
{"name" : "4b5e6305f95f97d06325889d8bb9d21995c4deff", "time" : 1415556591, "y" : 2816, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Small polishings in docs and code.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 9 19:09:51 2014 +0100]"},
{"name" : "e3a56c3be785159491af0ea3e0ed527845bee623", "time" : 1415556591, "y" : 2816, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Accessor methods print as \"method\", not \"val/var\".\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 9 19:09:51 2014 +0100]"},
{"name" : "c67d6cf46cee95d8fab4375fa146877a11321d8d", "time" : 1415556591, "y" : 2816, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "More systematic handling of Scala2LocalSuffix.\n\nSeparate test instead of inline.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 9 19:09:51 2014 +0100]"},
{"name" : "f618e471b3f4f035221234cfeb980e52cc283701", "time" : 1415556591, "y" : 2816, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixes to Unit handling in erasure\n\n1. Erase unit results in getters to BoxedUnit.\n2. Erase => Unit to ()Unit; was ()BoxedUnit\n3. Make sure ValDefs have same type in tpt as in symbol, analogous to DefDefs.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 9 19:09:51 2014 +0100]"},
{"name" : "0f7934d42892f36e28154779588a1d2a80d80616", "time" : 1415556591, "y" : 2816, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Methods always shwoDcl as `def`\n\nThis is reasonable because getters are only generated late in the\ncompilation pipeline. No need to hide a getter as a val in error messages.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 9 19:09:51 2014 +0100]"},
{"name" : "211d46e29a4d923a4f63ec8f71bcf3784f42e842", "time" : 1415556539, "y" : 2816, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Cleanup of code for ExplicitOuter\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 9 19:08:59 2014 +0100]"},
{"name" : "0d74e591de620d52084736251f9f437a6dccf23a", "time" : 1415556539, "y" : 2816, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Superaccessors are methods\n\nNeed to have Method flag set\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 9 19:08:59 2014 +0100]"},
{"name" : "1fad64325e2f457dee76629a8cf8c9427e931412", "time" : 1415556539, "y" : 2816, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Select operations in erasure should fix symbols in types.\n\nOtherwise we get binding races, e.g. for pos/t2133.scala after mixin\nbecause we create same-named symbols in subclasses, and type refs now\ncan refer to the subclass symbol where previously they refereed to the\nsuperclass symbol. To avoid a data race the new term ref will have a\nfixed symbol.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 9 19:08:59 2014 +0100]"},
{"name" : "3299df8baf74564627d474d47a26605b5e02a6d9", "time" : 1415556539, "y" : 2816, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix of computeDenot.\n\nSince we demand that after erasure all TermRefs are SymDenotations we need to\nassure this when computing the denotations of term refs in new phases.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 9 19:08:59 2014 +0100]"},
{"name" : "6098546fad7e6e8709cc18a126b0e655f439d5bc", "time" : 1415556539, "y" : 2816, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixed typing of supertypes.\n\nPrevious version could fail where the thisType widened to an explicit self type.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 9 19:08:59 2014 +0100]"},
{"name" : "e445000dc747b55351f3bc60bb5f849bb6aac096", "time" : 1415556539, "y" : 2816, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixed redundancy in membersNeedAsSeenFrom\n\nArray types are no longer used after erasure, so the test was redundant.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 9 19:08:59 2014 +0100]"},
{"name" : "7194afe4b9a0bb04700b023a1c29047eb6349f88", "time" : 1415556539, "y" : 2816, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Take supercalls into account for statement context\n\nAfter Mixin, super calls can appear in statemenr sequences. They need to be\ntypechecked and transformed using a special context.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 9 19:08:59 2014 +0100]"},
{"name" : "d28754110576070ea6f94e626005d149a3470d20", "time" : 1415556539, "y" : 2816, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Adaptation of explicitOuter to trait initializers\n\nTrait initializers do not have outer params; need to avoid passing\nouter args to them.\n\nThis problem did not manifest itself before because no trait constructor calls\nwere generated before erasure.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 9 19:08:59 2014 +0100]"},
{"name" : "a2f558146e2d18a6ce1702bb7d48b69f36e38c80", "time" : 1415556539, "y" : 2816, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Adaptation of Constructors to new mixin scheme.\n\nNo more trait_setters are called.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 9 19:08:59 2014 +0100]"},
{"name" : "b98ed348f16958c300cd3c98aac665f7a6d76bb2", "time" : 1415556539, "y" : 2816, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix problem in changeOwner\n\nThe problem manifests itself when changing the owner of a class field. Being a ValDef,\nthis is classified as a weak owner. But it's parent (the class) should not be owner-changed.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 9 19:08:59 2014 +0100]"},
{"name" : "b8b06825fe575d7a6750874299cb356da99f5bc6", "time" : 1415556539, "y" : 2816, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make cloneScope less forcefull.\n\nMotivation: Avoid needless forcing of symbols in scope. This is a problem when\ncloneScope is called in TreeTransforms.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 9 19:08:59 2014 +0100]"},
{"name" : "97080a8b5dda38d50ff288dd60c92a06a04dd75a", "time" : 1415556539, "y" : 2816, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "New option -Ydebug-owners\n\nWill print owners of symbols when displaying trees. Requires -Yprint-syms to be set also.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 9 19:08:59 2014 +0100]"},
{"name" : "43075bb832c3b4fe080c24a20ecf8c4737d5cdd2", "time" : 1415556538, "y" : 2816, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Improved version of mixin.\n\nNow also handles all supercalls. Seems to do the right thing on pos/traits.scala.\nBut does not pass most tests because the sym transformer forces too many things.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 9 19:08:58 2014 +0100]"},
{"name" : "0119ffd3e285e43b63fb9c43c1c8b009174a1987", "time" : 1415556538, "y" : 2816, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Avoid getting confused because of Scala2 local suffixes\n\nWhen inheriting from Scala2 traits we sometimes encounter names with a space at the end,\ndenoting a local variable. Drop the space because our translation scheme has no room for it.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 9 19:08:58 2014 +0100]"},
{"name" : "7c5a3ff5c5d5bc8844d981f55c3e2152976a42ac", "time" : 1415556538, "y" : 2816, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Adapt GettersSetters to new Mixin scheme.\n\nTrait getters are no longer needed.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 9 19:08:58 2014 +0100]"},
{"name" : "31d299451204fe7feddb392f54d2fc2d6463fe2e", "time" : 1415556538, "y" : 2816, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "First version of mixin transform.\n\nNeeds adaptations in getters/setters before it can be tested.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 9 19:08:58 2014 +0100]"},
{"name" : "4180bc3d3761a4087e081b9c5307a74742ae3a48", "time" : 1415556448, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #207 from dotty-staging/transform/privateToStatic\n\nTransform/private to static", "author" : "PersonIdent[odersky, odersky@gmail.com, Sun Nov 9 19:07:28 2014 +0100]"},
{"name" : "3da54484efe76e578da17c447086f894869b9140", "time" : 1415555833, "y" : 2816, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Making print statement a debuglog\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 9 18:57:13 2014 +0100]"},
{"name" : "74ec1885c527decd8eb7f35a31b641571652969b", "time" : 1415555144, "y" : 2816, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixes to documentation.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 9 18:45:44 2014 +0100]"},
{"name" : "5eaa1439adb9eed1a818da3264e58113bdb3bf6a", "time" : 1415549113, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #195 from smarter/fix/singleton-cycles\n\nDetect cycles involving types bounded by singleton types", "author" : "PersonIdent[odersky, odersky@gmail.com, Sun Nov 9 17:05:13 2014 +0100]"},
{"name" : "250418e830bc7ccacf13cb0d3a9121238d99632a", "time" : 1415524654, "y" : 2816, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "New phase: PrivateToStatic\n\nMake private methods in traits static, so that we do not need\nto give a default for them.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 9 10:17:34 2014 +0100]"},
{"name" : "d907f26da9f0d3625a4c35021993f04a553bd354", "time" : 1415524654, "y" : 2816, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Bugfix for superaccessors\n\nThrew away list of constructed statements.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 9 10:17:34 2014 +0100]"},
{"name" : "936e83f3617e7dd1b9141cf20b1dc8ec3482df97", "time" : 1415524654, "y" : 2816, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "New phase: RestoreScopes\n\nCleans up after LambdaLift and Flatten. RestoreScopes exhibited a problem (double definition)\nwhen compiling Unpickler. The root of the problem was in Applications.scala. The effect was\nthat arguments woulkd be lifted out, but then the argument expression would be used anyway. That caused\na closure to be present twice which caused the double def error much later. -Ycheck did not catch it because\nthe two closure expressions were in non-overlapping scopes.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 9 10:17:34 2014 +0100]"},
{"name" : "252b6d9f3a80bdfc789e2f5b463ee7dc7a10b659", "time" : 1415524654, "y" : 2816, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Generalize lift behavior between Flatten and LambdaLift\n\nTo be combinable with follow-up mini-phases the lift operation needs to handle Thickets specially.\nThis commit factors out the behavior from LambdaLift, so that Flatten can do the same thing.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 9 10:17:34 2014 +0100]"},
{"name" : "ad45e2e4b72057499b33a1cb4fbf5eb41ab8651c", "time" : 1415524653, "y" : 2816, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "New miniphase: Flatten\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 9 10:17:33 2014 +0100]"},
{"name" : "d2670a7e6ddfc3a71f7b38aefb831b684059d468", "time" : 1415524653, "y" : 2816, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Made LambdaLift capable of having minitransforms run after it.\n\nSome changes needed so that Flatten can run after LambdaLift\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 9 10:17:33 2014 +0100]"},
{"name" : "3d6534f1d3f1abe5ec9c27a7d0452142ae7d3d86", "time" : 1415308108, "y" : 2861, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Detect cycles involving types bounded by singleton types\n\nThis fixes #193.\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Thu Nov 6 22:08:28 2014 +0100]"},
{"name" : "8c73426c1db5e867febf9abf565de4201f78d628", "time" : 1415272902, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #180 from smarter/fix/nosymbol-subtyping\n\n Fix subtyping of types without symbols ", "author" : "PersonIdent[odersky, odersky@gmail.com, Thu Nov 6 12:21:42 2014 +0100]"},
{"name" : "3c595635d4c19b682e0cd5642d56f3b3352eb4db", "time" : 1415032315, "y" : 2863, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Phase.runOn is now List[ComliplationUnit] => List[ComliplationUnit]\n\nAllows to alter number of compilation units.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Nov 3 17:31:55 2014 +0100]"},
{"name" : "09d5673de8d3a9ddd50c3c221992ede6117e16bf", "time" : 1415024271, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge commits '474b2ae' and '46eb5ea' from #201 into umaster\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Nov 3 15:17:51 2014 +0100]"},
{"name" : "97a37320b74efe203d57a0a744efa8e0c7ecec47", "time" : 1415009926, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #202 from dotty-staging/no-closure-try\n\nRestructure Try node.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon Nov 3 11:18:46 2014 +0100]"},
{"name" : "5540f1330862de8daeeb9f0b15b0bb0ba6f153c5", "time" : 1414687543, "y" : 2866, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "merge fixes: extract typedCase to be reused in TreeChecker.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Oct 30 17:45:43 2014 +0100]"},
{"name" : "9d1b4bfd96d351f3c05aeb258a708e7486f5f390", "time" : 1414686135, "y" : 2866, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Print whole TreeTransform name in Ycheck and Xprint\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Oct 30 17:22:15 2014 +0100]"},
{"name" : "7ebc502c1a6eee7362a5c00a1561c97be10f4845", "time" : 1414686134, "y" : 2866, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Postponing desugaring of Try nodes.\n\nInstead of desugaring in parser desugaring is now done during desugaring.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Oct 30 17:22:14 2014 +0100]"},
{"name" : "0c967f06e9bf51e02903d1bb2c79fa1c4febf98d", "time" : 1414686134, "y" : 2866, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Get rid of ExceptionHandlerSel.\n\nIt's not used anymore as superseded by previous commit.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Oct 30 17:22:14 2014 +0100]"},
{"name" : "e07e9a3986ec59cab1f0ec2b9b4458fd6a64d8c8", "time" : 1414686134, "y" : 2866, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Restructure Try node.\n\nNow Try node always has cases as handlers.\nIn case handler is an Ident of type Throwable => T\nthan it's desugared to a CaseDef during parsing.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Oct 30 17:22:14 2014 +0100]"},
{"name" : "6dcd16ab2040a5a337e78bc77e40228dc9944662", "time" : 1414686134, "y" : 2866, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Rewrite assignType for Try\n\nAfter erasure was always wrong(didn't include the type of handler).\nNow it's able to use both Closures and desugared Math nodes.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Oct 30 17:22:14 2014 +0100]"},
{"name" : "d923d70e2ec381b22d7ce44d5bd58d6d45dab6bc", "time" : 1414686134, "y" : 2866, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make typing of Try nodes idempotent\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Oct 30 17:22:14 2014 +0100]"},
{"name" : "f60f81fd7b6ed5f6fb692069ebbc46f2b8098894", "time" : 1414686133, "y" : 2866, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Flag dotty deviation for return type which is part of cake.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Oct 30 17:22:13 2014 +0100]"},
{"name" : "ba4fee76dd5d93e52672e223633539e932ccf0b6", "time" : 1414686133, "y" : 2866, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Stop patmat from using selector pos for Try.\n\nIt doesn't exist.\nAlso use symbol with 'ex' name as selector for exceptions\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Oct 30 17:22:13 2014 +0100]"},
{"name" : "049bcb5f22f1d663f9c5ad0ab38594a22e7f6f2a", "time" : 1414686133, "y" : 2866, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add Patmat to Context\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Oct 30 17:22:13 2014 +0100]"},
{"name" : "6fe3a2d87e220b28ffff808c476313c456b743cb", "time" : 1414686133, "y" : 2866, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix Erasure.Boxing isBox and isUnbox\n\nBox& unbox methods are defined in companion objects.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Oct 30 17:22:13 2014 +0100]"},
{"name" : "f2ea8dd31caadfe5a7f3d14cea7c3bc3f0c56110", "time" : 1414686133, "y" : 2866, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix TailRec to handle inline exception handlers and non-trivial not-inlined\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Oct 30 17:22:13 2014 +0100]"},
{"name" : "5613295e61f4328f2caaa20dbc21c3a0ce4937ac", "time" : 1414686133, "y" : 2866, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Typer should leave inline exception handlers inline.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Oct 30 17:22:13 2014 +0100]"},
{"name" : "09c5ad4f92aab61053e70f2e6e863271c777dd14", "time" : 1414686064, "y" : 2866, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "New kind of EmptyTree for indicating exception selector in Try blocks.\n\nSimplifies a lot handling of Try blocks in patmat and in tailrec.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Oct 30 17:21:04 2014 +0100]"},
{"name" : "e44e4aa7e818d7eb90316880cd0758c65298f2a8", "time" : 1414686064, "y" : 2866, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "TailRec now handles Try with Ident-handler\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Oct 30 17:21:04 2014 +0100]"},
{"name" : "1be3b2fd50487b20812b57ef485e8983dea7c289", "time" : 1414686064, "y" : 2866, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Extracting TypedCases to be reused for typedTry\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Oct 30 17:21:04 2014 +0100]"},
{"name" : "9f508df37e244fe46a2ee4c7dc4486b239094f0e", "time" : 1414595663, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #199 from dotty-staging/transform/lambdalift\n\nTransform/lambdalift", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed Oct 29 16:14:23 2014 +0100]"},
{"name" : "474b2aeb608ebbdeb639ba081f413f49459b3eff", "time" : 1414505911, "y" : 2883, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Added a test for by name functions\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Oct 28 15:18:31 2014 +0100]"},
{"name" : "46eb5ea0b8ac3e80795e7f5030b128794feb692c", "time" : 1414426728, "y" : 2883, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix treatment of by name functions\n\nBy-name functions like `(=> T) => T` were not treated correctly before.\nWitness the disabled `-Ycheck:gettersSetters` for transform/TreeCheckers\nin thge test suite. This commit changes the scheme how => T types are treated\nand fixes the problems with by-name functions.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Oct 27 17:18:48 2014 +0100]"},
{"name" : "107049919d509c965dcee71fd8afd2e535058043", "time" : 1414404666, "y" : 2883, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Dropped comment.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Oct 27 11:11:06 2014 +0100]"},
{"name" : "a3ef72bb723e1eb2c14c75b958d5864ea700dabf", "time" : 1414338760, "y" : 2883, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make LambdaLift diagnostics log messages instead of printing them directly.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Oct 26 16:52:40 2014 +0100]"},
{"name" : "e992cf9168f2a02e41a3eb909d5cd262dc4f171d", "time" : 1414337878, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #197 from dotty-staging/fix/tailrec-defdef\n\nFix #196. Errorneus tail-optimization of inner DefDef's", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Sun Oct 26 16:37:58 2014 +0100]"},
{"name" : "70946d7e2f8f3ca69b2ebba63f7afe34a53946a6", "time" : 1414337042, "y" : 2883, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Better tests and bugfix for named args\n\nThe original problem was that in an expression\n\n     f(x = bar(y = z))\n\nonly the outer named arg was eliminated by FirstTransform.\n\nThe first error was that the postcondition in FirstTransform did not get to the named arg, because\nit got called from the overrdden typed method in TreeChecker, yet function arguments were evaluated\nwith typedUnadapted.\n\naction: change Retyper and TreeChecker to override typedUndapped instead of typed.\n\nThis flushed out the second error: transformOther in FirstTransform needs to recursively transform the argument\nof a NamedArg, because the framework itself does not handle NamedArg nodes.\n\nNow, all tests pass except that TreeChecker itself fails -Ycheck:gettersSetters due to a problem\nwith handling by-name function types. This should be fixed in a separate PR.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Oct 26 16:24:02 2014 +0100]"},
{"name" : "f459bf085d743c801fe724089438c0082014121f", "time" : 1414337042, "y" : 2883, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix PreserveSubPatBinders not storing subparts that are used only for type tests.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Oct 26 16:24:02 2014 +0100]"},
{"name" : "a5878de9409c4d511c482a296ec6a3e85e868b93", "time" : 1414337042, "y" : 2883, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix pattern matcher double defining symbols used in type tests that are known to succeed.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Oct 26 16:24:02 2014 +0100]"},
{"name" : "8b0f2d62ca3100362a70c0e175fc95d7d21a452a", "time" : 1414337042, "y" : 2883, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Enabled commented out tests\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Oct 26 16:24:02 2014 +0100]"},
{"name" : "3a250720a0833d42ed6b23b5837de64b6ce34aed", "time" : 1414337042, "y" : 2883, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add missing and double symbol checking to TreeChecker\n\nTreeChecker now tests that a symbol does not have two definitions that define it,\nand that every reference to a symbol owner by a term is in the scope of a definition\nof that symbol.\n\nBoth tests fail on several files for pattern matcher.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Oct 26 16:24:02 2014 +0100]"},
{"name" : "4d370b6073bec9706d427f82c4a6a40fa22fe6d0", "time" : 1414337042, "y" : 2883, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Almost all tests pass -Ycheck:lambdLift\n\nOnly exception: dotc/transform. This seems to be for two reasons:\n1) The call-by-name functions used in Decorator#foldRightBN cannot be translated correctly\nat their use points.\n2) An anonymous function in Constructors are not correctly lifted.\n\n2) could be related to missing/duplicated symbols in pattern matcher. I'll follow up with a commit\nthat points these out.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Oct 26 16:24:02 2014 +0100]"},
{"name" : "55715f12a08646f54f324c5387c38615c433c4d1", "time" : 1414337042, "y" : 2883, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Replace some idents by selects in LambdaLift\n\nIf a symbol becomes a class field, references to it need to be selections, or\nelse we get a \"bad type\" assertion violation in TreeChecker.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Oct 26 16:24:02 2014 +0100]"},
{"name" : "02afa11c809798bc218499ae26050c426d36f42c", "time" : 1414337042, "y" : 2883, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Initialize lambda lift maps\n\n... so that they do not spill over between compilation units. It would be better to wipe the maps after\nprocessing a compilation unit, but right now we do not have a hook for that. A better solution should\nbe possible once we replace init by \"prepareUnit/transformUnit\".\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Oct 26 16:24:02 2014 +0100]"},
{"name" : "17b78ba1f82824865f0371c168050c94bf5b3720", "time" : 1414337041, "y" : 2883, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Strenghten postCondition of firstTransform\n\nAll tests pass, but good to have the condition in there.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Oct 26 16:24:01 2014 +0100]"},
{"name" : "a426e9280aa7ed3dbad923a8b2110b6a1a281771", "time" : 1414337041, "y" : 2883, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixes erasure of super\n\n - supertype components needs to be recursively erased\n\nWithout this fix, some files do not pass -Ycheck:lambdaLift\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Oct 26 16:24:01 2014 +0100]"},
{"name" : "651ff01e07b90c481e30afdd1500f617d74aeeb4", "time" : 1414337041, "y" : 2883, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "LambdaLift checks now explicitly for references to labels outside scope.\n\nNested methods cannot refer to labels in theior environment. Needs a fix in TailCalls.\nMoved failing test to pending.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Oct 26 16:24:01 2014 +0100]"},
{"name" : "854373753526248737ee554290b73fa583f0c264", "time" : 1414337041, "y" : 2883, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "SuperTypes are now promoted in Retyper; lambdaLift fails to Ycheck otherwise.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Oct 26 16:24:01 2014 +0100]"},
{"name" : "e7cc8a4012b9bfc9bc6ae811b37cc468ced46ff2", "time" : 1414337041, "y" : 2883, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Added missing case for SuperTypes to TypeComparer\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Oct 26 16:24:01 2014 +0100]"},
{"name" : "138045cc5545519c87044147dd7bb5b14729d2d2", "time" : 1414337041, "y" : 2883, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixes to LambdaLift\n\nSeveral fixes to LambdaLift. The test suite now succeeds with LambdaLift enabled.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Oct 26 16:24:01 2014 +0100]"},
{"name" : "98deca5e3e5e98c77b1440c8ab0d9bfd232e7357", "time" : 1414337041, "y" : 2883, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix to enclosingClass\n\nThe skip logic in enclosing class worked only when the original symbol was labelled\ninSuperCall. The patch makes it work also for symbols that are in turn owned by an\ninSuperCall symbol. Also it treats JavaStatic terms as also not being enclosed by\nthe lexically enclosing class.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Oct 26 16:24:01 2014 +0100]"},
{"name" : "04001befb1a7f08da0c38166eed61322104adbaf", "time" : 1414337041, "y" : 2883, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Two fixes to avoid scanning package contents\n\ntypeParams and outerAccessor both potentially scan all declarations of a class.\nThe fixes make sure this is never done for packages.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Oct 26 16:24:01 2014 +0100]"},
{"name" : "e3b0fa2ede56393165759eecd7bc916d24835ee1", "time" : 1414337041, "y" : 2883, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix flatten problem in erasure\n\nStatement sequences need to be flattened after processing, not before.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Oct 26 16:24:01 2014 +0100]"},
{"name" : "f590cb3564e47f212ba0b8c6d69c2d0f86108de9", "time" : 1414337041, "y" : 2883, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Rename flag Static -> JavaStatic\n\nStatic has two meanings: In the Java sense, and in the Scala sense, where it means\na member of a package or static module. The change makes it clear that the flag means\nStatic in the Java sense.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Oct 26 16:24:01 2014 +0100]"},
{"name" : "7167c225841a8261086e42e3e8721a4059a484bb", "time" : 1414337041, "y" : 2883, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Implement findMember for JavaArrays\n\n... by forwarding to Object. Without this, LambdaLift fails for core/Contexts.scala.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Oct 26 16:24:01 2014 +0100]"},
{"name" : "1a81244b68e58bde6a3d03551f1d92f15c3ff719", "time" : 1414337041, "y" : 2883, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix to TreeTypeMap\n\nNow handles the case where a class symbol itself is not changed by the map,\nbut one of its declarations is. In this case we need to back out, and create\nnew symbols for the class and all other symbols that are defined in the same scope as\nthe class.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Oct 26 16:24:01 2014 +0100]"},
{"name" : "0f3a903bebdac5eeaa84b2f8fdd0298bd15468f2", "time" : 1414337041, "y" : 2883, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "TreeTypeMap needs to map declarations of mapped classes\n\n... and these mappings have to be part of the applied substitutions.\nWithout the patch, the postCondition of FirstTransform fails for TreeInfo.scala and others,\nbecause it selects symbols which are not defined in the mapped class.\n\nUnrelated bugfix: JavaArray derives from Object.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Oct 26 16:24:01 2014 +0100]"},
{"name" : "8b38acbd349a033ba29285397fb54530a25e16e0", "time" : 1414337040, "y" : 2883, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Insert .package for package object references\n\nPackage object members are seen as members of the enclosing package during\ntyper. The normalization inserts the missing .package reference to such members.\n\nIt is necessary to satisfy a new postcondition of FirstTransform: In a selection `x.m`,\nthe type of `x` must derive from the owner of `m`.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Oct 26 16:24:00 2014 +0100]"},
{"name" : "979fa47ccdbdfc1f495c62b25b95ace9a637a674", "time" : 1414337040, "y" : 2883, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "More assertions in TreeChecker.\n\nFlushed out a caching bug in Scopes.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Oct 26 16:24:00 2014 +0100]"},
{"name" : "3fea9472c0d068bc08ae764429ca6b4bca95bcd8", "time" : 1414337040, "y" : 2883, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Avoid hoisting local classes\n\nThe patch disables hoisting of classes local to a block into the\nresult type of the block.\n\nInstead, we widen the result type of the block to one which reflects\nall refinements made to the parents type of the local class.\n\nTest cases in avoid.scala, t1569.scala.\n\nThe original t1569.scala no longer works. Why is explained in neg/t1569-failedAvoid.scala\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Oct 26 16:24:00 2014 +0100]"},
{"name" : "25a8937f115ed2ac1af33c41c73a621dab4ee712", "time" : 1414337040, "y" : 2883, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add echo method to printers.\n\nIt's often useful to print a value as it is returned. This method\navoids the temporary variable to hold the vaue before it is printed\nand then return. I.e.\n\n    printer.echo(msg, expr)\n\ninstead of\n\n    val x = expr\n    printer.println(msg + x)\n    x\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Oct 26 16:24:00 2014 +0100]"},
{"name" : "7eaee332674c16179221d12cba202d430bc3d5a3", "time" : 1414004954, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #189 from dotty-staging/merge\n\nconstructors & getters-setters", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed Oct 22 21:09:14 2014 +0200]"},
{"name" : "ddf57c9366bdec1e38cff9f6f2c9d72edcdce24a", "time" : 1413978648, "y" : 2914, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix #196. Errorneus tail-optimization of inner DefDef's\n\nUnless a DefDef is a result of desugaring an exception handler it shouldn't be optimized by tailrec.\n\nThere's a potential improvement here: to detect that a DefDef\n is a label def which itself is called only in tail position.\n\n This is a requirement to implement #194\n", "author" : "PersonIdent[Dmitry Petrashko, darkdimius@gmail.com, Wed Oct 22 13:50:48 2014 +0200]"},
{"name" : "f27010fbfb3b56d1b62e3549b8bb64d6f4dce2cc", "time" : 1413541099, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Disable LambdaLift\n\nto get a working baseline build\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Oct 17 12:18:19 2014 +0200]"},
{"name" : "6eeb8c61a9b9aff6119977b09adebcfcc622c041", "time" : 1413541081, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Erasure casting should perform primitive conversions\n\nAfter erasure, asInstanceworks only bedtween reference types, so erasure\nis not allowed to insert asInstanceOfs between numeric types. Previously\nthis made t1260 fail even if LambdaLift is disabled.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Oct 17 12:18:01 2014 +0200]"},
{"name" : "06d278bcbf6237c884bde0691536d28fbdb2e593", "time" : 1413285486, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Test for patmat action on a @ Bind(_, Typed(_: Unapply, _)\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Oct 14 13:18:06 2014 +0200]"},
{"name" : "49cfd9fe87c86cd7fff0952fe379eb1e7acca611", "time" : 1413219852, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Quickfix patmat not handling Bind(_, Typed(_: Unapply))\n\nTyper creates a tree that given current decoding scheme means\ncase a @ (Assign(Ident(id), rhs) : tpt)\nWhich isn't valid scala.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Oct 13 19:04:12 2014 +0200]"},
{"name" : "5454bca536863a7db1d0b4a848697f33c5c8bded", "time" : 1413219278, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Get rid of Substitution.\n\nSubstitution was creating more problems than solving.\nInstead the symbols in tree aren't rewriten anymore,\nand pattern matcher collects Rebindings and generates ValDefs\nfor them just before the guard & body of the generated case.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Oct 13 18:54:38 2014 +0200]"},
{"name" : "8b7988358782a569f9e74d83e98a2239d2085d40", "time" : 1413205657, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "EqualityTestTreeMaker: fix incorrect type of symbol\n\ngiven a pattern\n\nobject b\n\nx match {\ncase y @ b => <body>\n}\n\ny inside the <body> `y` should have type b.type.\nInherited from scalac EqualityTestTreeMaker would reset type of it\nin order to achive this.\nDotty instead needs to know this in advance.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Oct 13 15:07:37 2014 +0200]"},
{"name" : "ac583c50d6c26dcfc2eb7ad54f63f1de22f29ae7", "time" : 1413201457, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Better diagnostic from LambdaLift\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Oct 13 13:57:37 2014 +0200]"},
{"name" : "8ae2853e5a72363bb56b9cc69643e96f2ca4c1a3", "time" : 1413200535, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Disambiguate names in test case\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Oct 13 13:42:15 2014 +0200]"},
{"name" : "5ee2b7edc888dc8d71f2257f51da65cfccd35a41", "time" : 1413198152, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Remove special treatment of SubstOnlyTreeMakers.\n\nIn scalac SubstOnlyTreeMakers were implemented using substitution,\nand didn't actually introduce new trees.\nThus there was an optimization to remove them while generating code.\n\nThis optimization led to #190. It is now removed.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Oct 13 13:02:32 2014 +0200]"},
{"name" : "a8124506dc4aee451cadde7f07d1e0a1ebdab108", "time" : 1413194741, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "More refined printing options\n\nWhen using RefinedPrinter we now have a choice whether when\nprinting a definition tree such as\n\n    def foo(x: T): U\n\nwe print the parameter and result type info found in the tree or in the symbol.\nPreviously, we printed the sym info when after typer and the tree info before.\nThis turns out to be too inflexble. With the patch, we print the sym info if\noption -Yprint-syms is set, and the tree info otherwise.\n\nAlso, align -Yno-deep-subtypes from camelCase to standard hyphenated option notation.\n\nTweak where unique ids are printed.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Oct 13 12:05:41 2014 +0200]"},
{"name" : "0876deed1d725b0350b558365179252b024c2d44", "time" : 1413192579, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Initial lambda lifter\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Oct 13 11:29:39 2014 +0200]"},
{"name" : "2f57af3e21d6686507a7565b6be372a7ce0f5aa5", "time" : 1413191447, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Patmat: fix negation left from isEmpty&fix scoping\n\nShould fix #188\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Oct 13 11:10:47 2014 +0200]"},
{"name" : "c1cc79befdd5e5f7eaf7a2bc69cc70e6959ca57d", "time" : 1413105149, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Adaptations to make pattern matcher in new world\n\nTests now always include erasure (before quite a few tests failed when erasure\nwas enableed). By contrast lazy vals creates problems with erasure, disabled\nfor now.\n\nSome other small polishings on integration of pattern matcher with rest of dotc.\n\nDeep recompilation of tools still fails, currently disabled.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sun Oct 12 11:12:29 2014 +0200]"},
{"name" : "e9be067cd1f46f0ba0fbabaefd31716e85fefc47", "time" : 1413105121, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "move caseAccessors from TypeUtils\n\nThey are in SymUtils\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sun Oct 12 11:12:01 2014 +0200]"},
{"name" : "cf5999c497635cc891fbff65671479467e42bc5a", "time" : 1413105007, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Remove appliedIfMethod use ensureApplied instead\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sun Oct 12 11:10:07 2014 +0200]"},
{"name" : "765960f1bdacc228d51f3841acfa2fd2317f2814", "time" : 1413104831, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Rename explicitOuter to explicitOuterPhase in Phases\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sun Oct 12 11:07:11 2014 +0200]"},
{"name" : "8e9404b27bb73d16e2883ee682617011f9abc8fa", "time" : 1413103961, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Avoid capturing an old context in Classfile#typeParamCompleter\n\nPreviously caused an illegal backwards timetravel in bringForward when compiling\nall files in tools together twice.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sun Oct 12 10:52:41 2014 +0200]"},
{"name" : "1f0b25bf3099aebafeddc2c90f04e2d621f00814", "time" : 1413103949, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make Scala2Existentials valid forever\n\nAvoids a stale symbol error when compiling all files in tools together.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sun Oct 12 10:52:29 2014 +0200]"},
{"name" : "ce826ee7dd9beed775a614549b412df68f13fcac", "time" : 1413103937, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Avoid generating Any in erasedLubs\n\n... because Any is not an erasedType (this is now checked)\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sun Oct 12 10:52:17 2014 +0200]"},
{"name" : "3c6cf3936228fc317b90ffca8b5d9dda2883e508", "time" : 1413103928, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "TypeTestCasts should test and cast wrt erased types\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sun Oct 12 10:52:08 2014 +0200]"},
{"name" : "74fa107dab3c2442bf14753926bb82f7325645ad", "time" : 1413103922, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Moved caseAccessors to SymUtils\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sun Oct 12 10:52:02 2014 +0200]"},
{"name" : "4e897165d9dbd58536a176b9901e0c62457e6b4d", "time" : 1413103909, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix bug in varianceInType\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sun Oct 12 10:51:49 2014 +0200]"},
{"name" : "73e7da5ecae2aa77f0adf23a430092e039cb2c9a", "time" : 1413103899, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make widening ops more systematic & complete\n\n1) strip TypeVars where necessary before widening\n2) allow the combination of widening and dealiasing, in any order.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sun Oct 12 10:51:39 2014 +0200]"},
{"name" : "41211c597dec676b258a20010f8147fb87167664", "time" : 1413103893, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix typing of _* patterns.\n\nAnd bring back two tests for typing of patterns\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sun Oct 12 10:51:33 2014 +0200]"},
{"name" : "b371bae865ab61d984345df1cd1ddc776110a36b", "time" : 1413103887, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Bring back lost AccessorCreationFlags\n\nWas lost in merge chaos between pattern macther and rest\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sun Oct 12 10:51:27 2014 +0200]"},
{"name" : "fd81127c6255d01237dd98e8296abf6fdfe80741", "time" : 1413103857, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "New tests\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sun Oct 12 10:50:57 2014 +0200]"},
{"name" : "fa44d5cd694d76e285ebadcdf297f0d13936a6e9", "time" : 1413103849, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Enabled GettersSetters phase.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sun Oct 12 10:50:49 2014 +0200]"},
{"name" : "6efccf91e7856a4c8fde7daf914e77fef4fb6e52", "time" : 1413103842, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Don't adapt to FunProto in TreeChecker.\n\nSimilar to Erasure, we do not check conformance wrt <:< to a FunProto.\nNothing is lost, because we typecheck the arguments and result anyway.\nAnd this led to failing tests after GettersSetters was added.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sun Oct 12 10:50:42 2014 +0200]"},
{"name" : "c72d404dd12309219d312a5730bed82175840db5", "time" : 1413103835, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Replace typed with typedUnadapted.\n\n1) Avoids unneccessary second adapt.\n2) Avoids error when used in TreeChecking when we try to compare\n   types in previous tree and new tree - if we used `typed`, the\n   previous tree would not have a type!\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sun Oct 12 10:50:35 2014 +0200]"},
{"name" : "88007462d3251cdc3032c724dde873eabfed6427", "time" : 1413103826, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Avoid caching NoDenotations in NamedTypes\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sun Oct 12 10:50:26 2014 +0200]"},
{"name" : "939bdf473f31c352a345243effb48bfb01d49b03", "time" : 1413103815, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "SymUtil methods to navigate between setters, getters and fields.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sun Oct 12 10:50:15 2014 +0200]"},
{"name" : "dfeff382f90a3c20d7b1600785263bc22a9edbbc", "time" : 1413103808, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "More robust printing or trees\n\nThe previous test, `symbol != null` crashed for trees that did not\nhave an assigned type.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sun Oct 12 10:50:08 2014 +0200]"},
{"name" : "0e6e7bebaccf08796c578ae58c99d0bd5a2336d2", "time" : 1413103800, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Re-usable method to determine self-ness.\n\nMethod isSelfSym decides whether a symbol is the symbol of a self\ndefinition in a class.\n\nAlso, make all self symbols private[this]\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sun Oct 12 10:50:00 2014 +0200]"},
{"name" : "f0578aa4bd3c87bd00658f4138eef3e4624f035e", "time" : 1413103791, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Two fixes to TypeComparer\n\n1) Eliminated a case in the comparison that did not work and was apparently not needed anyway.\n2) Augmented another case to also work when paths go through getters.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sun Oct 12 10:49:51 2014 +0200]"},
{"name" : "afd9a66453848412ae0a974ddd475da2b0d846bf", "time" : 1413103783, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "rename AddGetters -> GettersSetters\n\n... and add a gettersSettersPhase to Context.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sun Oct 12 10:49:43 2014 +0200]"},
{"name" : "5de255637589b800ffc99ddb3453ccd651bfafc9", "time" : 1413103775, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixes to TermRefs and others in TypeErasure.\n\n1) TermRefs are now erased to their widened underlying type. The only exception\n   are top-level term refs (e.g. the types of Ident or Select nodes), which are\n   treated as before. Those top-level refs are treated by erasedRef instead of erasure.\n\n2) We make sure that erasure methods are not run after phase erasure. Reason: After\n   erasure underlying types change, which affects itself the result of erasure.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sun Oct 12 10:49:35 2014 +0200]"},
{"name" : "2ca36a96aee3f2e5cc9073b8970659180f839f95", "time" : 1413103738, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Create setters also for private vars\n\nReason: We might need hooks for data representation transformations also for private vars.\nPrivate[this] vars in non-trait classes remain setterless.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sun Oct 12 10:48:58 2014 +0200]"},
{"name" : "f244287fdba4ccf64e2404285b713cee599448ba", "time" : 1413103683, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix to primaryConstructor\n\nPrimary constructor was picking last constructor instead of first one.\nThis is now fixed. Also, added paramAccessors utility method.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sun Oct 12 10:48:03 2014 +0200]"},
{"name" : "33113aa693c7290eda504029b14f7fcb8e104391", "time" : 1413103668, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix tree typing to account for trees after constructors is run.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sun Oct 12 10:47:48 2014 +0200]"},
{"name" : "35f46b4a0c2d290582981f67498ed77a4ae9b21d", "time" : 1413103617, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "ElimByName now handles casts to by-name-parameter TermRefs\n\nA cast like\n\n    expr.asInstanceOf[x.type]\n\nwhere x is a by-name parameter has to be mapped to\n\n    expr.asInstanceOf[x.type].apply()\n\nSee pos/t296.scala which would otherwise start failing when the pattern matcher is integrated.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sun Oct 12 10:46:57 2014 +0200]"},
{"name" : "f3d42cd1358ef6d317a6adb4ae4fc9a28cc01c7e", "time" : 1413103019, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add possibility to compile all files in a directory and all subdirectories.\n\nWe better make this configurable. Because sometimes we want to compile only the files\nin the immediate directory.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sun Oct 12 10:36:59 2014 +0200]"},
{"name" : "550ac131596c55a90ab87db94fec078c90cb5a00", "time" : 1413102994, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Avoid creating ConstantTypes by TypeAssigner after erasure.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sun Oct 12 10:36:34 2014 +0200]"},
{"name" : "c0da421ea2f7b63cc081224a025c8f102030be7b", "time" : 1413009891, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "After-rebase fix: weaken owner-chain restriction.\n\nAllow to skip labels.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 08:44:51 2014 +0200]"},
{"name" : "9ab1568cd5854dd9dd3800f3d2f05866fcb26613", "time" : 1413009737, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix errors in SymDenotations.isCachable.\n\nTypeVar is a TypeProxy.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 08:42:17 2014 +0200]"},
{"name" : "103d16793f312e2cefc8095de58255728ceebc88", "time" : 1413008677, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Move private fields into constructor\n\nPrivate fields that are accessed only from the constructor,\nand are accessed only after they are properly initialized are now\nmoved into the constructor. This avoids creating a redundant objetc field.\nGood example: gcd in Rationals (see constrs.scala).\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 08:24:37 2014 +0200]"},
{"name" : "06173800c03a06b35b3ade30ce52f2dd295851b4", "time" : 1413008677, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Added method to help traversing children in a TreeTraverser\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 08:24:37 2014 +0200]"},
{"name" : "5289a3719c0767c1874ff1e34b825ccf3b314257", "time" : 1413008676, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix caching logic in baseTypeRef\n\nTypevars can be parts of larger types or underlying types of\nother types, which renders these other types uncacheable. The new\nlogic takes account of that.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 08:24:36 2014 +0200]"},
{"name" : "a64e0a2fc8883e5a6358a04d706eb72e896f67c6", "time" : 1413008676, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Made TypeVars uncahable keys\n\nTypeVars can appear as keys in baseType caches. The problem is that\ntheir base types depend on their instantiation, which is not always\nknow yet when the test is performed. So results of baseType on\ntype variables should never be cached.\n\nTodo: check whether there are any other caching problems involving typevars.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 08:24:36 2014 +0200]"},
{"name" : "8ec91d472f28ec1bf1c957815e5ca987410b7c47", "time" : 1413008676, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Completed constructors phase\n\n1) Type parameters are now copied to accessors\n2) Constructors also work for traits\n\n2) makes it possible do to mixin after constructors.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 08:24:36 2014 +0200]"},
{"name" : "478b97a1cbc67af97bb8be98a36c5b8173898f2b", "time" : 1413008676, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix rewriting of by-name class parameter accessors.\n\nLike the corresponding parameters, these also need to be rewritten to function types.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 08:24:36 2014 +0200]"},
{"name" : "88d11fa21761d798baeb24b8002ddacade601b23", "time" : 1413008676, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Combine captured vars and constructors into one macro phase.\n\nNeeded to fix a problem in CapturedVars to make this work.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 08:24:36 2014 +0200]"},
{"name" : "96f754c92713d1a199b844fe5501dafaad45d7cb", "time" : 1413008676, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add constructors phase\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 08:24:36 2014 +0200]"},
{"name" : "330773619d01b9f684676ec4253b3d76c4807222", "time" : 1413008676, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix to primaryConstructor\n\nPrimary constructor was picking last constructor instead of first one.\nThis is now fixed. Also, added paramAccessors utility method.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 08:24:36 2014 +0200]"},
{"name" : "3f542aabf7944cc36302753d6126bb06e571d218", "time" : 1413008676, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Account for PolyProto and IgnoredProto types in expectedTypeStr\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 08:24:36 2014 +0200]"},
{"name" : "d32ff05d101f860dc1b290330d34caa9aea6e1df", "time" : 1413008676, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "New utility methods in SymUtils\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 08:24:36 2014 +0200]"},
{"name" : "d288981f42cd8fde42340264a73d30e037bffec5", "time" : 1413008676, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix tree typing to account for trees after constructors is run.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 08:24:36 2014 +0200]"},
{"name" : "ce81244e6c4fc7b5b8ccc70ad32290045a591739", "time" : 1413008676, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix handling of type params in secondary constructors\n\nParams are already added by Desugar. No special treatment needed here.\nBesides primaryConstructor.typeParams is always empty, because term symbols\ndo not have type parameters.\n\nThe fix turns t2660.scala into an error. I believe the error is correct, hence\nthe test was moved with a comment to neg.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 08:24:36 2014 +0200]"},
{"name" : "d9a911c43bbedcae8a787eafb91bb6889a8ff461", "time" : 1413008675, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Uncurry also in DefDef trees, not just in infos.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 08:24:35 2014 +0200]"},
{"name" : "8975b85958e4d600eebb843c4847e52486c33f46", "time" : 1413008675, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Drop type declarations from erased ClassInfo\n\nNeed to drop all non-class type declarations.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 08:24:35 2014 +0200]"},
{"name" : "c93f545dc344d4acebdb84dc76eae062eaf67ce0", "time" : 1413008675, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Erasure should keep prefix in termrefs.\n\nThe current formulation of lambda lift is easier to do if that's the case.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 08:24:35 2014 +0200]"},
{"name" : "67e0313c046f0cfea7dab8ef6e6c6136d12e61f1", "time" : 1413008675, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Take environment into account when typing a closure.\n\nEnvironment parameters do not count in th eresult type.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 08:24:35 2014 +0200]"},
{"name" : "8f18250f4fe494e0b6314fc2cb8e501753e79064", "time" : 1413008675, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Allow relaxed typing of applications\n\nSome transformations encounter applications where new arguments ahve to be\nsupplied. The method type already accounts for these argument but the\nApplication node passed into TreeTransform#transformApply is constructed\nwith a cpy.Apply operation which does a type assignment. That type assignment\nfails with a parameter mismatch unless relaxedTyping is on.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 08:24:35 2014 +0200]"},
{"name" : "59ae5e6443980569877b8072f23947493463f1ba", "time" : 1413008675, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Treat @static as a source flag.\n\nIt changes meaning drastically so should always be visible.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 08:24:35 2014 +0200]"},
{"name" : "14b539e23c476e8025404666d933d9cc78d2b300", "time" : 1413008675, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Take receiver into account when selecting default getters.\n\nPreviously, we determined the default getters solely from the method TermRef type.\nThis is wrong if the method is prefix is not a path -- the prefix of the term ref will be a\nTypeRef and the getter selection will be a SelectFromType tree, which makes no sense.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 08:24:35 2014 +0200]"},
{"name" : "12a624a75d05372002e4308f4b2830847ca88d3e", "time" : 1413008675, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Replace tree.withName with {tpd|untpd}.rename.tree\n\nAdvantage: Can rename typed as well as untyped trees.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 08:24:35 2014 +0200]"},
{"name" : "117b643d0c20aebac6363057d4043ac2cbb817fe", "time" : 1413008675, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix lifting of application:\n\nLifting an application  `f(arg1).f(args)` requires lifting of the whole prefix\n`f(arg1)`, because `f` might have a side effect.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 08:24:35 2014 +0200]"},
{"name" : "02ab2e85f4570b53e4eab251f6f6a047fd8d168b", "time" : 1413008675, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add isProperlyContainedIn method\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 08:24:35 2014 +0200]"},
{"name" : "8918bd94813c254dcd0e19d0c16726bb5450e27a", "time" : 1413008675, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make enteredAfter, installAfter more forgiving as to when they are called.\n\nInstead of requiring to be called a given phase, change the context if\nthat is not the case.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 08:24:35 2014 +0200]"},
{"name" : "70087826a64e027b72fc8235172bf2eee04b9d20", "time" : 1413008674, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Facturing out EnclosingMethodTraverser from CapturedVars\n\nThe idea to traverse with currently enclosing methid is also used in\nLambdaLift and could be used elsewhere.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 08:24:34 2014 +0200]"},
{"name" : "00175e15b7bd6ef456dc8884002cae28a09957e5", "time" : 1413008669, "y" : 2915, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Replace call to unimplemented method runtimeCall\n\nUse ref and appliedTo instead.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 08:24:29 2014 +0200]"},
{"name" : "5f05c4be3e986b7a370f566fd4409b29463fb781", "time" : 1413006901, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #174 from dotty-staging/reb\n\nPattern matcher", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Sat Oct 11 07:55:01 2014 +0200]"},
{"name" : "3211985a439b4e86ef58b0709673118c84063118", "time" : 1413005902, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Cleanup patmat based on feedback\n\nfrom pr #174.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 07:38:22 2014 +0200]"},
{"name" : "2e6b343f5403577f2a71f472e6663b7d55c84c5a", "time" : 1413005630, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "make appliedToNone fail for exprType, use appliedIfMethod instead\n\nsee discussion in\nhttps://github.com/dotty-staging/dotty/commit/0c551f00f43c1675aca3adbff7567f47432c66f6\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 07:33:50 2014 +0200]"},
{"name" : "42ad90f954243ad68b3a31276001760301fddc51", "time" : 1413002442, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "prevPhase should indicate previous phase in explicitOuter\n\nMakes it less confusing as thisTransformer is already used\nfor the ExplicitOuter itself\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 06:40:42 2014 +0200]"},
{"name" : "e330cc346a4fb8e9aac5c050d48be48495128e70", "time" : 1413002442, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Follow standard naming pattern in LazyVals\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 06:40:42 2014 +0200]"},
{"name" : "be1965c3f879e331fa344d3f9c0eee31d93cb184", "time" : 1413002442, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Use more efficient type comparisons\n\nisRef is more efficient than subtyping check.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 06:40:42 2014 +0200]"},
{"name" : "0670fc3271f1d3a2507724991f105fccf15232bb", "time" : 1413002442, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make widening ops more systematic & complete\n\n1) strip TypeVars wehere necessary before widening\n2) allow the combination of widening and dealiasing, in any order.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 06:40:42 2014 +0200]"},
{"name" : "a77e25cf5b79cd2cf6d782c0efb0553600e415ff", "time" : 1413002442, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Cleanup patmat.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 06:40:42 2014 +0200]"},
{"name" : "b8de0ad29a91ec3df2985009e17b6b8b4b52f674", "time" : 1413002441, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Seems to be a bug ping @odesrky\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 06:40:41 2014 +0200]"},
{"name" : "7b845a54de291acf837aa2a8fe01acb9205341c4", "time" : 1413002441, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix SymDenotation.isPrimaryConstructor\n\n.denot was missing\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 06:40:41 2014 +0200]"},
{"name" : "cedf12b547792fbf6a31a8903d142343d5ed8741", "time" : 1413002436, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Cleanup tests.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 06:40:36 2014 +0200]"},
{"name" : "7121ff38439c0b05fdc63d2d64565588448795df", "time" : 1413002349, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix test suite to go deep in subdirectories.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 06:39:09 2014 +0200]"},
{"name" : "5f87089d1fb98facfdfddd01fb033af5c33ca673", "time" : 1413002349, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Document why patternMatcher needs to be after tailrec.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 06:39:09 2014 +0200]"},
{"name" : "cb18aa3a4ff7eea8626153e27d7266f47851f80c", "time" : 1413002349, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Allow extensions methods to play well with tailrec.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 06:39:09 2014 +0200]"},
{"name" : "5133dfcd00907e96472b14444bd87e0fa62b4dd3", "time" : 1413002349, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Join megaphases. Saves 80 out of 200 seconds for dotc.tests\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 06:39:09 2014 +0200]"},
{"name" : "e1064ac1ed716f95836c9dd3f908179659c6da2e", "time" : 1413002349, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make Extension methods a miniphase\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 06:39:09 2014 +0200]"},
{"name" : "d68c106cc7fc23a5d7c2a25868278e6394601e5d", "time" : 1413002349, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Enable outer tests in pattern matcher.\n\nAnd a test for this.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 06:39:09 2014 +0200]"},
{"name" : "5f04610ce923bf720fbdaf2408eca07412795fe3", "time" : 1413002349, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Remove outdated tests.\n\ndotc_core_transform directory is empty. Files where moved while restructuring erasure.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 06:39:09 2014 +0200]"},
{"name" : "df28f8a6d254384ca13473f0261d8f561499b5f7", "time" : 1413002349, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Move check for casting a primitive to a non-primitive type from erasure to refchecks\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 06:39:09 2014 +0200]"},
{"name" : "7b407e59bebbb04e8328b33b01fa15b77c28ccb5", "time" : 1413002349, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make LazyVals an IdentityDenotTransformer\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 06:39:09 2014 +0200]"},
{"name" : "0a9c61c13b5ac6c686e73904ee3f95357a30c167", "time" : 1413002349, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixed needs outer test\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 06:39:09 2014 +0200]"},
{"name" : "2f6305977eff1c5010e780ce624d524ed4d01947", "time" : 1413002348, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixed assertion to enfornce idempotency of substitutions\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 06:39:08 2014 +0200]"},
{"name" : "5fe03355f9a5730f0ed662f1a210398a9fa9b238", "time" : 1413002342, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Enable all tests\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 06:39:02 2014 +0200]"},
{"name" : "730c3d3d930e53cdef50f1dffef155e564dd22b6", "time" : 1413002292, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Enabling lazy vals.\n\nUnit tests still to-be-fixed\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 06:38:12 2014 +0200]"},
{"name" : "a159f71c1b8b4674f1ab6411d3f3ba8f2440c1bd", "time" : 1413002292, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixing owner releated error in lazy vals.\n\nWhen lazy val body is moved to a init method the owner of symbols in\ntree should change\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 06:38:12 2014 +0200]"},
{"name" : "02c98aa1da9a64fdf524ce21ce0c24cbb058d750", "time" : 1413002292, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Setters are not case accessors\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 06:38:12 2014 +0200]"},
{"name" : "19fb9add9716b3db64018d01ce8ad53894202715", "time" : 1413002292, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Porting lazy vals to a new scheme.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 06:38:12 2014 +0200]"},
{"name" : "992ea66d13de7739c6ff1b6d1fe122ab63b36b41", "time" : 1413002292, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Bring back test removed between merges.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 06:38:12 2014 +0200]"},
{"name" : "d5923683f4cfbb1647abc91ce8c4d564bbb9993b", "time" : 1413002292, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "More better handling of typeTests in patmat.\n\nNow reuse symbols from typer. Less substitutions -> better performance.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 06:38:12 2014 +0200]"},
{"name" : "cc792576ff1174820d68d5e10c39f909dd5b39ec", "time" : 1413002291, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make SubstOnlyTreeMaker maintain type-safety.\n\nImplementation of pattern\nsel match {\n x => <body>\n}\nused to replace references to x by references to sel in <body>.\nThis is not type correct and it also requires additional traversal of\nbody.\nNow SubstOnlyTreeMaker generates a `x = sel` statement.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 06:38:11 2014 +0200]"},
{"name" : "d936dec0c27d43dc861194594ecc22c4770450bd", "time" : 1413002291, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make productArity a synthetic method which can be overridden\n\nLike other synthetic methods, productArity will not be generated\nif an explicit definition is given. Used to be generated unconditionally\nin desugaring.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 06:38:11 2014 +0200]"},
{"name" : "eb2e265e12d10aa28c63bbe99b2c4a4a79ee8869", "time" : 1413002291, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make rejection of deep subtype call stack optional\n\nMove flag that throws exception on deep subtyping stacks from Config varianble to setting.\nDisable setting for core-pickling which had a deep subtype failure after pattern matcher\nwas integrated. Todo: Figure out why the subtype stack got so deep.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 06:38:11 2014 +0200]"},
{"name" : "543ff7f4123ded7172fd6ede59f09945efd7c158", "time" : 1413002291, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make changeOwner more robust regarding non-standard owner chains\n\nThe problem is running changeOwner(from, to) where\n\n - from is a ValDef or a Label\n - an embedded definition has as owner not `from` but some\n   owner of `from`.\n\nWe allow such denomrlaized owners and the pattern matcher generates\nthem. This patch makes changeOwner take these situations into account.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 06:38:11 2014 +0200]"},
{"name" : "167581469779cabc7138427d506a16507369cbf5", "time" : 1413002291, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix #167\n\nCan handle now vararg arguments in patterns.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Oct 11 06:38:11 2014 +0200]"},
{"name" : "bec85a90dda4c8488e3bbc47bfd0c64c6c3ed774", "time" : 1412842628, "y" : 3019, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix subtyping of types without symbols\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Thu Oct 9 10:17:08 2014 +0200]"},
{"name" : "c12f2ea48e4cdf609a33c1d476c1a4e1d992a356", "time" : 1412839652, "y" : 3019, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Simplify subtying test\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Thu Oct 9 09:27:32 2014 +0200]"},
{"name" : "e0b290c1e64a134633fc804ef1f9e54ccf17d25d", "time" : 1412509133, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #179 from smarter/fix/namedtype-subtyping\n\nFix isSubType(A#X, B#X) not checking if A <: B", "author" : "PersonIdent[odersky, odersky@gmail.com, Sun Oct 5 13:38:53 2014 +0200]"},
{"name" : "c60218303b65f66ddc8a4afa0add8506d5272533", "time" : 1412467373, "y" : 3022, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix isSubType(A#X, B#X) not checking if A <: B\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Sun Oct 5 02:02:53 2014 +0200]"},
{"name" : "f50c3f0d1c80a9d9d98d24ed3e7d8577c5eb80a5", "time" : 1411574778, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Incorporating TypeTestsCasts into Erasure\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Sep 24 18:06:18 2014 +0200]"},
{"name" : "42b8c1df6e22bf8a8fd982bbd542d6fc427f8deb", "time" : 1411572298, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "TypeTestsCasts now handles casts to constant types.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Sep 24 17:24:58 2014 +0200]"},
{"name" : "112d08118b5f892ba98a465ef8cf8896448245f8", "time" : 1411557328, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "More accurate or postcondition conchecking in TreeChecker\n\nPrevious postcondition checking did not take into account that phases are\nnot flat - they consist in part of macro phases that contain miniphases.\nIn fact the whole set up in Run is dubiuos - we should eliminate the problem at the\nroot, as described in the TODO in run.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Sep 24 13:15:28 2014 +0200]"},
{"name" : "23064fce9629fdf001c3138fcd8c87ba4a398a37", "time" : 1411481081, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Patmat now succeeds tests.\n\n@odersky there are some tests disabled, which failed due to other phases being able to transform more code.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Sep 23 16:04:41 2014 +0200]"},
{"name" : "e2a130a32e8ec67bfc834f93ed44490bc9a83399", "time" : 1411474480, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Made TypeVars uncahable keys\n\nTypeVars can appear as keys in baseType caches. The problem is that\ntheir base types depend on their instantiation, which is not always\nknow yet when the test is performed. So results of baseType on\ntype variables should never be cached.\n\nTodo: check whether there are any other caching problems involving typevars.\n\nConflicts:\n	src/dotty/tools/dotc/core/SymDenotations.scala\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Sep 23 14:14:40 2014 +0200]"},
{"name" : "58ae0d03a13fbe159120c9356884f96dda37d575", "time" : 1411474055, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix errorneus equality between TermRef and WithFixedSym\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Sep 23 14:07:35 2014 +0200]"},
{"name" : "2b52e9ccbf0427f7b9e4d5f61f1df8b4fb5d3f24", "time" : 1411468337, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "@odersky have a look.\ntestOnly dotc.tests\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Sep 23 12:32:17 2014 +0200]"},
{"name" : "9b576c2c1c36003e0ca0a760c36aae028991400f", "time" : 1411464601, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix problem in unapply typing.\n\nGADT bound resetting may only be applied when comparing\n<pattern type> <: <expected type>, not when comparing the\nother way around.\n\nThe fix revealed an error in a test case (t1048) which looks like a real error.\nTherefore the test got moved to neg.\n\nConflicts:\n	src/dotty/tools/dotc/typer/Applications.scala\n	test/dotc/tests.scala\n	tests/disabled/t1048.scala\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Sep 23 11:30:01 2014 +0200]"},
{"name" : "8bd14310f60c1be997a62eaba84dd49624ea2df6", "time" : 1411464069, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Renamed parameters in Typer&Applictaions.\nIndicating that pt is type of selector is this pattern match makes it easier to follow.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Sep 23 11:21:09 2014 +0200]"},
{"name" : "857cd4839c872d229994c9d27bb06ef866dad93d", "time" : 1411463879, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Disabling patmat tests failing due to typer.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Sep 23 11:17:59 2014 +0200]"},
{"name" : "0a515fca98408d63267c27003e1ef12fd9946aa0", "time" : 1410971125, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "All pat-mat specific tests succeed now.\nExcept t1048 which infers incorrect type in typer, patmat creates a tree that computes a more precise one that fails to typecheck\nDisabling erasure due to dozens of \"Type BLA is illegal after erasure\" errors.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Sep 17 18:25:25 2014 +0200]"},
{"name" : "09a771897f62872554b88836eebeb05735b9c2f7", "time" : 1410970118, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixing periods for explicitOuter\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Sep 17 18:08:38 2014 +0200]"},
{"name" : "d6d7c2529e51d3abc9be6a1ab7601cf3c598d732", "time" : 1410970118, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "More complicated tests for patmat\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Sep 17 18:08:38 2014 +0200]"},
{"name" : "f75432fb31807938db2e9f78980fa574f88cd535", "time" : 1410970118, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Allow skipping Label's in owner chains\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Sep 17 18:08:38 2014 +0200]"},
{"name" : "ab6766c0dc5f47ef8e5a92c96707d1c3d958f255", "time" : 1410970118, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Several fixes to patmat.\nNow patmat passes tests but erasure fails.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Sep 17 18:08:38 2014 +0200]"},
{"name" : "b12c2d88aa1e2bf46b16ebd05b92bc77df3eadc4", "time" : 1410970037, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Extract ExplicitOuter functionality to be used by patmat\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Sep 17 18:07:17 2014 +0200]"},
{"name" : "0c551f00f43c1675aca3adbff7567f47432c66f6", "time" : 1410970037, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "More convinient appliedToNone\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Sep 17 18:07:17 2014 +0200]"},
{"name" : "c2402d232a7531778f71fc033da4d83bf7f06212", "time" : 1410970037, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "After merge fixes\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Sep 17 18:07:17 2014 +0200]"},
{"name" : "80d8634fcabe709cb56fb827acd0fc640effcfdb", "time" : 1410970037, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Remove dead code and add todo about outer tests not being generated\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Sep 17 18:07:17 2014 +0200]"},
{"name" : "8f6ce34a846fedad7c939403918a3d7d7da9d72b", "time" : 1410970037, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Remaining definitions for patmat.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Sep 17 18:07:17 2014 +0200]"},
{"name" : "899554fc34038be1ff2fe6fbd2bc38f1f39dce5b", "time" : 1410970037, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixed unapplySeq. Patmat passes all test suite but typer itself breaks on it.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Sep 17 18:07:17 2014 +0200]"},
{"name" : "278d6cbe2b77241ef1dcb6b4208d5c041ca3c72b", "time" : 1410970037, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Everything except unapplySeq doesn't explode.\nThat doesn't mean that it works.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Sep 17 18:07:17 2014 +0200]"},
{"name" : "00dbbe65d4e6653220977ce466b728f70c6de477", "time" : 1410970037, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Most of tests succeed now.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Sep 17 18:07:17 2014 +0200]"},
{"name" : "ef16bfedcbcb6fedb9825b3ff87d450c6eee589c", "time" : 1410970037, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "More fixes, added _id for internal tracking of failures\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Sep 17 18:07:17 2014 +0200]"},
{"name" : "07b757bb49f8b663a89a68d32e2c7de0eb33b1f0", "time" : 1410970037, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "more of adapting patmat for dotty\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Sep 17 18:07:17 2014 +0200]"},
{"name" : "e54dd1aabcd1e785e3393f1f788c145c0e9926a9", "time" : 1410970036, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Adapting patmat for dotty\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Sep 17 18:07:16 2014 +0200]"},
{"name" : "738f5efc40fca017d29157364c6b4363a1bf867c", "time" : 1410970036, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Helper methods for patmat\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Sep 17 18:07:16 2014 +0200]"},
{"name" : "e5aafda8ee452ec9d3b42b8b5fa022a3124134d9", "time" : 1410970036, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Pattern expanders for patmat\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Sep 17 18:07:16 2014 +0200]"},
{"name" : "f03bae91b08896cb4fee61e9ec18c882fab86021", "time" : 1410970036, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Match translator for patmat\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Sep 17 18:07:16 2014 +0200]"},
{"name" : "837a1e905741cd529eb410b6771a8a25ec46eb98", "time" : 1410970036, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "add Substitution to patmat.\nSome compilation errors fixed\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Sep 17 18:07:16 2014 +0200]"},
{"name" : "28ca226635af9a07b6711ad4fac3e763e98e7d2e", "time" : 1410970036, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "TreeMakers for patmat\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Sep 17 18:07:16 2014 +0200]"},
{"name" : "d6266118bd3f01e9e40efa4b07bb18f4d0fafcc3", "time" : 1410970036, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Optimized codegen for patmat\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Sep 17 18:07:16 2014 +0200]"},
{"name" : "4c62011df6584e4ebe98a012a3b1a438679f8735", "time" : 1410970036, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "CommonCodegen for patMat\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Sep 17 18:07:16 2014 +0200]"},
{"name" : "fa5212f8e3fb3be08a92b921b87553b5827b1417", "time" : 1410970036, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Common functionality to be shared between patmat and typer\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Sep 17 18:07:16 2014 +0200]"},
{"name" : "56a0a908eb1e0999504e0e483cfc71664bc79c75", "time" : 1410970036, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Definitions used by patmat\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Sep 17 18:07:16 2014 +0200]"},
{"name" : "7a74d71202f514e5d5b79b8e393bd564dff5f0a2", "time" : 1410970036, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "More complicated patterns.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Sep 17 18:07:16 2014 +0200]"},
{"name" : "1287f2dd2d0af03c215951b4264d1c627731cea8", "time" : 1410970036, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Unapply doc update\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Sep 17 18:07:16 2014 +0200]"},
{"name" : "fb8df8c7b22fd9ae8e8a9d555769c5b46bac4a5d", "time" : 1410970035, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Making all case classes implement Product. Requires adding Product0\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Sep 17 18:07:15 2014 +0200]"},
{"name" : "0ceaff7add2da68f69727bc7ee19492f7d84183c", "time" : 1410970035, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "initValue helper method\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Sep 17 18:07:15 2014 +0200]"},
{"name" : "d78c9d360182d87ba78d55fa255859cc89e2d95d", "time" : 1410970035, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Definitions used by pattern matcher\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Sep 17 18:07:15 2014 +0200]"},
{"name" : "73324fa97e504e7a8cce5ae211efca95be4c33e9", "time" : 1410970035, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Allow converting junit test to scalameter benchmark\n\nLets start tracking performance!\n\nTo run benchmarks execute `dotty-bench/test:run` in sbt\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Sep 17 18:07:15 2014 +0200]"},
{"name" : "f0dfea49476e1b1f1d3c0f60e52e96db957dff78", "time" : 1410970035, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Changes from discussion in #171\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Sep 17 18:07:15 2014 +0200]"},
{"name" : "b22dc6d50f675ff713fd19e243f9cd439d7791b1", "time" : 1410624275, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Revert of b2e0e7b4 \"tpd.TreeOps#select creates non member syms after erasure.\"\n\nWith the new more systematic treatment of fresh symbols in TreeTypeMap, this\nis no longer ncessary.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Sep 13 18:04:35 2014 +0200]"},
{"name" : "5634dcc1490de05dbf5b3f2637a7e0eb4be8d6d0", "time" : 1410623946, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Better TreeTypeMaps\n\n1. They now keep track of changed constructors in templates, updating\n   the class scope as for other members.\n2. Any changed members are now entered into the new class scope at exactly\n   the same position as the old one. That ensures that things like caseAccessors\n   still work.\n3. ChangeOwners now is reflected in the prefixes of any named types.\n4. Newly created classes now get their own ClassInfo type.\n5. TreeTypeMaps always crete \"fresh\" symbols. Fresh symbols do not share\n   a NamedType reference with an existing reference to some other symbol.\n   This obviates b2e0e7b4, which will be reverted.\n\nTo make it work, the interface of TreeMap changed from an ownerMap function\nto a substitution-like data structure working with two lists.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Sep 13 17:59:06 2014 +0200]"},
{"name" : "2317764b683fe548f7c5e3b5ee5ede9760433c61", "time" : 1410481793, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "New phase: CapturedVars\n\nBreaks out boxing functionality of captured vars from lambda lift.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 12 02:29:53 2014 +0200]"},
{"name" : "bb5b049076ca733ea42e528ecef81de438a15b19", "time" : 1410481739, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix handling of Array#clone in Erasure\n\nTreat clone like the other primitive array operations, ensure it\nreturns a JavaArray.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 12 02:28:59 2014 +0200]"},
{"name" : "f05dafedf2c63bb4aa1830b600416f80c984dce6", "time" : 1410481661, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Better failure diagnostic in TreeTransform\n\nInclude a backtrace of nested calls on error.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 12 02:27:41 2014 +0200]"},
{"name" : "edbe9edbbe4cf52ec6f885919253bf7ce4979b38", "time" : 1410481630, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Skip label methods in enclosing method\n\nOtherwise would spuriously treat variables referenced\nfrom while loops as captured, because their enclosing method\ndiffers from current enclosing method.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 12 02:27:10 2014 +0200]"},
{"name" : "97828b370d9b5e0a4c5b4ec5b1da1c174e417df9", "time" : 1410481427, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Handle return in tailcalls.\n\nAvoids characterizing the \"from\" link in a return as a tail call\nreference.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 12 02:23:47 2014 +0200]"},
{"name" : "7af0b4bd179a40b75992487dfda2c9f84af852db", "time" : 1410481427, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Phase name change of explicitOuter.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 12 02:23:47 2014 +0200]"},
{"name" : "377109a7ecc57d2c4cc01a5c19402658bcd8547d", "time" : 1410481411, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Erasure should keep prefixes in TermRefs\n\nBring TermRefs in line with TypeRefs. Prefixes need to be kept so that termrefs\ncan be re-loaded in subsequent runs.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 12 02:23:31 2014 +0200]"},
{"name" : "b2e0e7b4a1e43815a6507ff114ec4b94cf65b345", "time" : 1410325796, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "tpd.TreeOps#select creates non member syms after erasure.\n\nWithout this patch, ast.TreeInfo does not compile wfter next commit \"Erasure should keep prefixes in\nTermRefs\". The reason is that outer path genertion generates a data race between\n\n - an outer accessor created in ExplicitOuter\n - a copy of the accessor created in ElimByName in a TreeTypeMap copy.\n\nThe patch avoids the data race by using a fixed symbol for the new TermRef generated in\nouter.path during erasure.\n\nBut the fix seems ad-hoc. We should try to attack the problem at the root in TypeTreeMap.\nThe root problem seems to be that TypeTreeMap generates a copy of symbols whnMemere the copies\nof the symbols give the same named type as the originals. We can either label the copied symbols\nso that any types created from them become instances of WithNonMemberSym (which probably should be\nrenamed then). Or else we have a \"linear\" version of TreeMap that overrides sym denotations instead\nof creating new symbols.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Sep 10 07:09:56 2014 +0200]"},
{"name" : "094dc7512df0b377c0c8d78f7b498c47a00781a9", "time" : 1410325355, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Keep inherited names through erasure\n\nIf the original name in a selection is a inherited name, the erased name should\nalso be one.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Sep 10 07:02:35 2014 +0200]"},
{"name" : "52db988b01c0eb5e3f8f51864319f8c0223d8422", "time" : 1410325235, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make isVolatile a SymUtil method.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Sep 10 07:00:35 2014 +0200]"},
{"name" : "47f0b453d32488ff007f977c4361a5956d92f967", "time" : 1410325170, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix class decls in TypeTypeMap\n\nIf definitions in a class are substituted by TreeTypeMap, the new\nsymbols have to show up in the `decls` scope of the class instead of the\nold ones.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Sep 10 06:59:30 2014 +0200]"},
{"name" : "81b27b159ac7e0cc7bc9b63aa9f11ea274ec4f08", "time" : 1410324530, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Keep SuperTypes around after erasure.\n\nThe reason is that otherwise the non-private member super.x gets merged with the private member this.x\nand that causes a double binding violation.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Sep 10 06:48:50 2014 +0200]"},
{"name" : "5cc99d4f09b986748e9250a58954c2f097664b66", "time" : 1410324245, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixes to TreeChecker\n\n1) One phase too many was checked for postconditions.\n2) Class members did not have their owners checked because index was not called on them.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Sep 10 06:44:05 2014 +0200]"},
{"name" : "b129332c273374018bfdd8a51bbec761118c9d9c", "time" : 1409996472, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Move explicit outer after pattern matching\n\nBut allow pattern matching to provide outer accessors when needed\nusing with ensureOuterAccessors.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Sep 6 11:41:12 2014 +0200]"},
{"name" : "c3078b12582773e3a9bb356e168fb646ec6733b1", "time" : 1409996385, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make foreach/exsists into tree infix methods\n\nforeachSubTree and existsSubTree are now infix methods. Streamlines their use\nsomewhat.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Sep 6 11:39:45 2014 +0200]"},
{"name" : "b58b90683652e1b6e2c32412f0a03ba614b61b33", "time" : 1409996195, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Generalize phase postcondition checking.\n\nHave a general way how a phase can establish a postcondition which will be\nchecked each time a later phase is tree-checked.\n\nMoves erasure constraints from TreeChecker to Erasure's post condition.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Sep 6 11:36:35 2014 +0200]"},
{"name" : "e1040935cbcc1d767933c38a141372538ef63ac2", "time" : 1409986028, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Better tests and more fixes for ExplicitOuter\n\nNow also testing that after erasure no outer this exists. Tests suit now includes\ncalls to local classes and methods which need an outer pointer, as well as passing\nan outer pointer along a secondary constructor.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Sep 6 08:47:08 2014 +0200]"},
{"name" : "44bdec1a44db7ac880183e0c70b5f5668048961e", "time" : 1409972776, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Rename OuterAccessors to ExplicitOuter\n\nBetter to keep the old name for easy cross-referencing with Scala 2.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Sep 6 05:06:16 2014 +0200]"},
{"name" : "a661bed267745d5f19f967712462b3f038ad8dcd", "time" : 1409971637, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Bring back blockescapes test...\n\n... by reverting a premature optimization in Erasure.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Sep 6 04:47:17 2014 +0200]"},
{"name" : "c0b69bb4b51605cbd0230e672cd4d026011c0e8d", "time" : 1409878679, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Harden construction of i\"...\" strings\n\nCatch exceptions and embed into string instead of passing exception on.\nReason: i\"\" strings are for diagnostic output but may cause exceptions such\nas CyclicReferences, stale symbols and so on. We never want to crash the\nprogram with such an exception.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 5 02:57:59 2014 +0200]"},
{"name" : "795796dbfb0d5617163bcc2d1db856b912b7043a", "time" : 1409878673, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "CyclicError messages now go to printer\n\nHave a configurable printer to which cyclic error messages are sent.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 5 02:57:53 2014 +0200]"},
{"name" : "b33f604e4a0864cd88402b2f3e4c75b24beb4435", "time" : 1409878663, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix a bug in unpickler\n\nModule roots were mis-characterized, which meant that module symbols were loaded twice.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 5 02:57:43 2014 +0200]"},
{"name" : "dc02760eac04accb9e0d5e34128f4c79cfa8c327", "time" : 1409878620, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Partially reverting of 08c6eaca\n\nPartial revert of 08c6eaca \"this type is a term ref to the source module\". The problem with\ndoing this is that it introduces spurious outer references. An inner module that contains\nself referenves always needs the directly enclosing class. The revert avoids this dependency\nby making ThisTypes always point to TypeRefs.\n\nSeveral other changes were necessary to make the builds pass: TypeRefs had to get prefixes after\nerasure so that they can be reloaded. Symbols of such typerefs had to be retrieved without forcing\na denotation.\n\nOne test (blockescapes.scala) fails and is moved to pending, awaiting further resolution.\n\nAlso two other new tests in pending which currently fail (and have failed before).\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 5 02:57:00 2014 +0200]"},
{"name" : "652a7e5d5a1db429a7270049d51ca63f494ee64b", "time" : 1409813487, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Enclosing class skips classes from inSuperCall definitions\n\nSyntactically enclosing class is not accessible from such definitions,\nso should be skipped.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Sep 4 08:51:27 2014 +0200]"},
{"name" : "431288d105c6fc581eb3cb32f8b9eb53b65a11c8", "time" : 1409813174, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Move crash diagnostics from TreeChecker to ReTyper.\n\nIf there's a crash, we always want to see where the retyper was, not just for\ntree checking.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Sep 4 08:46:14 2014 +0200]"},
{"name" : "225102627d37f16134bc682eb5b01270684a02e4", "time" : 1409812861, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add inSuperCall mode and flag.\n\nNeeded to keep a record of definitions in supercall arguments. These\nmay not see the enclosing class.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Sep 4 08:41:01 2014 +0200]"},
{"name" : "2558c49984611935fff91b0b062f6af5a61e71ce", "time" : 1409574132, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Completed outer paths.\n\nOuter paths, parameters and arguments are inserted in erasure, using methods provided\nby OuterAccessors.\n\nAlso fixed a stupid bug in Erasure#constant\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Sep 1 14:22:12 2014 +0200]"},
{"name" : "2788547565d178f9bca93adc0df69029024bf4e6", "time" : 1409572327, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Allow more leniency in time travel.\n\nMakes the method pioneered in elidablePrefix more general. Also applies\nit to accessWithin.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Sep 1 13:52:07 2014 +0200]"},
{"name" : "dc958b7773249105224f667bdd83154235efe79b", "time" : 1409570507, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Ensure in FirstTransform that all This references are explicit.\n\nA this reference hide in a self ident, and be subsequently missed\nwhen deciding on whether outer accessors are needed and computing outer paths.\nWe do this normalization directly after Typer, because during typer the\nident should rest available for hyperlinking.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Sep 1 13:21:47 2014 +0200]"},
{"name" : "d85f2dd7968737936e88f1c08c17c25c5b8786e4", "time" : 1409569978, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Added OuterAccessor flag.\n\nAlso regorganized flags a bit to better use available slots.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Sep 1 13:12:58 2014 +0200]"},
{"name" : "ec1d2745dce34f81578967a032253a1a84361bc7", "time" : 1409506495, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add outer parameters in constructor calls.\n\n1) Constructors of inner classes get outer parameters\n2) Outer arguments are passed as needed.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 31 19:34:55 2014 +0200]"},
{"name" : "47b1d735e8323b2587aeb4b2a7ce5e214d9f1f8d", "time" : 1409501312, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "New phase: outerAccessors\n\nThe new phase replaces attachOuter. It creates outer accessors where needed\nbut does not yet define outer parameters or pass outer arguments.\n\nIt should run before pattern matcher, so that pattern matcher can access the\nouter fields of scrutinees.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 31 18:08:32 2014 +0200]"},
{"name" : "8f321f2afd0cd363492665b410a70476c8a4b751", "time" : 1409501155, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Types of This trees are promoted during retyping.\n\nFailing to do this leads to problems when retyping the This of\nnested classes with the same name (e.g. nested anonymous classes as they appear in\nt0453.scala).\n\nRefinedPrinter was changed to avoid sugaring of anonymous classes when uniqid is\nset (that was essential to track down the problem).\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 31 18:05:55 2014 +0200]"},
{"name" : "2bfff5e5457223114e24e112aa6715f6a9d0c3f3", "time" : 1409501077, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix to elidable prefix.\n\nThe previous condition was too weak. The fix revealed a problem where\nan \"undefined symbol\" error was thrown when reading an alias annotation\nin the unpickler. The exception is now suppressed, the comment explains why.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 31 18:04:37 2014 +0200]"},
{"name" : "e7e1cdce8eb25452ed97e8a019cc63aaecab6fc6", "time" : 1409500630, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Avoid reloading NonMemberSyms.\n\nNon member symbols should not be reloaded in any case.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 31 17:57:10 2014 +0200]"},
{"name" : "6e47e2b8bce96571e643bdd5f4cdca01002aff4e", "time" : 1409500564, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Generalize equivalentThisTypes\n\n       // We treat two prefixes A.this, B.this as equivalent if\n       // A's selftype derives from B and B's selftype derives from A.\n\nIt makes sense to apply this principle to comparing this types in general, and not\nonly when being the prefix of a named type. Not doing so revealed a problem in\nretyping Applications.scala after outerAccessors. There two type applications of\nthe same class had as prefixes (1) Applications.this, (2) Typer.this & Applications.this.\nTyper and Applications match the principle, so the prefixes should be regarded as equivalent.\nWhy this manifested itself only after outerAccessors is an unsolved puzzle.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 31 17:56:04 2014 +0200]"},
{"name" : "5e7c262bf08fafb8ced88688121a05efda81f21b", "time" : 1409412202, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Moving an assertion from erasure to TreeChecker.\n\nThe move caught an illegal erased type in a SelectFromType node.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Aug 30 17:23:22 2014 +0200]"},
{"name" : "4041c5d590f78323d640c6eec7e370a37a01c416", "time" : 1409396576, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Ensure that after erasure all types are erased.\n\nDefines a predicate isErasedTypes and checks that all tree types\nand their widened underlying types are erased.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Aug 30 13:02:56 2014 +0200]"},
{"name" : "5362969b55cc73c22ea959d1960e3696a801c469", "time" : 1409395829, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Eliminate Ident/Select types in FirstTransform\n\nIdent, Select, SelectFromTypeTrees denoting types should be eliminated\nat some point. FirstTransform seems to be the logical place because\nit already eliminates other forms of type trees.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Aug 30 12:50:29 2014 +0200]"},
{"name" : "cc687b406d1f3a6f0f6d47a9d364c3eba46792e1", "time" : 1409395617, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Function and multi-array type methods get implicit contexts.\n\nOtherwise the context captured by Definitions applies. And that one leads\nto illegal types being constructed after erasure.\n\nWe should think how we can better avoid the trap of captured contexts here.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Aug 30 12:46:57 2014 +0200]"},
{"name" : "c8d13a88f10fa5c14f83cc0ed62c938c550d622f", "time" : 1409305413, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Disabling two tests which failed.\n\nI reiterate my suspicion that these tests are too specific. So far, all these test failures were spurious. They created work without giving a benefit.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Aug 29 11:43:33 2014 +0200]"},
{"name" : "9a49deff8a1905b9dc111e79638541ea5ba927c9", "time" : 1409304605, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Shorten \"if denotation is current the symbol\" to \"currentSymbol\".\n\nAnd make its usage more systematic on all substitutions where it makes sense.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Aug 29 11:30:05 2014 +0200]"},
{"name" : "8b9bdfe5f0c8c084b2db90ddcc0b5bbc25347034", "time" : 1409303939, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Avoid cyclic reference errors in ShowScala\n\nThis is done by predicating some shortcuts on tp.symbol.isStatic\nwhere tp is a NamedType with the condition tp.denotationIsCurrent,\ni.e. we avoid forcing the denotation. This safe because the branches\ntaken on isStatic are optimizations.\n\nThis commit contains the minimum set of changes to make showScala pass.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Aug 29 11:18:59 2014 +0200]"},
{"name" : "3ea2fe9ab1abccc550f21ed07209c5b55cf1a867", "time" : 1409298453, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Added todo comment\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Aug 29 09:47:33 2014 +0200]"},
{"name" : "aae91eddee1a90dc5312ce156b772f090001721f", "time" : 1409258209, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixes to erasure to make -Ycheck:all work.\n\nMain change: Introduce JavaArrayType as a new type constructor\nfor Java erased array. Translate all methods of Array class during\nerasure to primitive operations on arrays.\n\nSome other small fixes for more localized problems.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Aug 28 22:36:49 2014 +0200]"},
{"name" : "f7d3f3b12e0f3f69954bfb9980134968abf541f5", "time" : 1409243473, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Better error diadnostics in TreeChecker.\n\nOn type error, show the source line where the failure occured.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Aug 28 18:31:13 2014 +0200]"},
{"name" : "11ffd9ed2df33299351fdb2db7bccbafa3806a0b", "time" : 1409243412, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Avoid writing ExprTypes in result types of DefDefs\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Aug 28 18:30:12 2014 +0200]"},
{"name" : "cdaa3a0249977bc2a9eb385fb840d62e01273f71", "time" : 1409243195, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Enabling primitive operations in ReTyper\n\nThe idea is that primitive operations do not have a symbol, but\nwhen applied have directly a MethodType. Such operations will be\ngenerated in Erasure for array ops. The patch allows retyping of\nsuch operations.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Aug 28 18:26:35 2014 +0200]"},
{"name" : "215f73f1f6b8b03b49bdab80fbbfcf4574203d2b", "time" : 1409243071, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Disable enclding in retyping.\n\nWe would like to be able to define unencoded symbolic names in trees computed by the compiler.\nThe patch avoids their accidental encoding.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Aug 28 18:24:31 2014 +0200]"},
{"name" : "e195a2e31320edc796a6ef84d1ad13dc5b5b3732", "time" : 1409242956, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix in underlyingClassRef\n\nMade implementation conform to doc comment.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Aug 28 18:22:36 2014 +0200]"},
{"name" : "7663191c433e101e3e4faab2e0db12c5f4db1fc2", "time" : 1409242933, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixes in TypeTestsCast\n\n1) qualifier class was wrongly computed\n2) Case where test or cast argument is primitive was not fully handled.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Aug 28 18:22:13 2014 +0200]"},
{"name" : "f57753ff673d39ab68f2182459d5cfb2125d15a1", "time" : 1409142039, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #168 from dotty-staging/fix/#167\n\nFix #167", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed Aug 27 14:20:39 2014 +0200]"},
{"name" : "c03317ec96867db07c704d981f5fcf140a93d71d", "time" : 1409141228, "y" : 3119, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix #167\n\nCan handle now vararg arguments in patterns.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Aug 27 14:07:08 2014 +0200]"},
{"name" : "bfb328ff64dcfa103c91dd0cd55a617e370d6ef3", "time" : 1409129747, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make ThisTypes take TypeRefs instead of ClassSymbols\n\nThis avoids stale symbol errors and does not need the somewhat\nunsystematic symbol rebinding of the last commit.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Aug 27 10:55:47 2014 +0200]"},
{"name" : "292ce6844a212b47defc671c91396d7cec86833b", "time" : 1409122521, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Rebinding ThisTypes\n\nThisTypes do escape. It seems that Scala 2 pickling produces ThisTypes that refer to base\nclasses of the class being compiled. If the base class is in a separate compilation unit,\nthis can lead to a stale class symbol in the ThisType. We solve this here by rebinding the\nclass symbol in the ThisType. We should also explore the alternative:\n\n     class ThisType(tref: TypeRef) ...\n\nThat would do the rebinding as part of the generation denotation resolution mechanism.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Aug 27 08:55:21 2014 +0200]"},
{"name" : "08c6eacaf59386ed26aeead472e1df2c5944a3fb", "time" : 1409057622, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "thisType of a module class is a term ref to the source module.\n\nModule classes now always get the sourceModule term ref as their this type.\nWe would like to eliminate ThisType() of a module class completely, as this\nhangs on to a symbol which might become stale for globally accessible modules.\nThis commit is the first step. It contains the change to thisType and the necessary\nfixes to make the test suite pass.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Aug 26 14:53:42 2014 +0200]"},
{"name" : "97d89afc4769c4badb42284c9b5d97b663f870f6", "time" : 1409000046, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixes to erasure\n\nMakes erasure pass the test suite.\n\nErasure is not yet turned turned on by default, because TestNonCyclic fails\nwith a stale symbol error. The problem is that This types are coupled to Symbols\nand therefore don't reload. This is a problem is This types refer to static symbols\nthat get recompiled. We either have to drop using This types for static references,\nor redefine thme so that can be reloaded.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Aug 25 22:54:06 2014 +0200]"},
{"name" : "254665e42f2a22ba271c2eb64cb8b1b06a7eaa5c", "time" : 1408986010, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix to baseClasses.\n\nNeed to be invalidated on new run along with superClassButs and baseTypes. Fixes a stale symbol error discovered when compiling dotc.core with erasure turned on.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Aug 25 19:00:10 2014 +0200]"},
{"name" : "eadfa6a7aa05581f43e7a39de007e2d7823d4cc3", "time" : 1408985921, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix to bringforward.\n\nAlways bring forward in initial phase. Fixes a stale symbol error discovered when compiling most\nparts of dotc when turning erasure on by default.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Aug 25 18:58:41 2014 +0200]"},
{"name" : "b41732c15682337c415355accb96224f452b9ff5", "time" : 1408964743, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "New minipahse: AttachOuter\n\nThis keeps type info needed for explicit outer in attachments\nso that it survives erasure.\n\nExplicitOuter should run after erasure, for several reasons.\n\n(1) Java generic signatures do not include the outer parameter\n(2) Pre-erasure typings become incorrect after erasure. In particular,\n    if we have a class\n\n       class C {\n         type T\n         class Inner {\n           type U = C.this.T\n         }\n         val inner: Inner\n       }\n\nafter explicit outer the equality of T and inner.U is no longer provable.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Aug 25 13:05:43 2014 +0200]"},
{"name" : "15c4fec42148da760107baa0fb3e5fbb699c4c82", "time" : 1408957386, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "ref(<type>) -> TypeTree\n\nTaking the ref of a type should always give a TypeTree. Makes ref more\nuniversally usable as type references after frontend are assumed to be TypeTrees.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Aug 25 11:03:06 2014 +0200]"},
{"name" : "b56a743edf1fe21ff1f9f070d17e4a23930e59bd", "time" : 1408912352, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Special context for self constructor args\n\nArguments to this(...) calls need a special contet,\nsimilar to - but different from - the supercall context.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 24 22:32:32 2014 +0200]"},
{"name" : "bd8ff1720396bb61d0ef5fede8eb956df663faa5", "time" : 1408899004, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixing refined printing under -uniqid\n\nCrashed before for untyped trees.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 24 18:50:04 2014 +0200]"},
{"name" : "9883d54fbf246f48fa2b41dfb68877d9187031ac", "time" : 1408896735, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Override symbolOfType in ReTyper.\n\nSo far, not needed, but is a reasonable precaution because the original\nimplementation of symbolOfType makes no sense for Retyper.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 24 18:12:15 2014 +0200]"},
{"name" : "d46066bde061663953b9c41297562e0f0466b4dd", "time" : 1408896680, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixes to erasure\n\nPrompted by compiling more test files with erasure enabled.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 24 18:11:20 2014 +0200]"},
{"name" : "85d963d913e4fa7e608238e6853c77b02cf223e9", "time" : 1408896589, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Clean up printing of flags and params\n\nPrint all flags if option -YDebugFlags is set.\nClean up printing of class type params.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 24 18:09:49 2014 +0200]"},
{"name" : "aa7a0399ad5424dd5292f2f1941c7293c16d6b79", "time" : 1408896541, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Check that idents don't assume magic.\n\nIn TreeChecker, make sure that every identifier has a type with an elidable prefix.\nThis excludes identifiers pointing to members of random prefixes without making the\nprefix explicit in the tree as part of a Select node.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 24 18:09:01 2014 +0200]"},
{"name" : "70abd73e9306eca3ec4de1d98b877e4fafe66ad0", "time" : 1408896162, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Account for package objects when constructing types of idents.\n\nMake sure the package object appears in the prefix of a named type\nwhere the symbol is owned by a package object.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 24 18:02:42 2014 +0200]"},
{"name" : "bdefca99bc8a7ef6c1d895aecad66b81a18fa9e7", "time" : 1408895452, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix context for super calls\n\nSuper calls need to have special contexts, going beyond super-mode.\nIt's explained in detail in Context#superCallContext.\n\nthis(...) calls also need special contexts, but this is not enabled yet\n(some tests fail, need to track down why).\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 24 17:50:52 2014 +0200]"},
{"name" : "412fc2ce472acf8b59dba05ee96d3c09a6bb2d41", "time" : 1408895452, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Move foreachSubTreeOf of to tpd.\n\nReason: The tree traverser created by it only handles the cases for typed tree nodes.\nAlso add convenience existsSubTreeOf combinator.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 24 17:50:52 2014 +0200]"},
{"name" : "3d92b75223d0f2d7391e1da1a1b011079ab34c97", "time" : 1408895452, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add TypedSplice case to untpd.TreeAccumulator\n\nWe should simply treat a typed tree in a splice as an untyped one here.\nNote: the same trick does not work for TreeMap - an untyped treemap cannot\nbe extended to produce a typed tree.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 24 17:50:52 2014 +0200]"},
{"name" : "3b7cba4666be03991083fe89780120eae9843c52", "time" : 1408895433, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make type creators work for erased types.\n\n- Some types are different when erased (e.g. prefixes are NoPrefix)\n- Some types are forbidden when erased. Put in assertions to check that fact.\n\nAlso, some renaming and doc comments to make creation of TermRefs and TypeRefs\nclearer.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 24 17:50:33 2014 +0200]"},
{"name" : "1f2619bdc4c7b80c3f63fecbe27e47d5f665931d", "time" : 1408895196, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "renaming: core.transform.Erasure -> core.TypeErasure\n\nThe name duplications transform.Erasure / core.transform.Erasure\ncaused irregularities in the imports and the smae name was confusing.\nBesides Erasure was the only class in core.transform, so it seemed\nbetter to eliminate the package alltogether.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 24 17:46:36 2014 +0200]"},
{"name" : "ab0105cf91fa452abae8ef1d0d14634d8d7d4ab8", "time" : 1408895137, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Comments about phase orderings and shadowed references.\n\n... try to explain two tricky consequences of the denotation and signature model.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 24 17:45:37 2014 +0200]"},
{"name" : "b10c590c59938576e7f27718fff245ea9ffe0629", "time" : 1408527471, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix signature of by-name parameters.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Aug 20 11:37:51 2014 +0200]"},
{"name" : "65aa10526340bc618bdba71a4cd5616e8a185715", "time" : 1408455140, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make-not private\n\nRefchecks now makes all members not-private that need it. This is done by\nsetting flag NotJavaPrivate. No name change is involved.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Aug 19 15:32:20 2014 +0200]"},
{"name" : "5b941d2be550540e1bf2df78edfdbca35aaf8e68", "time" : 1408451048, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixed class doc comment for ElimByName\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Aug 19 14:24:08 2014 +0200]"},
{"name" : "f0519c9e384ab1e0c8379caa08ed73a7347cf59c", "time" : 1408397502, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Changed phase dependencies from names to classes.\n\nDon't want stringly types for this.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Aug 18 23:31:42 2014 +0200]"},
{"name" : "3afdefd1796af0aa256dfde6a4e3588c0fb00e61", "time" : 1408391339, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Rename in Phase: name -> phaseName\n\nMost transformations are subclasses of phase. Having a generic name\nlike `name` in scope everywhere is therefore very risky.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Aug 18 21:48:59 2014 +0200]"},
{"name" : "f366f867853be9879b9d17af832de2ad00f7f06b", "time" : 1408371996, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Refactored TreeTypeMap\n\nGoes into a separate source files. Several simplifying refactorings.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Aug 18 16:26:36 2014 +0200]"},
{"name" : "b53a03f1183c062bed0120257e0519eb81e7619e", "time" : 1408363010, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make ElimByName change owners of by-name parameters\n\nBy-name parameters did not have their owner changed before.\nThis was not noticed in treecheck because the method generated\nfor the closure did not have its Method flag set by accident, so\nowmer checking ignored the new val. Once the Methgod flag was set,\nowner checking failed. Once changeOwner was added, a whole lot\nof other things failed, which led to the fixes in the previous commits.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Aug 18 13:56:50 2014 +0200]"},
{"name" : "91b9180d17571e2d0d74b748ceaedfccec4c2bd2", "time" : 1408362854, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixes to TreeTypeMap\n\n(1) Template nodes have to be treated specially. They contain\n    primary constructors, self definitions and local dummys,\n    all of which have to be properly mapped and re-integrated.\n(2) Symbol substitutions have ot be done all together instead of\n    one after the other.\n(3) When creating new symbols, need to create ClassSymbols for ClassSymbols.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Aug 18 13:54:14 2014 +0200]"},
{"name" : "2cdc79d433d80168ab3bc98918bc27e239891d6c", "time" : 1408362029, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixed re-tpying of Return nodes.\n\nNeed to honor `from` if it exists, instead of searching for enclosing method.\nCode motion might move the code under a different method.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Aug 18 13:40:29 2014 +0200]"},
{"name" : "ea616bf0b9f5c62d1f5a7b5b16b98cfac3c9ca1d", "time" : 1408361836, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Extend owner checking in TreeChecker\n\nNow also checks owners of primary constructors and template local dummys.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Aug 18 13:37:16 2014 +0200]"},
{"name" : "0f6a277d3ab17f7d7011a3a29833a4ed12bb30ff", "time" : 1408361652, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixing handling of self in DeepTypeMap#mapClassInfo\n\nThe previous version used `self` which referred to the `val` in\nthe implicit TypeOps value class (duh!). We really should make value\nclasses not require to have public fields.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Aug 18 13:34:12 2014 +0200]"},
{"name" : "aae71e7e37761aa159b0d00f7b98a388be9a40cf", "time" : 1408361481, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make local dummy a non-member type.\n\nLocal dummys in templates are not members of their enclosing classes.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Aug 18 13:31:21 2014 +0200]"},
{"name" : "71044c8ea18a184f2c9db9aed25a996f6737b6fe", "time" : 1408361271, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add pathTo method for Positioned.\n\nThis is not yet needed but will probably come in handy later.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Aug 18 13:27:51 2014 +0200]"},
{"name" : "49cc900b22394f039c3f10d3f8d7cafcf9148e3a", "time" : 1408361091, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix to isAnonymousClass\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Aug 18 13:24:51 2014 +0200]"},
{"name" : "c71643b9087f1de218dfc2d3a1aefc97984c3b8e", "time" : 1408360972, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Three fixes to substSym\n\n(1) Also handle This types - we need to be able to substitute the class symbol there.\n(2) Keep NonMemberSym property when substituting\n(3) In p.T, substitute in `p` even if `T` is replaced by substitution.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Aug 18 13:22:52 2014 +0200]"},
{"name" : "f2d27cf6b57d6d3fd83818ce07d3aeb14263f897", "time" : 1408360730, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add #ids for This trees and ClassDefs\n\nif uniqid is set, print them with their unique ids.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Aug 18 13:18:50 2014 +0200]"},
{"name" : "1e29d8aca7c041f83ac520f891add8476471c1bd", "time" : 1408273315, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Moved -Ycheck to last phase before erasure\n\nThis should set the foundation to turn debug erasure so that it can be\nturned on by default\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 17 13:01:55 2014 +0200]"},
{"name" : "58d4706463b08f2e448c3021adad809e6046e0fe", "time" : 1408273259, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Split Nullarify functionality to ElimByName, Erasure\n\nNew phase ElimByName elimintaes by-name parameters. All other\noccurrences of parameterless methods and ExprTypes are eliminated\nin erasure.\n\nThe reason for the split like this is that it is very hard for\nNullarify to determine when to insert ()'s. The logic for this\nis fragile because we need to look at previous denotations which might\nnot exist (before splitter) or might result from a merge\nbetween parameterless and nullary methods. In Erasure\nthe same is much simpler to achieve.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 17 13:00:59 2014 +0200]"},
{"name" : "f91f030290ac817888a6249d91118f42b560ab87", "time" : 1408273203, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Disabling adapt in TreeChecker\n\nwell-typed code should not need further adapations. That's why `adapt` is\nreplaced by a subtype assertion in TreeChecker.\n\nFlushed out two instances where typechecking did not produce well-adapted trees -\none in typedClosure, the other manifested itself in typedSuper.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 17 13:00:03 2014 +0200]"},
{"name" : "90aef309eaf72ab0c09494eb030c57789955bb21", "time" : 1408183018, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Moved -Ycheck after Splitter\n\nThis required a change in Ycheck where we now only test that the new tree has a subtype of the old\none. Previously the requirement was \"same type\" but this caused \"sigs.scala\" to fail because\na new tree had a constant Int type where the old tree had just Int as the type. It's hard to guard\nagainst these narrowings and they look harmless.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Aug 16 11:56:58 2014 +0200]"},
{"name" : "7d414eb69b28fa0f6855168aa7afe43a75b3f23e", "time" : 1408182967, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Roll Uncurry into Erasure\n\nMaking cpy recompute types uncovered errors in uncurry. In a nutshell,\nthe intermediate Apply nodes of a curried function were ill-typed, which\ncaused errors produced by TypeAssigner. These nodes were eliminated down the\nroad, but the errors are already issued.\n\nI did not find a good way to treat uncurry as a treetransform. Since it is rather\ntrivial, it did not seem warranted to make it a full transformer either. So in\nthe end the uncurry functionality became part of erasure.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Aug 16 11:56:07 2014 +0200]"},
{"name" : "c54cd3e0503144f362ecb000109b75a0a53b3165", "time" : 1408122705, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Extend retyping to more copy methods.\n\nWe now retype basically everything except leave nodes and definitions.\nThis provides for more robust tree copying and transformation. It also\nflushed out errors in SuperAccessors (fixed by a hack, awaiting systematic\nphase change there) and UnCurryTreeTransform. Uncurry is disabled for now,\nwill be fixed shortly.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Aug 15 19:11:45 2014 +0200]"},
{"name" : "53ab5f01c81344ae88c9e0d5bf94c08b92425eec", "time" : 1408122552, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add hook for phase when a TreeTransform is run.\n\nAchieved by overridanle method treeTransformPhase in TreeTransform.\nThis is currently by default the current phase. We should migrate it\nto the one after current phase.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Aug 15 19:09:12 2014 +0200]"},
{"name" : "9326a00ab1f7838cfe4f0ad07cc7193d7934fe67", "time" : 1408105887, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Delete propagateType and RetypingTreeMap\n\nTheir functionality is now rolled into TypedTreeCopier.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Aug 15 14:31:27 2014 +0200]"},
{"name" : "01f24751cae384ed25badd1faa1f93d56bd26070", "time" : 1408105240, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make typed tree copiers selectively retype nodes.\n\nThose nodes that had so far a propagateType method defined\non them are automatically retyped on copying. No more\nmanual interventions are needed.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Aug 15 14:20:40 2014 +0200]"},
{"name" : "3ce9d15dcb72e3da55bd14483c9b2b155c70855b", "time" : 1407939263, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Drop commented out code.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Aug 13 16:14:23 2014 +0200]"},
{"name" : "0b41954ac5ea6280dda4f4bcb052b29923a282a6", "time" : 1407936031, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Restrict treee copiers with default arguments to trees with more than 2 elements.\n\nIt's not really an abbreviation to do it for trees with fewer elements and it leads\nto unncessessary syntactic variation.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Aug 13 15:20:31 2014 +0200]"},
{"name" : "891aeba7ac64be808a7a5959fedecd4e2e41dcf3", "time" : 1407935103, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Switched to new cpy scheme.\n\nAvoid mentioning arguments that are unchanged.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Aug 13 15:05:03 2014 +0200]"},
{"name" : "a878d19e48455ca600f3fbe6e36c6ddd687e14ff", "time" : 1407934445, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Changes to tree copying\n\n1) Add copiers with default arguments, to avoid boilerplate\n2) All copiers are now curried wrt first argument (which is\n   the original tree).\n\nWe already make use of the new features in cpy.DefDef, but not yet elsewhere.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Aug 13 14:54:05 2014 +0200]"},
{"name" : "34f73ded3519a1df7d278685f3f33facd00f1c58", "time" : 1407924305, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix and enable RefChecks\n\nRefChecks is now enabled. Some of the tests had to be fixed to be refchecks-correct.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Aug 13 12:05:05 2014 +0200]"},
{"name" : "3558e07b8f3a604bfd67c721cdec3eb9db29e7eb", "time" : 1407922036, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Change access boundary of protected[this]\n\nShould be `base`, was the class enclosing the definition.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Aug 13 11:27:16 2014 +0200]"},
{"name" : "ece76567bc230bdbcea21f57a4e6ebf0d8d6434d", "time" : 1407921929, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Erasure should copy denotations only if they are changed.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Aug 13 11:25:29 2014 +0200]"},
{"name" : "deaa0d8bdcd5592e124acfbca1a1414365b667d7", "time" : 1407921769, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Package denotations are never transformed\n\nPackages should always have a single denotation, which is invariant for all transformations.\nPackage members should always be entered in the first phase, and should never be entered\nafter a given phase.\n\nThis reflects the fact that package members correspond to classfiles. Once you create a classfile, it\nstays around and is available from the start of the next run. Also, we need to prevent multiple\ndenotation versions of packages from hanging on to stale symbols. It would not be enough to replace\na package member by a newly compiled one; if packages had multiple denotations we'd have to do this\nfor all of them.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Aug 13 11:22:49 2014 +0200]"},
{"name" : "ab8ee535fc2f16f3ece55326e58dec6171614829", "time" : 1407859595, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "mergeDenot should prefer concerete over deferred.\n\nPreviously it did this only sometimes. Now it always prefers\nconcrete over deferred unless the deferred info is a proper subtype\nof the concrete info.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Aug 12 18:06:35 2014 +0200]"},
{"name" : "472d7114da29c869e3fa2e97b7045b797937737b", "time" : 1407859493, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add matchesLoosely\n\nFor overriding checks we need a concept where a val can match a def.\nNormal matches does not provide this.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Aug 12 18:04:53 2014 +0200]"},
{"name" : "843f9769f5fc5572f06e058af65e43f81b8d432d", "time" : 1407859346, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Two fixes in desugar\n\n(1) set position of companion object def\n(2) companions of case classes taking multiple parameter lists do not inherit from\n    a function type (reason: we can't straightforwardly converyt a curried method\n    with multiple parameter lists to a function value).\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Aug 12 18:02:26 2014 +0200]"},
{"name" : "81745e2779fe13076e73538e66e3352cb9cd9cf3", "time" : 1407854909, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix a problem due to different type inference\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Aug 12 16:48:29 2014 +0200]"},
{"name" : "a3cc9388dc6fcfe92c1a34b079131a26f55e8179", "time" : 1407751780, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Use _1 intstead of get for accessing unary case class parameters\n\nNow that caes classes always inherit from ProductX, we can avoid\nthe special case. (We need to define _1 anyway to implement Product1).\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Aug 11 12:09:40 2014 +0200]"},
{"name" : "974f70670f191550e94aeb2c463c73033d0ace4d", "time" : 1407751684, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Avoid printing expanded names\n\nIf a TypeRef with an expanded name is an alias type, print the alias instead.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Aug 11 12:08:04 2014 +0200]"},
{"name" : "ce535898e6f9758840db4da7cbc18a57e632a26a", "time" : 1407751649, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add SyntheticMethods miniphase\n\nNew phase for Synthetic Method generation. Scala 2.x did it in Typer, but\nit's cleaner to do it in a separate phase.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Aug 11 12:07:29 2014 +0200]"},
{"name" : "ab63413f2cbd82111aa33e625d22f7e9924776eb", "time" : 1407746716, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Sperate matchingDecl and mathingMember.\n\nRefChecks needs both methods.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Aug 11 10:45:16 2014 +0200]"},
{"name" : "98d258399767fa0577ba243cd7301878ec995508", "time" : 1407746591, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "New methods in Definitions\n\nAlso renamed Boolean_and/or to _&&/||, to make it conform\nto naming convention for other Definition operators.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Aug 11 10:43:11 2014 +0200]"},
{"name" : "c7f817f80d7a07c5d3a15eac03e4520097d81ecb", "time" : 1407746483, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Added some more methods as infix tree operations:\n\nasInstance/isInstance/ensureConforms/and/or.\n\nThey replace some former \"mk...\" methods.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Aug 11 10:41:23 2014 +0200]"},
{"name" : "b89c4afca19cb77e17c059e75982c537094f1ec8", "time" : 1407745829, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add CaseAccessor flag for case accessors\n\nWas missing before.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Aug 11 10:30:29 2014 +0200]"},
{"name" : "d388e948c0e747362256bf8ab034385a0b3f0f91", "time" : 1407745731, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix Object's scope after ersure\n\nAfter erasure, former Any members become Object members.\n\nAlso, fixed some typos and added some TODOs on addBridges.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Aug 11 10:28:51 2014 +0200]"},
{"name" : "f606a47894271540bc7b21eb8c7b5d85bd560f57", "time" : 1407688499, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add Product{1,2} supertrait to case classes\n\nCase classes with arity <= 1 now also get a ProductN parent trait.\nThis is necessary because we inherit productArity and Element methods\nin case classes from the ProdictN trait.\n\nNeeded to add Product0 for this, which is not defined in Scala2.x.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 10 18:34:59 2014 +0200]"},
{"name" : "c2cdd3a3dca2a629923327046b213addd93499fc", "time" : 1407688372, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "More targeted eta-lifting\n\nEta-lifting picked some arbitrary base type. It turned out that i94-nada failed once we add\na product trait to case classes (in the next commit) because Eta-Kifting picked Product\nas the base type, even though the target type was bounded by Monad. We now change the scheme\nso that the target type is included in the lifting, in order to avoid that we lift to\nuseless types.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 10 18:32:52 2014 +0200]"},
{"name" : "bbf777a729e5b6e8c8a75466c42004d3ff4c5d32", "time" : 1407686789, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Narrow assertion for Scope#enter\n\nScopes are also used in overriding pairs, and there multiple types with\nthe same name can be entered in a scope. So the assert to the contrary\nshould be limited to typechecking only.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 10 18:06:29 2014 +0200]"},
{"name" : "80b866f37014b9f6cfbb61e36231df037570fb95", "time" : 1407686789, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "In refined printer, show only source modifier flags.\n\nUsed to show \"mutable var x: T\".\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 10 18:06:29 2014 +0200]"},
{"name" : "96cd350429582ab22605064900f5ea6913aba80e", "time" : 1407686649, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Module vals are lazy\n\nShould have lazy flag set, otherwise forward reference checking would\nfail for modules.\n\nNote: LazyVals needed to be disabled because it also should transform\nmodule vals, but didn't do this so far because it only tested the Lazy flag.\nIt turned out the module val transformation exposed some bugs in lazy vals\nin that LazyVals creates symbols as a side effect and enters them into scopes.\nSuch mutations are allowed onyl in very specific cases (essentially only for local\nthrow-away scopes).\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 10 18:04:09 2014 +0200]"},
{"name" : "57c6c85cbc953a3489ee8d16bb5b7be862183924", "time" : 1407584729, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Disentangle phases from treetransforms\n\nTreeTransforms are no longer phases. This allows to generate\nnew transforms in prepare... methods without running into the\nproblem that thee new transforms are undefined as phases.\n\nIt also makes for a cleaner separation of concerns.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Aug 9 13:45:29 2014 +0200]"},
{"name" : "9024f25e78a9fe5d27dd2c30aa24999d8901dab6", "time" : 1407584454, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "ParamAccessors are assumed to have definition\n\nWould be flagged as unimplemented members in refChecks otherwise\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Aug 9 13:40:54 2014 +0200]"},
{"name" : "bb1972b8d6eea212964b2e4295d0725d6d89e254", "time" : 1407584298, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixed fully qualified name of migration annotation\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Aug 9 13:38:18 2014 +0200]"},
{"name" : "80ee8b1016adafe67cbd628228cff8156360219d", "time" : 1407579517, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Made Phase a trait\n\n... so that it can be combined with TreeTransform in a trait composition\nin a future dientanglement of TreeTransforms and Phases.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Aug 9 12:18:37 2014 +0200]"},
{"name" : "978a714a626886b172ea6c175f588913eb5f067b", "time" : 1407579072, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Initial version of RefChecks\n\nThis is still disabled, because the prepare machinery in transform\ndoes not work yet. Concretely, prepare ops need to return a new TreeTransform\nbut that tree transform has an undefined phaase id.\n\nWe need some architectural changes to disentangle transforms from phases.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Aug 9 12:11:12 2014 +0200]"},
{"name" : "9ec3a4ffa66e8639a1d887b8f6204abdfce8283d", "time" : 1407578981, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "prepareStats should span all statement transforms\n\nStatements are now transformed with the transform returned by prepareStats,\nanalogoys to the other prepare methods.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Aug 9 12:09:41 2014 +0200]"},
{"name" : "19b6a04486a4f9a2a7803d40d7ef6199cdeaf31c", "time" : 1407526697, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Re-enabled checkbounds tests\n\nNow that F-bunded types are treated more robustly, we can check bounds for\nnon-emptyness during Typer.\n\nThis unvealed one wrong test (wonder how that passed scalac?), which got\nmoved to neg.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Aug 8 21:38:17 2014 +0200]"},
{"name" : "058729ceac3354a2cc34490b528e76afb09ee0ce", "time" : 1407515553, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "LazyRefs break cycles for unpickled types\n\nInsert LazyRefs to break cycles for F-bounded types that\nare unpickled or read from Java signatures.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Aug 8 18:32:33 2014 +0200]"},
{"name" : "f87153bc5d74f66e2fcf22dc7282da31813430da", "time" : 1407515529, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Detect cycles and protected legal ones with LazyRefs\n\nCycles are now detected early, when an info is first completed.\nLegal, f-bounded cycles are broken by a LazyRef, which will construct\nits type lazily. This makes checkBounds validation of AppliedTypeTrees work\n(in FirstTransform). Formerly, this stackoverflowed despite the laziness\nprecautions in findMember.\n\nTodo: Do the same for class files coming from Java and Scala 2.x.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Aug 8 18:32:09 2014 +0200]"},
{"name" : "9748c9bd54e278e65a29dff6c78fba5b1534ac00", "time" : 1407093209, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Changed first phase normalization and improvements to TreeTransform\n\nTwo improvements to TreeTransform:\n\n1) Added transformOther functionality which handles trees not handled by other parts\n2) Passes down Mode.Pattern in the context when in a pattern.\n\nTreeTransform no longer normalizes unknown trees but passes them to transformOther.\nThe former Companions phase has been renamed to FirstTransform. It now performs the\nfollowing optimizations:\n - adds companion objects (this was done before)\n - other normalizations that were formally done in TreeTransform,\n - rewrite native methods to stubs (this was formally done in RefChecks)\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 3 21:13:29 2014 +0200]"},
{"name" : "85044e451ea99ef49fe2348148bdd4296b1db595", "time" : 1407092631, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Type#foreachPart\n\nAdded method to traverse all parts of a type.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 3 21:03:51 2014 +0200]"},
{"name" : "e25232d5b4fdc1ae7bc5a44ad06e31a00699dbaf", "time" : 1407092531, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Annotation decorators for symbols\n\nAdded decorators for symbols that can query specific\nannotations and annotation arguments (for now, -deprecated\nand -migration are added)\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 3 21:02:11 2014 +0200]"},
{"name" : "168e4f18f0b2f8ac0e3d7ef5128797303dec6a44", "time" : 1407091509, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Added version settings -migration, -source\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 3 20:45:09 2014 +0200]"},
{"name" : "2020938a77590f8c461041707716eca228f647d2", "time" : 1407091429, "y" : 2986, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Code to handle overloaded unapply/unapplySeq methods\n\nThese were not handled before.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 3 20:43:49 2014 +0200]"},
{"name" : "0c97f086f80c4d29e1cc894df4c7dc4cc5be3a6a", "time" : 1407083984, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #159 from dotty-staging/transform/elimLocals\n\nAdded elimLocals miniphase", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Sun Aug 3 18:39:44 2014 +0200]"},
{"name" : "24bc239cfecca609a62d30a40ceae745fa8318cf", "time" : 1407082040, "y" : 3206, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Added elimLocals miniphase\n\nThis phase drops the Local flag from all private[this] and protected[this] members.\nThis allows subsequent code motions where code is moved from a class to its\ncompanion object. It invalidates variance checking, which is consequently disabled\nwhen retyping.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 3 18:07:20 2014 +0200]"},
{"name" : "4231d7a81fc9b49ceacac5a317817ee9feda79ae", "time" : 1407081291, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #147 from dotty-staging/transform/variance\n\ntransform/variance", "author" : "PersonIdent[odersky, odersky@gmail.com, Sun Aug 3 17:54:51 2014 +0200]"},
{"name" : "d3f49de5de32eca71621c77494d5ccd284599e68", "time" : 1407080793, "y" : 3208, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Added assertion that casts never go to singleton types.\n\nDisabled for now, awaiting a fix.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 3 17:46:33 2014 +0200]"},
{"name" : "e6fd1bbbdb8facc5301aaa19cf9293d78dcaba15", "time" : 1407079714, "y" : 3208, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Updated comment\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 3 17:28:34 2014 +0200]"},
{"name" : "e33a7385268084138e3d51faffdff33b540ad942", "time" : 1407079714, "y" : 3208, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Enabled variance checking\n\nVariance checking is now run as part of type-checking.\n\nFixed tests that exhibited variance errors. Added tests where some classes of\nvariance errors should be detected.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 3 17:28:34 2014 +0200]"},
{"name" : "38761d9d11a42635e64d6df54ecaf1968797e7e8", "time" : 1407079714, "y" : 3208, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Two variance-related fixes in Desugar\n\n1) Type parameter accessors inherit their variance from the type parameter\n2) Copy method parameter defaults are annotated @uncheckedVariance. This is\nnecessary because default methods will be checked for variance.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 3 17:28:34 2014 +0200]"},
{"name" : "948747ede5143db221b1b266d011900c3cc2a758", "time" : 1407079713, "y" : 3208, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Removed CheckTrees\n\nIt was unmaintained and superseded by TreeChecker. The only needed bit,\nescapingRefs, got moved to Typer.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 3 17:28:33 2014 +0200]"},
{"name" : "78a29a40028d18d3506014a0e068f53b29c52f4a", "time" : 1407079713, "y" : 3208, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Initial versions of Variances and CheckVariances\n\nNot yet integrated or tested.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 3 17:28:33 2014 +0200]"},
{"name" : "3065790f8536f8a6c088d6c6115f71ce45ca5ae0", "time" : 1407079713, "y" : 3208, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Added utility method: underlyingSymbol\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 3 17:28:33 2014 +0200]"},
{"name" : "9d90361eeb76f3b090a96033e20ed1a272c3493c", "time" : 1407079713, "y" : 3208, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add showDcl method for SingleDenotations\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 3 17:28:33 2014 +0200]"},
{"name" : "2cb905004b28707b4c127e5a1848084109ddb3db", "time" : 1407079713, "y" : 3208, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Preparation for intgeration of RefChecks\n\nAdded OverridingPairs\nSmall tweaks here and there.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 3 17:28:33 2014 +0200]"},
{"name" : "51eeac782a01c19a24184f0ef177845af514b47f", "time" : 1407079148, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #157 from gkossakowski/name-hashing\n\nEnable improved incremental compilation (name hashing)", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Sun Aug 3 17:19:08 2014 +0200]"},
{"name" : "e15cfdbe51bee8cbafbf3ffc457746919c93d43d", "time" : 1407079034, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #141 from dotty-staging/transform/repeated\n\nTransform/repeated", "author" : "PersonIdent[odersky, odersky@gmail.com, Sun Aug 3 17:17:14 2014 +0200]"},
{"name" : "36fd83bd350ea957a9d96d41c1fa7fecf4b0d3f3", "time" : 1407078430, "y" : 3219, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Added test case for varargs bridges\n\nCurrently we cannot run this test automatically because the testing framework\ndoes not know about .java files. It was run manually and verified that ElimRepeated\ndoes was it is supposed to do (create a varargs bridge).\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 3 17:07:10 2014 +0200]"},
{"name" : "f2deb53424381bfbc5934d25394f961aa17126fa", "time" : 1407078430, "y" : 3219, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Cleanup for varargs bridge.\n\nNow inserts a bridge whenever a method overrides a Java varargs method.\nThis is conservative but safe. We might use a more aggressive scheme, as\nthe one in Scala 2, but it's not clear the win would warrant it.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 3 17:07:10 2014 +0200]"},
{"name" : "0d7223ab0c61fd7d0a864f15031c34f0bb946e40", "time" : 1407078430, "y" : 3219, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixed underlyingIfRepeated.\n\n... and moved to TypeApplications.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 3 17:07:10 2014 +0200]"},
{"name" : "ef4d3f5c214c1f3a5330f4583bca2773bc2f465f", "time" : 1407078430, "y" : 3219, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixed tpd.ref\n\nDid not work for this prefixes and other singleon types before.\nI.d. was generating a SelectFromType tree, which is wrong.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 3 17:07:10 2014 +0200]"},
{"name" : "b88b958bb7f25ba45a6c15c9f554df2d4c6746ed", "time" : 1407078389, "y" : 3219, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add varargs bridge methods\n\nDistinguish translations between Java and Scala varargs methods\nand add bridges where needed.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 3 17:06:29 2014 +0200]"},
{"name" : "29e8f67ba19ab531932c98eba1411a63815cfa80", "time" : 1407077718, "y" : 3219, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Adapt signature of <repeated>\n\nso that sig(<repeated>[T]) = sig(Seq[T]).\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 3 16:55:18 2014 +0200]"},
{"name" : "70bd06c81aa82e7b6ffd45d3d41e2817f0edb29b", "time" : 1407077718, "y" : 3219, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Eliminate JavaRepeatedParamClass\n\nHaving two repeated param classes (and two types) does not work,\nbecause we need to maintain an overriding relationship between\nScala repeated param methods and Java repeated param methods (this\nwill be resolved later by bridges).\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 3 16:55:18 2014 +0200]"},
{"name" : "5a069b5d120df13a4999d24d4aae26a2bf6cceae", "time" : 1406291851, "y" : 3226, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Enable improved incremental compilation (name hashing)\n\nThe algorithm is stable enough to try it out for dotty build. It's\nenabled in sbt and Akka already.\n", "author" : "PersonIdent[Grzegorz Kossakowski, grzegorz.kossakowski@gmail.com, Fri Jul 25 14:37:31 2014 +0200]"},
{"name" : "2f298924940453ec0ed15afd36da8c66bd7e80d1", "time" : 1406102367, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #155 from dotty-staging/tailrecTC\n\nTailrec tc", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed Jul 23 09:59:27 2014 +0200]"},
{"name" : "db2b4223a08fb5caa8b4fb774aa372b581ee7306", "time" : 1406048791, "y" : 3228, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixed typo\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Jul 22 19:06:31 2014 +0200]"},
{"name" : "ababb2ce2675619c997cb4bfa143b454e4076850", "time" : 1406047404, "y" : 3228, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Defined substitution which follows aliases\n\nUsed in FullParameterization to substitute type parameters.\nFixes test failure for t2399.scala\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Jul 22 18:43:24 2014 +0200]"},
{"name" : "e8d2733c3e496d811bb1002418b08ba1abe3ee8b", "time" : 1406030761, "y" : 3228, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Move Ycheck after tailrec\n\nHurray!\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Jul 22 14:06:01 2014 +0200]"},
{"name" : "edeb7e44f5d24a825b160cfad199f24847f871d6", "time" : 1406030761, "y" : 3228, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make trees after TailRec type correct\n\nTailRec now relies on FullParameterization and uses two passes\nfor transformation. First one decides weather the method will\nbe transformed and if yes, starts rewriting calls in taill position.\n\nSecond one lifts the method body to a fully parameterized one,\ncorrecting types.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Jul 22 14:06:01 2014 +0200]"},
{"name" : "601b11eb5c8c43304f83310d66fe7943fc1cb0a5", "time" : 1406030761, "y" : 3228, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add test for tailcall\n\nTest for order of type parameters in recursive call\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Jul 22 14:06:01 2014 +0200]"},
{"name" : "b4e7de00d7a1c940682592c0105e81352746fbf0", "time" : 1406030761, "y" : 3228, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix typo in lazyVals\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Jul 22 14:06:01 2014 +0200]"},
{"name" : "068fc8e088dab2aca98b72ba07ef44edbd94953b", "time" : 1406030761, "y" : 3228, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Create RetypingTreeMap that propagates types\n\nIf some node in tree is transformed changing the type,\nthe outer node could potentially also change type.\n\nThis patch implements a RetypingTreeMap that propagates those\nchanges until types converge. Propagation is done for tree nodes\nthat are able to compute their type based on their children:\nPair, Block, If, Match, CaseDef, Try, SeqLiteral, Annotated, Select.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Jul 22 14:06:01 2014 +0200]"},
{"name" : "de2ecc7fd7f7936bc19c6f3cb264ef6d94b01794", "time" : 1406030761, "y" : 3228, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Allow FullParametrization to work on localy defined methods\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Jul 22 14:06:01 2014 +0200]"},
{"name" : "7fe148dac6deb8dcf556cc24be03992be81502e6", "time" : 1405978149, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #152 from dotty-staging/fux/substThis\n\nFix of FullParameterization", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon Jul 21 23:29:09 2014 +0200]"},
{"name" : "a9aa810472b5ee117b0865350a06b28a06b27c5c", "time" : 1405960912, "y" : 3237, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix of FullParameterization\n\nAvoid substitituting A.this if A is a globally accesisble mdoule.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jul 21 18:41:52 2014 +0200]"},
{"name" : "e1aecf1bd75fc4a1ff0e0c3a422b799adf0c9f64", "time" : 1405872958, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #149 from dotty-staging/fix/#148\n\nfix/#148", "author" : "PersonIdent[Nada Amin, namin@alum.mit.edu, Sun Jul 20 18:15:58 2014 +0200]"},
{"name" : "65658a4d0c3250d0d27f7af51632b2356f829464", "time" : 1405871656, "y" : 3239, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "fix/148\n\nFixed typo in Splitter. Closes #148.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Jul 20 17:54:16 2014 +0200]"},
{"name" : "bdb63619119bf25c32c881fdf3c97ae7a40ec1e5", "time" : 1405771649, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #146 from dotty-staging/docs/hk-typo-fix\n\nFixed typo", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Sat Jul 19 14:07:29 2014 +0200]"},
{"name" : "b5e23e32b2483992f88342305da03253319fad0a", "time" : 1405770682, "y" : 3241, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixed typo\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jul 19 13:51:22 2014 +0200]"},
{"name" : "1f6f66787e99d5bd5dcf3a049fde4d47a40d733d", "time" : 1405768435, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #145 from dotty-staging/fix/#143\n\nFixed #143", "author" : "PersonIdent[odersky, odersky@gmail.com, Sat Jul 19 13:13:55 2014 +0200]"},
{"name" : "e5aaa7185c8c6f116e1b8d6ed4e8ed9f49e22d55", "time" : 1405763798, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "delete unmatched )", "author" : "PersonIdent[Nada Amin, namin@alum.mit.edu, Sat Jul 19 11:56:38 2014 +0200]"},
{"name" : "f4d0b53db6922277e902273964d20b5570e6c9e7", "time" : 1405763371, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "minor typo", "author" : "PersonIdent[Nada Amin, namin@alum.mit.edu, Sat Jul 19 11:49:31 2014 +0200]"},
{"name" : "26d4ac090dbe0f661b62fa2a173b95482cd758e3", "time" : 1405762620, "y" : 3245, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Added test for #143 to regression tests\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jul 19 11:37:00 2014 +0200]"},
{"name" : "5000f5f7e874c63a2ad3b6090478d46ba05160ac", "time" : 1405762314, "y" : 3245, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixed #143\n\nThe problem was that TermRefWithSignatures did not take shadowed names into account\nwhen reconstituting themselves under a new prefix.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jul 19 11:31:54 2014 +0200]"},
{"name" : "9e1759f34dcfa90f688ef560c90f209dcb9b1374", "time" : 1405593212, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #140 from dotty-staging/transform/extensionMethods\n\nTransform/extension methods", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Thu Jul 17 12:33:32 2014 +0200]"},
{"name" : "736dceb837d059df35c12f2d35fbbe0bf0f9f8f5", "time" : 1405587723, "y" : 3248, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Made FullParameterization more customizable\n\nCan now decide on rewiring on a node-by-nide basis.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 17 11:02:03 2014 +0200]"},
{"name" : "491e07690dc2701d15544d0d77f0922180c45722", "time" : 1405587723, "y" : 3248, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Handle selftypes in FullParameterization\n\nAdapt the transformation so that self types are handled correctly.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 17 11:02:03 2014 +0200]"},
{"name" : "7c56a5bb3d0b7902dbee6f11788e2d1033b20873", "time" : 1405587723, "y" : 3248, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make self types always include a reference to the class\n\nIn a situation like\n\n    class C { this: D =>\n    }\n\nthe effective self type of the class is taken to be D & C.\n\nWhy? First, Scala 2.x does it that way. Second, it's needed to make the\nFullParameterization transform go though.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 17 11:02:03 2014 +0200]"},
{"name" : "37c6e42cfd04c62c504a9143cb2cc4b500baf38b", "time" : 1405587723, "y" : 3248, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixed problem with missing denotations in polyDefDef\n\nProblem was reported by @darkdimius. Test case will come in next commit.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 17 11:02:03 2014 +0200]"},
{"name" : "ace968dabf8e02f725f7b77cde90f64988a7b326", "time" : 1405587723, "y" : 3248, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix to rewire types\n\nt6574 has a new test where we produce identical code in an if-then-else. This broke\nthe rewiring logic before, and is fixed now.\n\nAlso, more comments and test cases.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 17 11:02:03 2014 +0200]"},
{"name" : "57d69f8f4d00bef8cbb51d498b5139ca649a8ca6", "time" : 1405587723, "y" : 3248, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Refactored reusable full parameterization code into base trait.\n\nMethods dealing with fully parameterized versions of classes were\npulled from `TypeUtils` and `ExtensionMethods` into `FullyParameterization`.\n`TypeUtils` is left for possible future use, but is empty right now.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 17 11:02:03 2014 +0200]"},
{"name" : "3f3581c1fdefbebf06d4b3d12c6474c2997ec52d", "time" : 1405587723, "y" : 3248, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make ExtensionMethods not rely on TailRec\n\nThis acommit allows TailRec to run after ExtensionMethods. This is\ndue to the following changes:\n\n1) Extension methods now \"rewire\" calls to other extension methods of the\n   same class, so that they go directly to other extension methods\n   instead of to the original method in the class.\n\n2) Tailrec annotations get removed from original method and get\n   added to the extension method instead.\n\nWith this commit all tests can be re-enabled again.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 17 11:02:03 2014 +0200]"},
{"name" : "65a85700146674d64f02aed1f2ec185a8ff41c7a", "time" : 1405587723, "y" : 3248, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixes to ReTyper\n\n1) Disabled insertApplyOrImplicit - it leads to untyped trees which cause\n   assertion errors down the road. In any case, neither apply methods nor\n   implicits can be inserted when retyping.\n\n2) Avoid copying tree annotations into symbols when retyping.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 17 11:02:03 2014 +0200]"},
{"name" : "8a0ce6dda986ce149982e102e6962ac7d1e70784", "time" : 1405587723, "y" : 3248, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixes to TreeTypeMap\n\n1) Avoid double transformation of a tree\n2) Apply the type map to the type of the tree-mapped tree,\n   instead of to the type of the original tree.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 17 11:02:03 2014 +0200]"},
{"name" : "dee5f099e9f38ae3082cd88b67dadd970b65f9e2", "time" : 1405587722, "y" : 3248, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Avoid forming SeqLiterals with singleton type element.\n\nSingleton types are normally widened before inferring types, yet\nthey did show up as elements of SeqLiterals.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 17 11:02:02 2014 +0200]"},
{"name" : "90965aba05dbd1595e010e53e4958e807b6fccea", "time" : 1405587722, "y" : 3248, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Semantic printing\n\nWhen refined printing a DefTree, if one is after typer,\nprint the symbol's definition plus the rhs of the tree\nrather than the contents of the tree.\n\nWhy: After typer, it's always the symbol's contents that should matter.\n\nQuestion: Can we enforce through the types that parts of DefTree reflected\nby the symbol disappear/are ignored?\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 17 11:02:02 2014 +0200]"},
{"name" : "47bf26634000950a3ca0185d8b260595c41487e9", "time" : 1405587722, "y" : 3248, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Made ExtensionMethods work as an InfoTransformer\n\nThe previous version of ExtensionMethods added extension methods manually,\nin the companion objetct scope, using enteredAfter. Extension methods therefore\nhad to run before pickling, so that other modules would see the generated extension methods.\nThis is suboptimal, for two reasons; (1) Mixin is very much like extension methods, yet it\nhas to run after pickling. (2) The pickling info gets larger than it has to be.\n\nWith this commit, extension methods are added as an InfoTransformer. So extension methods\nnow should run after pickling.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 17 11:02:02 2014 +0200]"},
{"name" : "ec972b74ada750b5565028053032204e7d31417d", "time" : 1405587722, "y" : 3248, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix problem with dynamicSignature.\n\nPattern match needs to compare against list of names, not single name.\nUniversal equality bites again...\n\nAlso fix comment for ElimRepeated.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 17 11:02:02 2014 +0200]"},
{"name" : "58f249d5d5acca1da3f4f2cdd417ba271d79819f", "time" : 1405587722, "y" : 3248, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Simplification: dynamicSignature instead of toDynamic\n\nWhen figuring out which of a number of static methods corresponds to an overloaded dynamic\nmethod, we only need to compare signatures. No need to resconstruct the full dynamic type.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 17 11:02:02 2014 +0200]"},
{"name" : "4a08703c16bba862f1d27e1fdd7484da128696a7", "time" : 1405587722, "y" : 3248, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Silenced ElimRepeated.\n\nRemoved diagnsostics message.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 17 11:02:02 2014 +0200]"},
{"name" : "fc784b8cd338eecc98e1b23ea2f27d0c82e9fe87", "time" : 1405587722, "y" : 3248, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Enabled ExtensionMethods\n\nFixed extension methods so that it now runs and passes the build.\nAlso enables ElimRepeated, which is a prerequistite for ExtensionMethods.\n\nException: Tailrec is currently disabled, because it needs to run before\nExtensionMethods but it fails the -Ycheck test. Therefore the current tests\nskip this phase.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 17 11:02:02 2014 +0200]"},
{"name" : "1d4c5f69de68975df3bc95e461971e1e4a779ff6", "time" : 1405587722, "y" : 3248, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Revamped TreeTypeMap\n\nTreeTypeMap needs to track all binding occurrences and propagate maps\nto all usage occurrences.\n\nAlso, fixed `ref` for prefixless types (these mapped to a SelectFromType tree before,\nnow are mapped to Idents).\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 17 11:02:02 2014 +0200]"},
{"name" : "dce9d6d3b2b60c8011c2e3362abc02bed9f26e19", "time" : 1405587721, "y" : 3248, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "New phase: ElimRepeated\n\nMakes sure there are no references to RepeatedParamClass left in the types.\nAlso added placeholder for ElimLocals, which remains to be written.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 17 11:02:01 2014 +0200]"},
{"name" : "290343cbd04d0f97818b0bec6f227c237c1e7293", "time" : 1405587721, "y" : 3248, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixes to TypeUtils\n\nSome fixes to toStatic. Also added a method that transforms a RepeatedType to the corresponding Seq type.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 17 11:02:01 2014 +0200]"},
{"name" : "1bb16c4ec5a5c677d2b606e652733cd7a3867a2b", "time" : 1405587721, "y" : 3248, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Small cleanups and additions.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 17 11:02:01 2014 +0200]"},
{"name" : "1ac95a7209439116750592931e43981127950ad4", "time" : 1405587721, "y" : 3248, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add unique ids for definitions\n\nIf -uniqid is on, RefinedPrinter now prints unique ids in definitions.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 17 11:02:01 2014 +0200]"},
{"name" : "34202eb4e13921190bf4992ab33d9d69975f4940", "time" : 1405587721, "y" : 3248, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Avoid some classes of StaleSymbol errors\n\nIf a symbol is defined in phases M..N, and that\nsymbol is then accessed in a phase before M, but in a new run,\nwe should not issue a stale symbol error (after all, the\nsymbol is not defined yet). Instead we now return a\nNoDenotation.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 17 11:02:01 2014 +0200]"},
{"name" : "cd82c859bb2fe05de257cbc81e97bedd2bbf2a4a", "time" : 1405587721, "y" : 3248, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make more Definition methods depend on implicit context argument\n\nThe problem is that exploration methods are run and phase dependent,\nwhereas Definitions has an implicit context that freezes the period\nwhen Definitions ewas created.\n\nWe should complement this by splitting Definitions into a global and\nper/run part, but that is independent of the change in this commit.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 17 11:02:01 2014 +0200]"},
{"name" : "05120fc7ea83a00485a68d2854e5b62c1dbb8c01", "time" : 1405587721, "y" : 3248, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixes to MacroTransform and TreeTransformer\n\n1) Make local context go to module class if the tree symbol is a package val.\n   Perviously, this gave the wrong context owner for package definitions.\n\n2) Add a hook to define the phase in which a transform should be run.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 17 11:02:01 2014 +0200]"},
{"name" : "7b13a861787eb1e7823957b156dbb989f7b415d3", "time" : 1405587721, "y" : 3248, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Invalidate member caches in different periods\n\nA membercache is not valid in a period different from the one it was\ncreated in. Reason: The denotations stored in the cache might have\ndifferent infos in different periods.\n\nAlso: add maybeOwner convenience method for printing, which handles\nNoDenotation/NoSymbol gracefully.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 17 11:02:01 2014 +0200]"},
{"name" : "8d41e9dcee916e2fa4c7f096eb491d38e1185c1c", "time" : 1405587721, "y" : 3248, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make TypeParamCreation flags depend on owner\n\nType params should have different flags, depending on whether they are\nowned by a method or a class. Only class type parameters are marked Deferred,\nprotected, and Local.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 17 11:02:01 2014 +0200]"},
{"name" : "8b1e58ffb847706cada8fc5834c5ac6bcfcd8421", "time" : 1405587720, "y" : 3248, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add definedPeriodsString method for disgnostics.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 17 11:02:00 2014 +0200]"},
{"name" : "3eabbb77c8f8bd3e08b39e5335e8a67e2d68e659", "time" : 1405587720, "y" : 3248, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Move valueclass functionality into its own ValueClass module.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 17 11:02:00 2014 +0200]"},
{"name" : "ab8d873430c22337c6fc6332cad5708514fd5fa0", "time" : 1405587720, "y" : 3248, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix bad type passed to indexOf.\n\nThis is a trap waiting to happen elsewhere as well. Not clear how to avoid it.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 17 11:02:00 2014 +0200]"},
{"name" : "4aa934bcc115aca15c2edfac5f31bd23e60b306f", "time" : 1405587720, "y" : 3248, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Revised purity tests in TreeInfo\n\nAdded two levels: pure and idempotent and fixed what look like\nobvious bugs. It seems the previous treatment confused the two\nlevels.\n\nChanged EtaExpansion and Erasure to use Pure instead of Idempotent\nwhere appropriate.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 17 11:02:00 2014 +0200]"},
{"name" : "5428549a57b710b11e57aab4eee24e9b89b8b97c", "time" : 1405587720, "y" : 3248, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "New Flag: Inline\n\nAdded now because it affects purity if expressions: Inlined pure values\nare pure even if referenced from impure prefixes (i.e. prefix need not\nbe evaluated).\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 17 11:02:00 2014 +0200]"},
{"name" : "1fdc188af5b8b34b1a54555dc48e6f2ccb3294c8", "time" : 1405587720, "y" : 3248, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "New micro phase: Literalize\n\nConvert expressions with constant types to Literals.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 17 11:02:00 2014 +0200]"},
{"name" : "30013465f45b9085b044b7abec36d7bd8d3b1b2b", "time" : 1405587720, "y" : 3248, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Added infix methods for some tree constructions\n\nAdded several forms of \"select\" and \"appliedTo\" methods which construct Select, Apply, TypeApply\ntrees.\n\nMotivation: Infix methods allow chaining which is more legible than deep nesting.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 17 11:02:00 2014 +0200]"},
{"name" : "357003062f994ac8a8ed985248e749297093185f", "time" : 1405587720, "y" : 3248, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "ExtensionMethods phase and TypeUtils\n\nNew phase for extension methods.\n\nAlso, split off some type handling functionality that can be used\nelsewhere in new TypeUtils decorator. The idea is that TypeUtils should\ncontain methods on Type that make sense specifically for transformations.\nThat way, we can keep Types from growing. Might make sense to do similar\ndecorators for Denotations as well.\n\nThere's a  bug fix in MacroTransform: Need to treat selfInfo varDels specially, since they have no symbol.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 17 11:02:00 2014 +0200]"},
{"name" : "db88bf06958e33ae415ca227808ab1f3e48fed7f", "time" : 1405587720, "y" : 3248, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Various cleanups and utility additions\n\n- Some new functionality in tpd and in Symbols.\n- Added `sm` interpolator to print nicely.\n- Make use of nestedMap where possible.\n- Add IdentityDenotTransformer as a convencience class\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 17 11:02:00 2014 +0200]"},
{"name" : "efe4f7e43652a303d16a5253f84316e547f45cca", "time" : 1405587719, "y" : 3248, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Changed PostTyperTransformer scheme\n\n1) We now always generate companion objects for classes. This is done in\n   mini-phase \"companions\", which also assures that companion-modules appear\n   after companion-classes.\n\n2) PostTyperTransformers is gone; the part which normalizes trees has been\n   rolled into TreeTransform and the part which reordered companion classes\n   and modules is now in Companions.\n\nNote: Some tests were deisabled; should be re-enabled by Dmitry where needed.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 17 11:01:59 2014 +0200]"},
{"name" : "a47b8b4d3c22133e8cde0053701057e56cc71acb", "time" : 1405587719, "y" : 3248, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Removed test case\n\nd.T is an access to a structural type member, so rejecting this is OK. Not sure why we compiled\nthis before without warning.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 17 11:01:59 2014 +0200]"},
{"name" : "968d16c289aedc7532dae9225502789b507e22e3", "time" : 1405587719, "y" : 3248, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixed problem with installAfter\n\nThe problem is that when an installAfter completely replaces a previous denotation, a symbol or NamedType\nmight still hang on to that denotation in the cache. We need to enforce that we switch to the new denotation.\nThis is done by setting the replaced denotation's validFor field to Nowhere.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 17 11:01:59 2014 +0200]"},
{"name" : "f0249f2bdd8aeb349309dc1ea6ed248987c800f9", "time" : 1405587719, "y" : 3248, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Rename SignedType -> MethodicType\n\n... for the common supertype of MethodType, PolyType, and ExprType.\nSigned was confusing.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 17 11:01:59 2014 +0200]"},
{"name" : "3ab2784948d084557e88cd7eb5c55a29613742d0", "time" : 1405587719, "y" : 3248, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Added phase: SuperAccessors\n\nRewrote SuperAccessors (more to be done; see comments), and\nadded stuff here and there to make it work smoother.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 17 11:01:59 2014 +0200]"},
{"name" : "8112a39d3a00f53a68af794d0a83cf995faf31e2", "time" : 1405587719, "y" : 3248, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Improved printing of flags\n\n(1) Make sure ModifierFlags is TermFlags and TypeFlags\n(2) Shorten private <local> to private[this]; same with protected\n(3) Print [this] for local symbols in RefinedPrinter\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 17 11:01:59 2014 +0200]"},
{"name" : "0cf64e8110717ec1c1008a7cdfb5c173a3f0bc49", "time" : 1405587719, "y" : 3248, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Error method for implementation restrictions\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 17 11:01:59 2014 +0200]"},
{"name" : "a2a5a57911bc4046e78d88b28a0c7759f3b8c595", "time" : 1405587719, "y" : 3248, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "ThisType trees have their class as a denotation\n\nAdded this case, so that .symbol on a ThisType returns the underlying class.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 17 11:01:59 2014 +0200]"},
{"name" : "2e15951a3a7e9dcb877a31ab4a9f32e428d47760", "time" : 1405587719, "y" : 3248, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "New utitility methods in tpd.\n\nAdded the following utility methods:\n\n - polyDefDef: Create a DefDef given a function that takes type and value parameters and yields a body.\n - appliedToTypeTrees: Apply function to type arguments ion a TypeApply if arguments are nonempty.\n - mkAsInstanceOf\n - ensureConforms: generate a cast if expression has non-conforming type.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 17 11:01:59 2014 +0200]"},
{"name" : "8b93f7b4339abb4e376860770eb5b7ca271de71b", "time" : 1405587719, "y" : 3248, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Added MacroTransform as a transformer template for macro phases.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 17 11:01:59 2014 +0200]"},
{"name" : "65eb50f096506e8ae279f480d8f6c9dc0b95f5e4", "time" : 1405587718, "y" : 3248, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make SuperAccessorName and extractor.\n\nShould do the same with other name-creator/name-test pairs.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 17 11:01:58 2014 +0200]"},
{"name" : "d8864d36e07e1343fc623250b72fdd590c84e732", "time" : 1405587718, "y" : 3248, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add cloneScope method and handle versioning of ClassInfo#decls\n\nThis is done to streamline changing class denotations in new phases\nby adding to (or otherwise modifying) their decls scope.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 17 11:01:58 2014 +0200]"},
{"name" : "bdbed3934affb22095771c0a4858759a8b813f23", "time" : 1405587653, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #142 from DarkDimius/fix-transforms-period\n\nFix using of wrong period for creating nested ctx in TreeTransforms", "author" : "PersonIdent[odersky, odersky@gmail.com, Thu Jul 17 11:00:53 2014 +0200]"},
{"name" : "9caa07a15a312a2b208fb346a5301258be62983b", "time" : 1405515132, "y" : 3296, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Phases in tests now also have valid periods.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Jul 16 14:52:12 2014 +0200]"},
{"name" : "ba4ba5e695bf660fd1d00e2a7f6d9cdc054f4a78", "time" : 1405501525, "y" : 3296, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix wrong period for creating nested ctx in TreeTransforms.\n\n`owner` for nestedContext in `TreeTransforms` was assigned\nusing initial period of whole `TreeTransforms` block.\nThat is incorrect as denotation for this owner could have been\ncreate by some phase in this block.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Jul 16 11:05:25 2014 +0200]"},
{"name" : "53caec0e8c3624ba7596004b33b92e979a757b50", "time" : 1405501518, "y" : 3296, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Short-circuit TreeTransform.transform\n\nNo need to perform zero transformations.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Jul 16 11:05:18 2014 +0200]"},
{"name" : "94725a6015160e38db41facc2dc232647cdf1c5d", "time" : 1405501509, "y" : 3296, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Short-circuit transformSingle\n\nThere is no need to recurse in tree if there are no transformations left.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Jul 16 11:05:09 2014 +0200]"},
{"name" : "e73fab33efbcffcbd2c41121066024a1d8266933", "time" : 1405354100, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #135 from dotty-staging/docs/higher-kinded-v2\n\nDocs/higher kinded v2", "author" : "PersonIdent[odersky, odersky@gmail.com, Mon Jul 14 18:08:20 2014 +0200]"},
{"name" : "0d77aaeb2cfbb5b5f36f8895fce1db5cf73b451e", "time" : 1405352774, "y" : 3301, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Sync with implementation\n\nAdapted docs so that they reflect what has been implemented.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jul 14 17:46:14 2014 +0200]"},
{"name" : "1c4e9c2ce85f540bc7b566a2b86ba12c0df7c219", "time" : 1404913864, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #137 from dotty-staging/change/higher-kinded\n\nChange/higher kinded", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed Jul 9 15:51:04 2014 +0200]"},
{"name" : "e710af6ad48b9c2749785e68aee1e4195d7264bb", "time" : 1403792310, "y" : 3303, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Added test case for LMS inspired HK code.\n\nCloses #94.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jun 26 16:18:30 2014 +0200]"},
{"name" : "f600df414d01f44604f47122fe00199842d02baf", "time" : 1403781475, "y" : 3303, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Improved documentation\n\nAdded explanations where suggested by Adriaan in his review.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jun 26 13:17:55 2014 +0200]"},
{"name" : "f823e422478232aa083f3510fa8ce4914ec99d53", "time" : 1403781444, "y" : 3303, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Bring LambdaClass inline with its doc comment.\n\nAvoid special treating TermRef, as this is not demanded by the\ncomment and does not change any of the test outcomes.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jun 26 13:17:24 2014 +0200]"},
{"name" : "c1721485725bb1050730beb2055700d5fa17c4dd", "time" : 1403778150, "y" : 3303, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Avoid crashing on name tests when name is empty.\n\nGuard every occurrence of name.head with a test whether name.length > 0\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jun 26 12:22:30 2014 +0200]"},
{"name" : "38b00c5e7a2d3ea43391b5210925aaca13c79b36", "time" : 1403537085, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #138 from folone/master\n\nUse the final scala 2.11.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon Jun 23 17:24:45 2014 +0200]"},
{"name" : "7f118479888638b853aad74bad790cb10beaddae", "time" : 1403524000, "y" : 3308, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Use the final scala 2.11.\n", "author" : "PersonIdent[George Leontiev, folone@gmail.com, Mon Jun 23 13:46:40 2014 +0200]"},
{"name" : "a8cb929a368f01819c16393a97291e82bc4a2738", "time" : 1403270116, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #136 from dotty-staging/fix/systematic-prototypes\n\nFix/systematic prototypes", "author" : "PersonIdent[odersky, odersky@gmail.com, Fri Jun 20 15:15:16 2014 +0200]"},
{"name" : "b3364db33ff2ee2d57b4d0eaed03632099244f63", "time" : 1403269459, "y" : 3303, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Avoid caching values that depend on typevar state.\n\nTypeVars flip from the initial state, where underlying == origin to the final state\nwhere underlying == inst. This flip can invalidate information that depends on the underlying\ntype of a TypeVar. Since we do not know when the flip occurs, we need to avoid keeping\nany such information in a cache.\n\nThe commit makes three caches depend on a new value: typerState.ephemeral. The value is\nset to `true` each time we follow the underlying type of a TypeVar, and this disables cached\ninformation to be retained.\n\nA test case for this commit is t2693.scala. This test passes typechecking with the previous commit,\nbut fails in -Ycheck:front because of stale cache info in an \"#Apply\" typeref. The present commit fixes that.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jun 20 15:04:19 2014 +0200]"},
{"name" : "7cf6202ea94c016ffc2d2528ad8add186e9f3827", "time" : 1403268858, "y" : 3303, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make refines work for aliases\n\nrefines needs to be made more stable, so that also aliases and derefernces typevars are recognized as prefixes.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jun 20 14:54:18 2014 +0200]"},
{"name" : "ad0600fbfaf0c9993f993b8577c82ba447baea26", "time" : 1403268756, "y" : 3303, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add missing case where isHKSubType is needed\n\nWas not called when comparing a named type with an #Apply projection. The commit fixes this.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jun 20 14:52:36 2014 +0200]"},
{"name" : "91e44df57185a32988c22823551d8049b3c43da8", "time" : 1403178078, "y" : 3303, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixes to lambda abstraction\n\n1) Honor variance of Apply and $hkArgs when instantiating them\n2) Eta-lifting a higher-kinded type is straight eta expansion,\n   no arguments are applied.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jun 19 13:41:18 2014 +0200]"},
{"name" : "76238566c281b9d87b17c7e361feb649ceb7a6d0", "time" : 1403175748, "y" : 3303, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Prevent a source of CyclicReference in refined printer\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jun 19 13:02:28 2014 +0200]"},
{"name" : "f9625f9c64872dd16fa233273aa0f55c9d0b03ff", "time" : 1403109277, "y" : 3303, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Delete old, disabled code in TypeComparer\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Jun 18 18:34:37 2014 +0200]"},
{"name" : "7f721438b5bccc8ca9dd68cef273c8cac8199e1a", "time" : 1403108467, "y" : 3303, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Handling higher-kinded types with lambdas\n\nSwitch to the new scheme where higher-kinded types (and also some polymorphic\ntype aliases) are represented as instances of Lambda traits.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Jun 18 18:21:07 2014 +0200]"},
{"name" : "388d9a889c6929699e879a307dc80145b906390a", "time" : 1402827097, "y" : 3303, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixing subtyping of refined types\n\nRefined type subtyping needs to take into account all information\nthat was seen about members of both refined types. This is handled by\nstoring context info in `pendingRefinedBases` and making use of this\nto selective rebase qualifiers when comparing refined types.\n\nNote: This commit fails in pos/collections and dotc/ast, presumably because\nof bad interaction between the refined subtyping and the \"matchingNames\" logic\n(which will go away).\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Jun 15 12:11:37 2014 +0200]"},
{"name" : "099e5a64a731c0221a19089bffb0dec9ccde8f95", "time" : 1402645129, "y" : 3303, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "More explanations for -Ycheck failures.\n\nIn case of \"types differ\" failure, explain why original and retyped type are\nnot subtypes of each other.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jun 13 09:38:49 2014 +0200]"},
{"name" : "cfd13f731c6757005379c5ad5ad51abfe3282215", "time" : 1402645007, "y" : 3303, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix to printing type parameters.\n\nPrinting a type parameter reference `A#T` now only reduces to `T` if\n`A` is some `B.this.type`.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jun 13 09:36:47 2014 +0200]"},
{"name" : "9a6a4e8ca400835643e839cd98bb5581cbf97ab9", "time" : 1402644852, "y" : 3303, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "More careful with lookupRefined\n\nAvoid to reduce projections `A{ ... }#T` to aliases if the\nalias would refer to abstract members of the refinement type.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jun 13 09:34:12 2014 +0200]"},
{"name" : "8db6b3e3c28f671942d4a05ec7cd8848c2dd7fa9", "time" : 1402585102, "y" : 3303, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Harden allOverriddenSymbols\n\nNow also works for symbols that are not class members (and returns\nIterator.empty for them).\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jun 12 16:58:22 2014 +0200]"},
{"name" : "c1b884bbf80bc4c906ada08904d83510f2322ae7", "time" : 1402585044, "y" : 3303, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make Lambda#Apply a type field instead of a type parameter.\n\nApply cannot be treated as a type parameter because it does not count\ntowards the number of legal arguments in an instantiation of a higher-kinded\ntype.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jun 12 16:57:24 2014 +0200]"},
{"name" : "c2bcf2ec054b3c20b9addd9d1dd6de286de7f6c3", "time" : 1402581234, "y" : 3303, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Optionally check variance of Lambda classes.\n\nMake sure that Lambda Arg refinements have the same variance as the Lambda classes\nthey instantiate. Controlled by a Config parameter.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jun 12 15:53:54 2014 +0200]"},
{"name" : "a77a4f6d8bd8f9990eac23859c399abb3b93df7c", "time" : 1402581037, "y" : 3303, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix RefinementType#member\n\nType members used to always pick the last refined info for a type name.\nThis is incorrect, as a type might have several refinements for the\nsame type name, which are not necessarily subsumed by the last one.\nWe now only pick the last one if it is an alias type (assuming we check\nfor conflicts elsewhere).\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jun 12 15:50:37 2014 +0200]"},
{"name" : "c4f96837538e953df3473107bd5d622092f74d80", "time" : 1402580866, "y" : 3303, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixing hashing for RefinedThis types.\n\n... to bring it in sync with equals.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jun 12 15:47:46 2014 +0200]"},
{"name" : "4e287d506eeb1d0463c3efd275327b55fce452f2", "time" : 1402580442, "y" : 3303, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add isLambda... tests\n\nTesting whether a type is (a subtype of) a Lambda class.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jun 12 15:40:42 2014 +0200]"},
{"name" : "96196c9ffa9939acd7437103d1621dac96e9abc6", "time" : 1402580157, "y" : 3303, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Names and definitions for Lambdas\n\nAdding names and definitions for the Lambda scheme to hk types.\nAlso add HigherKinded flag for HK type parameters and abstract types.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jun 12 15:35:57 2014 +0200]"},
{"name" : "51563aee5478f90a0f86c29385f74d020b8995dd", "time" : 1402570511, "y" : 3303, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Change definition of isLegalPrefix so that it allows projecting on an abstract type.\n\nThis is needed to make the encoding og higher-kinded types work. E.g.\n\n    Rep[Int]\n\nwould be represented as\n\n    Rep { type Arg$0 = Int } # Apply\n\nwhere Apply is an abstract member of the base class Lambfa$I of Rep.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jun 12 12:55:11 2014 +0200]"},
{"name" : "c2175ec910165308e81c48bd8ca8910c50862be4", "time" : 1401457382, "y" : 3303, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Avoid classtype checking for refinements.\n\nIn a refinement type T { R } we do not need T to be a class. But analyzing the refeinement\ntype will create a temporary class type. This refinement class has to be treated specially in\nwhat concerns parent types.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri May 30 15:43:02 2014 +0200]"},
{"name" : "70e785f5d8a583dae127dadf4d9add70bdea71f7", "time" : 1401453819, "y" : 3303, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Simplify result handling in FunProto.\n\nFollowing the example of SelectionProto, we now always hide the result in a FunProto\nbehind an IgnoreProto. This avoids a special case retry with a weaker FunProto in\ntryInsertApplyOrImplicit.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri May 30 14:43:39 2014 +0200]"},
{"name" : "c70366db8469e81e315fe89672e8321607a7310a", "time" : 1401453819, "y" : 3303, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Always ignore type in selectionProto\n\nThe type of a SelectionProto needs to be ignorable because there might be an\nimplicit conversion on the selection. E.g.\n\n    implicit def a2b(x: A): B = ???\n    val x: { a: A } = ???\n    val b: B = x.a\n\nThis was previously handled by allowing implicit conversions in compatibility checks.\nBut it turns out we can afford to ignore the type of a selectProto and unignore on ambiguities\nlater.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri May 30 14:43:39 2014 +0200]"},
{"name" : "e43c3aaa61e570de1cb80b1766fb3e3988c444a0", "time" : 1401453779, "y" : 3303, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Reclassifying tests\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri May 30 14:42:59 2014 +0200]"},
{"name" : "315c097d3a72077512fa06d7c26e8ad09a8b3f66", "time" : 1401453511, "y" : 3303, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Triage of tests t27xx-t29xx.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri May 30 14:38:31 2014 +0200]"},
{"name" : "996f47d48c3c10c51da58558643ec02844e45687", "time" : 1401453510, "y" : 3303, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "tests t26xx\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri May 30 14:38:30 2014 +0200]"},
{"name" : "772d57cd0874d992b3d5bad12e8f30746b24f5d6", "time" : 1401453510, "y" : 3303, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "typedTyped needs to maintain Mode.\n\nThe first part of a type ascription e: T can be a pattern or an expression. The mode\nhas to be kept depending on what it was on the outside.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri May 30 14:38:30 2014 +0200]"},
{"name" : "20034dd5500815ff04052cbc9a97deddacb3e892", "time" : 1401453493, "y" : 3303, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix of t2660.\n\nAuxiliary constructors need to be wrapped in the type parameters of the primary constructor.\nOtherwise they will not take part in type inference.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri May 30 14:38:13 2014 +0200]"},
{"name" : "4a071ad51e4ccc94c34e0fcbea84d48cd8bb214c", "time" : 1401453492, "y" : 3303, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix of t2591.\n\nNeeded to wrap a dummyTreeOfType in a TypedSplice to prevent re-typechecking. (In fact, the\n\"tree without pos\" check revealed a deeper problem: DummyTrees of types could be typed again,\nbut without the surrounding TypedSplice, the originally stored type would be forgotten and Null\nwould be returned.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri May 30 14:38:12 2014 +0200]"},
{"name" : "e42388682094c63055440c8915d8215935007584", "time" : 1401453480, "y" : 3303, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Added t25xx tests\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri May 30 14:38:00 2014 +0200]"},
{"name" : "05668169eca68bbdc777fbf698f92e256f8e50a9", "time" : 1401453460, "y" : 3303, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix of t2504\n\nAnother problem where we need to insert an implicit on the result type of complex operation.\n\nTwo additions: (1) If adapt fails, we now try with a weaker FunProto without result type, thus\nallowing for an additional implicit cpmversion on the result. (2) An Application in a committable\ncontext will not fail if the result type does not match the expected one. The problem will be\nsimply deferred in that case.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri May 30 14:37:40 2014 +0200]"},
{"name" : "3b247c34a4c8959b638c61b116635d6c7e80403a", "time" : 1401453273, "y" : 3303, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Reporter fix\n\nThis fixes a bug introuced by 7754c1ee6c4230e424fd99b820471dbd2c1c8390.\n\nThe reporter state need to be reset undconditionally in a tryWithFallback.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri May 30 14:34:33 2014 +0200]"},
{"name" : "e57fa24b34ab1836160be67a153cbaba2ebc6691", "time" : 1401453273, "y" : 3303, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Refinements in diagnostics\n\n1) glb/lub's are reported to subtyping printer instead of typr\n2) Null arguments of function protos are printed with their types\n   (views sometimes are transformed into these).\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri May 30 14:34:33 2014 +0200]"},
{"name" : "ed1d5f310951715d95873c56f64195ac3ee45817", "time" : 1401453273, "y" : 3303, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix of pos/t2454\n\n\"_\" type paraeters need to be given fresh names.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri May 30 14:34:33 2014 +0200]"},
{"name" : "41e9201d5afe4c15e0020dd9930a31fe87a5183d", "time" : 1401452886, "y" : 3301, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "fixed typos\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri May 30 14:28:06 2014 +0200]"},
{"name" : "926b5d911e230b5cbfd78755f872d742a0f4be61", "time" : 1401452886, "y" : 3301, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixed typos\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri May 30 14:28:06 2014 +0200]"},
{"name" : "8492c211c2788b93acd2414bea1c8d58fb7ddc29", "time" : 1401452886, "y" : 3301, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Version 2, picking up on an idea of Adriaan.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri May 30 14:28:06 2014 +0200]"},
{"name" : "7bc5cd18ee4f881f223e9a317e6c6a329942d5af", "time" : 1400594820, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #132 from DarkDimius/small-fixes\n\nSmall fixes", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Tue May 20 16:07:00 2014 +0200]"},
{"name" : "deea15e9b0c56b7f55f5e40665d5e00baef4f028", "time" : 1400594679, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #133 from dotty-staging/more-tests\n\nMore tests", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Tue May 20 16:04:39 2014 +0200]"},
{"name" : "6b090d1204b5ee553cf9f04b83e48904dcd88183", "time" : 1400585963, "y" : 3348, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "reduce test verbosity to get below 10K lines of test output\n\nbecaus this is the limit imposed by Travis\n", "author" : "PersonIdent[Samuel Gruetter, samuel.gruetter@epfl.ch, Tue May 20 13:39:23 2014 +0200]"},
{"name" : "c6d55bf67832b70052c07f2cb11a19d83a6739a0", "time" : 1400585963, "y" : 3348, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "remove test t1591b because it depends on scalac 2 source\n", "author" : "PersonIdent[Samuel Gruetter, samuel.gruetter@epfl.ch, Tue May 20 13:39:23 2014 +0200]"},
{"name" : "2f7706c2c4c335a3c7fddf5b6350c473eb7a4431", "time" : 1400585963, "y" : 3348, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make java file compile under 1.6.\n\nI still have 1.6 installed. So the two simple fixes are necessary to make my build pass for now.\n", "author" : "PersonIdent[Samuel Gruetter, samuel.gruetter@epfl.ch, Tue May 20 13:39:23 2014 +0200]"},
{"name" : "394b645dd2d44ff68597527c6c690c73653f1bcb", "time" : 1400585929, "y" : 3348, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix of pos/t2429\n\nThis was a hard nut to crack. The problem exemplified by t2429 is that in a situation like\n\n     val x: T = foo(...)\n\nwhere `foo` needs implicit parameters the expected result type `T` is propagated into the\ntypechecking of foo(...) and consequently also into the implicit parameter search. This\nis often necessary, for instance to instantiate type parameters. But it can lead to overconstrained\nsearches if in fact the right expansion is\n\n     val x: T = viewToT(foo(...)(implicit params))\n\nwhere `viewToT` is some implicit conversion. The fix handles that case by re-hecking the\napplication foo(...) with an empty result type, if the implicit parameter search fails.\nBut the re-checking is very subtle as is explained in the comment to `TyperState#tryWithFallback`.\n", "author" : "PersonIdent[Samuel Gruetter, samuel.gruetter@epfl.ch, Tue May 20 13:38:49 2014 +0200]"},
{"name" : "67e5130e63b10631106490cbc1cec5adcd5273e6", "time" : 1400585929, "y" : 3348, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Changed .gitignore to ignore /classes instead of /bin.\n\nbin as output directory clashes with bin/dotc.\n\nBtw I have no idea why I cannot ignore .gitignore. I have .gitignore in my .gitignore_global\nand have configured git to respect that, but no cigar.\n", "author" : "PersonIdent[Samuel Gruetter, samuel.gruetter@epfl.ch, Tue May 20 13:38:49 2014 +0200]"},
{"name" : "b2c545173ab4869eb1b193d44f822efb83df104c", "time" : 1400585929, "y" : 3348, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Nothing is not a superclass of Null.\n\nFix so it isn't.\n\nThis caused an error in ErrorReporting because we do not propagate\nbounds into a type like ValOrDefDef[_]. Error in `ErrorReporting` is now fixed but the problem is\nreflected in test case `boundspropagation`.\n", "author" : "PersonIdent[Samuel Gruetter, samuel.gruetter@epfl.ch, Tue May 20 13:38:49 2014 +0200]"},
{"name" : "27081ae59ba5b00b6ae05bb3cdd9c3ff7db0a28e", "time" : 1400585929, "y" : 3348, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Tests pos/23xx to 24xx.\n", "author" : "PersonIdent[Samuel Gruetter, samuel.gruetter@epfl.ch, Tue May 20 13:38:49 2014 +0200]"},
{"name" : "fb3dba1bac13a755d2304928cbd49e7dde6f1bf9", "time" : 1400585929, "y" : 3348, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Avoid hoisting of local classes out of method bodies.\n\nDoing so is unsound. We instead approximate local classes by their parents, but\nonly if the expected type is not fully defined.\n\nThis makes the test t2421_delitedsl1.scala in the commit pass. The oter test,\nblockEscapesNeg.scala is modified to fail. Previously it failed outright but with the\nnew rules the nested class Bar is approximated to Object. That means that the block\ncontaining `Foo.Bar` typechecks, but with type `Object` instead of the unreachable `Bar`.\n", "author" : "PersonIdent[Samuel Gruetter, samuel.gruetter@epfl.ch, Tue May 20 13:38:49 2014 +0200]"},
{"name" : "f7910005038c188e573e8d1a42ff3e31c69c90c1", "time" : 1400585928, "y" : 3348, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Better printing of anonymous classes.\n\nUsed to be just $anon, now is `Ps { ... }`, where `Ps` are\nthe instantiated parents of the anonymous class.\n", "author" : "PersonIdent[Samuel Gruetter, samuel.gruetter@epfl.ch, Tue May 20 13:38:48 2014 +0200]"},
{"name" : "c2d5246bdb33d60d3eaff62a539d01368124d859", "time" : 1400585928, "y" : 3348, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "More systematic treatment of prototypes.\n\nThere's a delicate balance about how much of a prototype should be passed down the\ntree when typechecking. Passing little can cause ambiguity errors (both in overloading\nand in implicit search). Passing too much can cause spurious errors because implicit conversions\n\"down the road\" that apply to some tree continaing the result might not be considered.\n\nSymptoms of the problems wree that we could not handle the tests included in this commit before.\n\nThe new scheme is as follows: we always keep all available information in a prototype, but hide nested\nprototypes behined a `IgnoredProto` wall. These trees will not be considered for conformity checking.\nWhen type checking hits an ambiguity, it tries again with a prototype that's one level deeper (has fewer\nIgnore links) than the previous one. This continues until there are no more Ignore links to unwrap.\n\nWe also generalize the scheme for wrapping qualifiers of select nodes from realApply to all instances where\nwe compare against a FunProto.\n\nFinally, there are some fixes that avoid assertion violations that were provoked by the new typechecking scheme.\n", "author" : "PersonIdent[Samuel Gruetter, samuel.gruetter@epfl.ch, Tue May 20 13:38:48 2014 +0200]"},
{"name" : "2d3c79f7cf3e79b592c7e479d262e8d3f9b04959", "time" : 1400585928, "y" : 3348, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Tests pos 20xx 21xx\n", "author" : "PersonIdent[Samuel Gruetter, samuel.gruetter@epfl.ch, Tue May 20 13:38:48 2014 +0200]"},
{"name" : "093774e181e878308551226f6a0b990bf7de8077", "time" : 1400585928, "y" : 3348, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix of SI 2133\n\nWe now restrict wildcard imports to members that are accessible at the point of import. This is a fix of an open Scala ticket.\n", "author" : "PersonIdent[Samuel Gruetter, samuel.gruetter@epfl.ch, Tue May 20 13:38:48 2014 +0200]"},
{"name" : "82c4db686d07ae8e91f157f5c8b55a1a76917941", "time" : 1400585928, "y" : 3348, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Pos tests t17xx - t19xx\n", "author" : "PersonIdent[Samuel Gruetter, samuel.gruetter@epfl.ch, Tue May 20 13:38:48 2014 +0200]"},
{"name" : "94ceb9895a539b05fd81c8abe040c276178b5507", "time" : 1400585855, "y" : 3348, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Reporter refactoring\n\nRefactored reporters to increase clarity and to pave the way for having Diagnostics subclasses.\n", "author" : "PersonIdent[Samuel Gruetter, samuel.gruetter@epfl.ch, Tue May 20 13:37:35 2014 +0200]"},
{"name" : "1b32071acef5c7c2c08e21ee577c7cc709876ffa", "time" : 1399891838, "y" : 3348, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "More tests\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon May 12 12:50:38 2014 +0200]"},
{"name" : "58bbd56e66d65968e884384fe36f2a61a1daa721", "time" : 1399628878, "y" : 3363, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix too precise type error in LazyVals.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri May 9 11:47:58 2014 +0200]"},
{"name" : "8a4186ff782efefb98686aa35bf7f5dd1418210d", "time" : 1399627017, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #128 from dotty-staging/fix/erasure-2\n\nFix/erasure 2", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri May 9 11:16:57 2014 +0200]"},
{"name" : "f6eeed6dd1c328e9cf46415e12390eac880bd93e", "time" : 1399626990, "y" : 3363, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "withPos for Thickets.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri May 9 11:16:30 2014 +0200]"},
{"name" : "4299a075a7056b72a4778802582492d38bf7a059", "time" : 1399626990, "y" : 3363, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix phase dependencies calculations broken for non-miniphases\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri May 9 11:16:30 2014 +0200]"},
{"name" : "df66810a9129d13ba8caae84ba46fa4ed8c0871f", "time" : 1399626984, "y" : 3363, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixing positions not being set in CreateCompanionObjects\n\nSee discussion in #128\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri May 9 11:16:24 2014 +0200]"},
{"name" : "e83df26f7a6bc583599e0b50bdb2f806cbf314f7", "time" : 1399580560, "y" : 3363, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix dotty deviation failure in TailRec\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu May 8 22:22:40 2014 +0200]"},
{"name" : "ed4cba06177932e1247f0bf3ee38b674517fac72", "time" : 1399578708, "y" : 3363, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix lazy vals test broken by fixing fixing tpd.ClassDef.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu May 8 21:51:48 2014 +0200]"},
{"name" : "8baa5de7e7ee01b6d47924a293de746379271f08", "time" : 1399578708, "y" : 3363, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixing tpd.ClassDef.\n\nThe superclass comnstructor of a ClassDef is supposed to be a constructor call. The fix\nensures this is the case when creating classes with tpd.ClassDef.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu May 8 21:51:48 2014 +0200]"},
{"name" : "9a251994b59bdcfc3acfb4d8b22aaee359724e6b", "time" : 1399578707, "y" : 3363, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Adding descriptive message to no-implicits-after-typer assertion.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu May 8 21:51:47 2014 +0200]"},
{"name" : "69403ee21743246c3f1d10cfa5f5b0c76d01e0c7", "time" : 1399578707, "y" : 3363, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Adding a check that owner chains are correct for -Ycheck\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu May 8 21:51:47 2014 +0200]"},
{"name" : "640feb1fe9de15dbf846c5a1ddc480c44523daa3", "time" : 1399578707, "y" : 3363, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Adding dependency tracking to constraint satisfaction\n\nThe previous scheme checked all constraint bounds twice everytime\nthe bounds for a parameter in a constraint were changed. The new scheme,\nwhich can be disabled by unsetting `Config.trackContrDeps`, only\nchecks those cbounds that directly or indirectly mention the changed\nparameter.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu May 8 21:51:47 2014 +0200]"},
{"name" : "94c13485c7ced4b2fe1fec2936d74291d657ab88", "time" : 1399578707, "y" : 3363, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Added compliing dotc/transform to tests\n\nWith the previous fixes, we can now compile dotc/transform without errors.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu May 8 21:51:47 2014 +0200]"},
{"name" : "4ae473eff25335d2b6b0f5900eed55ffa5141d2a", "time" : 1399578707, "y" : 3363, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Tightening of rules for explicit types for implicit defs\n\n1) We now demand that all implicit defs have an implicit type, not\njust class members. If we admitted implicit term members without\nexplicit types, the rules and algorithms for dteremining eligible\nimplicits would be greatly complicated (because there's always the\ndanger that inferring the type by typechecking the rhs causes a cyclic\nreference).\n\n2) We check for violations of this rule earlier, during type completion, in order\nto avoid cyclic references happening before we do the check.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu May 8 21:51:47 2014 +0200]"},
{"name" : "620b2f4435249cc651d31dbabcb3c902da3b160c", "time" : 1399578707, "y" : 3363, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Handling of higher-kinded types in intersections and unions.\n\nIf we intersect a higher-kinded type C with an instance C[T],\nwe should expect C[T].\n\nConversely, taking the union of a higher-kinded type C and an\ninstance C[T] should give C.\n\nPreviously, the higher-kinded place-holder $hkN was merged with\n&/| with the type T which led to type errors.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu May 8 21:51:47 2014 +0200]"},
{"name" : "615ad1f9eddc3dff9f8f4019ee9608a0b43db45f", "time" : 1399578707, "y" : 3363, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Making dotc/transform Dotty compliant\n\nFixes to make the files in `transform` compile in Dotty.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu May 8 21:51:47 2014 +0200]"},
{"name" : "9099df69ceb9a73073c63ba051d7da1230cf25fa", "time" : 1399578707, "y" : 3363, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix for type applications.\n\nTest case in TreeTransformers.scala. We have there\n\n    type Mutator[T] = (TreeTransform, T, Context) => TreeTransform\n\nIt turns out that then Mutator[X] for some type X did not typecheck because\nthe typer got confused what were the type parameters of the Function3 type on\nMutator's RHS. The fix adds a case to handle RefinedTypes that bind type\nparameters.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu May 8 21:51:47 2014 +0200]"},
{"name" : "cb1f9cb03f9610d0c6f4d8aa08b9144e90dcf2b5", "time" : 1399578707, "y" : 3363, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Optimization: Avoid substituting when checking satisfiability\n\nInstead of replacing all constrained poly params by their lower bounds before checking satsfiability,\nwe now do this on the fly in the subtype tests.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu May 8 21:51:47 2014 +0200]"},
{"name" : "4d47745e8fbadc26aaa093b3513d1c9b42798bed", "time" : 1399578707, "y" : 3363, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Re-enable t0786.\n\nt0786 works again after type inference fixes. Re-enabling.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu May 8 21:51:47 2014 +0200]"},
{"name" : "ba2913bdb52bf1a42bd831e9429e044ee8d3c42f", "time" : 1399578707, "y" : 3363, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Changes to test framework and tests\n\ndefaultOptions is now an implicit parameter, which means it can be overridden\non a call-by-call basis.\n\nAdded -Ycheck:front to verify that typed trees typecheck again with same types.\n\nThe option is disabled for one of the structural tests.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu May 8 21:51:47 2014 +0200]"},
{"name" : "90aa3ba1df70fea42b4a1cafe6551e7c3204f012", "time" : 1399578706, "y" : 3363, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Better wildcard type approximation\n\n1) PolyParams are now approximated with a bounded wildcardtype representing\nthe bounds in the current constraint, rather than the bounds in the parameter's\ndeclaration. That makes them consistent with the handling of TypeVars.\n\n2) Wildcard types are taken into consideration when result types are constrained.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu May 8 21:51:46 2014 +0200]"},
{"name" : "15345390b10e60d0cffd0c1eb01a61a9ef28b6d1", "time" : 1399578706, "y" : 3363, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Excluding <:< from eligible candidates for views.\n\nThis is an opimization to save on unncessessary typed implicits.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu May 8 21:51:46 2014 +0200]"},
{"name" : "ef8f24203f4a3ef75d0b8e45a9dd9470bd474e7d", "time" : 1399578706, "y" : 3363, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Tightened satisfiablity checks.\n\nSatisfiability was too loose before. It is noww tightened. We check that the lower bounds\nof all constrained parameters represent a solution to the constraint. To make the check pass\nwe have to first propagate the constraint by re-verifying all bounds.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu May 8 21:51:46 2014 +0200]"},
{"name" : "f84a49d4502c9a1ad328c1f5a3a558afade63848", "time" : 1399578706, "y" : 3363, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixing tailrec test.\n\nnull is not a subtype of a singleton type in Dotty. This slipped by the type checker before.\nWith the tightened rules in the next commits, it will become illegal.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu May 8 21:51:46 2014 +0200]"},
{"name" : "79632fb0eeb6adb82739e41cae671d698278aab9", "time" : 1399578706, "y" : 3363, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Avoid retyping of Literals\n\nLiterals need to be promoted as is, because constant folding might\nhave changed the type of the literal to the expected type. E.g. in\n\n    val x: Byte = 2\n\nThe literal 2 will have type `Byte(2)` but its underlying constant will still be `Int(2)`.\nSo re-typing would give the wrong type.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu May 8 21:51:46 2014 +0200]"},
{"name" : "3ae84523f96d36afa922c9655d88b60417d0d42d", "time" : 1399578706, "y" : 3363, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Moved tests to pending because they fail -Ycheck:front\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu May 8 21:51:46 2014 +0200]"},
{"name" : "782c24ff51865e43e34a2485dc585a757ada2c3b", "time" : 1399578706, "y" : 3363, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Changed handling of repeated parameters.\n\nPreviously, repeated parameters were typed as `<repeated>[T]`. The\nmethod `underlyingWithRepeated` converts `<repeated>[T]` to `Seq[T]`.\nThis method was called in typedIdent, but the call was ineffective\nbecause the type of a repeated parameter ident is a TermRef. This led\nto a retyping error in Decorators.scala under -Ycheck:front.\n\nWe now distinguish between the type of the internal parameter ValDef\nand the type of the parameter in the MethodType. The former has the type\n`Seq[T] @dotty.annotation.internal.repeated`, the latter has the type\n`<repeated>[T]`. The translation with `underlyingWithRepeated` thus\nbecomes unneccessary.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu May 8 21:51:46 2014 +0200]"},
{"name" : "35366df3bed1e2a13aa41abfd0f75c7241f22197", "time" : 1399578701, "y" : 3363, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make sure AnyVal is loaded by classfile parser.\n\nIn dotc, AnyVal is a synthetic toplevel class. We need to make sure it is not loaded by\nthe classfile parser from scala.AnyVal. To do this, the companion module class needs to be\nmarked as absent (by setting its info to NoType).\n\nAlso, added Repeated annotation which will be used in the next commit.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu May 8 21:51:41 2014 +0200]"},
{"name" : "afb541ade2fc83f47661e1d94cee00f7a4b32178", "time" : 1399578488, "y" : 3363, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix of TyperState#instType\n\nIf a type variable TV1 is instantiated to a poly param, and the poly param\nis itself accomanied by a type variable TV2, then the instance of TV1 should\nbe TV2 and not the original poly param. Otherwise we lose instantiations. This\nis demonstrated by running dotc on the .scala files in the dotc directory itself\nwith option -Ycheck.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu May 8 21:48:08 2014 +0200]"},
{"name" : "b6e3c9d15d1e9569d14cd98a57406683fbb3690d", "time" : 1399578488, "y" : 3363, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Refining TreeChecker to work immediately after typer.\n\nMaking TreeChecker work immediately after typer. This requires a number of fixes.\nAlso, errors now cause exceptions instead of being reported on the command line.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu May 8 21:48:08 2014 +0200]"},
{"name" : "60527d656dfed2e5432d7c839c2ed4591709672b", "time" : 1399578488, "y" : 3363, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Making reporters configurable\n\nAdd method to install a new reporter in a subcontext's typer state.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu May 8 21:48:08 2014 +0200]"},
{"name" : "8298eb20b072d405aad71ae6c390a4939c8f090f", "time" : 1399578488, "y" : 3363, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Addiong an adapt to implicit parameters.\n\nImplicit parameters were not adapted to the formal argument before which\ncaused a -Ycheck violation.\n\nTodo: we should find out whether we can do without the adapt in typedImplicit whose result\nis afterwards thrown away.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu May 8 21:48:08 2014 +0200]"},
{"name" : "6f7fc527560891b2fc520a53a4c21b3a36ae0fed", "time" : 1399578488, "y" : 3363, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Avoid checking for tpt non empty in implicit defs after typer.\n\nThe check assumes that inferred TypeTrees do not exist yet, but after\nthe typer they do exist.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu May 8 21:48:08 2014 +0200]"},
{"name" : "b4e5d395785576d1b6d84a35ec9ab4e7f6df6031", "time" : 1399578488, "y" : 3363, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Better printing of type variables\n\nWill now print the full chain of instances using ? for uninstantiated and ' for\ninstantiated.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu May 8 21:48:08 2014 +0200]"},
{"name" : "0fed5dd63f5d40a2aba012fca46f8901d0d4b70d", "time" : 1399578488, "y" : 3363, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Avoid -Ycheck after errors\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu May 8 21:48:08 2014 +0200]"},
{"name" : "d78885ff06bea4840cdf9bee61dd3698fcff820a", "time" : 1399578488, "y" : 3363, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "isAfterTyper test\n\nAdd test whether we are after typer. Use it to assert that\neta expansion and implicit search do not happen after typer.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu May 8 21:48:08 2014 +0200]"},
{"name" : "9203e01ddd141ddbb96e3064be5e894ddb666fd8", "time" : 1399578488, "y" : 3363, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Some more debug info.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu May 8 21:48:08 2014 +0200]"},
{"name" : "861f10b72e2a6332f8919f6880604bdc49cc3bca", "time" : 1399578488, "y" : 3363, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Added a unique identifier to trees.\n\nUsed for debugging purposes for now. Might be used for replaying IDE interactions later.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu May 8 21:48:08 2014 +0200]"},
{"name" : "a8894ed954e16b481379f09ce7e04342bd9b34f2", "time" : 1399578488, "y" : 3363, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixing stillValid code\n\nWe need to take into account that symbols can can have non-class owners yet still be valid.\nPreviously such symbols were treated as invalid. Now they are valid if their owners are valid.\n\nThe commit supersedes\n\n29976d7922c5c3e99f0469e3db1\n\nwhich got reverted.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu May 8 21:48:08 2014 +0200]"},
{"name" : "92c02ee9d514c197221fd4c4a027fe0e70e081f2", "time" : 1399578479, "y" : 3363, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Removing duplication between Any and Object methods\n\nWe cannot have same named methods defined in Object and Any because after erasure\nthe Any references get remapped to the Object methods which would result in a double binding\nassertion failure.\n\nInstead we do the following:\n\n - Have some methods exist only in Any, and remap them with the Erasure denotation\n   transformer to be owned by Object.\n - Have other methods exist only in Object.\n\nTo achieve this, we synthesize all Any and Object methods; Objetc methods no longer get\nloaded from a classfile.\n\nThere's a complication with getClass. We need to reconsider what the best treatment of getClass is.\nRight now there's too much magic going on for my taste. It might be better to leave getClass on Object only as it\nis in Java, forget about the special treatement of its type, and have another getClass like method in\nan decorator on class Any. That could produce the right types and could also work for primitive types.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu May 8 21:47:59 2014 +0200]"},
{"name" : "5c11da2148412f36416ad6998909138323ae4894", "time" : 1399578479, "y" : 3363, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix withSymAndName\n\nThere was a mismatch between symbol and signature before.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu May 8 21:47:59 2014 +0200]"},
{"name" : "5700ca9d5b4710bcee5aac63c426efd8863e5339", "time" : 1399578479, "y" : 3363, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Erasure of term refs without symbols\n\nNeed to allow for possibility that term ref does not have a symbol (e.g. termrefs with union prefixes do not\nalways have symbols).\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu May 8 21:47:59 2014 +0200]"},
{"name" : "c5c400c6f53e2d15fb311df63f87bb62e39c858c", "time" : 1399477841, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #124 from DarkDimius/backend-backport2\n\nBackend backport2", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed May 7 17:50:41 2014 +0200]"},
{"name" : "20010624fe079297ae9039d9b31efbcfa7483bf0", "time" : 1399385926, "y" : 3405, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Better error message if position of tree isn't set.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue May 6 16:18:46 2014 +0200]"},
{"name" : "a0dd4ca40f6e7fd2d1e594b6580aa329f78e9768", "time" : 1399385926, "y" : 3405, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix invalid flags in lazy vals.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue May 6 16:18:46 2014 +0200]"},
{"name" : "54034c1f56b6d9a10cbe2985a5cd90e5dc354f7e", "time" : 1399385925, "y" : 3405, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Definitions used by backend.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue May 6 16:18:45 2014 +0200]"},
{"name" : "026b86da4c11a2e4933af00fe65cb2c37851ed3c", "time" : 1399385925, "y" : 3405, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix TailRec to use Label flag.\n\nConflicts:\n	src/dotty/tools/dotc/backend/jvm/BCodeBodyBuilder.scala\n	src/dotty/tools/dotc/core/Definitions.scala\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue May 6 16:18:45 2014 +0200]"},
{"name" : "9e5cfe27f5d4b34b30102e78222c222ad7604414", "time" : 1399385925, "y" : 3405, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix error in box\\unbox logic.\n\nTermRef's for primitive types are of primitive-type.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue May 6 16:18:45 2014 +0200]"},
{"name" : "ffe0131a4fb464a49bb6799c4e7fcafc4603f609", "time" : 1399385925, "y" : 3405, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Helper method to get all members of type.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue May 6 16:18:45 2014 +0200]"},
{"name" : "0b585c662a1422914e549c142521cab46ccd2cb9", "time" : 1399385920, "y" : 3405, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "CollectEntryPoints.\n\nCollect entry points for backend.\nPreviously this was done by cleanup.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue May 6 16:18:40 2014 +0200]"},
{"name" : "afb21953f75beda26a14b447e2caa0a2cb21904a", "time" : 1399382480, "y" : 3405, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Constructors stub\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue May 6 15:21:20 2014 +0200]"},
{"name" : "bf9ae99e77f179e9f5ad3c2074edbb5aab0fe9f1", "time" : 1399364759, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #119 from DarkDimius/leaks\n\nContext escape detection.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Tue May 6 10:25:59 2014 +0200]"},
{"name" : "a782adaf302713a1a049b9a72dacc0483ed67229", "time" : 1398839862, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #127 from smarter/add/all-phases\n\nAdd support for specifying 'all' for -Xprint, -Yskip, etc", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed Apr 30 08:37:42 2014 +0200]"},
{"name" : "5c7513f7e1a425978952d5389d23adce81005284", "time" : 1398115862, "y" : 3415, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add support for specifying 'all' for -Xprint, -Yskip, etc\n", "author" : "PersonIdent[Guillaume Martres, smarter@ubuntu.com, Mon Apr 21 23:31:02 2014 +0200]"},
{"name" : "fae2c3f8e646fabedb633aea2f42405f556af602", "time" : 1397562165, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #122 from dotty-staging/transform/nullarify\n\nTransform/nullarify", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Tue Apr 15 13:42:45 2014 +0200]"},
{"name" : "d3adfd7f40708899aa033ea1e5c56d468ff9495c", "time" : 1397558958, "y" : 3417, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix Nullarify treating all 'apply' methods as Function0\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Apr 15 12:49:18 2014 +0200]"},
{"name" : "0aa3f4cecfff4a2c883a5b814c551f399dc425e1", "time" : 1397552856, "y" : 3417, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "New phase: Nullarify\n\nEliminates ExprTypes and PolyTypes over value types.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Apr 15 11:07:36 2014 +0200]"},
{"name" : "2a681ecf7236fb2fdc128f7ab9d5e94d7889fc75", "time" : 1397483715, "y" : 3417, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix to Select(Tree, Symbol)\n\nAs a denotation need to take the symbol's info *as seen from\nthe qualifier type*.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Apr 14 15:55:15 2014 +0200]"},
{"name" : "b4b688d1720e3bbf1f08424b453f44dede111107", "time" : 1397483715, "y" : 3417, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "ByNameTypeTree is a TypTree.\n\nWas an oversight before.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Apr 14 15:55:15 2014 +0200]"},
{"name" : "103beef6ab89d6138ec7462fcf85ee3f93cf2b52", "time" : 1397483715, "y" : 3417, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "InfoTransformers as specific DenotTransformers\n\nFactored out denot transformer behavior where the we transform types\nin a uniform way into InfoTransformers.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Apr 14 15:55:15 2014 +0200]"},
{"name" : "f39b6249a11cdb35445da8ce0a338911af496695", "time" : 1397483619, "y" : 3417, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Members of stable methods\n\nStable methods are introduced from getters by inserting () parameters.\nThis change makes sure that adding () does not lose the members of an\nExprType.\n\nAlso, avoid spurious stale symbol errors in loadDenot. When something is not\na SymDenotation, no use retrying in first phase; current would fail immediately.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Apr 14 15:53:39 2014 +0200]"},
{"name" : "e5ae4a707b2bb78f0777660b0661a3162bf646df", "time" : 1397481455, "y" : 3417, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixing prefix of implicit members\n\nImplicit members are TermRefs that should have a prefix corresponding to the object of which they are a member. They used to have the ThisType of their owner before.\n\n`implicits2` provides a way to verify that the change works. It would be good to turn this\ninto a more robust test at some point.  But it's not high preiority, so I prefer no test to a fragile test.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Apr 14 15:17:35 2014 +0200]"},
{"name" : "732a690ad2ef78450f6b8852b0f1f0ba892b392d", "time" : 1397455501, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #120 from DarkDimius/backend-backport\n\nBackend backport", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon Apr 14 08:05:01 2014 +0200]"},
{"name" : "04e32dc5129d140416b0d4a5f05d82352a954a90", "time" : 1397246638, "y" : 3425, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix mkArityArray not producing last arity\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri Apr 11 22:03:58 2014 +0200]"},
{"name" : "4ca7208d7dc84b55d5d4cc3e23c42a2816e9b7c5", "time" : 1397246621, "y" : 3425, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix error in bridges.\n\nDo not discard non-bridge methods\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri Apr 11 22:03:41 2014 +0200]"},
{"name" : "9459028c783450db69f3a5eb9c37cd314c3ee8bd", "time" : 1397246608, "y" : 3425, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make mkArityArray work for classes outside \"scala\" package\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri Apr 11 22:03:28 2014 +0200]"},
{"name" : "b88b79d03517dad973de2aa81c2e5f702d20b2e1", "time" : 1397245874, "y" : 3428, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Allow to provide parent Context for Driver.process\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri Apr 11 21:51:14 2014 +0200]"},
{"name" : "ee214a59578a8f84b578fa023ca1572c1a015ec4", "time" : 1397239312, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #111 from DarkDimius/phase-req\n\nAllow phases to give restrictions on pipeline position.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri Apr 11 20:01:52 2014 +0200]"},
{"name" : "42e748851f0f2793976e990f49dea1941f4e4da8", "time" : 1397239277, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #117 from DarkDimius/tailrec\n\nTailRec phase and tests for it.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri Apr 11 20:01:17 2014 +0200]"},
{"name" : "6ebf6e2c3ef270f226a0fb42ebd59d24449942cf", "time" : 1397220680, "y" : 3431, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "TailRec phase and tests for it.\n\nPorted tailcall phase from scalac with such changes:\n  - all transformation is done in the phase itself\n     (previously half of the work was done in backend)\n  - it is now able to run before uncurry\n  - it is now a treeTransform\n  - renamed to tailrec to make it more obvious that\n     this phase transforms only recursive calls.\n\nFor now this is a single phase which speculatively\ntransforms DefDefs.\nSpeculation can be potentially removed by\nsplitting into 2 phases:\n  one detecting which methods should be transformed\n  second performing transformation.\n\nBut, as transformation requires as same amount of work\nas detection, I believe it will be simpler to maintain\nit as a single phase.\n\nConflicts:\n	tests/pos/typers.scala\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri Apr 11 14:51:20 2014 +0200]"},
{"name" : "4a3b96282584c77c85ae51f5d29cf7c6082cd7fb", "time" : 1397218925, "y" : 3431, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Sbt: simplify debugging and tracing\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri Apr 11 14:22:05 2014 +0200]"},
{"name" : "037eb2bf6d227bb67855d2b68e5bec496db57c96", "time" : 1397218925, "y" : 3431, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Allow closures to take type parameters.\n\nThis shouldn't require any changes to backend,\nas all type parameters will be erased in erasure\n\nConflicts:\n	src/dotty/tools/dotc/core/Symbols.scala\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri Apr 11 14:22:05 2014 +0200]"},
{"name" : "94716b9780c3bd3770bba43aee06e46b00375904", "time" : 1397218925, "y" : 3431, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "SymDenotation.isEffectivelyFinal\n\nHelper method that tests weather this particular\nSymDenotation cant have overrides: eg if it's defined in module class,\nif it is inner method, if it is method of anonymous class, etc.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri Apr 11 14:22:05 2014 +0200]"},
{"name" : "bbad484141e591899f95327e572031ba0de155ec", "time" : 1397054332, "y" : 3435, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Allow phases to give restrictions on pipeline position.\n\nPhases can now specify which phases should it follow.\nTree transforms can additionally specify which TreeTransforms\nshould have finished their processing of compilation units entirely.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Apr 9 16:38:52 2014 +0200]"},
{"name" : "37502919ab964e7a3dc0ca79daf2a7f83747e434", "time" : 1397054218, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #118 from dotty-staging/fix/annotations\n\nFixing annotations", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed Apr 9 16:36:58 2014 +0200]"},
{"name" : "3df6dce0ef83f90e5aaa0b5a0189b81006347c92", "time" : 1397054137, "y" : 3428, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Enable javac lint deprecation&unchecked warnings.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Apr 9 16:35:37 2014 +0200]"},
{"name" : "d010cef9d0f62b727a35140d470472ab8f8355f5", "time" : 1397054130, "y" : 3428, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : " Context escape detection.\n\nDuring creation of each of DottyTests context is stolen from test and a\nWeakReference for it is created.\nAfter running all tests references are examined to detect if any of them\nhas leaked.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Apr 9 16:35:30 2014 +0200]"},
{"name" : "01c33eea19d95fe625ba0b52291f4ab043d883fc", "time" : 1397052496, "y" : 3439, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Port LazyVals to use hasAnnotation.\n\nInstead of by-hand testing of modifier type.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Apr 9 16:08:16 2014 +0200]"},
{"name" : "648880866bbf2fc881270dd23255aa5a0d1ac4fb", "time" : 1397052467, "y" : 3439, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix lazy vals tests broken by previous commit.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Apr 9 16:07:47 2014 +0200]"},
{"name" : "0cbfc41c686492f37dca3db9672ad6b74a924ba9", "time" : 1397047324, "y" : 3439, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixing annotations\n\nTwo fixes:\n\n1) Annotation#symbol now returns the correct annotations for classes as well as traits.\n2) Typer copies annotations from Modifiers to Symbols\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Apr 9 14:42:04 2014 +0200]"},
{"name" : "6bc463df6a6ea8312390915a65024b11cfdd2b77", "time" : 1396970863, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #115 from dotty-staging/fix/double-bindings\n\nFix/double bindings", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Tue Apr 8 17:27:43 2014 +0200]"},
{"name" : "dcfd96328f350a6265d7aac55c411ab798e93e77", "time" : 1396969437, "y" : 3443, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Shadowed references\n\nIn TypeAssigner#ensureAccible we sometimes pick an inherited public\nmember as the denotation of a NamedType instead of an inaccessible\nprivate one. The problem is that both are denotations for the same type,\nwhich caused a noDoubleBindings assert failure. We now solve this problem\nby creating a \"shadowed\" named type to hold the inherited member.\n\nThe shadowed named type is distinguished by its name, which reads\n\n    (inherited)originalName\n\nIn the future, we should make this more robust by using a general\ntagging scheme to create shadowed names.\n\nAnother fix is about import symbols. They are now referenced with\nNonMemberTermRefs. With this fix, the test suite passes with no\ndouble def violations.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Apr 8 17:03:57 2014 +0200]"},
{"name" : "ebd7df51e5b20e2c42717e216cc6be996d12c52a", "time" : 1396969349, "y" : 3443, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Cleanups\n\nConflicts:\n	src/dotty/tools/dotc/transform/Splitter.scala\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Apr 8 17:02:29 2014 +0200]"},
{"name" : "c6af272d6d68c708cb87b12f25e61dd0a9717f09", "time" : 1396969349, "y" : 3443, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Option for testing for double bindings\n\nA double binding is if a named type gets assigned two denotations in the same period. This is\na side-effect and also a race condition, so it's very bad. I am trying to eliminate all causes of this. But one cause which will likely remain are double defitions in a prgram, if a user writes\n\n    class C {\n      val x: Int\n      val x: Int\n    }\n\nThen it's really hard to avoid setting two meanings of C.this.x! That's why the testing\nagainst double bindings is enabled by a -YnoDoubleBindings option. The understanding is that\n-YnoDoubleBindings should be set only if there are no double def errors anticipated. Otherwise\nthe program might fail with an assertion error before the double def error is reported.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Apr 8 17:02:29 2014 +0200]"},
{"name" : "d079c0291289ad9f6517b0b929c4f03ef6b9f082", "time" : 1396969349, "y" : 3443, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Flag self names that conflict with parameters or members\n\nA self name may no longer have the same name as a parameterless\nclass member (or param accessor). The restriction makes sense because\notherwise scoping is confusing. It's needed because otherwise we get\nTermRefs that have the same name and prefix but denote different things.\n\nMoved some code which exercises this from pos/typers to neg/typers\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Apr 8 17:02:29 2014 +0200]"},
{"name" : "09a4bc5d099de71de824a35a67a26e7091e3bb5a", "time" : 1396969340, "y" : 3443, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Reworked TermRef handling\n\nThe main problem with TermRef handling was that signatures were not always tracked correctly.\n\nNew invariant: A TermRef that points to a symbol is always a TermRefWithSig, and the signature\nis the one of the corresponding member.\n\nWe achieve this by sometimes generating a new TermRefWithSig if a TermRef gets a denotation.\n\nOne possible simplification would be to always store a signature in a TermRef.\n\nThere's still a problem in TermRefWithSig#newLikeThis, which currently works only if the previously stored\ndenotation references a symbol. We will need to generalize JointRefDenotation to contain multiple symbols for\na complete fix.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Apr 8 17:02:20 2014 +0200]"},
{"name" : "3486eb0088f78e8ca93c0bc8f883c2af53ee7d3d", "time" : 1396968978, "y" : 3443, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Avoid creating a local dummy when retyping.\n\nRetyping should not create new symbols and that includes local dummys.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Apr 8 16:56:18 2014 +0200]"},
{"name" : "879a0b25f2129a1f723953f3cd8f8c82d8ff7f62", "time" : 1396968973, "y" : 3443, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "TreeCheckers use re-typing...\n\n... to check whether tree types make sense. Still produces errors when enabled.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Apr 8 16:56:13 2014 +0200]"},
{"name" : "f573a56ddc2b4f3c55c3ce1d92903a239896b950", "time" : 1396968964, "y" : 3443, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Better printing of denotations.\n\nUsed to print <none> for denotations with a symbol,\nnow prints \"some I\" where I is the denotation's info.Reworked phases.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Apr 8 16:56:04 2014 +0200]"},
{"name" : "dd5341106d9b57a99316a26a1f0c7e195b6debf1", "time" : 1396968956, "y" : 3443, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fleshed out Splitter phase\n\nImplemented splitting operations\n\nAs a side effect, this contains a test ruling out structural term member dispatch.\nTests 0586 and 0625 which used structural dispatch got moved to neg.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Apr 8 16:55:56 2014 +0200]"},
{"name" : "eb3df0db4a57d89c0d7370a9180742273db166b2", "time" : 1396968949, "y" : 3443, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Corrected computations of union denotations.\n\nCannot discard a symbol simply because the other side's type is weaker.\nIf in (A | B)#m A and B resolve to different symbols `m`, the resulting denotation\ncannot have either `m` as symbol; it must be NoSymbol instead.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Apr 8 16:55:49 2014 +0200]"},
{"name" : "26185f6b17429d2af7686139dbb4d13ede4c9e99", "time" : 1396687421, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #116 from dotty-staging/add/Denotation-update\n\nInstall method for SymDenotations", "author" : "PersonIdent[Sébastien Doeraene, sjrdoeraene@gmail.com, Sat Apr 5 10:43:41 2014 +0200]"},
{"name" : "839a9fc5ecb2371672f25c2c5f639d0952ad8bbc", "time" : 1396634684, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #109 from DarkDimius/erasure-bridges\n\nBridge generation in erasure implemented.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri Apr 4 20:04:44 2014 +0200]"},
{"name" : "0b50b29cb9e8b43fff1d012dd53561b5ac0a437c", "time" : 1396630765, "y" : 3455, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Bridge generation in erasure implemented.\n\nRelies on meaning of \"override\" to see which bridges are required.\nDoesn't take in account value classes for now\nUses 'adapt' used by erasure for converting arguments and return value.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri Apr 4 18:59:25 2014 +0200]"},
{"name" : "e1713aa311cf3bee7fb52e7eaefa481097a72a82", "time" : 1396628298, "y" : 3456, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Install method for SymDenotations\n\nAdd a new method to install a SymDenotation after a specific\nphase has run. The new denotation replaces the current denotation\nof the symbol starting with the period after the given phase.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 4 18:18:18 2014 +0200]"},
{"name" : "75e30d92d17615c84292c6ebb3df1f15060197db", "time" : 1396626523, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #110 from DarkDimius/silence\n\nReduce verbosity of logs.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri Apr 4 17:48:43 2014 +0200]"},
{"name" : "fa098bd5fac8a5f3edc7392b24d4b4da45a47c1a", "time" : 1396614189, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #99 from samuelgruetter/infostring2\n\nError reporting improvements", "author" : "PersonIdent[odersky, odersky@gmail.com, Fri Apr 4 14:23:09 2014 +0200]"},
{"name" : "932d396f45a3cac5c41319071f68f7a6cd579483", "time" : 1396606166, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #112 from dotty-staging/topic/loggable-transforms\n\nTopic/loggable transforms", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri Apr 4 12:09:26 2014 +0200]"},
{"name" : "cfa1ccf5759a1beae961afbbc7d752a0a1e3cb62", "time" : 1396598726, "y" : 3460, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "test for allOverriddenSymbols\n\n... to verify whether they work correctly.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 4 10:05:26 2014 +0200]"},
{"name" : "88dcf9ca9fbbc3c106da512beb55a6b447fd833e", "time" : 1396598244, "y" : 3460, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make transforms loggable\n\nusing traceIndented in the transform method.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 4 09:57:24 2014 +0200]"},
{"name" : "b3983a403070aa1b693557a931dbd08bf2bfa56e", "time" : 1396455554, "y" : 3462, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Reduce verbosity of logs.\n\nWe are already over limit on output size imposed by travis that is shown\nin webpage, if we'll continue to add tests will be soon over limit even\nto run builds.\nThis commit disables printing of classpath, and removes printlns in\nseveral places.\nIn order for ShowClassTests to print info as is was printing\npreviously, please set \"test.ShowClassTests.verbose\" property.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Apr 2 18:19:14 2014 +0200]"},
{"name" : "c8feb0ccb543b01ac27da788050b12c0a0221e36", "time" : 1396453414, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #105 from DarkDimius/docs\n\nDocumentation and a bit of cleanup.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed Apr 2 17:43:34 2014 +0200]"},
{"name" : "e52fa5086c413e6fceb10d8650fc7becdc5c04a9", "time" : 1396453387, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #103 from DarkDimius/transform/erasure-transforms\n\nTypeTestCasts fixes and InterceptedMethods transformer", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Wed Apr 2 17:43:07 2014 +0200]"},
{"name" : "762caa2c178fec0d1535ac721504c9a147d07424", "time" : 1396444678, "y" : 3465, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "fix: do not count suppressed messages for summary\n", "author" : "PersonIdent[Samuel Gruetter, samuel.gruetter@epfl.ch, Wed Apr 2 15:17:58 2014 +0200]"},
{"name" : "bd15941015cd4f438665b2f1b2dceb0bbb3e9aa5", "time" : 1396444658, "y" : 3465, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "fix: isSensical in d\"...\" impl must inspect contents of List arg\n", "author" : "PersonIdent[Samuel Gruetter, samuel.gruetter@epfl.ch, Wed Apr 2 15:17:38 2014 +0200]"},
{"name" : "9b67ac2fb417f00a524ce7f5bc37eb9694763033", "time" : 1396444558, "y" : 3465, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "replace some s\"...\" by i\"...\"\n\nConflicts:\n	src/dotty/tools/dotc/typer/TypeAssigner.scala\n", "author" : "PersonIdent[Samuel Gruetter, samuel.gruetter@epfl.ch, Wed Apr 2 15:15:58 2014 +0200]"},
{"name" : "77a04b26d7c24ed56b4be45cfb41fa8b2e75a461", "time" : 1396443919, "y" : 3465, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "replace i\"...\" by d\"...\" if string might go into a\n\nDiagnostic and might be nonsensical\n\nConflicts:\n	src/dotty/tools/dotc/typer/Checking.scala\n	src/dotty/tools/dotc/typer/TypeAssigner.scala\n", "author" : "PersonIdent[Samuel Gruetter, samuel.gruetter@epfl.ch, Wed Apr 2 15:05:19 2014 +0200]"},
{"name" : "e4ee662a55c83568caa18a8d2212766f299cc575", "time" : 1396443406, "y" : 3465, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "remove SuppressedMessage exception and update Diagnostic as needed\n", "author" : "PersonIdent[Samuel Gruetter, samuel.gruetter@epfl.ch, Wed Apr 2 14:56:46 2014 +0200]"},
{"name" : "73f6f1b8b1cf9221d9b7cfc48598bb240e2b8c05", "time" : 1396443386, "y" : 3465, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "add d string interpolator (marks nonsensical error messages)\n", "author" : "PersonIdent[Samuel Gruetter, samuel.gruetter@epfl.ch, Wed Apr 2 14:56:26 2014 +0200]"},
{"name" : "094d8c57d3e45168c123b40b961fdebdca12e924", "time" : 1396443366, "y" : 3465, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "remove var ContextBase.suppressNonSensicalErrors, and\n\ndecouple Diagnostic from ContextBase\n", "author" : "PersonIdent[Samuel Gruetter, samuel.gruetter@epfl.ch, Wed Apr 2 14:56:06 2014 +0200]"},
{"name" : "a846ccf9efffefc55e0750921096aa323a4f4d04", "time" : 1396443340, "y" : 3465, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "move InfoString from ErrorReporting to Decorators and\n\nremove all isSensical/SuppressedMessage logic from InfoString\n", "author" : "PersonIdent[Samuel Gruetter, samuel.gruetter@epfl.ch, Wed Apr 2 14:55:40 2014 +0200]"},
{"name" : "959c8d0cd1d4003ab28ba88bf05854682d32d17d", "time" : 1396431208, "y" : 3473, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Intercepted methods transformer\n\n    Replace member references for:\n    methods inside Any( == and !=)\n    ## on primitives\n    .getClass on primitives\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Apr 2 11:33:28 2014 +0200]"},
{"name" : "ea5acb56754e26585d2e17080c35a027988660e9", "time" : 1396355993, "y" : 3473, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix TypeTestCasts\n\ndef p() = println().isInstanceOf[Long & Int]\n\nwas rewritten to\n\nval ev$1: [T0]Boolean(x.isInstanceOf) = println().isInstanceOf\nprintln().$isInstanceOf[Long & Int].&&(println().$isInstanceOf[Long & Int])\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Apr 1 14:39:53 2014 +0200]"},
{"name" : "f651ca5ed1caf70aabe0d803949f430d08bf3915", "time" : 1396355045, "y" : 3475, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Documentation and a bit of cleanup.\n\nAdded documentation for non-trivial logic in Contexts, Phases and\nTreeTransforms.\nRemoved redundant vars and casts\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Apr 1 14:24:05 2014 +0200]"},
{"name" : "2033b5607a41b77590b8d23bf5c40c906a0b42e7", "time" : 1396355020, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #106 from DarkDimius/fixes-lazy-vals-typo\n\nFix build: Fix error in lazy-vals.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Tue Apr 1 14:23:40 2014 +0200]"},
{"name" : "1262f3eb41fe8760962f11590a640b4f0ae1bfad", "time" : 1396295789, "y" : 3477, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix error in lazy-vals.\n\nWrong helper method was used.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Mar 31 21:56:29 2014 +0200]"},
{"name" : "e448049027f1aafbe4ae72c859a3368a61592c91", "time" : 1396294276, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #102 from dotty-staging/transform/erasure\n\nTransform/erasure", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon Mar 31 21:31:16 2014 +0200]"},
{"name" : "3335cd072babda7125cd6ed4782503011b15482a", "time" : 1396292223, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #104 from DarkDimius/lazy-vals-obj\n\nTest that lazy val doesn't rewrite module  definitions.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Mon Mar 31 20:57:03 2014 +0200]"},
{"name" : "60310106c2378535c847ddd98170d8c130243c24", "time" : 1396275158, "y" : 3480, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Test that lazy val doesn't rewrite module  definitions.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Mar 31 16:12:38 2014 +0200]"},
{"name" : "fb9a9e65c941a7b840baaa32641818d32b45b5b7", "time" : 1396270432, "y" : 3481, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Factored re-typing logic into seperate ReTyper class\n\nRefactored re-typing logic from erasure into seperate ReTyper class. Another candidate\nsubclass of ReTyper is a future TreeChecker.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Mar 31 14:53:52 2014 +0200]"},
{"name" : "318db7dc616a659687d95380efa16159cfaeb984", "time" : 1396270424, "y" : 3481, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Memoizing Context#withPhase\n\nwithPhase operations in contexts are now memoized.\n\nConflicts:\n	src/dotty/tools/dotc/core/Contexts.scala\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Mar 31 14:53:44 2014 +0200]"},
{"name" : "d173cc048ebdbff30f6537f207118fc5717b8787", "time" : 1396270360, "y" : 3481, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Renaming clear->setNew\n\nclear is wrong. E.g. clearTyperState does not clear the typerstate at all. It installs a\nfresh (i.e. cloned) copy of the previous one. clearScope is also wrong; it installs a new\nscope, does not clear the current one.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Mar 31 14:52:40 2014 +0200]"},
{"name" : "cac8c752b626bc0a5f872572f8ec07274f5e9e0e", "time" : 1396270360, "y" : 3481, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Added implementation of TypeTestsCasts#box\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Mar 31 14:52:40 2014 +0200]"},
{"name" : "5c1a1498c7215935d466379d7fa85f88f4a001c7", "time" : 1396270347, "y" : 3481, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Maintaining owners during transformations\n\nThe transformation framework needed to be changed so that contexts passed to\ntransformations have correct owner chains. These owner chins are demanded by\nthe Splitter phase.\n\nNote: I eliminated the contexts array in TransformInfo because it interfered\nwith the owner computations. Generally, caching contexts with some phase is best\ndone in Contexts, because withPhase is also used heavily in othre code, not just in\nTransformers.\n\nNew phase: Splitter\n\nWhen it is complete, it will make sure that every term Ident and Select node\ncarries a symbol. Right now, all it does is coverting self reference idents to\n\"this\"-nodes.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Mar 31 14:52:27 2014 +0200]"},
{"name" : "9bd1e6a99e1cb09a3527e548699d1561e72e36d3", "time" : 1396270328, "y" : 3481, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "More fixes and tests for easure.\n\n1. Object_isInstanceOf/asInstanceOf are no longer parameterized methods (seems there's\nno point in writing x.$asInstanceOf[T]() instead of the shorter x.$asInstanceOf[T]).\n\n2. Array constructor's type is unchanged (the previous rules erased it to\n\n    def <init>(len: Int)Object\n\nwhich is clearly wrong).\n\n3. indexing needs to be disabled.\n\n4. typedTypeApply needs to keep type applications that apply to type tests and type casts as well as\narray ops.\n\n5. References to self-ids are typed ThisType(cls) before erasure; are replaced by This(cls) references\nduring erasure.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Mar 31 14:52:08 2014 +0200]"},
{"name" : "fc4648d33a051ff5d220c2fea097fc99b5883ecc", "time" : 1396270328, "y" : 3481, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add -Ycheck capability\n\nRight now uses a super-rudementary tree checker: we only check that every tree\nhas a type.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Mar 31 14:52:08 2014 +0200]"},
{"name" : "26b8ec48adec709cf2b07b470ada774c708e96a4", "time" : 1396270328, "y" : 3481, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Adapting containsPhase to phase groups\n\nA list of names contains a phasegroup if it contains\nany phase in the group.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Mar 31 14:52:08 2014 +0200]"},
{"name" : "a73b510b82460247524a07a6dd4f0bfaac74ccfc", "time" : 1396270328, "y" : 3481, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Avoiding type applications after erasure.\n\nMethods appliedTo and translateParameterizes only apply before erasure (except on arrays).\nAlso, computation of a potential expensive yet redundant lub in assignType(SeqLiteral) is\navoided.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Mar 31 14:52:08 2014 +0200]"},
{"name" : "e5d51859bd3d6fd0b286aa6c8e710f33f95b97cd", "time" : 1396270328, "y" : 3481, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Added dummy pattern matcher\n\nat the place forseen for the real pattern matcher, so that following\ntransformations do not have to deal with patterns.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Mar 31 14:52:08 2014 +0200]"},
{"name" : "ad437d8fa9bd4127889569952ae6fdb048d2b1ec", "time" : 1396270328, "y" : 3481, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make primitive conversions work also for non-numeric types\n\nIf the arguments to a primitive conversion are not both numbers, the\nconversion will either return the argument itself, or throw a ClassCastException.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Mar 31 14:52:08 2014 +0200]"},
{"name" : "c62d021cdcc0a3dda6daffd74daf8eaf48aeae88", "time" : 1396270328, "y" : 3481, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix in NamedType#denot\n\nNeed to update checkedPeriod when new denotation is computed.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Mar 31 14:52:08 2014 +0200]"},
{"name" : "dd53b26706254985ba6b4faa9c89272571857906", "time" : 1396270328, "y" : 3481, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixing completion phase\n\nA completer for a lazytype should run in the first phase\nof the validity period of the denotation that gets completed.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Mar 31 14:52:08 2014 +0200]"},
{"name" : "5d9feeffbf0cdbb93db9d82b1a11202e6943e950", "time" : 1396088010, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #101 from dotty-staging/transform/erasure\n\nTransform/erasure", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Sat Mar 29 11:13:30 2014 +0100]"},
{"name" : "a926843e01a5f392a6d2b38858e5874bdb72fe1f", "time" : 1396083019, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #93 from namin/update-scala\n\nUpdate to Scala 2.11.0-RC3.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Sat Mar 29 09:50:19 2014 +0100]"},
{"name" : "d26d18926d886468406a70ecf676e899c939de9f", "time" : 1396081975, "y" : 3496, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixes to erasure\n\nVarious fixes to the tree transformer.\n\nIn the denotation transformer we now keep self types around because otherwise\nsourceModule would stop to work.\n\nConflicts:\n   src/dotty/tools/dotc/core/transform/Erasure.scala\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Mar 29 09:32:55 2014 +0100]"},
{"name" : "e8748e29279f30167516ef7ca8d24f4e4229687f", "time" : 1396081752, "y" : 3496, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Take phase control settings into account\n\nRun now interprets correctly\n\n     -YstopBefore\n     -YstopAfter\n     -Yskip\n     -Tprint\n\nphase settings. For now, we stop by default before\nerasure, until erasure is fully debugged.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Mar 29 09:29:12 2014 +0100]"},
{"name" : "35de6f1847d2d6dc5bde3d97929933525b3f13f8", "time" : 1396081752, "y" : 3496, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Enable squashed phases by default.\n\nSquash was accidenbtally turned off before. Is now on again.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Mar 29 09:29:12 2014 +0100]"},
{"name" : "37cf9efe509b0bac4fb6bda01b7126e7511e43f0", "time" : 1396081745, "y" : 3496, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Erasure phase PoC\n\nStill missing: bridge method generation, signatures.\n\nOther changes\n\n - Turned around Checking and NoChecking. Checking is the default, NoChecking\n   disables it.\n\n - Refactored Typer#typed to expose typedNamed, so that it can be overridden in\n   erasure.\n\n - Made logging more forgiving wrt off-buy-one phase errors.\n\nConflicts:\n	src/dotty/tools/dotc/typer/Typer.scala\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Mar 29 09:29:05 2014 +0100]"},
{"name" : "0a1e969cb09e953d6b3f3b64b63a050588aa3360", "time" : 1396081001, "y" : 3496, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Summary printing\n\nAdded general way to produce summaries when shwowing trees or types.\nSummaries have limited, configrable recusion depth.\nfix showSummary\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Mar 29 09:16:41 2014 +0100]"},
{"name" : "21c92528ca6598a918e096601d49f99cc61b4582", "time" : 1396080989, "y" : 3496, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix error message for missing parameters\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Mar 29 09:16:29 2014 +0100]"},
{"name" : "0871953f2278d0f4f9797fd8e9dac25857c499fd", "time" : 1396080969, "y" : 3496, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "More flexible () applications.\n\nNew method ensureApplied which will add a () parameter list if\na tree's widened type takes parameters.\n\nUsed in numericConversion, so that we are independent whether we\nrun before () insertion or after. With that change TypeTestCasts can stay enabled for\nthe whole build.\n\nConflicts:\n	src/dotty/tools/dotc/ast/tpd.scala\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Mar 29 09:16:09 2014 +0100]"},
{"name" : "5c36442c4781fac97edfd196c9aa15dd35084a65", "time" : 1396080618, "y" : 3496, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Transform for normalizing type tests and type casts\n\nTo be executed before erasure.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Mar 29 09:10:18 2014 +0100]"},
{"name" : "6a35e3018081a1a8dd90a3e24200223fdbfdce7f", "time" : 1396080610, "y" : 3496, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Reworked erasure denotation transformer\n\nNow works for all combinations of\n\n    java/scala\n    sue ErasedValueClass/go directly to underlying type\n    constructors/others\n    wildcards ok/not\n\nSignatures had to be refined as well, because the signature depends\non whether a type comes form Java or Scala (handling of intersections\nis different).\n\nAlso, replaced splitArray method in TypeApplication by extractors for\nsingle- and multi-dimensional array types in definitions.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Mar 29 09:10:10 2014 +0100]"},
{"name" : "6db08e9457a8bcb093b8c8e79109f7ef419729c2", "time" : 1395931489, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #100 from DarkDimius/treetransform-next\n\nGive phases periods, not only id's", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Thu Mar 27 15:44:49 2014 +0100]"},
{"name" : "ded9e61673261bf4534ee6b5a66ff9b5554a6ed0", "time" : 1395928973, "y" : 3506, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix #95: Phases now have their own periods.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Mar 27 15:02:53 2014 +0100]"},
{"name" : "97faee5a82b40b4c980c8cb222ff5ac4cb9083a4", "time" : 1395928973, "y" : 3506, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : " Rename methods on FreshContext to make mutation obvious\n\nAnd avoid name clashes\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Mar 27 15:02:53 2014 +0100]"},
{"name" : "a6419fbd80bb63413de671af331ae35da4fa4e1b", "time" : 1395920569, "y" : 3506, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix Denotations#current\n\nThe logic for dealing with periods in denotation histories did not\ncorrectly take into account the case where the current validity period of\na denotation ends some phases before the next type transformer starts.\n\nAnd there was an off-by-one error in startPid.\n\nAnd Types#computeDenot erroneously tried to reload denotations even\nthe run did not change.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Mar 27 12:42:49 2014 +0100]"},
{"name" : "29c876a40adaae17d4f47cee906243bda9d8e606", "time" : 1395920279, "y" : 3506, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix context.withPhase\n\nPrevious version was wrong because every context is a fresh context at runtime,\nso the overriding version would always be executed, which means that withPhase\nbecomes a side-effecting operation!\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Mar 27 12:37:59 2014 +0100]"},
{"name" : "0e2deaa32e57661743b2cf243833cafee5388b70", "time" : 1395920261, "y" : 3506, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Changes to how we compute type parameters\n\nAim: Avoid expensive scanning of definitions in denotations other than the initial one.\n\nTechnique:\n\n1. If phase is erased, type params is Nil (except for Array class)\n2. Otherwise, type params is the same as it was in initial phase.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Mar 27 12:37:41 2014 +0100]"},
{"name" : "ce372c540c5a879db5bf9792b3448ca932f503e5", "time" : 1395920252, "y" : 3506, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Reworked phases.\n\nAims\n\n1) next/prev should be context-independent. Phase now stores\nits ContextBase in a field.\n\n2) More robust handling of phaseNamed and the phase properties\nerasedTypes, flattened, refchecked, etc. These were previously\ndependent on when the first call to any of these methods was made, which\nled to a data race.\n\nThere is now an init method in phases which centralizes all necessary intialization.\nIt is checked that a phase is initialized only once.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Mar 27 12:37:32 2014 +0100]"},
{"name" : "2dbca84df85c1336e567dae60dd6752f7dd1bea7", "time" : 1395763843, "y" : 3512, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Update to Scala 2.11.0-RC3.\n\nThis was needed for running dotc.Main using latest Scala IDE 2.11 release.\n", "author" : "PersonIdent[Nada Amin, namin@alum.mit.edu, Tue Mar 25 17:10:43 2014 +0100]"},
{"name" : "7c5dd005fcb34966b87ccef65e1a51d24da4d7b9", "time" : 1395683184, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : " Merge pull request #89 from dotty-staging/fix/transform-contexts\n\nFix phase of context for denotation transformer\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Mar 24 18:46:24 2014 +0100]"},
{"name" : "d9463d7f79f936b7082ce5498d121229e45977a7", "time" : 1395680098, "y" : 3514, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix phase of context for denotation transformer\n\nThe phase is now always the phase on which the denotation transformer is defined.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Mar 24 17:54:58 2014 +0100]"},
{"name" : "83449e14d55a37e4925dc05701f35c6e89cbf2f6", "time" : 1395679732, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #86 from dotty-staging/fixes\n\nFixes for various txxxx tickets", "author" : "PersonIdent[Sébastien Doeraene, sjrdoeraene@gmail.com, Mon Mar 24 17:48:52 2014 +0100]"},
{"name" : "398431a096768ecce5d7a637d4d93f55a0cbd68e", "time" : 1395503973, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #90 from samuelgruetter/java8-classfiles\n\nClassfileParser: Java8 bytecode (fixes #83)", "author" : "PersonIdent[odersky, odersky@gmail.com, Sat Mar 22 16:59:33 2014 +0100]"},
{"name" : "f40007e5dfec2c7316c4b12ec2b33f4351819aa4", "time" : 1395442151, "y" : 3517, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "ClassfileParser: apply scala commit e78896f (invokedynamic)\n", "author" : "PersonIdent[Samuel Gruetter, samuel.gruetter@epfl.ch, Fri Mar 21 23:49:11 2014 +0100]"},
{"name" : "9b17c6c86f3150afa7b5b395c23ec3fdf9c14200", "time" : 1395423575, "y" : 3518, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix of Fix of t1236: higher-kinded\n\nFix of d6df293d2120f2247198cb6646a23c338f7dcbbf. It turned out the original commit\nwas faulty in that iterator.flatten did not typecheck. The problem is fixed in this\ncommit and flatten is added to the collections test.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Mar 21 18:39:35 2014 +0100]"},
{"name" : "357d5ccd88a11db8cb11ebccf4675fc34c133134", "time" : 1395402098, "y" : 3517, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "ClassfileParser: apply scala commit b2c67b3 (java8 default methods)\n", "author" : "PersonIdent[Samuel Gruetter, samuel.gruetter@epfl.ch, Fri Mar 21 12:41:38 2014 +0100]"},
{"name" : "b49bba08633c216175095effab71dac2a133a0c3", "time" : 1395399052, "y" : 3517, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "ClassfileParser: apply scala commit f91242c6959471b6c463538be\n", "author" : "PersonIdent[Samuel Gruetter, samuel.gruetter@epfl.ch, Fri Mar 21 11:50:52 2014 +0100]"},
{"name" : "5f318bc925c227d2bce5cff31610803185b57f54", "time" : 1395397711, "y" : 3518, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix of t1272: overloading resolution\n\nstripImplicits needs to take polytypes into account.\n", "author" : "PersonIdent[Tobias Schlatter, tobias@meisch.ch, Fri Mar 21 11:28:31 2014 +0100]"},
{"name" : "72a5f392bf11b6474b351cd81a17d0ceeed13dcc", "time" : 1395397710, "y" : 3518, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Reverting decision what constitutes a double def.\n\ntest case t0273. Was positive in Scala 2, is now deemed to be negative.\nTwo two definitions\n\n    def a = () => ()\n    def a[T] = (p:A) => ()\n\ndo have matching signatures, so should constitute a double definition.\nI previously thought that we can get away if the two definitions have\ndifferent result types, but then you immediately have a problem because\nthe denotations have matching signatures for the pruposes of \"&\" yet\ncannot be merged. Which of the two definitions would override\na definition in a base class is then an arbitrary decision.\n", "author" : "PersonIdent[Tobias Schlatter, tobias@meisch.ch, Fri Mar 21 11:28:30 2014 +0100]"},
{"name" : "07939c96715cd5adf7f220d239f61b73dd00edc3", "time" : 1395397710, "y" : 3518, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix of t1279a: baseTypeWithArgs\n\nbaseTypeWithArgs now also keeps track of refinements in the subtypes. Without\nthat, the approximated lub in t1279a is too coarse and the program fails to typecheck.\n", "author" : "PersonIdent[Tobias Schlatter, tobias@meisch.ch, Fri Mar 21 11:28:30 2014 +0100]"},
{"name" : "7e1343e86a0d2575d596198d0f889b7d64cdb5a4", "time" : 1395397710, "y" : 3518, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Refactored lookupRefined\n\nTurned parameter into receiver (reciever was not used before at all).\n", "author" : "PersonIdent[Tobias Schlatter, tobias@meisch.ch, Fri Mar 21 11:28:30 2014 +0100]"},
{"name" : "0dda8a1858c162f74f76a1d4dae158e99a250267", "time" : 1395397710, "y" : 3518, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "More tests, currently disabled\n\nMostly Java interop tests which are not yet supported. The test infrastructure for Java ocmpilation and the java parser from Scala are still missing.\n", "author" : "PersonIdent[Tobias Schlatter, tobias@meisch.ch, Fri Mar 21 11:28:30 2014 +0100]"},
{"name" : "d6df293d2120f2247198cb6646a23c338f7dcbbf", "time" : 1395397710, "y" : 3518, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix of t1236: higher-kinded\n\n(and also of t0625, which reappeared).\n\nSeveral fixes were made. In summary:\n\n1. Naming and representation of KigherKinded traits changed. It's now $HigherKinded$NIP where\nthe letters after the second $ indicate variance (N)egative, (I)nvariant, (P)ositive. The HKtraits\nthemselves are always non-variant in their parameters.\n\n2. When deriving refined types over higher-kinded types, the variance of a type alias\nis the variance of the new type constructor.\n\n3. isSubTypeHK was changed, as was the position from where it is called.\n\n4. appliedTo also works for PolyTypes.\n", "author" : "PersonIdent[Tobias Schlatter, tobias@meisch.ch, Fri Mar 21 11:28:30 2014 +0100]"},
{"name" : "40202eedb940d0614c08b1ba36c8648ed56ea332", "time" : 1395397710, "y" : 3518, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix of t1280 - type of self\n\nThe type of self name \"x\" was taken to be the thisType of the current owner.\nBut the current owner was a local dummy of the class in question, so the ThisType\nwas NoPrefix. Inserting an enclosingClass fixes the problem.\n", "author" : "PersonIdent[Tobias Schlatter, tobias@meisch.ch, Fri Mar 21 11:28:30 2014 +0100]"},
{"name" : "7e51434b89659c49a1cd755c224cc5ca270b82b3", "time" : 1395397710, "y" : 3518, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix for t1292 - legal prefixes\n\nThe original test is now in error because the type Meta in the prefix Meta#Event\nis not stable and contains an abstract member Slog.\n\nEven after removing Slog, the test in pos was still in error because the bound type parameters\nwere incorrectly recognized as abstract members. This has been fixed by the changes to Types.\n", "author" : "PersonIdent[Tobias Schlatter, tobias@meisch.ch, Fri Mar 21 11:28:30 2014 +0100]"},
{"name" : "c854cc7fcc9d0f889c6235c1534133cff7360e7f", "time" : 1395397710, "y" : 3518, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "More tests\n", "author" : "PersonIdent[Tobias Schlatter, tobias@meisch.ch, Fri Mar 21 11:28:30 2014 +0100]"},
{"name" : "474b35ff0160c1174674757895e93818dc4f2f19", "time" : 1395397710, "y" : 3518, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix of t1123 - Unit discarding\n\nNeed to do unit discarding also in selection prototypes.\n", "author" : "PersonIdent[Tobias Schlatter, tobias@meisch.ch, Fri Mar 21 11:28:30 2014 +0100]"},
{"name" : "0a1ec31c2a17c5dd0e6bd363979cbf17a8860616", "time" : 1395397710, "y" : 3518, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix of t112606A - path dependent types\n\nNeeded an extra case in isSubType.\n", "author" : "PersonIdent[Tobias Schlatter, tobias@meisch.ch, Fri Mar 21 11:28:30 2014 +0100]"},
{"name" : "7820e62e30a63f2b8fd6b8bab8f96be6924a63a1", "time" : 1395397710, "y" : 3518, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix of t1056 - PartialFunction\n\ntype T was not recorgnized as a SAM type because a case was missing in zeroParamClass.\n", "author" : "PersonIdent[Tobias Schlatter, tobias@meisch.ch, Fri Mar 21 11:28:30 2014 +0100]"},
{"name" : "77d1c83ff67894bf87d37bfb8982d818fdc88f73", "time" : 1395397710, "y" : 3518, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix of t0625 - compare method types\n\nMethod type comparison via <:< yielded false if the signatures of the two method types differed.\nThis is too strict, because methods can have the same parametyers but different result types and still\nbe in a subtype relationship. We now onyl demand that the sighatures have the same parameters.\n", "author" : "PersonIdent[Tobias Schlatter, tobias@meisch.ch, Fri Mar 21 11:28:30 2014 +0100]"},
{"name" : "90f430bfb9178e49dc112bacf5b250d0780dcd1e", "time" : 1395397710, "y" : 3518, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "More tests\n\nwhich all pass.\n", "author" : "PersonIdent[Tobias Schlatter, tobias@meisch.ch, Fri Mar 21 11:28:30 2014 +0100]"},
{"name" : "7bf837c79315e5db7e049f3ffeb6c6842d18880c", "time" : 1395397444, "y" : 3518, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix of t0774: empty file\n\nWas previously wrapped in a\n\n    package <empty>\n\nbut the resulting tree had no position, which caused a Typer assertion. If now\nrepresented as EmptyTree.\n", "author" : "PersonIdent[Tobias Schlatter, tobias@meisch.ch, Fri Mar 21 11:24:04 2014 +0100]"},
{"name" : "2c2ab10958e27ced276c9906f18a67c1eddd1928", "time" : 1395397444, "y" : 3518, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix of t0786: view bounds\n\nPreviously, only implicit method types were eligible as views. This is too strict,\nas it rules out view bounds. We now also consider types that derive from Function1.\nThe reason for not allowing any type is that this would cause us to check many more\ntypes for applicability when an implicit view is searched.\n", "author" : "PersonIdent[Tobias Schlatter, tobias@meisch.ch, Fri Mar 21 11:24:04 2014 +0100]"},
{"name" : "6436fa67e561442ef2e2d9b99852a50f323ccacc", "time" : 1395397443, "y" : 3518, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "More tests\n\nAdded more tests which all pass, except for tests in disabled and pending.\n\nt0694 went from pos to neg, because the kind of alias type used in t0695 is no longer supported.\n", "author" : "PersonIdent[Tobias Schlatter, tobias@meisch.ch, Fri Mar 21 11:24:03 2014 +0100]"},
{"name" : "6f1ef32d728320c31cc59daad0f4849c9cd0a87c", "time" : 1395397443, "y" : 3518, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix of t0591: implicitly\n\nA debug assertion in implicitSearch gave a false alarm and was removed.\n", "author" : "PersonIdent[Tobias Schlatter, tobias@meisch.ch, Fri Mar 21 11:24:03 2014 +0100]"},
{"name" : "4b57b3d877ca7b66b4cb2e588493d2933ae041bf", "time" : 1395397443, "y" : 3518, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix of t0504: _root_ not found\n\n_root_ is now entered into an enclosing context.\n", "author" : "PersonIdent[Tobias Schlatter, tobias@meisch.ch, Fri Mar 21 11:24:03 2014 +0100]"},
{"name" : "ee1251f37f844bdb4f4ea69177e8183ad74e7b3d", "time" : 1395397443, "y" : 3518, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix of t0438 - lambdas and eta expansion\n\nTwo fixes were needed\n\n1) When typing a function value (x1: T1, ..., xN: Tn) => e, don't unconditionally issue an error\n   if the expected function type arity is different from N. Instead, issue an error only\n   if one of the types T1, ..., Tn is absent. The idea is that only then we need to\n   consult the expected type for the parameter type. This allows to fix the problem later\n   by an implicit conversion applied to the function value.\n\n2) When eta-expanding, do not automtically take the arity of the expected function value as the\n   arity of the generated lambda. Instead, take the method's arity, and copy method parameters\n   into the lambda in case the arities are different.\n", "author" : "PersonIdent[Tobias Schlatter, tobias@meisch.ch, Fri Mar 21 11:24:03 2014 +0100]"},
{"name" : "bb90b26fbca27f432ade46ae572b82e1b8027b19", "time" : 1395397443, "y" : 3518, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Tests t01xx and t02xx\n\nTest t0288 moved to disabled due to lack of Java interop.\nTest t0273 fixed by relaxing double def condition: We only regard two\ndefinitions that define the same name and have exactly the same signature\nas double definitions. Previously, signatures that defined the same parameters\nwere also excluded.\n", "author" : "PersonIdent[Tobias Schlatter, tobias@meisch.ch, Fri Mar 21 11:24:03 2014 +0100]"},
{"name" : "a7d47ab54cbfb324dec4ee1594e24738cd54113a", "time" : 1395396799, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #87 from gzm0/context-in-prep-transform\n\nMake context available in TreeTransform.prepareForXX methods", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri Mar 21 11:13:19 2014 +0100]"},
{"name" : "fd76c38000f206b3d27ac68eaeddb0f76678dfc2", "time" : 1395389879, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #88 from dotty-staging/try/hygienic-desugaring\n\nTry/hygienic desugaring", "author" : "PersonIdent[odersky, odersky@gmail.com, Fri Mar 21 09:17:59 2014 +0100]"},
{"name" : "e50646c21cbc842c1188fc876e16ea2b3e2a2ea3", "time" : 1395343505, "y" : 3544, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Minor improvements to tests (remove old comments)\n", "author" : "PersonIdent[Tobias Schlatter, tobias@meisch.ch, Thu Mar 20 20:25:05 2014 +0100]"},
{"name" : "a4516eac1be98830c99ea48e9baedf022dfcb9f7", "time" : 1395343505, "y" : 3544, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Hygienic desugaring\n\nMade desugaring hygienic. Trees that are derived from some other tree are no longer stored as simple\nuntyped Ident trees, but as TypeTrees that know how to derive their types from some other type.\n\nTest cases in pos: hygiene.scala, t0054.scala and t0085.scala.\n\nThe comment in hygiene.scala points to the difficulties we are facing. In particular, we need type\ntrees that can rebind some references of a source type to local occurrences with the same name. t0054.scala is similar to hygiene.scala. t0085.scala is trickier, but also related. Essentially the problem there is that we have a class\nthat inherits its outer class. In this case it is important to resolve an identifier in the right context. The identifier added to the copy method of a case class must be resolved outside the class (just like the same\nidentifier in the constructor of that case class).\n", "author" : "PersonIdent[Tobias Schlatter, tobias@meisch.ch, Thu Mar 20 20:25:05 2014 +0100]"},
{"name" : "5b687fbee23060fbed285f090e3592f2b8cb6beb", "time" : 1395343505, "y" : 3544, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Generalize derived type tree scheme.\n\nTo get truly hygienic desugared trees, we need a derived type tree scheme that's more\nflexible than just the previous two choices of info-of-symbol and typeref-of-symbol.\nThe new scheme based on DerivedTypeTrees allows arbitrary methods to derive the type tree's type.\n", "author" : "PersonIdent[Tobias Schlatter, tobias@meisch.ch, Thu Mar 20 20:25:05 2014 +0100]"},
{"name" : "3ba0931636a5d34ca2da9588f2952af709d41ace", "time" : 1395343505, "y" : 3544, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "New scheme for TypeTrees that refer to others\n\nAdds a new scheme by which a TypeTree() can refer for its type to the symbol of some other type.\nApplies the scheme to setter parameters, replacing the previous ad-hoc solution.\n", "author" : "PersonIdent[Tobias Schlatter, tobias@meisch.ch, Thu Mar 20 20:25:05 2014 +0100]"},
{"name" : "ce466da9fd5b2601c91e351fd1d288099ec380b2", "time" : 1395343505, "y" : 3544, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Better diagnostics for failing stub count tests\n", "author" : "PersonIdent[Tobias Schlatter, tobias@meisch.ch, Thu Mar 20 20:25:05 2014 +0100]"},
{"name" : "fae8d8eabd184b27980bc15d2adb360b12db47e1", "time" : 1395327524, "y" : 3549, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Make context available in TreeTransform.prepareForXX methods\n", "author" : "PersonIdent[Tobias Schlatter, tobias@meisch.ch, Thu Mar 20 15:58:44 2014 +0100]"},
{"name" : "b5864b48d04adf6cab1dbe58d394ad608dafd440", "time" : 1395317415, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #85 from dotty-staging/topic/language-features\n\nTopic/language features", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Thu Mar 20 13:10:15 2014 +0100]"},
{"name" : "3eab4101f516ececde15df74ca382a9fd7018fa8", "time" : 1395316960, "y" : 3551, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Removed annotations forced by union types\n\nRemoved annotations from the dotty codebase that were necessary because the inferred union types\ncaused inference errors later on.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Mar 20 13:02:40 2014 +0100]"},
{"name" : "4611bdf0972fc01dfdfa647a0e84e3bccf98ea05", "time" : 1395316960, "y" : 3551, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Appromiximate union types by intersections.\n\nAppromiximate union types by intersections of their common base classes. Controlled by option -Xkeep-unions.\nIf option is set, no approximation is done.\n\nMotivations for approximating: There are two. First, union types are departure from Scala 2. From time to\ntime they lead to failure of inference. One example experiences in Dotty was in a foldLeft, where the accumulator\ntype was inferred to be Tree before and was now a union of two tree specific kinds. Tree was the correct type, whereas\nthe union type was too specific. These failures are not common (in the Dotty codebase there were 3, I believe), but\nthey cause considerable difficulty to diagnose. So it seems safer to have a compatibility mode with Scala 2.\nThe second motivation is that union types can become large and unwieldy. A function like TreeCopier has a result\ntype consisting of ~ 40 alternatives, where the alternative type would be just Tree.\n\nOnce we gain more experience with union types, we might consider flipping the option, and making union types the\ndefault. But for now it is safer this way, I believe.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Mar 20 13:02:40 2014 +0100]"},
{"name" : "021c251869ddeccc9ff91ab5c0867a11f3c8cea3", "time" : 1395316960, "y" : 3551, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge refined types when distributing via \"|\".\n\nUse the equality (where ~ is any form of refinement)\n\n  T1 { x ~ R1 } & T2 { x ~ R2 }  ==  T1 & T2 { x ~ R1 & R2 }\n\nWe already did the same thing when distributing via \"&\".\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Mar 20 13:02:40 2014 +0100]"},
{"name" : "88c4a6cddefb6bf3e7d1ac3c61358cc06abd8bd4", "time" : 1395316960, "y" : 3551, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Allow And/OrTypes in baseType operations\n\nIntroduce new cases for AndTypes and OrTypes in methods `derivesFrom`, `baseClasses`, and `baseTypeWithArgs`.\nThese cases are ultimately needed so that `baseTypeWithArgs` makes sense for union and intersection types.\n\nAlso, fixed embarrassing typo in method `TypeBounds#|`.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Mar 20 13:02:40 2014 +0100]"},
{"name" : "7a04b119c9744262bd46c1795b811f56df9516a6", "time" : 1395316960, "y" : 3551, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Removed explicit tuplings from dotc codebase.\n\nEliminated all \"Dotty deviations\" which were due to lack of auto-tupling.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Mar 20 13:02:40 2014 +0100]"},
{"name" : "574a148fd561a793ee522c2be18ee02214236d80", "time" : 1395316949, "y" : 3551, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Added auto-tupling.\n\nAuto-tupling should satisfy the following spec.\n\n1. An application `f(args)` where `f` is a non-overloaded method which has a single, non-repeated parameter as its\nfirst parameter list and where args consists of two or more arguments is expanded to `f((args))`.\n\n2. A constructor pattern `C(args)` where `C.unapply` is a non-overloaded method which has a single, non-repeated parameter as its first parameter list and where args consists of two or more arguments is expanded to `C((args))`.\n\nAuto-tupling can be disabled by language feature \"noAutoTupling\".\n\nConflicts:\n	test/dotc/tests.scala\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Mar 20 13:02:29 2014 +0100]"},
{"name" : "bff6b093d28bfc6918fa86d640353ba60b1a24e4", "time" : 1395316059, "y" : 3551, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Add language feature mechanism\n\nAdd a method \"featureEnabled\" that checks whether a feature is enabled. Features can be enabled\nby imports or by command-line options. The Scala 2.10 way of enabling features by implicits got\ndropped, because the use of the feature mechanism is now different.\n\nPreviously, features imposed restrictions on what used to work. So it was important to offer\nway to avoid the restrictions it that was as smooth as possible, and implicits fit the bill.\nFurthermore, features did not change the way things were compiled, so it was OK to test them\nonly once all types were compiled.\n\nNow, features are essentially switches that change compile time behavior. keepUnions and\nnoAutoTupling, if on, will modify the way type inference works. So we need to interprete a\nswitch on the spot, and doing an implicit search to determine a switch value is too dangerous\nin what concerns causing cyclic references. At the same time, because we are dealing with\nnew functionality, there is less of a concern for being able to set or reset features for large\npieces of code with some implicit. You could argue that's not even desirable, and that an\nexplicit import or command line option is preferable.\n\nConflicts:\n	src/dotty/tools/dotc/core/SymDenotations.scala\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Mar 20 12:47:39 2014 +0100]"},
{"name" : "2df29a28c8e0b2e36a341f5f969b00aee727b188", "time" : 1395311671, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #81 from DarkDimius/integration/lazy\n\n Allow MiniPhase to be DenotTransformer & LazyVals", "author" : "PersonIdent[odersky, odersky@gmail.com, Thu Mar 20 11:34:31 2014 +0100]"},
{"name" : "e23b5a25baf491672fd2f0cee8e6fb5dc7b5a5ca", "time" : 1395309543, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #84 from samuelgruetter/srewrite-tests-1\n\nExplicit types for implicits in tests/untried", "author" : "PersonIdent[odersky, odersky@gmail.com, Thu Mar 20 10:59:03 2014 +0100]"},
{"name" : "d51d08b444e0ea4a2c13b4daf0ce14b53bfbad89", "time" : 1395248029, "y" : 3560, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "move all tests in tests/untried/neg which use implicits to tests/untried/neg-with-implicits\n", "author" : "PersonIdent[Samuel Gruetter, samuel.gruetter@epfl.ch, Wed Mar 19 17:53:49 2014 +0100]"},
{"name" : "24ac35546c2c159403e91144e0e4add585ee9ae5", "time" : 1395247019, "y" : 3560, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "apply srewrite (no procedure syntax for constructors) to tests/untried/neg\n", "author" : "PersonIdent[Samuel Gruetter, samuel.gruetter@epfl.ch, Wed Mar 19 17:36:59 2014 +0100]"},
{"name" : "33b0e7b1ab0e71f525c75705dcd91b4b7d9d0994", "time" : 1395245266, "y" : 3560, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "apply srewrite (explicit types for implicits + no procedure syntax\n\nfor constructors) to tests/untried/pos\n", "author" : "PersonIdent[Samuel Gruetter, samuel.gruetter@epfl.ch, Wed Mar 19 17:07:46 2014 +0100]"},
{"name" : "09d02bd3670b947da147aec40835822d894b17b0", "time" : 1395240827, "y" : 3563, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Allow MiniPhase to be DenotTransformer\n\nAll MiniPhases now as are full-fledged phases,\nand are given their own periods and can register DenotTransformers.\nMiniPhases belonging to same group(list) will be squashed to single phase.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 19 15:53:47 2014 +0100]"},
{"name" : "5cbd2fbc8409b446f8751792b006693e1d091055", "time" : 1395234827, "y" : 3563, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "LazyVals phase.\n\nCreates accessors for lazy vals:\n1) lazy local vals are rewritten to dotty.runtime.Lazy*** holders\n2) for a non-volatile field lazy val create a non-thread-safe accessor and flag:\n2.a) if lazy val type indicates that val is not nullable, uses null value as a flag\n2.b) else uses boolean flag for sake of performance, method size, and\nallowing more jvm optimizations\n3) for a volatile field lazy val use double locking scheme, that guaranties no\nspurious deadlocks, using long bits as bitmaps and creating companion\nobjects to store offsets needed for unsafe methods.\n\nConflicts:\n	test/dotc/tests.scala\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 19 14:13:47 2014 +0100]"},
{"name" : "1dfe6567fee9626106211088e41c4683342ec0f8", "time" : 1395219226, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #79 from DarkDimius/noxml\n\nRemove dependency on scala-xml.", "author" : "PersonIdent[odersky, odersky@gmail.com, Wed Mar 19 09:53:46 2014 +0100]"},
{"name" : "46856320f4e21d94b3c5c29a921efac40e12421f", "time" : 1395155193, "y" : 3563, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Re-enabled and renamed tests\n\nCreateCompanionObjectTests were re-enabled. They failed in a previous version but succeed again in the latest commit.\nAlso uncurry.scala got renamed to curried.scala.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Mar 18 16:06:33 2014 +0100]"},
{"name" : "1dbf020c43639b0c37e9005f2692871d39676ac7", "time" : 1395155193, "y" : 3563, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Refactored denotation transformers\n\nMany small and large changes. Added samplePhase to demonstrate functionality.\n\nTo test functioning, run the compiler with args\n\n     tests/pos/uncurry.scala -Ylog:sample,terminal\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Mar 18 16:06:33 2014 +0100]"},
{"name" : "76ea699ac1a76ee6048d7fe8239d0a1126581429", "time" : 1395155193, "y" : 3563, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Renaming core.Transformer(s) -> core.DenotTransformer(s)\n\nTo bring in line with TreeTransformer terminology.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Mar 18 16:06:33 2014 +0100]"},
{"name" : "9c7cf4ee6196e0ec9ac7c7701de417bd9cb31c43", "time" : 1395155193, "y" : 3563, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Renamings TreeTransformer -> TreeMap, TreeMapper -> TreeTypeMap\n\nThis makes naming uniform between trees and types, and also avoids the clash with\ntransform.TreeTransformer. The idea is that transformers are parts of phases, and\nhave logic that is phase-specific. In particular, a context is passed around when\ntransforming a tree. Maps are simpler, they only have a T -> T apply method.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Mar 18 16:06:33 2014 +0100]"},
{"name" : "164ecb70593728ce218e04f4e316a32ae346e4b7", "time" : 1395155193, "y" : 3563, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Reorg of info transformer framework\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Mar 18 16:06:33 2014 +0100]"},
{"name" : "517ca50c8b0efb2bc58eec89df9b62469d98e877", "time" : 1395138437, "y" : 3571, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Remove dependency on scala-xml.\n\nMimic https://github.com/scala/scala/commit/4e9b33ab24bb3bf922c37a05a79af364b7b32b84\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Mar 18 11:27:17 2014 +0100]"},
{"name" : "a30efa6426474e7cb097be1bb4e05933c213fe90", "time" : 1395069160, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #76 from retronym/topic/defPath-accum\n\nTest and refactor TreeInfo#defPath", "author" : "PersonIdent[odersky, odersky@gmail.com, Mon Mar 17 16:12:40 2014 +0100]"},
{"name" : "c208fe98d47b64b480d64a065861f9c115c9932e", "time" : 1394985651, "y" : 3573, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Refactor TreeInfo#defPath\n\nUses a TreeAccumulator, rather than ad-hoc descent through `productIterator`.\n", "author" : "PersonIdent[Jason Zaugg, jzaugg@gmail.com, Sun Mar 16 17:00:51 2014 +0100]"},
{"name" : "fd1214cfff0bf8a257a85e1ef44047ed6de000a2", "time" : 1394985480, "y" : 3573, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Test case for TreeInfo#defPath\n\nI'm about to refactor that method in terms of a TreeAccumulator.\n\nNote that I've packaged the test case in `dotty.tools.dotc.ast`\n I believe this is the best approach for organizing unit tests:\n the import tax is minimized, and use of relative imports is\n made less fragile by avoiding creating new packages to test code.\n\nI'll reorganize the other unit tests like this if others agree.\n", "author" : "PersonIdent[Jason Zaugg, jzaugg@gmail.com, Sun Mar 16 16:58:00 2014 +0100]"},
{"name" : "027abb4de0710b17ba92499f231d0b0d6467831a", "time" : 1394971630, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #69 from odersky/topic/generalize-companions\n\nBullet-proofing companion objects", "author" : "PersonIdent[odersky, odersky@gmail.com, Sun Mar 16 13:07:10 2014 +0100]"},
{"name" : "6a97264962f9e50565a18ba68669c32ca29e90f4", "time" : 1394801156, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #71 from odersky/fixes-for-transforms\n\nFixes for transforms", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Fri Mar 14 13:45:56 2014 +0100]"},
{"name" : "3bdc44f8984a565583fa5f3170edd9146aec1d5b", "time" : 1394800632, "y" : 3577, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Reset frozen for transformed class denotations.\n\n... so that we can add new members to transformed class denotations.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Mar 14 13:37:12 2014 +0100]"},
{"name" : "8b2a63fa3ce33e271c5c8ba92253e4f412f18a9b", "time" : 1394800596, "y" : 3577, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Stop running phases after errors were encountered\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Mar 14 13:36:36 2014 +0100]"},
{"name" : "8be53e728408f6d546a7fe990af9cd5e99db6250", "time" : 1394789769, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #70 from odersky/fix/annotations-in-patterns\n\nFixed two problems with annotated types in patterns", "author" : "PersonIdent[odersky, odersky@gmail.com, Fri Mar 14 10:36:09 2014 +0100]"},
{"name" : "722661c0bada3a8e64512bda2ac7501b1c02ec10", "time" : 1394786657, "y" : 3580, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixed two problems with annotated types in patterns\n\nProblem 1: The parser did not accept them. It has to accept a \"RefinedType\" as an ascription,\nnot a \"WithType\" (as it did before), or even a \"SimpleType\" (as speced in the SyntaxSummary).\n\nProblem 2: Annotations are always typed as expressions. The annotations in question were typed\nas patterns before.\n\nTests in Patterns.scala and in the Dotty compiler itself.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Mar 14 09:44:17 2014 +0100]"},
{"name" : "1554fddc964e71285b0c3860ec3834557fdd2cd4", "time" : 1394746601, "y" : 3581, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fixed parse error with @unchecked\n\nDotty currently cannot parse @unchecked annotations in pattern types. That's why the previous commit failed. We need to come back to this and fix it. For the moment, to make on the current branch, the annotation is removed.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Mar 13 22:36:41 2014 +0100]"},
{"name" : "163b16014331ab909aa719b035dbc9491630edae", "time" : 1394743419, "y" : 3581, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Bullet-proofing companion objects\n\nCompanion class/module computations now also work for local classes and modules. For this to work,\neither one of two conditions must be met: (1) some enclosing context refers to a scope that\ncontains the companions. (2) the context's compilation unit has a typed tree that contains the\ncompanions. (1) is usually true when type-checking, (2) when transforming trees.\n\nLocal companions are searched as follows: If (2) holds, we locate the statement sequence containing\nthe companions by searching down from the root stored in the compilation unit. Otherwise, we search\noutwards in the enclosing contexts for a scope containing the\ncompanions.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Mar 13 21:43:39 2014 +0100]"},
{"name" : "f28d7a9423948626f6314b8c6d928b3048433efd", "time" : 1394733832, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #65 from samuelgruetter/scala-tests-raw\n\nAdd untried tests from scala/test/files/{pos,neg}", "author" : "PersonIdent[odersky, odersky@gmail.com, Thu Mar 13 19:03:52 2014 +0100]"},
{"name" : "9cd9d972c5b92e9c3cbb9f8bd6d591812174a74e", "time" : 1394722252, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #64 from DarkDimius/PostTyperTransformer\n\nPost typer transformer", "author" : "PersonIdent[Sébastien Doeraene, sjrdoeraene@gmail.com, Thu Mar 13 15:50:52 2014 +0100]"},
{"name" : "b6cb517570e77c2acf4bc6c8b1e83f922e1fd25f", "time" : 1394721546, "y" : 3585, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "CreateCompanionObjects transformer\n\nA transformer that provides a convenient way to create\ncompanion objects.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Mar 13 15:39:06 2014 +0100]"},
{"name" : "3eabe4aa549ae050d681338e2aa914671bb4c071", "time" : 1394716179, "y" : 3585, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "TreeTransform: add support for transforming stats\n\nAdded a prepareForStats&transformStats pair of methods,\nwhich provide a convinient way to alter scopes of\nPackageDefs, Templates and Block's.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Mar 13 14:09:39 2014 +0100]"},
{"name" : "0089217da35aa2445155622fdb55cf8e6e361d9e", "time" : 1394716168, "y" : 3585, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "PostTyper transformers\n\n1) reorders companion objects so that they allways follow matching\nclasses\n2) removes imports and named arguments\n3) rewrites all trees holding types are to TypeTrees\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Mar 13 14:09:28 2014 +0100]"},
{"name" : "9ef5f6817688f814a3450126aa7383b0928e80a0", "time" : 1394660673, "y" : 3588, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "add tests from scala/test/files/{pos,neg}\n\nwith explicit Unit return type\n", "author" : "PersonIdent[Samuel Gruetter, samuel.gruetter@epfl.ch, Wed Mar 12 22:44:33 2014 +0100]"},
{"name" : "29d2d29b7a5a54b1666294c576b85d38f1dd0989", "time" : 1394655264, "y" : 3585, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix for #55\n\nDistringuish between ModifierFlags -- which can appear in trees -- and SourceModifierFlags -- which are\nmodifiers according to the language spec.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 12 21:14:24 2014 +0100]"},
{"name" : "912b4bcb7aa3c10e756a62d60a8f33ae0f60c01a", "time" : 1394655257, "y" : 3585, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix of #56 - newModuleSymbol & newCompleteModuleSymbol\n\nNeeds new TypeRef creation method that works for NoPrefix and at the same time\ndoes not need a denotation. This is provided by method TermRef.withNakedSymbol.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Wed Mar 12 21:14:17 2014 +0100]"},
{"name" : "194be919664447631ba55446eb4874979c908d27", "time" : 1394653459, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #63 from odersky/implicit-test\n\nAdded test for implicits which fail in Scala 2.11.", "author" : "PersonIdent[odersky, odersky@gmail.com, Wed Mar 12 20:44:19 2014 +0100]"},
{"name" : "7583f76dd120e8c498b43a0855983b97d52ee3fa", "time" : 1394642126, "y" : 3592, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Added test for implicits which fail in Scala 2.11.\n\nMentioned in scala-user by Haoyi Li on 12-Mar-2014\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Mar 12 17:35:26 2014 +0100]"},
{"name" : "db950e5e168f6fd71a367da343e352139e8d653e", "time" : 1394641893, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #61 from odersky/fixes-t00xx\n\nFixes t00xx", "author" : "PersonIdent[odersky, odersky@gmail.com, Wed Mar 12 17:31:33 2014 +0100]"},
{"name" : "66291018e0512b2d4e7d6bac017ab47b95939275", "time" : 1394640313, "y" : 3594, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix constructor completion problem detected in t0054\n\nConstructors need to be completed in the context which immediately encloses\na class. Otherwise type references in the constructor see the wrong types,\nas is demonstrated in t0054. The difficulty here is that the inner class B\nnested in A also extends from A. Then it makes a difference whether the constructor\nparameter types of B are resolved in the context of B or in the context of A.\nAdded explanation for context handling of constructors.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Mar 12 17:05:13 2014 +0100]"},
{"name" : "6e7dd1b0e18bcdd767ea5625f03094bc41a049bd", "time" : 1394639729, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #60 from odersky/fix/#50-volatile\n\nFix/#50 volatile", "author" : "PersonIdent[odersky, odersky@gmail.com, Wed Mar 12 16:55:29 2014 +0100]"},
{"name" : "c90044f7ab4f2ab11a047d25c7430c48b930e82d", "time" : 1394639568, "y" : 3596, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Added lost comment to isVolatile.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Mar 12 16:52:48 2014 +0100]"},
{"name" : "7fa78597bf58a7759303095121a432cb258f447c", "time" : 1394470135, "y" : 3594, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix problems related to t0039\n\nThis test case exercised several problems:\n\n1.)2.) Two ways to run into a cyclic references. Fixed by\n - assuming an early info when completing a typedef, similarly to what is done for a classdef\n - doing wellformed bounds checking in a later phase.\n\nFailure to check whether arguments correspond to F-bounds.\n - a substitution was missing.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Mar 10 17:48:55 2014 +0100]"},
{"name" : "ba8d9ea2e4b887fc0faa1f636aade84c45292144", "time" : 1394460566, "y" : 3594, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix for t1002\n\nNeed to compile the self type of a class not in the context of the class members but one context further out.\nReason: self type should not be able to see the members.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Mar 10 15:09:26 2014 +0100]"},
{"name" : "ac45e122b76a454a06026f280197af0f72140903", "time" : 1394459806, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #54 from odersky/Improve/better-tests\n\nImprove test infrastructure", "author" : "PersonIdent[odersky, odersky@gmail.com, Mon Mar 10 14:56:46 2014 +0100]"},
{"name" : "e1ec7ede675143492510b2d90260a430125e0808", "time" : 1394445824, "y" : 3600, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Improve test infrastructure\n\n1) New method compileFiles which allows one to compile the content of a directory one file or directory\nafter another.\n\n2) max constraint is printed to typr.\n\nAdded new test pos_all. Other pos tests can be retired.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Mar 10 11:03:44 2014 +0100]"},
{"name" : "af337f0667fa559411f9a96355b9ceeabf95b232", "time" : 1394368762, "y" : 3596, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Fix of #50 - volatile\n\nVolatile checking needs to take all intersections into account; previously these\ncould be discarded through needsChecking.\n\nPlus several refactorings and additions.\n\n1) Module vals now have Final and Stable flags set\n2) All logic around isVolatile is now in TypeOps; some of it was moved from Types.\n3) Added stability checking to Select and SelectFromType typings.\n\nTodo: We should find a better name for isVolatile. Maybe define the negation instead under the name\n\"isRealizable\"?.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Mar 9 13:39:22 2014 +0100]"},
{"name" : "07873903f5a9be460a7f9df5e5820c83e51f22b8", "time" : 1394302962, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #49 from DarkDimius/script\n\nBringing back dotc script that was accidentely deleted.", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Sat Mar 8 19:22:42 2014 +0100]"},
{"name" : "d827b0180b05e7461856f668c3c4ca0ea6ed5d62", "time" : 1394302022, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Merge pull request #47 from odersky/try/typer-reorg\n\nTry/typer reorg", "author" : "PersonIdent[odersky, odersky@gmail.com, Sat Mar 8 19:07:02 2014 +0100]"},
{"name" : "1cccbbf939790c980481d2a5ae19b33a6da1dd37", "time" : 1394199789, "y" : 3604, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "comment" : "Bringing back dotc script that was accidentely deleted.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Fri Mar 7 14:43:09 2014 +0100]"},
{"name" : "6aa88d6dfe501a695183761c2b5f4bd201cdf2c0", "time" : 1394187338, "y" : 3605, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 14], "comment" : "Main Typer reorg.\n\nCommon code between tpd and Typer has been factored out into class TypeAssigner.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Mar 7 11:15:38 2014 +0100]"},
{"name" : "dbd5a4d22b6164b708a87b508d9b9f135b44a3ee", "time" : 1394187154, "y" : 3605, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 14], "comment" : "Scond step to typer reorg: Introduce TypeAssigners.\n\nTypeAssigners assign a toplevel type to a node. They are mixed into Typer, and can be accessed from tpd using\nctx.typeAssigner.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Mar 7 11:12:34 2014 +0100]"},
{"name" : "2669fac03190a4b52b120e07896cf5cd3de208c6", "time" : 1394187153, "y" : 3605, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 14], "comment" : "First step towards Typer Reorganization.\n\nGoal is better modularization and avoiding code duplication and divergence between Typer and tpd. As a first step, we split Inferencing into Inferencing, Checking, and ProtoTypes. Inferencing and Checking become Typer traits, while ProtoTypes remains a global object.\n\nEventually:\n\n - we want to have a SimpleTyper, which does the main stuff in tpd, and can mixin either full checking or no checking. Each method in SimpleTyper takes an untyped tree (which is assumed to have typed arguments) and adds a toplevel type to that tree. The methods subsume the type-checking parts in Typers, except for\n(1) simplifications and expansions (2) computing prototypes and recursing with them into childtrees (3) adaptation. The method calls the necessary checking operations, which may however be stubbed out.\n\nThe idea is already exercised in the typechecking code for Literal and New, except that for now it calls methods in tpd (they will become methods in SimpleTyper instead).\n\n - Typer should inherit from SimpleTyper, and forward all logic except for (1) - (3) to it.\n\n - tpd should call the simple typer it gets from ctx.typer\n\n - ctx.typer should be a SimpleTyper, not a complete one.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Mar 7 11:12:33 2014 +0100]"},
{"name" : "af3bfbab17f6f13b10497487259138732d8b8bb9", "time" : 1394187153, "y" : 3605, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 14], "comment" : "Removed useless ValDef flagged by @samuelgruetter in previous pull request\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Mar 7 11:12:33 2014 +0100]"},
{"name" : "9e25a624516186b606fcd734dd1b066e1204ca79", "time" : 1394187153, "y" : 3605, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 14], "comment" : "Fix of accidental omission in TypeComparer\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Mar 7 11:12:33 2014 +0100]"},
{"name" : "c3ba4feaa424d6bdcc2b5bfaf6fd87b5fc815bdb", "time" : 1394187153, "y" : 3605, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 14], "comment" : "Added test for overloaded access with import/inheritance conflict\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Mar 7 11:12:33 2014 +0100]"},
{"name" : "5b30038dd3561468a8f4a9a9f50e1a0208062de1", "time" : 1394187153, "y" : 3605, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 14], "comment" : "Fix problem comparing overloaded TermRefs\n\nOverloaded TermRefs do not have an info, and consequently do not support =:=. Yet in Typer#checkNewOrShadowed we compared termrefs with =:=. This gives an exception if the termrefs are overloaded. The fix is to provide a new method isSameRef in TypeComparer which is called instead of =:= in Typer#checkNewOrShadowed.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Mar 7 11:12:33 2014 +0100]"},
{"name" : "ccb4f8afb7af71364c1b3d0f6565d686155a8e66", "time" : 1394187153, "y" : 3605, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 14], "comment" : "Fix problem in TermRef.alternatives\n\nRewrap needs to produce alternatives with signatures. Otgerwise the new denotation will simply overwrite the old because both the overloaded TermRef and the alternative will hash to the same unique TermRef.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Mar 7 11:12:33 2014 +0100]"},
{"name" : "3a503cf9a05e5dc6e3fbf06419b6ca5b8c6ed14e", "time" : 1394187153, "y" : 3605, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 14], "comment" : "Made TypeBoundsTrees to be TypTrees so they are eliminated by PostTyperTransform\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Mar 7 11:12:33 2014 +0100]"},
{"name" : "5d70c5845a09a59c98c2d933d001915660ceb70b", "time" : 1394183158, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 14], "comment" : "Merge pull request #45 from DarkDimius/noSharedTrees\n\nGet rid of SharedTree", "author" : "PersonIdent[Sébastien Doeraene, sjrdoeraene@gmail.com, Fri Mar 7 10:05:58 2014 +0100]"},
{"name" : "172f4807e844bf61f3e640b50d74fa7895bd6b39", "time" : 1394110207, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 14], "comment" : "Merge pull request #43 from DarkDimius/tree-transformer\n\nTree transformer&TreeTransform", "author" : "PersonIdent[Dmitry Petrashko, dark@d-d.me, Thu Mar 6 13:50:07 2014 +0100]"},
{"name" : "b97c4613566820b68c8def483690225087020034", "time" : 1394108997, "y" : 3616, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 14], "comment" : "Tree Transformer&TreeTransform:\n1) using fast tracks in case node type isn't altered by Transformation;\n2) using pre-computed hints(nxTransformXXX arrays) to quickly jump to next transformation interested in transforming particular Tree type;\n3) using pre-computed hints(nxPrepareXXX arrays) to know which transformations are going to 'prepare' for transforming particular Tree type;\n4) recomputing those hints in case some transformation changed implementation class during 'prepare';\n5) TreeTransform is now responsible of calling transformFollowing on nodes created by it.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Mar 6 13:29:57 2014 +0100]"},
{"name" : "6ada0205803e0aa919f36c90e7d41fc8080e92e7", "time" : 1394096951, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 14], "comment" : "Merge pull request #42 from odersky/fix/#39-checkAccessible\n\nFix of #39", "author" : "PersonIdent[odersky, odersky@gmail.com, Thu Mar 6 10:09:11 2014 +0100]"},
{"name" : "fa4ea90713149473eca70ff2f03be673a630be9e", "time" : 1394062805, "y" : 3618, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 14], "comment" : "Got rid of SharedTree\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Mar 6 00:40:05 2014 +0100]"},
{"name" : "092456b806a132a64b7a4a98d0d2d30ca8114bbd", "time" : 1393937707, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 14], "comment" : "Merge pull request #41 from DarkDimius/virtualFile\n\nUse virtual file instead of temporary file for tests", "author" : "PersonIdent[odersky, odersky@gmail.com, Tue Mar 4 13:55:07 2014 +0100]"},
{"name" : "f196e074c41f7ccde118dcf6764898a2c26fda3a", "time" : 1393937390, "y" : 3620, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 14], "comment" : "Fix of #39\n\nTwo fixes:\n1) Avoid the infinite recursion in checkAccessible if the accessibility check fails.\n2) Make accessibility succeed for the test, and in general if the target denotation does not have a symbol.\n\nAdded original test in pos and a negative test which makes accessibility fail.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Mar 4 13:49:50 2014 +0100]"},
{"name" : "fd5b429d821b8a535df904ea853a83f9b8e57d58", "time" : 1393931406, "y" : 3621, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 14], "comment" : "Use virtual file instead of temporary file for tests\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Tue Mar 4 12:10:06 2014 +0100]"},
{"name" : "340ec6150b205287e1c0f5a0422d2186c29bc086", "time" : 1393888544, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 14], "comment" : "Merge pull request #37 from DarkDimius/assertions\n\nTypos, better assertions, dead code", "author" : "PersonIdent[Dmitry Petrashko, darkdimius@gmail.com, Tue Mar 4 00:15:44 2014 +0100]"},
{"name" : "356dd4b16456a478ce3c0d0a918f2e820bdd154c", "time" : 1393886772, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 14], "comment" : "Merge pull request #35 from DarkDimius/tests-2\n\nFor some tests context is required, it should be passed to checker phase.", "author" : "PersonIdent[Dmitry Petrashko, darkdimius@gmail.com, Mon Mar 3 23:46:12 2014 +0100]"},
{"name" : "9c73c96c3e440740b8a59c6146dd1acaefa9cfa5", "time" : 1393886675, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 14], "comment" : "Merge pull request #38 from odersky/fix/#34-pathresolvers\n\nFix/#34 pathresolvers", "author" : "PersonIdent[Dmitry Petrashko, darkdimius@gmail.com, Mon Mar 3 23:44:35 2014 +0100]"},
{"name" : "f3dacf968bc28f5f47612f75562a1a600e511815", "time" : 1393865426, "y" : 3625, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 14], "comment" : "Fix of #34\n\nThe root cause of #34 was that we took a type argument which was an existential type. These are returned as type bounds, which make no sense in the calling context. To avoid that problem in the future, `typeArgs`\ngot renamed to `argInfos`, so it is clear we get an info, not necessarily a value type. There are\nalso added method `argTypes`, `argTypesLo`, `argTypesHi`, which return a type, but either throw an exception or return a lower/upper approximation of the argument is an existential type.\n\nThere's another issue that the existential type only arose when compiling the same couple fo files the seciond time. We need to chase that one down separately.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Mar 3 17:50:26 2014 +0100]"},
{"name" : "f0d5662e3f8668ed33bc7442951558d861e56073", "time" : 1393865148, "y" : 3625, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 14], "comment" : "Add test case for #34\n\nRight now this one fails.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Mar 3 17:45:48 2014 +0100]"},
{"name" : "2b4e7659237fe0e6eb5425ebe50ceab79af49816", "time" : 1393864813, "y" : 3627, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 14], "comment" : "Typos corrected.\nMore verbose assertions.\nUnnecessary semicolons removed.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Mar 3 17:40:13 2014 +0100]"},
{"name" : "18cf5d280e3f63213fd6bddbe8e1ed5b5d40b595", "time" : 1393863795, "y" : 3627, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 14], "comment" : "More informative asserts.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Mar 3 17:23:15 2014 +0100]"},
{"name" : "b2dd56c2b5f049f84635e62fc41197ec84c8d3e4", "time" : 1393861457, "y" : 3629, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 14], "comment" : "For some tests context is required, it should be passed to checker phase.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Mon Mar 3 16:44:17 2014 +0100]"},
{"name" : "7004c220d44ffb13df9c097dbb04b8777f8fe108", "time" : 1393841289, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 14], "comment" : "Merge pull request #32 from DarkDimius/verbose_ex\n\n Enable verbose printing of exceptions thrown in junit tests", "author" : "PersonIdent[Dmitry Petrashko, darkdimius@gmail.com, Mon Mar 3 11:08:09 2014 +0100]"},
{"name" : "d606ec5d84ebd8f5a0d2e1652fd5dc2d675ae2d3", "time" : 1393771784, "y" : 3631, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 14], "comment" : " Enable verbose printing of exceptions thrown in junit tests\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sun Mar 2 15:49:44 2014 +0100]"},
{"name" : "92a4fefe58cfe4c1bcccc8f98183079a553d477a", "time" : 1393762329, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 14], "comment" : "Merge pull request #31 from DarkDimius/tests\n\nInfrastructure for per-phase tests, with inline source as a string.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sun Mar 2 13:12:09 2014 +0100]"},
{"name" : "0ebdbde3d51f92647f3b1cd452d60648ed8e7a39", "time" : 1393758236, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 14], "comment" : "Rename baseType -> baseTypeRef\n\nWhat was `baseType` and is now `baseTypeRef` only computes the prefix of of basetype, not the type arguments.\nIf type arguments need to be included there is `baseTypeWithArgs`. The reason is that type arguments are usually already encoded as member types. But this was a source of errors because in Scala 2, baseType includes the type arguements.\n\n(also added test file structural.scala forgotten from last commit)\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Mar 2 12:03:56 2014 +0100]"},
{"name" : "cba210d0c362759a710f4d9b5dbf1ecfe0d1f278", "time" : 1393696047, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14], "comment" : "Fix problem when handling structural types without a nominal parent type.\n\nWe need to use Object as parent then, but this was forgotten.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Mar 1 18:47:27 2014 +0100]"},
{"name" : "b9e576ad1ba0ff02c550c821648f23905477e545", "time" : 1393694822, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14], "comment" : "Check that inferred parent classes are feasible.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Mar 1 18:27:02 2014 +0100]"},
{"name" : "340ca0615bc40ca0232143b1d7e206c56e721c5c", "time" : 1393694218, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14], "comment" : "Fixing glb/lub of TypeBounds\n\nNeed to take variances into account when forming & or | of bounds. Achieved by moving code from distributeAnd/Or to TypeBounds &/|.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Mar 1 18:16:58 2014 +0100]"},
{"name" : "301d0c8a79d56d18fe0ae9c09f350d4364d4baf1", "time" : 1393682343, "y" : 3637, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 14], "comment" : "Infrastructure for per-phase tests, with inline source as a string.\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Sat Mar 1 14:59:03 2014 +0100]"},
{"name" : "d8356b6dc9221bfc38b1f167e5cfafcc9261f3d7", "time" : 1393677660, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14], "comment" : "Reorganization of template parents.\n\nTemplate parents always were constructor calls before. This is not correct because in a situation like the one\nelaborated in templateParents, the trait D has the class C as supertype, but it does not call its constructor (in fact, if we added a () parameter list to make it into a constructor this would be wrong because C takes parameters.\n\nNow parents can be either types or constructor calls.\n\nThe logic in Namer and Typer that deals with parents is cleaned up. In particular, we now construct any synthetic class parent as a full type, before calling normalizeToClassRefs. This obviates the forwardRefs logic that needed to be done in a cleanup of Namers.\n\nAlso added two more checks: (1) All parents except the first one must point to traits. (2) A trait may not call a parent class constructor.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Mar 1 13:41:00 2014 +0100]"},
{"name" : "5a8f4c822be82e23a0c230071673425423664442", "time" : 1393666973, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14], "comment" : "More precise untyped tree handling\n\n1) Untyped trees now have precise isType/isTerm methods.\n2) The New(tree, args) method can now also handle TypedSplices.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Mar 1 10:42:53 2014 +0100]"},
{"name" : "57fc70d1467d0c3eb637058c336b6dd7f1fab153", "time" : 1393578274, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14], "comment" : "Drop task of simplifying hk types.\n\nSee examplation in 2nd commit of branch aborted/simplify-hk.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 28 10:04:34 2014 +0100]"},
{"name" : "c62c45305797a28e1435756cadd59c411eb5fbeb", "time" : 1393426386, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Cleanup of isSubType\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Feb 26 15:53:06 2014 +0100]"},
{"name" : "d93907e435461769b845781844e54a1a9b4a1995", "time" : 1393426369, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Performance improvement: Avoid unncecessary allocations of ListBuffer\n\nThere were a lot in StoreReporter, as we are creating about 0.5M new ones per self-compile.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Feb 26 15:52:49 2014 +0100]"},
{"name" : "32c041c8b40df3007783240493ed4c4708ec80db", "time" : 1393409013, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Performance tweak: Denotation.symbol is a parameter.\n\nThis avoids the megamorphic dispatch on symbol before. Looked promising in the profiler (symbol showed up at 9%) but does not seem to gain much in practice. Still, can't hurt to do it.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Feb 26 11:03:33 2014 +0100]"},
{"name" : "311136b60d2de17f46b643d84a949b8f77411c0f", "time" : 1393409000, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Performance improvements: Split long TypeMap#mapOver and move hot fields into locals.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Feb 26 11:03:20 2014 +0100]"},
{"name" : "6029c748f1dc086d058d6b5fd3d37c04c08318b3", "time" : 1393338990, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Reord of superIds\n\n1) We now keep an association between ClassSymbol and SuperId (instead of TypeRef and SuperId). That's better\n   because superId's are deleted anyway after each run, so we gain nothing by keeping a stable ref.\n2) hasChildren got dropped. It was too unreliable. The mere fact that someone take's the superId of a class\n   does not means that that class has children.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Feb 25 15:36:30 2014 +0100]"},
{"name" : "f0ddc9afbef266d3a8f826b2c4e5249dca88242f", "time" : 1393323218, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Performance improvement: Avoid most operations in interpolateUndetVars\n\nPerform the operation only if there are qualifying type variables, which is rarely the case.\nReverted variances optimization to simpler and shorter previous implementation, because variances\nis no longer hot.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Feb 25 11:13:38 2014 +0100]"},
{"name" : "a995ab85b7747275a1798cf29ac54466fbe82e2f", "time" : 1393264609, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Misc performance improvements by eliminating stupid allocations\n\n- Avoid closure creation in Position.\n- Avoid creating debug string in SymDenotations\n- Avoid creating Flag translation tables in pickle buffers\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Feb 24 18:56:49 2014 +0100]"},
{"name" : "ed7755b781bd1b444d38329cb22eacaa3fc1c005", "time" : 1393264608, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Avoid memory leaks on repeated compilation.\n\nSeveral measures:\n\n1. Invalidate classOfId and superIdOfClass in ContextBase after each run. These contain local classes\n   that should become inaccessible.\n\n2. Also clear implicitScope cache that maps types to their implicit scopes after each run. (not sure whether\n   this is needed; it did show up in paths from root, but on second thought this might have been a gc-able\n   cycle.\n\n3. Avoid capturing contexts in lazy annotations.\n\n4. Avoid capturing contexts in functions that compute souceModule and moduleClass\n\n5. Avoid capturing contexts in Unpickler's postReadOp hook.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Feb 24 18:56:48 2014 +0100]"},
{"name" : "cdeafeafd252b20a0df5440e0420211af95e0cdc", "time" : 1393264608, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Resetting uniques and hashset reorg.\n\nUniques are now cleared after each run. Also, HashSets get a more standard API, without a label, but with configurable load factor.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Feb 24 18:56:48 2014 +0100]"},
{"name" : "91e74ee45c8cedac279ec66f8277c94d05f2f2e3", "time" : 1393264608, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Performance improvement: Streamline successful toplevel subtype checks\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Feb 24 18:56:48 2014 +0100]"},
{"name" : "23969f6e10a16b51d23c3da3f29b4f7edaef6e5a", "time" : 1393264608, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Discard inaccessible denotations when merging.\n\nWhen froming the &=merge of two denotations, we now discard denotations which have inaccessible symbols.\n\nThe reason for this change is that, without it, the following code gives the warning \"cannot merge Int and Int() as members of one type, keeping only Int()\".\n\n    val m = new java.util.HashMap\n    m.size\n\nIndeed java.util.HashMap has a filed and method which are both named size. The field is package private, so is inaccessible from outside java.util, however.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Feb 24 18:56:48 2014 +0100]"},
{"name" : "c673f2dc2be0e055bd08522f6e91ff704dc43e93", "time" : 1393264608, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Performance improvements: Changes to TypeAccumulators and variances.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Feb 24 18:56:48 2014 +0100]"},
{"name" : "691bae22c373bc72ad77cdd1968c35a445c34437", "time" : 1393264608, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Performance improvement: Specialize folds in accumulators.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Feb 24 18:56:48 2014 +0100]"},
{"name" : "afb74449e0443d321da4b79e776eab376fdc51b1", "time" : 1393264608, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "More statistics for created and retained trees\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Feb 24 18:56:48 2014 +0100]"},
{"name" : "a4e2a6ed89c33f8c79c7129cc493bff0f84e044c", "time" : 1393256065, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Update some paths to relative\n", "author" : "PersonIdent[Nada Amin, nada.amin@epfl.ch, Mon Feb 24 16:34:25 2014 +0100]"},
{"name" : "fbd53d65ef88658cec5324916a16682db7c1d8af", "time" : 1393170044, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Merge pull request #27 from adriaanm/master\n\nFix typos in docs", "author" : "PersonIdent[DarkDimius, darkdimius@gmail.com, Sun Feb 23 16:40:44 2014 +0100]"},
{"name" : "e93fd909d6409c223cf696653e1170641daefeb6", "time" : 1393169680, "y" : 3657, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Fix typos in docs\n", "author" : "PersonIdent[Adriaan Moors, adriaan.moors@typesafe.com, Sun Feb 23 09:34:40 2014 -0600]"},
{"name" : "e29e60bf50db4d5aa1303b5f13ed9d66dcfdc60e", "time" : 1393153796, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Update AUTHORS.md", "author" : "PersonIdent[odersky, odersky@gmail.com, Sun Feb 23 12:09:56 2014 +0100]"},
{"name" : "f48190468c874d2dc20fad0a03a8ff5df2071fd9", "time" : 1393153730, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Update AUTHORS.md", "author" : "PersonIdent[odersky, odersky@gmail.com, Sun Feb 23 12:08:50 2014 +0100]"},
{"name" : "7b1c5bcb7668e57c106fd8235e38646d4e22ba0b", "time" : 1393153384, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Update AUTHORS.md", "author" : "PersonIdent[odersky, odersky@gmail.com, Sun Feb 23 12:03:04 2014 +0100]"},
{"name" : "9e8e53bdf2797bd3dd07f16954c7196e6bcf1cbf", "time" : 1393153082, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Update AUTHORS.md", "author" : "PersonIdent[odersky, odersky@gmail.com, Sun Feb 23 11:58:02 2014 +0100]"},
{"name" : "4fa803b7c4cf98d95b5e7411fc8f350b85681d4c", "time" : 1393153044, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Update AUTHORS.md", "author" : "PersonIdent[odersky, odersky@gmail.com, Sun Feb 23 11:57:24 2014 +0100]"},
{"name" : "18882a5d64296c4c856bcd5a78d6786b82470277", "time" : 1393152967, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Update AUTHORS.md", "author" : "PersonIdent[odersky, odersky@gmail.com, Sun Feb 23 11:56:07 2014 +0100]"},
{"name" : "e33fad388d4c8caa784dca32b50c75a17ba3d515", "time" : 1393152810, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Update AUTHORS.md", "author" : "PersonIdent[odersky, odersky@gmail.com, Sun Feb 23 11:53:30 2014 +0100]"},
{"name" : "1a4c0e1f15eb2ec04eceb5efc60752e69899eff4", "time" : 1393152747, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Update AUTHORS.md", "author" : "PersonIdent[odersky, odersky@gmail.com, Sun Feb 23 11:52:27 2014 +0100]"},
{"name" : "a070a8226e2191e458c25995ca32e44ff00240d8", "time" : 1393152648, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Create AUTHORS.md", "author" : "PersonIdent[odersky, odersky@gmail.com, Sun Feb 23 11:50:48 2014 +0100]"},
{"name" : "b5a1367600c58d0fa1de6a631d2c5fee1119a777", "time" : 1393106214, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Update README.md", "author" : "PersonIdent[odersky, odersky@gmail.com, Sat Feb 22 22:56:54 2014 +0100]"},
{"name" : "8d294b9b42dfcdfaee1722095d76a1c80ed9b6d5", "time" : 1393004570, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Performance improvement: Cache uninstatiated typevars in constraints\n\nPro: Much faster to iterate through uninstantiated type variables\nCon: Constraints can no longer be value classes.\n\nStill this seems to give a net win of ~2%.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 21 18:42:50 2014 +0100]"},
{"name" : "0a0cb0ca1dcf8f615d3a3e79fac8dc9a62bb1397", "time" : 1393004570, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Caching of implicit members\n\nAlso, some streamlining in the way memberNames are computed.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 21 18:42:50 2014 +0100]"},
{"name" : "2ad997f43d02dd694814fff1037bcbf0557e6753", "time" : 1393004570, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Performance improvement: Special-case implementation of underlyingIfRepeated\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 21 18:42:50 2014 +0100]"},
{"name" : "56ffb721b612d7efdf1056335ffe46951217aa06", "time" : 1393004570, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Peformance improvement: Better basetype caching\n\nNow first checks in cache before going into special case for static classes (derivesFrom on types is not free!)\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 21 18:42:50 2014 +0100]"},
{"name" : "d8f1fa55af2d832c07d89abaf9ecffc44c6572f8", "time" : 1393004570, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Performance tuning: Inline TypeAlias case for hot maps.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 21 18:42:50 2014 +0100]"},
{"name" : "2d3181ab808145fbdbe657740b41c16e82db7c87", "time" : 1393004570, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Bug fix: fix of typo in secondTry\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 21 18:42:50 2014 +0100]"},
{"name" : "bc2aa82c65b0f8e00e9633f573e20ff3d8e1f089", "time" : 1393004570, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Bug fix: Logic for taking variance into account for TypeBounds comparisons was broken.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 21 18:42:50 2014 +0100]"},
{"name" : "dd4c7b86254a96346fcd1a46481df1efd0aad86a", "time" : 1393004570, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Bug fix: newSyntheticTypeParam did not incorporate paramFlags\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 21 18:42:50 2014 +0100]"},
{"name" : "84c01ff493b81c0097d1707f64622ade028e53aa", "time" : 1393004570, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Reverted: Avoid using TypeBounds in alias refinements.\n\nThe idea is to use the alias itself. This cuts down on # of typebounds created and makes operations on refined infos and applied types more direct. (reverted from commit 81f31f9b71bc4466d3f04f5ce28ef94051688ecd)\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 21 18:42:50 2014 +0100]"},
{"name" : "889bca2de4678194ef28e24dc3513e94b5363616", "time" : 1393004570, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Performance improvement: Replace == with equals in util.HashTable\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 21 18:42:50 2014 +0100]"},
{"name" : "2633300305df2cc40142d287cb715c3bd8561fc8", "time" : 1393004570, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Drop unique hashing for superId bitsets\n\nReason: (1) There are few sets: When compiling doty itself, 1.2K sets total, hashed to 500 uniques. (2) Bitset comparison is expensive because it relies on a double inclusion test. (This should be fixed in the Scala stdlib).\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 21 18:42:50 2014 +0100]"},
{"name" : "d0568c1a5717a6adc22f74b93552394a9c4c586f", "time" : 1393004570, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Performance improvement in LRUCache\n\nUse eq for key comparisons in LRUCache.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 21 18:42:50 2014 +0100]"},
{"name" : "f2564f5ec6bd875b833ee3c0f509f3200f2e2362", "time" : 1393004570, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Performance improvement: inline hasAltWith\n\nGives us ~1%, it seems.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 21 18:42:50 2014 +0100]"},
{"name" : "f699ba201bafccc66657a2765f280a226fcd9e55", "time" : 1393004570, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Avoid using TypeBounds in alias refinements.\n\nThe idea is to use the alias itself. This cuts down on # of typebounds created and makes operations on refined infos and applied types more direct.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 21 18:42:50 2014 +0100]"},
{"name" : "77fc4d0831dc7a7ddaa74677e2659cdea4a2f52f", "time" : 1393004570, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Disentangling SelectionProto and RefinedType\n\nThere were too many problems caused by it, and too little gained. So, now SelectionProto is no longer a Subtype of RefinedType.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 21 18:42:50 2014 +0100]"},
{"name" : "c3f4e845d6354931ac011073219b8a133446c381", "time" : 1392904105, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Merge pull request #26 from DarkDimius/runMain\n\nScript for running compiler outside sbt", "author" : "PersonIdent[Vlad Ureche, vlad.ureche@epfl.ch, Thu Feb 20 14:48:25 2014 +0100]"},
{"name" : "51e40fb2990d44c793c8ee9be8700f4128929184", "time" : 1392902143, "y" : 3684, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Script for running compiler outside sbt\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Feb 20 14:15:43 2014 +0100]"},
{"name" : "1d558a9671a986dde06f8dda9e08b5e0bc9bd196", "time" : 1392544700, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Made blacklist in ScannerTest ignore the source path location of the blacklisted file.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Feb 16 10:58:20 2014 +0100]"},
{"name" : "820e7243da725388e7c866423a8e31b2a9cd5c17", "time" : 1392544700, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Some small doc changes\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Feb 16 10:58:20 2014 +0100]"},
{"name" : "8755d8521e25e300edd8486958e6673e8b708f0e", "time" : 1392521195, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Merge pull request #23 from VladUreche/topic/scala-compile\n\nAdd Scalac scanning to the Travis CI build", "author" : "PersonIdent[DarkDimius, darkdimius@gmail.com, Sun Feb 16 04:26:35 2014 +0100]"},
{"name" : "1384048d0c01b5071ccc68e57fe49e802ed7c61b", "time" : 1392518860, "y" : 3688, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Add Scalac scanning to the Travis CI build\n\nAnd silence some of the error messages we print so the build log\ndoesn't go above 4MB (Travis' limit)\n", "author" : "PersonIdent[Vlad Ureche, vlad.ureche@gmail.com, Sun Feb 16 03:47:40 2014 +0100]"},
{"name" : "153146c6774a5a06b1fbe7dc0ceb21b0e0a5e657", "time" : 1392462422, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Added information about mailing list to README", "author" : "PersonIdent[DarkDimius, darkdimius@gmail.com, Sat Feb 15 12:07:02 2014 +0100]"},
{"name" : "592f6c2bc2402ff5f714ee9975dad6c01b529f0b", "time" : 1392407306, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Removed clean (thanks @sjrd)", "author" : "PersonIdent[Vlad Ureche, vlad.ureche@epfl.ch, Fri Feb 14 20:48:26 2014 +0100]"},
{"name" : "b68e11d61984b8216d90cd07323055fd5a76a3c5", "time" : 1392397857, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "New worksheet highlighting some symbol and tree constructions\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 14 18:10:57 2014 +0100]"},
{"name" : "6f49c27280dc853c67720cf4d539f74b1e65c824", "time" : 1392396732, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Let Travis pick up the version from build.sbt", "author" : "PersonIdent[Vlad Ureche, vlad.ureche@epfl.ch, Fri Feb 14 17:52:12 2014 +0100]"},
{"name" : "d1a6e9a2f5ce42f644d57f237afeae4b81625fe7", "time" : 1392395430, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Merge pull request #21 from VladUreche/topic/travis\n\nTravis CI", "author" : "PersonIdent[Vlad Ureche, vlad.ureche@epfl.ch, Fri Feb 14 17:30:30 2014 +0100]"},
{"name" : "3acd1be44f080765f37ba65604b0bf9a12171b07", "time" : 1392392255, "y" : 3694, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "README with Travis badge\n", "author" : "PersonIdent[Vlad Ureche, vlad.ureche@gmail.com, Fri Feb 14 16:37:35 2014 +0100]"},
{"name" : "d2088279df840faa3f39b792d256543bc95b770d", "time" : 1392391722, "y" : 3694, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Travis CI\n", "author" : "PersonIdent[Vlad Ureche, vlad.ureche@gmail.com, Fri Feb 14 16:28:42 2014 +0100]"},
{"name" : "28e9bb7c3f551265c7de671cc9eccc39bd2697de", "time" : 1392382197, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Avoid forming And/Or types with equal operands.\n\nThis can happen in particular in derivedAnd/Or type, when applying a substitution or other mapping which identifies two types that were different before.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 14 13:49:57 2014 +0100]"},
{"name" : "e1d53f03dc2d59e72fffde86919cac5462e7fd36", "time" : 1392374711, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Streamlined treatment of ThisType in subtype checks.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 14 11:45:11 2014 +0100]"},
{"name" : "c4bed34b009ffc54b1eac10ee75fba27040f1533", "time" : 1392299404, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Two performance optimizations\n\n1) Split out wildApprox into separate function\n2) Be more careful not to follow static prefix chains where not needed\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Feb 13 14:50:04 2014 +0100]"},
{"name" : "80acc2d331cf8359c00d9a15c8cc10d537be503a", "time" : 1392224856, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Some changes in the interest of speedups.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Feb 12 18:07:36 2014 +0100]"},
{"name" : "a6c50c1872cff7ffb20388c7ac2197d983085625", "time" : 1392223639, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Fixed a bug in LRUcache which prevented sizes >= 8.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Feb 12 17:47:19 2014 +0100]"},
{"name" : "ca3ff285c4e8ecdb48eb09bb75fd05a0bc6ff487", "time" : 1392157354, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Merge branch 'origin/master'\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Feb 11 23:22:34 2014 +0100]"},
{"name" : "98daf15f17a119d76c7b9289c82a7730ac8ece58", "time" : 1392157305, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Wrapped up definition of attachments.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Feb 11 23:21:45 2014 +0100]"},
{"name" : "ce55c3b08da29acafaa3c43796ead9cf854f1d34", "time" : 1392128177, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "COnverted symOfTree and expandedTree to attachments.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Feb 11 15:16:17 2014 +0100]"},
{"name" : "459d78dccc40c94dd7da8b5b29762a494595778b", "time" : 1392126176, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "New scheme for attachments.\n\nAdded general way to put attachments on some base type (which needs to inherit from Attachment.Container).\nUsed it to turn typedTree map into an attachment.\n\nAlso, moved DotClass to dotc.util.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Feb 11 14:42:56 2014 +0100]"},
{"name" : "e895249de8f59e5a5c4175b428193fa4c5ea90af", "time" : 1392062604, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Merge branch 'wip/bring-forward': Incremental compilation\n\n1) Make definitions load symbols in current run\n2) Change handling of invalid parents. Instead of a copied denotation, we now invalidate the caches of the existing one. (Copying was not enough, as old versions of denotations kept leaking in).\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Feb 10 21:03:24 2014 +0100]"},
{"name" : "5870fbb7297b1b4bb70cbcf27cd88d4e12197234", "time" : 1392056220, "y" : 3706, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "New scheme for incremental invalidation of parents.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Feb 10 19:17:00 2014 +0100]"},
{"name" : "18ae13dcf4f5d40d528e2bcf43a19e84bf475084", "time" : 1392027214, "y" : 3706, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Make Definitions load all symbols in current runId.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Feb 10 11:13:34 2014 +0100]"},
{"name" : "f4e9a881a561e28900becc7deea520b43e57fb31", "time" : 1391968860, "y" : 3706, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "WIP: Fixes to bring symbols forward\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Feb 9 19:01:00 2014 +0100]"},
{"name" : "ada0febcb0893ff8f87d01f605a43f731e38a0be", "time" : 1391968171, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Get rid of CompleteInCreationContext\n\nThe only remaining completers that complete in creation context are the source completers defined in Namers. So a separate abstraction is no longer needed.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Feb 9 18:49:31 2014 +0100]"},
{"name" : "866ee8665147f91bee617465d04a08ff7b874baf", "time" : 1391968116, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Symbol loaders no longer complete with creation context\n\nInstead current ctx is passed through everywhere.\n\nQuestion: can we factor out ctx better?\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Feb 9 18:48:36 2014 +0100]"},
{"name" : "98ccfd77c4748487190387c4e8b3646d77116e22", "time" : 1391960431, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Getting rid of some CompleInCreationContexts\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Feb 9 16:40:31 2014 +0100]"},
{"name" : "9d924441fdeab3bbe0c6cca8c1ecce6ecf64a608", "time" : 1391959470, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Making completer take an implicit context\n\nAs a first step, we make the complete method in LazyType take an implicit context parameter. This requires\na fairly large propagation of implicit contexts.\n\nThe implicit parameter is ignored for classes inheriting from CompleteInCreationContext (which until now are all completers). The next step will be to make the complete methods of selective lazy types take the current context, rather than the creation context.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Feb 9 16:24:30 2014 +0100]"},
{"name" : "6a6bc87871e1c6382da7023ab64c69391366c808", "time" : 1391949220, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Fix for creating right number of compilers in Bench\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Feb 9 13:33:40 2014 +0100]"},
{"name" : "cd64021dc45e937b19980e2f80e3961021bf6918", "time" : 1391949175, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Move maxConstraint computation to RunInfo to avoid references to stale symbols.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Feb 9 13:32:55 2014 +0100]"},
{"name" : "9ceedf229de878dc7e6fc485dc11f9f92af8fe1c", "time" : 1391948746, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Skolems are permanent, but not packages.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Feb 9 13:25:46 2014 +0100]"},
{"name" : "2935c4fc45497a43f76a6eaacef427748f4ab501", "time" : 1391782386, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Generalize test infrastructure\n\nCompiler tests can now be run with configurable number of compilers and runs in a compiler.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 7 15:13:06 2014 +0100]"},
{"name" : "c643ff5a38812e00ea7d6fbae94114beacd14ecf", "time" : 1391782339, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Invalidate companions after indexing.\n\nInvalidating them before indexing means symbols are touched before a new version is entered, which leads to \"compiled twice\" errors.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 7 15:12:19 2014 +0100]"},
{"name" : "fc84e992977ecbc0d2da0e70bd61fcc776220b5c", "time" : 1391781760, "y" : 3718, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Update README.md", "author" : "PersonIdent[odersky, odersky@gmail.com, Fri Feb 7 15:02:40 2014 +0100]"},
{"name" : "5bed5bdd1bb377e9a177a2be635b391bfc0f168e", "time" : 1391775598, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Replace open package module logic by special member lookups in a package class.\n\nRather than fiddling with scopes, which can lead to race conditions, we now special case member lookup and mamber name filters in ClassDenotations that represent packages.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 7 13:19:58 2014 +0100]"},
{"name" : "8f2cb142bb4914a4e009042a24fd244429d845e7", "time" : 1391770549, "y" : 3718, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Update README.md", "author" : "PersonIdent[odersky, odersky@gmail.com, Fri Feb 7 11:55:49 2014 +0100]"},
{"name" : "5f5a01c4f74a40eb6d387b83302da2d3c413969b", "time" : 1391720160, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Make skolems live forever...\n\n... because there's no way to reload them in a new run.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Feb 6 21:56:00 2014 +0100]"},
{"name" : "0d356254c4d6326398c9c1a587ad193fadef6883", "time" : 1391720117, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Catch stale references\n\nIf a NamedType was denoted a SymDenotation one run, but stops being defined in the next, throw a staleSymbol error.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Feb 6 21:55:17 2014 +0100]"},
{"name" : "ab62ca99a31ccd1984b875f7040b430bfccc2724", "time" : 1391708574, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Checking for already existing symbols before creating new ones.\n\nOtherwise we get spurious \"compiled twice\" errors on every symbol defined in a run after the first one.\nAlso, fixed a bug so that now run ids are correctly incremented.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Feb 6 18:42:54 2014 +0100]"},
{"name" : "4697dcb614bdab28985aff991566d69c3d4e9ecd", "time" : 1391703870, "y" : 3718, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Merge pull request #8 from VladUreche/issue/4\n\nTowards #4: dotc.tests working on my machine", "author" : "PersonIdent[Vlad Ureche, vlad.ureche@epfl.ch, Thu Feb 6 17:24:30 2014 +0100]"},
{"name" : "7f4bc5c202777b023832fc5fdb94c2e6738e306c", "time" : 1391702752, "y" : 3725, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Towards #4: dotc.tests working on my machine\n\nFile name issues\n", "author" : "PersonIdent[Vlad Ureche, vlad.ureche@gmail.com, Thu Feb 6 17:05:52 2014 +0100]"},
{"name" : "56a11807feaa00f81504925a5b95ebf7b8dab689", "time" : 1391701687, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Fixed ScannerTest to make it work with relative paths\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Feb 6 16:48:07 2014 +0100]"},
{"name" : "2ac4a5451c8825396ae01be2bc4bd33c22caa6b6", "time" : 1391699020, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Made showclass tests more robust if fewer stubs are generated than the limit.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Feb 6 16:03:40 2014 +0100]"},
{"name" : "380c34d70b86466b896fa3d9a3c42109e4df8b56", "time" : 1391698962, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Fix bug for reading type arguments in ClassfileParser\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Feb 6 16:02:42 2014 +0100]"},
{"name" : "09a87aad0449af38e2efeafb8c3770fb7d61a437", "time" : 1391694466, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Merge pull request #7 from DarkDimius/paths\n\nModified tests to use relative paths ", "author" : "PersonIdent[Lukas Rytz, lukas.rytz@typesafe.com, Thu Feb 6 14:47:46 2014 +0100]"},
{"name" : "355bbdf8389d141f86ea37995f03f9aae37e6c41", "time" : 1391694428, "y" : 3730, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Merge branch 'master' of github.com:lampepfl/dotty into paths\n\nConflicts:\n	readme.md\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Feb 6 14:47:08 2014 +0100]"},
{"name" : "6015d2bdf2b09ac424087c014af6aa4b8541f2ff", "time" : 1391694386, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Create LICENSE.md", "author" : "PersonIdent[Lukas Rytz, lukas.rytz@typesafe.com, Thu Feb 6 14:46:26 2014 +0100]"},
{"name" : "eb8eff7fc378c9e958848e21c1c39cb64f52126b", "time" : 1391693668, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Contributing guide\n", "author" : "PersonIdent[Vlad Ureche, vlad.ureche@gmail.com, Thu Feb 6 14:34:28 2014 +0100]"},
{"name" : "6d3902b084275fd0aea2264eadbd6a21f6602b12", "time" : 1391692665, "y" : 3730, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "One more absolute path changed to relative\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Feb 6 14:17:45 2014 +0100]"},
{"name" : "6a42d32181bd7b8639f717c20de5009c06141727", "time" : 1391692587, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Update and rename readme.md to README.md", "author" : "PersonIdent[Vlad Ureche, vlad.ureche@epfl.ch, Thu Feb 6 14:16:27 2014 +0100]"},
{"name" : "c11a46e89199724fba954541914b9a42bada8e4b", "time" : 1391690590, "y" : 3730, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Update readme\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Feb 6 13:43:10 2014 +0100]"},
{"name" : "0ab219259627d589f5f2bc407b90575977541865", "time" : 1391690202, "y" : 3730, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "comment" : "Use relative paths in tests\n", "author" : "PersonIdent[Dmitry Petrashko, dmitry.petrashko@gmail.com, Thu Feb 6 13:36:42 2014 +0100]"},
{"name" : "4e34962fba727975c071d6288913d89b4692a08f", "time" : 1391463663, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Commenting out unused alternative isSubType implementation.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Feb 3 22:41:03 2014 +0100]"},
{"name" : "2a760aa7cee00829fe7b1649cad1efa5ddf8e259", "time" : 1391463528, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Dropping eligibility of conforms as an implicit conversion.\n\n\"conforms\" is no longer special-cased to be eligible as a implicit conversion. Only implicit methods are eligible, whereas conforms is an implicit value with an apply method. So far, \"conforms\" as an implicit conversion masked in effect some type inference bugs. With the previous two commits, it is no longer necessary because two type inference bugs got fixed.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Feb 3 22:38:48 2014 +0100]"},
{"name" : "3aa2eb08cb9b4b3d6df35fc6e2e39787111067a1", "time" : 1391463373, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fine-tuning contexts for resolve overloading\n\nWhen resolving overloading with a fun proto type, we need to evaluate the arguments in the current context, not in an exploring context. Reason: The argument types might contain type valiables that are constrained in the context and that needs to be maintained.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Feb 3 22:36:13 2014 +0100]"},
{"name" : "79c4490a823f779251f4f2b4a332e639e6ad00d6", "time" : 1391463255, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "More robust constant folding\n\nCan now also convert a constant to a type that's lower-bounded by a primitive numeric type.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Feb 3 22:34:15 2014 +0100]"},
{"name" : "16829831dcf417d7af409ecdd965b59b886921cd", "time" : 1391443510, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "New benchmark class that allows tuning for #compilers and #runs\n\nby command line options like\n\n  #compilers 3 #runs 10\n\nThis would create one after another 3 compiler instances and perform 10 runs in each.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Feb 3 17:05:10 2014 +0100]"},
{"name" : "01fc1813929bfea3235bb0739131f675f57c7309", "time" : 1391443210, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fix problems with TypeVar instantiation\n\n1) Simplify skipped one level over arguments of AndType/OrType.\n2) variances needs to follow instantiated typevars\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Feb 3 17:00:10 2014 +0100]"},
{"name" : "4fab474454be9d2ac615ca39517a9f6c262bf187", "time" : 1391420468, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Optimize subtype test between refined types with multiple refinements\n\nWe now pair refinedInfos with the same name as deeply as wek can (before only went to depth 1).\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Feb 3 10:41:08 2014 +0100]"},
{"name" : "4886d7cb538f9a073827c78671d1890be787c0a5", "time" : 1391363807, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Relaxing check that implicits must have explicit return type\n\nNow this is required only for members of a template. Local statements can still have implicits with no result type. (Maybe we need to get back on this).\n\nAlso, changed Dotty itself and tests to adhere to the new restriction.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Feb 2 18:56:47 2014 +0100]"},
{"name" : "19c8cb1bca7a07395446a0cceaab137e5af2c8c5", "time" : 1391363008, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Improve eligible caching in implicit search.\n\nImproves effectiveness of elidable cache from ~66% to ~85% and reduces # of implicits that need to be checked after discarding to about 20% what it was before.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Feb 2 18:43:28 2014 +0100]"},
{"name" : "f0d34873c27cfbf7dab3909b9855dfeae4e8506e", "time" : 1391362808, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Adding checks for implicit definitions\n\n1) Result type may not be empty\n2) Parameters of implicit conversions may not be singletons\n\nReason for 2) is that we can do a much better caching for eligible implicits if we can widen singleton arguments in ViewProto. This leads to consicderable speedups in implicit search which seem to be hard to get without the restriction.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Feb 2 18:40:08 2014 +0100]"},
{"name" : "20c0a6a92dc2d618fa557bb19d78d8595ca527e6", "time" : 1391358724, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Avoid accessing implicits that come from root imports that are hidden by some nested import.\n\nThis also changes the criterion when a root import is disabled.\n\nA root import is now disabled if there is an inner import from the same package or module, and the inner import contains at least one disabling clause X => _. (The latter crierion is new; without it, we would consider something like\n\n     import scala.{collections => c}\n\nas a hiding import for Scala, which seems to go too far.)\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Feb 2 17:32:04 2014 +0100]"},
{"name" : "c683f1c1d8235fffc4475e7b51ddc7536ec7eaa1", "time" : 1391353441, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "wip for implicits handling root imports.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Feb 2 16:04:01 2014 +0100]"},
{"name" : "d4f3dfee061de3a03bae59bea102d2796d724f81", "time" : 1391344372, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Cheaper eligibility test for PolyTypes.\n\nInstead of doing a wildApprox of the whole type, we fuse with the logix for method types and just do a wild approx of the single method type argument we have to test.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Feb 2 13:32:52 2014 +0100]"},
{"name" : "4d1213579885144ebb9653007e64065ff4a62e2e", "time" : 1391344200, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fix checking for disabled root imports\n\nNeeds to be done always when hitting a wildcard import, not just when something was found\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Feb 2 13:30:00 2014 +0100]"},
{"name" : "e9d1319273f9353a6f2c877ebb9a8dc8823008a7", "time" : 1391342561, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Rename dotty.Predef -> dotty.DottyPredef\n\nto avoid accidental confusion with scala.Predef\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Feb 2 13:02:41 2014 +0100]"},
{"name" : "7ba59b1f8c86bdad79ceed3d21b1fc83bda76d7b", "time" : 1391274914, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Refactoring implicit discards\n\n(1) Moved into refMatches, to avoid normalize on references that are discarded anyway\n(2) Added another check if the expected type is a value class\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Feb 1 18:15:14 2014 +0100]"},
{"name" : "ceb4dd9589da30540d2ab812f5ca90298aa4b070", "time" : 1391261649, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Revert \"Dropping a type annotation, which is no longer needed.\"\n\nThis reverts commit 7cb292fad14dc9ee7f1325f83df0328ffa8f2194.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Feb 1 14:34:09 2014 +0100]"},
{"name" : "ceaebef4113f6a5feb2ae39d48ba0bc6ef9669d3", "time" : 1391253312, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Make argument types of viewproto undergo WildApprox before testing for eligibility.\n\nUnless we do this, typevars would sneak into eligibility checks.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Feb 1 12:15:12 2014 +0100]"},
{"name" : "7cb292fad14dc9ee7f1325f83df0328ffa8f2194", "time" : 1391180009, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Dropping a type annotation, which is no longer needed.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jan 31 15:53:29 2014 +0100]"},
{"name" : "904f6c0f756167a1c67e279131b8480f800d94c8", "time" : 1391087902, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Replacing most occurrences of HashMap with AnyRefMap\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jan 30 14:18:22 2014 +0100]"},
{"name" : "dfc1a54b614ad64045bcf35f98c030ab04c9f5f2", "time" : 1391078184, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Performance improvements to NamedType#denot\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jan 30 11:36:24 2014 +0100]"},
{"name" : "818d42d20bae1c446e9d540ce801d63b0eb4450a", "time" : 1391013296, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Add early discarding of methods for eligible check.\n\nMethodTypes and PolyTypes now check their argument for compatibility before setting up a complete isApplicable test.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Jan 29 17:34:56 2014 +0100]"},
{"name" : "a4b3494a7fcdcb3513afd73099a12108d87e4e48", "time" : 1391010004, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Better implicit logging\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Jan 29 16:40:04 2014 +0100]"},
{"name" : "0225d799c3fa99cad3a97697fbf41ad2a7f91b8b", "time" : 1391009944, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Implements refined printing of ViewProto\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Jan 29 16:39:04 2014 +0100]"},
{"name" : "a80cf94570cdd7eaa1b7a9a8c82fe7e535688a91", "time" : 1390997815, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixing equality for selection protos\n\nThey no longer can be accidentally equal to refinement type.\n\nTodo: Disentangle selection protos entirely from Refinement types? See branch disentangle-selectproto.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Jan 29 13:16:55 2014 +0100]"},
{"name" : "03d0ffc637d650da2678619cfb84a09b08273787", "time" : 1390992321, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Better tracking of implicit search\n\nWe now track eligible calls and the number of refs tested in an eligible call.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Jan 29 11:45:21 2014 +0100]"},
{"name" : "3617102b51df4625cbe37f6a3f71caf64ddf7211", "time" : 1390847230, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Selective caching of SelectionProtos and ViewProtos\n\nWe cache SelectionProtos if their \"compat\" parameter is \"NoViewsAllowed\". We always cache ViewProtos.\n\nThat's important for implicit search, because this enables eligible refs to be better cached. To make this work, we add a case to WildApprox which massages SelectionProtos so they also get noViewsAllowed in the compat parameter.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jan 27 19:27:10 2014 +0100]"},
{"name" : "c476171d838c55bbfe36856e73a470e826748acc", "time" : 1390834941, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Cache result of narrow on Methods.\n\nnarrow is exercised a lot after the improvement to normalize. So it's important to cache it in order not to bust `uniques` with NoprefixTermRefs.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jan 27 16:02:21 2014 +0100]"},
{"name" : "fe85a5aa18e071922d11f1dd1694fe478b9d4fad", "time" : 1390814267, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Accept method types directly in isApplicable.\n\nThis lets us streamline normalize, and avoid to create FunctionTypes if the expected type is a FunProto or ViewProto.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jan 27 10:17:47 2014 +0100]"},
{"name" : "da9579110af09d1f9702ea9047a150724ed1291b", "time" : 1390771223, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Instrumentation on total isSubType calls.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Jan 26 22:20:23 2014 +0100]"},
{"name" : "aafa0c16dbf95fb880573dea6f9ee6db02470740", "time" : 1390758753, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "New treatment of uniques\n\nTo avoid to always create a type before checking its uniqueness we specialize on the three most common categories: RefinedTypes, TypeBounds and NamedTypes.\n\nEach category gets its own uniques map. Hashing is disentangled from Types.\n\nThe new treatement seems to give some improvement (2-5%?) but not much.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Jan 26 18:52:33 2014 +0100]"},
{"name" : "5b69fbbe68705ece7d892cbda555191853f1c5be", "time" : 1390758753, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Refactored RefinedTypes to favor the case where refinedInfo is independent of type itself.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Jan 26 18:52:33 2014 +0100]"},
{"name" : "f7e79bfbdef1123273d5f872572a6a6d55a2cd81", "time" : 1390758753, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Better caching of types\n\nNow, PolyTypes, BoundTypes and TypeVars are cached, too. This leads to the following changes:\n\n - unique types table        135K -> 310K\n - uncached types            923K -> 0.5K   (these are types that are cachable, but contain an uncached part)\n - cached type allocs        3420K -> 4322K\n - runtime on dotc (24KLOC)  31sec -> 20sec\n\nSo, it's a big net win, but we should watch the size of the uniue types table; possibly make it weak.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Jan 26 18:52:33 2014 +0100]"},
{"name" : "14021cb5e7c8831c7f64d56b8665b7ca79771601", "time" : 1390758753, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Special casing of numeric widenings in viewExists\n\nTo save time we handle these directly, rather than looking for implicit conversions. Reason: this saves time (looks like 5-10% of frontend), and we know these are always available.\n\nThe scheme would be foiled if someone introduced additional implicit conversions between numeric types. We could detect and forbid that.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Jan 26 18:52:33 2014 +0100]"},
{"name" : "8b1cc2270c67157f60111a853680fd4f20418d59", "time" : 1390758753, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Some more statistic sampling\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Jan 26 18:52:33 2014 +0100]"},
{"name" : "b2dd6a8a67a70783e68da1f33c33f18c6641e5bb", "time" : 1390758753, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Update to 2.11\n\nPrevious flagsString is no longer accessible. Have to use Dotty's mechanism to show flags,\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Jan 26 18:52:33 2014 +0100]"},
{"name" : "1c68b24b79735f88a34c3490df87cc143fa8b7af", "time" : 1390758753, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Statistics now also computes call counts of tracked operations.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Jan 26 18:52:33 2014 +0100]"},
{"name" : "09199545d784ba36dee1899bda8a9c4ce448397c", "time" : 1390758753, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Add text markers around \"hot\" tracing operations.\n\nThat way they can be easily removed by search and replace, which gives us a clearer picture of the runtime profiles.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Jan 26 18:52:33 2014 +0100]"},
{"name" : "966edc4d6bb2fd4be0b8706959e24e680969b23d", "time" : 1390758753, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Breaking out gc() method in TyperState.\n\nWill need to call from type comparer if instantiations were delayed\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Jan 26 18:52:33 2014 +0100]"},
{"name" : "d6b5f23bc389e1d7af0b69305708f59941dc34d1", "time" : 1390758753, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixes to constraint handling.\n\nIn particular, need to unify polyparams before replacing one with the other, if the result wiould lead to a cyclic constraint.\n\nAlso: Avoid setting `inst` field of a type variable if a subtype operation is in progress, because the constraint might be retracted, and the instantiation should be retracted with it.\n\nThird, tighter checks of cyclic constraint, and deep subtype recursions can now be demanded to cause an abort.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Jan 26 18:52:33 2014 +0100]"},
{"name" : "f01071323516e699a169d89e5ac848215b6488c2", "time" : 1390758753, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixing two bugs in subtype checking that cancelled each other out.\n\n1. The occursInCheck hat its logic crossed, which led to some cycles in constraints not being detected.\n2. The logic around addConstraint skipped some necessary comparisons when frozenConstraint was set.\n\nFixing the addConstraint logic created new subtype cases which made constraints cyclic without that fact being detected.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Jan 26 18:52:33 2014 +0100]"},
{"name" : "ea241b57322ccb818c6a95effc28e0db6d4f38b2", "time" : 1390758753, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Try to dealias LHS in <:< where possible.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Jan 26 18:52:33 2014 +0100]"},
{"name" : "b9731483ae3e55399336f6c7e94c7490ae1da7ce", "time" : 1390758753, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Break out suboperations in separate methods...\n\n... to avoid making long methods that are hard to optimize. Also: the named part of second try is now executed also if the rhs is a named type.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Jan 26 18:52:33 2014 +0100]"},
{"name" : "d643cf7e02767f4f9bd72cad628985f372ea9b78", "time" : 1390758753, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Move GADT tests earlier in subtype algorithms\n\nThis is to avoid to instantiate a GADT with a an approximated bound. We need to treat GADTs the same way as PolyParams.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Jan 26 18:52:33 2014 +0100]"},
{"name" : "a00702c69d21480a34aabca38c41277f6813fc52", "time" : 1390758753, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Prune useless subtyping tests.\n\nTo make this work we moved the basetype test to thirdTryNamed where the lhs does not need to be a named type.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Jan 26 18:52:33 2014 +0100]"},
{"name" : "47b36b45455ecd73853dc63e9e047833cf4612c5", "time" : 1390758753, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Split TermRefs with underlying OrTypes.\n\nImplements\n\n    (A | B)(x) ==> A(x) | B(x)\n\nin phase 2 of subtype checking. This is useful because it ensures that certain subtype judegments that should be correct are correct. It might also help prune the search space earlier.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Jan 26 18:52:33 2014 +0100]"},
{"name" : "a6d26a142672c47b457b6ef7d042e4880ad3345a", "time" : 1390758753, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "wip on typecomparers\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Jan 26 18:52:33 2014 +0100]"},
{"name" : "b8f8b558a047246e0318a08c58d99b7c63997395", "time" : 1390758753, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Refactoctored widening operations.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Jan 26 18:52:33 2014 +0100]"},
{"name" : "aad81eb4af4ae1202268f18bebaac7cf7d0fcc20", "time" : 1390595042, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Merge pull request #6 from VladUreche/topic/build\n\nBuild infrastructure", "author" : "PersonIdent[Vlad Ureche, vlad.ureche@epfl.ch, Fri Jan 24 12:24:02 2014 -0800]"},
{"name" : "426128d3faa646d5c21325cdadf8f3bed04d2cec", "time" : 1390515500, "y" : 3786, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "More nitpicking\n", "author" : "PersonIdent[Vlad Ureche, vlad.ureche@gmail.com, Thu Jan 23 23:18:20 2014 +0100]"},
{"name" : "4b68d181cc216bc60c81562b168ba85999a59350", "time" : 1390515031, "y" : 3786, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Nitpicking\n", "author" : "PersonIdent[Vlad Ureche, vlad.ureche@gmail.com, Thu Jan 23 23:10:31 2014 +0100]"},
{"name" : "6fe84c0fb18556a1b9538d5dc572323583bf9a2c", "time" : 1390514519, "y" : 3786, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Update readme with instructions for Eclipse\n", "author" : "PersonIdent[Vlad Ureche, vlad.ureche@gmail.com, Thu Jan 23 23:01:59 2014 +0100]"},
{"name" : "80209dd9aea9cb922200aefc9b6afc650ba35db8", "time" : 1390514406, "y" : 3786, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fix (run, Test) classpath issues\n", "author" : "PersonIdent[Vlad Ureche, vlad.ureche@gmail.com, Thu Jan 23 23:00:06 2014 +0100]"},
{"name" : "e41f4fdd0efd9b19d5363def8ecb057fc6326d57", "time" : 1390509658, "y" : 3786, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Build infrastructure\n", "author" : "PersonIdent[Vlad Ureche, vlad.ureche@gmail.com, Thu Jan 23 21:40:58 2014 +0100]"},
{"name" : "0e8d0bb1fbe557665f4db9edcd51dc4c49a7ae15", "time" : 1390229965, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Make better use of AndOrTypes.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jan 20 15:59:25 2014 +0100]"},
{"name" : "608fbca82816c6b43def0b38de5f93133954e8ae", "time" : 1390225851, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "For a typeRef, prefer info.isAlias over symbol.isAliasType\n\nReason: This works even for typeRefs with joint-ref denotations, even if the symbol does not exist. The only reason to use symbol.isAliasType is if info.isAlias can produce a cycle.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jan 20 14:50:51 2014 +0100]"},
{"name" : "0a8c17efca37e14b8467d7da9ffd6c48c8cd1c0f", "time" : 1390211521, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Avoid eager forcing in enterArgBinding\n\nCaused a cyclic reference error when compiling the three files in test \"testNonCyclic\".\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jan 20 10:52:01 2014 +0100]"},
{"name" : "ecac7b30412b587a7a65e31bbbe3107ed66fd1a9", "time" : 1390167076, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Drop AnyRef parent generation in DeSugar.\n\nAs of previous commit, Namer will take care of it.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Jan 19 22:31:16 2014 +0100]"},
{"name" : "38b36268d5d29d25cb430c1e275c06ebb1c8f7dd", "time" : 1390166783, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Normalize parent types so that first one always refers to a class, not a trait.\n\nAlso: forward type parameter references of newly added to class scope. This is necessary, or the pattern match in test.scala would fail. Need to find out why.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Jan 19 22:26:23 2014 +0100]"},
{"name" : "6eece756db81a62d6114ff8ce8674cc0c69febaa", "time" : 1390165877, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fix to lub: recompute if either operand can be widened\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Jan 19 22:11:17 2014 +0100]"},
{"name" : "7151d0fdc960e439aa71ad3e4c69e00153c0f377", "time" : 1390131276, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Adapt fun prototype when looking for second chance implicits (aka BigInt)\n\nIf we look for aprototype of the form\n\n  select(name, FunProto(args, ...))\n\nit's important that the result type of the FunProto type is a wildcard type, because implicit views are disabled for that match.\n\n--- this commit achieves the first bootstrap of dotty! ---\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Jan 19 12:34:36 2014 +0100]"},
{"name" : "4d3d2d3177157c5b02f5ebc536de1b80aa37ddbb", "time" : 1390129783, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Dropping isFullyRefined requirement when adapting to SAM type.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Jan 19 12:09:43 2014 +0100]"},
{"name" : "d4204733c669ce4b198d9078f84d6617633c6d4f", "time" : 1390129763, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Refinement of fully-defined accumulator.\n\nIt needs to follow type aliases in order not to give false indications what variables are contained in a type.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Jan 19 12:09:23 2014 +0100]"},
{"name" : "f11dea6fc2eed56bee3eb1999c3890aae958e897", "time" : 1390065683, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fix to computation of implicit scopes\n\nFor packages, the implicit scope consists of the implicit definitions in a nested `package` object, not the package itself.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jan 18 18:21:23 2014 +0100]"},
{"name" : "d172c1687eb4558369616696d93ed944f2fc8776", "time" : 1390064752, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Make signatures use fully qualified names.\n\nNeeded a refactoring of fullname to be able to refer to fullName without passing a context explicitly.\n\nAlso, relax isAccessible check. The prefix condition for protected access need not hold for constructors.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jan 18 18:05:52 2014 +0100]"},
{"name" : "55c84fb40bccf7ab7c42f3544bd5f92e69b20ac4", "time" : 1390064548, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fix isWildcardStarArg test so that it works also for typed trees.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jan 18 18:02:28 2014 +0100]"},
{"name" : "558c608daad156410dc2a854d53409eea1b979a1", "time" : 1390060860, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "More tests.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jan 18 17:01:00 2014 +0100]"},
{"name" : "ed6dacc5cc241aa0e15963db5a9eeb093b6a9293", "time" : 1390060724, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fix openPackageModule wrt overloaded definitions\n\nWhen opening overloaded definitions we need to avoid replacing existing symbols.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jan 18 16:58:44 2014 +0100]"},
{"name" : "559d25c88b39b7f2cac4a6c5b8431f8e0a62b56b", "time" : 1390053608, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Invalidate companions of source-defined symbols\n\nWithout such invalidation, the previous classfile loader stays active, which will lead to confusion later on.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jan 18 15:00:08 2014 +0100]"},
{"name" : "a0d6eedeb64d45af53a3cb93ab48b22855e3a61c", "time" : 1390046189, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixing problems around isAbsent\n\nA Symbol is absent if (1) it equals NoSymbol, or (2) it's type is NoType or (3) it is a module with an module class which is absent.\n\nNote that isAbsent does not force symbols. The info has to be completed explicitly to check.\n\nCriterion (3) is missing, we now take it into account.\n\nAlso, made ClassDenotation ops more robost in tge face of possibilty of being absent.\n\nFinally, refined logic in Typer, to complete a symbol before checking absent.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jan 18 12:56:29 2014 +0100]"},
{"name" : "cb3adb9ff93c45101150dd71b927295e327b3c81", "time" : 1390043123, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Refine avoiding local refs in block's type.\n\nIf all else fails, force all type variables with fullyDefinedType. This can avoid references to locals. Example in file dotctest: SourceFile.scala, method calculateLineIndices.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jan 18 12:05:23 2014 +0100]"},
{"name" : "5a5806b4c5fb6678d63d9f1da06669447cb97eab", "time" : 1390042864, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Refine notion of pattern variables.\n\nThey are variables only in certain regions of a pattern, but not in others. E.g. in\n\n    nme.CONSTRUCTOR\n\nnme is NOT a variable.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jan 18 12:01:04 2014 +0100]"},
{"name" : "4e05acd46b886e0a7e577a5caa9b6145a69c250b", "time" : 1389982464, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixing the test suite.\n\n - fix wrong directories\n - add xml where needed to teh classpath\n - reduce expected stub # because xml was added\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jan 17 19:14:24 2014 +0100]"},
{"name" : "08880b3ce03fa8f9a4b23671ef5d1d78816d28c5", "time" : 1389982374, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Avoid SuppressedError exceptions\n\nNote: \"i\" throws a supressed error to be caught in Reporters. Problem is this does not work if\n\n - \"i\" is evaluated in a val. That's normally an error anyway since error diagnostics should be evaluated lazily to avoid possibvly useless computation.\n\n - \"i\" is passed to a println in a Config.Printer. Not sure what to do about the latter. To avoid such an expression or handle it reasonably, we'd need access to the context base, which we do not have from Printers.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jan 17 19:12:54 2014 +0100]"},
{"name" : "ba1c6fa888488774a7e510ee09ebb80ff0ce2a3c", "time" : 1389979996, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fix problem with duplicate companion objects for classes with default parameters in constructors.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jan 17 18:33:16 2014 +0100]"},
{"name" : "8b0eb728edffac611470bd1db0bc2f7a9cec2ce0", "time" : 1389979178, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Made findDecl more forgiving\n\nWill return NoDenotation for types that do not have decls, analogous to findMember.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jan 17 18:19:38 2014 +0100]"},
{"name" : "0c45788cc806250eca72c96a186ed8961f77404e", "time" : 1389977103, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Handle cases AndType and OrType in WildApprox\n\nNeed to special case WildcardTypes, so that they absorb the other alternative (And/Or types need to have value types as arguments; wildcard types are not allowed).\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jan 17 17:45:03 2014 +0100]"},
{"name" : "422a33af1af13e3d389504e53a1be9a93b942be3", "time" : 1389973097, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Make typedAhead adapt to prototype.\n\nNot sure why it was different before. We need it at least to add implicit parameters in typedAheadExpr.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jan 17 16:38:17 2014 +0100]"},
{"name" : "2efd4f58a422ca7e308122e6fe9af0a530e10d67", "time" : 1389906714, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Making UniqueMessagePositions Dotty compliant\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jan 16 22:11:54 2014 +0100]"},
{"name" : "bf59937182b66d12d01c11ff5dd27346ee4a9db4", "time" : 1389906040, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Refactoring to avoid multiple overloaded traceIndent methods.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jan 16 22:00:40 2014 +0100]"},
{"name" : "d00c3f5e7925cd246fb10916f6a2d26111ac2689", "time" : 1389906040, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Flag multiple overloaded variants with default arguments as an error.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jan 16 22:00:40 2014 +0100]"},
{"name" : "0444bad12f0d8eac886fb39dfab428b1e05fa5fc", "time" : 1389906032, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Avoiding a crash in the face of multiple overloaded variants with default arguments.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jan 16 22:00:32 2014 +0100]"},
{"name" : "e3bc2e9abc9e1749de2cf4ab899d4cb31594869e", "time" : 1389892839, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Generalize implicit scope of ThisType\n\nThe implicit scope of a ThisType is now always the implicit scope of the self type. This caused cycles which necessitated cycle detectors in namedParts and computeImplicitScope.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jan 16 18:20:39 2014 +0100]"},
{"name" : "ef09dd258e91bd83100edae267ffa656461d7bc5", "time" : 1389810408, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Make RefinedPrinter Dotty compliant.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Jan 15 19:26:48 2014 +0100]"},
{"name" : "1f604efa08bcef3604a2d6c373dc78b0730188fb", "time" : 1389809047, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Tweak to typing of function values.\n\nWe now propagte the expected function result type (if it exists) into the function body even if it not fully defined.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Jan 15 19:04:07 2014 +0100]"},
{"name" : "24dff883751fb5a0920f8889e6570914a0f73a26", "time" : 1389808961, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Relax type checking rule for pattern matching.\n\nPreviously, if S is the selector type and P is the type of the unapply argument, we demanded either\n\n     S <: P\n\nor\n\n     P <: S\n\nWe now also admit P <: S' where S' can be obtained from S by dropping refinements. This lets some patterns in RefinedPrinters typecheck which did not typecheck before. It seems we can afford to be a little bit more liberal here, and thereby approximate the weaker \"isPopulated\" criterion of Scala2x.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Jan 15 19:02:41 2014 +0100]"},
{"name" : "f1cfe733d9d02dff975d2bde222db890ca6d15e6", "time" : 1389800483, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Allow views when matching the result type of a selection prototype.\n\nMore generally, a refactoring of the Compatibility trait to use value passing instead of inheritance.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Jan 15 16:41:23 2014 +0100]"},
{"name" : "2112492ec908019d1515128c68f1c737518cac3c", "time" : 1389790876, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Avoid stale symbol errors for package objects\n\nHappened (albeit non-deterministally) when compiling parsing/*.scala\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Jan 15 14:01:16 2014 +0100]"},
{"name" : "3d9a664e75307410b8845ecc1540a00924867912", "time" : 1389779836, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fix for constant folding\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Jan 15 10:57:16 2014 +0100]"},
{"name" : "a709a72cd2ff64e5fb81a388d95f85c62ede7db3", "time" : 1389778286, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Make Parsers Dotty-compliant.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Jan 15 10:31:26 2014 +0100]"},
{"name" : "a134d3975068b2439a8ed356750ffde45e874296", "time" : 1389778270, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fix typing of unapplySeq extractor arguments.\n\nNeeded a special case for them.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Jan 15 10:31:10 2014 +0100]"},
{"name" : "79aadfe04c4b3aaae4f56ea6a35c7cac61c4af77", "time" : 1389778033, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Treat \"this\" specially when it appears in a parent constructor\n\nIn this case its owner is the next outer class, not the currently defined one.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Jan 15 10:27:13 2014 +0100]"},
{"name" : "de53428d957c07333aa765e826fdbb4022229d2d", "time" : 1389735392, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Avoid procedure syntax\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Jan 14 22:36:32 2014 +0100]"},
{"name" : "fcdb8b9f7449096890887b4801359144983d8c4f", "time" : 1389735348, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Allow ExprType as the type of a view argument.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Jan 14 22:35:48 2014 +0100]"},
{"name" : "7e71f3dc5252f4df10cf330eb2ec535338dac992", "time" : 1389735295, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Do ot search for implicit members in packages.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Jan 14 22:34:55 2014 +0100]"},
{"name" : "a126edd5dfc5605211d0945a5f04a69a88beffa9", "time" : 1389708261, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Making files in pickling dotty-compliant.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Jan 14 15:04:21 2014 +0100]"},
{"name" : "c27bc71c2e3f91a275e40f082548ca244814f345", "time" : 1389707965, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Avoiding typing a () tree without position when typing return\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Jan 14 14:59:25 2014 +0100]"},
{"name" : "a0b6798f3127196114da818b18fbeda9633ca209", "time" : 1389701277, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Avoiding cyclic references involving module vals and imports.\n\nPreviousely, compiling all of dotc/core caused a cyclic reference. The cyclic reference was caused by evaluating a module val, which caused it to evaluate its type, which caused the evaluation of all preceding imports, which led via some hops back to the same module val. We now break the cycle by computing the signature of a module val without going through its type.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Jan 14 13:07:57 2014 +0100]"},
{"name" : "550bf861e28a62a5057d6816e0bd336463e9b0bf", "time" : 1389701057, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Better error message for double definitions.\n\nIf one of the conflicting definitions is synthetic, it will now point to the code position of the other.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Jan 14 13:04:17 2014 +0100]"},
{"name" : "38b87f4b33ea0b0a1add120d49d252ffe6582ccd", "time" : 1389701012, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Make SelfName (and ImplClass) flags that are valid from start\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Jan 14 13:03:32 2014 +0100]"},
{"name" : "41e22296813188b1def6bc948e138244afd9cb92", "time" : 1389700983, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Renaming to make program Scala2x and Dotty compatible.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Jan 14 13:03:03 2014 +0100]"},
{"name" : "3affebe539b3461e7ea84411fe0a3943ccf35b4b", "time" : 1389636931, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Refined handling of imports\n\nThree changes:\n\n1) Named imports beat wildcard imports in same scope, no matter what the relative order is\n2) Named/named imports and wildcard/wildcard imports in the same scope of the same name but different\nsymbols give an error\n3) An error is not reported if two imported termRefs or typeRefs are equal wrt =:=.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jan 13 19:15:31 2014 +0100]"},
{"name" : "607033b8127c249b2eda95da2341a7e98f4063b4", "time" : 1389634511, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fix parsing implicit function literals.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jan 13 18:35:11 2014 +0100]"},
{"name" : "13327c6f1ce48569aba9a8ec5a7557cb60f01c21", "time" : 1389634230, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "More refined handling of avoidable aliases.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jan 13 18:30:30 2014 +0100]"},
{"name" : "504ca664b403a942983002e41e06efae20b397b5", "time" : 1389634156, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Better handling of assignment.\n\nProblem:\n\n     lhs = expr\n\nwhere the lhs takes an implicit. An implicit argument might not be available at the assignment site, but the epxression should typecheck anyway. Test case in SymDenotations.NoDenotation.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jan 13 18:29:16 2014 +0100]"},
{"name" : "bbe5f17384e8e1ed5492516ca0d9e397cd770823", "time" : 1389629821, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fix to typedFunction\n\nWe now assume protoFormals and protoResultType as given in an expected function type, and check post-hoc that parameter lists have the right length.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jan 13 17:17:01 2014 +0100]"},
{"name" : "1743bd6c8e66cd12b3cc78c9a52c4c15d4bc9ec9", "time" : 1389629339, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Survive searching viers oper exprTypes\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jan 13 17:08:59 2014 +0100]"},
{"name" : "e356e252b9d400730ca8f748ab5986e18d7597d0", "time" : 1389628778, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Improved avoidance of local symbols\n\nIf the refinement in a refined type refers to a local symbol, drop it and return only the parent.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jan 13 16:59:38 2014 +0100]"},
{"name" : "3b21416e1b1ba9f301e8fc269f656651f99ca0ea", "time" : 1389628674, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Make sure constructors have at least one non-empty parameter lists\n\n(might want to change this later, but that's how Scala2 does things)\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jan 13 16:57:54 2014 +0100]"},
{"name" : "a7de2380c1d0864a4b54a3e9630543bebeac2c31", "time" : 1389620612, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Making some traces conditional on printers being enabled.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jan 13 14:43:32 2014 +0100]"},
{"name" : "7a482f18a47945e118c3ab44697b8b8bebe4002a", "time" : 1389620552, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Follow through multople layers of instantiation when printing a typevar\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jan 13 14:42:32 2014 +0100]"},
{"name" : "d778feed547bda33cf823e85a2e0696496df744e", "time" : 1389620452, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "When typing a function value (xs) => T with a function type as exp[ected type,\ncheck that argument lists have same length.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jan 13 14:40:52 2014 +0100]"},
{"name" : "620359dc261c12456519c142e3a6e9842f750989", "time" : 1389620366, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "When instantiating a type var, need to map back from polyparams to typevars.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jan 13 14:39:26 2014 +0100]"},
{"name" : "12983c39486b3759028502125944f09d62267e83", "time" : 1389604450, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Extend type maps and type accumulators to prototypes\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jan 13 10:14:10 2014 +0100]"},
{"name" : "0ce813b1887348c148faa0525f4053227913014e", "time" : 1389601612, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Redo isFullyDefinedAccumulator\n\nThe new scheme is robust even when following freshky instantiated type variables. These did not show up in the old varianceMap scheme.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jan 13 09:26:52 2014 +0100]"},
{"name" : "6b83b526cd3c9e0ce2931bd9b999b67ea230a705", "time" : 1389459209, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "fix for comparing or-types.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jan 11 17:53:29 2014 +0100]"},
{"name" : "f120cde2985b4eca33ad5067d788b20242cb9f24", "time" : 1389449918, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Avoid cyclic references using imports.\n\nThe example is the current dotctest. import Symbols._ comes well before the definition of Symbols. Without the fix, it caused a cyclic reference error. But it seems reasonable to wait with the import until the class is fully elaborated.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jan 11 15:18:38 2014 +0100]"},
{"name" : "d68e4f85e7dbddb6a42a4be202e765d445268be6", "time" : 1389449505, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Handling refined types.\n\nA refined type  P { refinement } is expanded to a class\n\n     class <refined> extends P { refinement }\n\nfor type-checking. The problem is that the parent P does not always have a constructor. So we need to leave the parent as a type and add a special case to classDefSig that handles it.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jan 11 15:11:45 2014 +0100]"},
{"name" : "0bf0d57f988b1fe3f29991f0cde6aaa1b996b0a2", "time" : 1389449328, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Handles setters where the getter takes implicit or other parameters.\n\nNow legal:\n\n    def foo(implicit ...) = ...\n    def foo_=(x: T): Unit = ....\n\n    foo = ...\n\nAnd it works even without the implicit (need to clarify the spec on this count).\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jan 11 15:08:48 2014 +0100]"},
{"name" : "76fec95265161246471932757a25ab54ea4ee393", "time" : 1389449202, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Better reporting of cyclic references involving imports.\n\nUsed to be \"cyclic reference involving val <import>\". Now prints import statement that caused the error.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jan 11 15:06:42 2014 +0100]"},
{"name" : "561e2e864daa2cd017aa938a73739e5af6c4c306", "time" : 1389402922, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Strip implicit parameters when deciding specifity of methods.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jan 11 02:15:22 2014 +0100]"},
{"name" : "937dbdcf1d15548a6870c18514441d7b4e0bf234", "time" : 1389383675, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Type comparison tweak.\n\nWe assume that two types A.this.C and B.this.C where C is the same class symbol, yet A and B are unrelated, are equal (i.e. mutually subtypes of each other). Such types comes up in situations where the self type of a type is different from the enclosing class.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jan 10 20:54:35 2014 +0100]"},
{"name" : "68d7ea1534f6145d59506138d6af169cc27f9aa3", "time" : 1389370910, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Removing conforms from StdNames because it shadows Predef.conforms, which is needed a lot for implicit search.\n\nWe need to use a less common name for Predef.conforms!\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jan 10 17:21:50 2014 +0100]"},
{"name" : "5d38be773a2083fa2112f5cb688070b867634120", "time" : 1389370841, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Mover termRef/typeRef and friends up to Denotation.\n\nNeeded for implicit search, because some implicits might be UniqueRefs, not SymDenotations\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jan 10 17:20:41 2014 +0100]"},
{"name" : "a63c3db753e8dcc0ed9daa3834ac7a01d6748540", "time" : 1389319268, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Ensure completion before computing non-private members.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jan 10 03:01:08 2014 +0100]"},
{"name" : "a6936756bde8bc081f1a0623c1abd1f12be0a649", "time" : 1389314612, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Add type parameters to synthetic constructors.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jan 10 01:43:32 2014 +0100]"},
{"name" : "fce100c1e084b8f7f031f3699033a7b240a241b7", "time" : 1389308478, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Add a constructor to class Any, so that it can be inherited.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jan 10 00:01:18 2014 +0100]"},
{"name" : "b50bb200cfcc8108f3ba5269e2ae69d0156f944d", "time" : 1389307577, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Ensure progress in checkAccessible\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jan 9 23:46:17 2014 +0100]"},
{"name" : "d998a3287b465e99340c50f01680f8b3b9b87218", "time" : 1389307306, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Refine eligibility\n\nBecause eligibility is tested in a context which is different from the implicit search context, we cannot assume that type variables have their constraint recorded. So we have to approximate subtype tests with PolyParams which are not in the constraint set.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jan 9 23:41:46 2014 +0100]"},
{"name" : "6135d51b35ec20199231984e978a6be99169d351", "time" : 1389296269, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Avoid dropping errors in typedApply\n\nPrevious logic dropped some errors on retry, when typedUnadapted did not change qual.\n\nAlso: Special case repeated parameters in isAsSpecific. Those have to be converted to the underlying parameters, so that\n\n    (xs: Int*)T\n\nis as specific as\n\n    (xs: Long*)T\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jan 9 20:37:49 2014 +0100]"},
{"name" : "5df489a794d5a7d0e70fcfeb968b6e4bb9cd9953", "time" : 1389296070, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Special case Unit for result type conformance check.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jan 9 20:34:30 2014 +0100]"},
{"name" : "0b2de1b4f48655b81796cfdf80c087443f3d0fda", "time" : 1389296045, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Don't do an implicit conversion to Any, AnyRef, or Unit.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jan 9 20:34:05 2014 +0100]"},
{"name" : "9e63bf253c169d6b2a2e74f65b3a4029f0781655", "time" : 1389295845, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Better error message for failed overloading resolution.\n\nIndicate only thhose alternatives that remain after narrowing.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jan 9 20:30:45 2014 +0100]"},
{"name" : "0a8eb5087744c44dc67c2d79ce63e993c3ac0ed0", "time" : 1389243898, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Augment namedParts to follow through on some proxy types.\n\nNow handled: ConstantTypes, MethodParam, PolyParam\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jan 9 06:04:58 2014 +0100]"},
{"name" : "f0b9d863e940a7b261a2401d68a3ec492ba5fb8d", "time" : 1389242824, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Avoid dropping errors in typedApply\n\nProblem is that adaptInterpolated might fail without producing an error. In that case we have to fall back.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jan 9 05:47:04 2014 +0100]"},
{"name" : "b47cb7ce5a608f8ea9fa0590692255ea14cb241c", "time" : 1389242670, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Refactoring Reporter.isSlent -> errorCount, wasSilent\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jan 9 05:44:30 2014 +0100]"},
{"name" : "c8692971103cc047a9de62050393807cb6fa7794", "time" : 1389209964, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Change namedParts to also include the underlying types of TermRefs.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Jan 8 20:39:24 2014 +0100]"},
{"name" : "8b9c14dcf8c74fbb9af2ecf842b8ba7776571f4c", "time" : 1389209933, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Mapping over a SelectionProto should give a SelectionProto, not a RefinedType.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Jan 8 20:38:53 2014 +0100]"},
{"name" : "af9c414703db969d14ac66898fd2fe8d98bda3aa", "time" : 1389124419, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixing illegal code that should have been flagged by scalac.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Jan 7 20:53:39 2014 +0100]"},
{"name" : "f2d8f28b1eebfc52b61594bd6607faa581499f03", "time" : 1389123371, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "New subtype constraint maintenance algorithm.\n\nObjective: Avoid cycles by detecting all cases where\n\n    A <: B and B <: A\n\nand removing those cases by unifuing A and B.\n\nCycles need to be avoided because they lead to deep subtype recursions.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Jan 7 20:36:11 2014 +0100]"},
{"name" : "84cbb43bc3e4dc8399202763b371fda57ac3c072", "time" : 1389036731, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Remove debug output\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jan 6 20:32:11 2014 +0100]"},
{"name" : "aff925e667a62af65bf0190c3318219d2218b3c1", "time" : 1389036321, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fix computation of inherited result types.\n\nNeed to take into account type parameters of inherited methods, which have to be instantiated with the type parameters of the current method.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jan 6 20:25:21 2014 +0100]"},
{"name" : "71027f15cc9e125520c210d01a1b453f6ba45ec0", "time" : 1389036259, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fix divergence test for implicits\n\nThe test did not fire if the set of class symbols of the searched-for type was empty.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jan 6 20:24:19 2014 +0100]"},
{"name" : "2948c91f06eacc1c1904576275b31d2872702917", "time" : 1389019031, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Change to overloading behavior\n\nNullary methods are always as specific as non-nullary ones.\n\nNeeded so that\n\n    foo()\n\ntakes precdennce over\n\n    foo(x: T)\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jan 6 15:37:11 2014 +0100]"},
{"name" : "d495cf9a0c24fb6ea63acb3e20f35b634814f1aa", "time" : 1389005388, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Relax isFullyDefined test\n\nPreviously, if forceDegree = noBottom, we failed the test if a type variable was minimized to Null or Nothing. Now we succeed and maximize the type variable instead. It seems Scala2x does soemthing similar, at least the change is needed to make PathResolvers.scala compile.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jan 6 11:49:48 2014 +0100]"},
{"name" : "bdb0103d5196e3d64e9ea2d977058f49a78d749d", "time" : 1388999354, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fix to overloading resolution: prioritize non-methods over methods.\n\nIf one alternative is a non-method yet the other is a method (of type PolyType or MethodType), the first alternative is \"as specific as\" the second.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jan 6 10:09:14 2014 +0100]"},
{"name" : "6b3f2225a8d6de898ca9a2299570056807de1a92", "time" : 1388995119, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Change to computing of unapply patterns.\n\nIf scrutinee has a get method with a product result type, assume the product members as pattern arguments only if there are more than one argument patterns. Without this tweak, the pattern\n\n     Some((x, y))\n\nwould not typecheck, as the extractor result type is Option[(S, T)], so normally two patterns of type S and T would be expected. Interestingly, with the tweak we still get a sort of auto-detupling.\n\n     Some(x, y)\n\nwould also work (did before the change, and still does now).\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jan 6 08:58:39 2014 +0100]"},
{"name" : "7b30d5b7a9fe7d89a252d8d9a07fd4c009e49a0d", "time" : 1388990623, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Exclude inaccessible definitions from contextual implicit search.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jan 6 07:43:43 2014 +0100]"},
{"name" : "3fa986d52281fb3ece27e825d56e2723ae97d84b", "time" : 1388988657, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Make implicit scope work in the presence to TypeVars\n\nNeed to pass a current context to be able to find instances of typevars.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jan 6 07:10:57 2014 +0100]"},
{"name" : "e3bcdfa84b348a3c9c886f38e7ac382f8364b21c", "time" : 1388988439, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Make Settings.scala dotty conformant\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jan 6 07:07:19 2014 +0100]"},
{"name" : "7c5d1b7e19596d5190115e3f5d62966ec8541509", "time" : 1388873658, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Propagate constraints on result type eagerly into implicit search.\n\nThus constraining the search space.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jan 4 23:14:18 2014 +0100]"},
{"name" : "35eeb8e8f17735bee5722954338836b10cfbb1e8", "time" : 1388873215, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Changes to propagation of wildcardtypes\n\n1) Selecting from a wildcardtype now gives a wildcard type. Wildcard types are no longer legal as prefixes of NamedTypes.\n\n2) Bound of type variables are proagated into wildcard type approximations.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jan 4 23:06:55 2014 +0100]"},
{"name" : "0aa4d2ce10dcf872c16ed4a5ecb7cd6a2b8c9b30", "time" : 1388871194, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Output cleanups\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jan 4 22:33:14 2014 +0100]"},
{"name" : "b85d7e2cbd1f4df217db544a467607a73e05eddc", "time" : 1388844017, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fix prinitng of pattern guards in trees\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jan 4 15:00:17 2014 +0100]"},
{"name" : "1795d8c04c371c5c22ecf6486fdab4281f12868f", "time" : 1388834777, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fix in constrainResult\n\nNeed to handle the case of a curried method with result type\n\n    (Ts)T\n\nand expected type\n\n    Ts => T\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jan 4 12:26:17 2014 +0100]"},
{"name" : "6e49304b739f7caa0b29a310a2fb9a632bf0ac20", "time" : 1388832642, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Add AnyRef parent for case classes that do not have an extends clause.\n\nPreviously, such classes just had ProductN as parent, which is not a subtype of AnyRef.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jan 4 11:50:42 2014 +0100]"},
{"name" : "c6e2ca6845352a0cdb82f8cd3b9baec2154b4f61", "time" : 1388829831, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Make anonymous methods non-dependent where possible so that they can be used in closures.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jan 4 11:03:51 2014 +0100]"},
{"name" : "eeab526ef293abdb15d1776e470aca59c4697cfd", "time" : 1388828009, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Generalize overloading resolution to type arguments.\n\nWe need to take type arguments + value arguments into account when there are several overloaded\nalternatives that are all polymorphic and can be instantiated with the type arguments.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jan 4 10:33:29 2014 +0100]"},
{"name" : "5cff81ca46d771033b9877f510080871cbaebbfc", "time" : 1388770941, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Hardening against a possible NoDenotation has no owner crash.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jan 3 18:42:21 2014 +0100]"},
{"name" : "5732fb2e64d72629c94f5d0d0c30360f0169abc2", "time" : 1388770907, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "typeArgs should return TypeBounds for a wildcard type.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jan 3 18:41:47 2014 +0100]"},
{"name" : "ffb11f39dce0df32cedca3364727d6b56aa83014", "time" : 1388770869, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Avoid premature caching of baseClasses and superclass bits.\n\nThis can happen while classParents is set to Nil in Namer#classSig. Any call to baseClasses and superClassBits during that time needs to bypass the cache.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jan 3 18:41:09 2014 +0100]"},
{"name" : "bbf09538e1248ea8907e34633ca5235c88533c97", "time" : 1388770788, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fix printing of wildcard types.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jan 3 18:39:48 2014 +0100]"},
{"name" : "2023b940f0ec91705d9fd8017fa08d59aa11ac99", "time" : 1388759331, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Making namedPartsWith more robust.\n\nWhen called from implicitScope, we formed an AndType with a WildcardType. No problem, except that this broke the AndType assertion. The assertion is not needed for this sepcial case.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jan 3 15:28:51 2014 +0100]"},
{"name" : "c81a21a8ecc690813bbe4eaece0640f262434f84", "time" : 1388759248, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Don't print module class suffix in refined printer.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jan 3 15:27:28 2014 +0100]"},
{"name" : "62a935f3222eea1d7a08b788b9745c4e99f440f9", "time" : 1388759213, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Drop module class suffix when looking for class with enclosing name.\n\nE.g. in privateWithin.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jan 3 15:26:53 2014 +0100]"},
{"name" : "fd5e45bd71c972fddc0f835cdb011beb76a77770", "time" : 1388755293, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Making printing configurable.\n\nSpecial by-topic printers that can be turned off.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jan 3 14:21:33 2014 +0100]"},
{"name" : "2d500b7746a38647c7a97db99207ca4972cd49eb", "time" : 1388750171, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "safeUnderlyingTypeParams now forces uncompleted symbols.\n\nWhen removing logging, it turned out that Coder no longer compiled. The problem was tracked to safeUnderlyingTypeParams which did not force enough.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jan 3 12:56:11 2014 +0100]"},
{"name" : "9955a2fd64af1ff7b9992fa12662a85e07d82fc7", "time" : 1388683164, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixing a type problem where code does not compile under dotty.\n\n... and I believe should not compile under Scala2x either. The problem is in line 361 of TreeInfo.scala\n\n    methPart(tree) match { ...\n\nHere,\n\n    tree: tpd.Tree\n    methPart: (tree: this.Tree): Tree\n\nSo we need to show that\n\n    tpd.Tree <: this.Tree\n\nLHS expands to\n\n    ast.Tree[Type]\n\nRHS expands to\n\n    ast.Tree[T]   where T >: Untyped is TreeInfo's type parameter\n\nSince Tree is contravariant, we need to etablish\n\n    T <: Type\n\nbut I see nothing that could prove this. The Dotty typechecker detected the problem, yet Scala2x's didn't. Need to follow up on why not. For now, adding the necessary constraint to the codebase.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jan 2 18:19:24 2014 +0100]"},
{"name" : "1aaca404f83020a06a460d56841cd0a6b82b989b", "time" : 1388681966, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Tweak to isFullyDefined\n\nThe isFullyDefined accumulator will now maximize variables which are contravariant in the type, rather than minimizing them. Fits better in the general scheme and makes a pattern match in TreeInfo go through.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jan 2 17:59:26 2014 +0100]"},
{"name" : "37002e9fb650510e16cd038c5d7026bed50060f9", "time" : 1388675089, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Some cleanups.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jan 2 16:04:49 2014 +0100]"},
{"name" : "09fdc8ee5705a80c361d3c07c49a5a660809a222", "time" : 1388675057, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Taking a fully-defined result type into account when forming a closure.\n\nGiven\n\n     (params) => body\n\nand an expected type\n\n     Ts => R\n\nwith R fully defined, we use R as the result type of the closure def into which the function is translated.\n\nNote: It would be nice generalize this further to result types which are not fully defined, yet this would complicate things by entangling typing and desugaring.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jan 2 16:04:17 2014 +0100]"},
{"name" : "502ad2204e0f286f3a1f7c343161613bd85dfb14", "time" : 1388674906, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixing a problem with isFullyDefined\n\nWhen forceDegree == None, a TypeVar should trigger a false result.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jan 2 16:01:46 2014 +0100]"},
{"name" : "83c74a5e4a75f2973554a17fcbc31e18f3aa229f", "time" : 1388673581, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixing problems with wrong owner\n\n... which were introduced when trying to avoid NoSymbol owners.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jan 2 15:39:41 2014 +0100]"},
{"name" : "2ee34efcb8ae2e8604b96de6824d4b55ce583e7d", "time" : 1388670443, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Propagating fully defined result types into closures.\n\nGiven a function\n\n   (params) => body\n\nIf the expected type is Ts => T and T is fully defined, desugar to a closure with given result type T.\n\nNote, it's tempting to generalize this further to non-fully defined result types, but then we cannot do clsoure expansion during unsugaring, and things would get complicated.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jan 2 14:47:23 2014 +0100]"},
{"name" : "2ecd2ddd85829faa2c724b00c8da11eb1eb8b04f", "time" : 1388654109, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Making Desugar.scala dotty-conform.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jan 2 10:15:09 2014 +0100]"},
{"name" : "72e1e896d369a3872c49c26544d53f6e04436217", "time" : 1388654070, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Ensuring that contexts do not have NoSymbol as owner.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jan 2 10:14:30 2014 +0100]"},
{"name" : "4907eb9e16597f1fce246555a45635c496b36264", "time" : 1388653850, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Avoiding a crash in denot-union.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jan 2 10:10:50 2014 +0100]"},
{"name" : "427e517b770633f656fcbf28957a0c8e9cba89c8", "time" : 1388652107, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Avoiding converting with a view to a TypeVar\n\nThis triggered an assertion violation in ImplicitSearch. When checking an argument for a method, it's possible that the method parameter is a lower bound, and the argument is incompatible with that lower bound. In this case an implicit conversion towards the variable was searched, which leads to an explosion of the search space (the variable expands to WildcardType, so _every_ implicit is eligible). Better to search for a conversion to the lower bound (or, in fact, and equivalently, the underlying type parameter) instead.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jan 2 09:41:47 2014 +0100]"},
{"name" : "3f053053787b531a8ca2670f4c88ab941629dc50", "time" : 1388651937, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Better error message for accessibility errors.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jan 2 09:38:57 2014 +0100]"},
{"name" : "b1842f519e8e5ea7a7e5976521f8b6c9f7efeff0", "time" : 1388600681, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "More precise widening of types referring to a block-local.\n\nThe new scheme widens termRefs everywhere variance is positive and type-aliases over termrefs everywhere indepdendent of variance.\n\nNeeded to add variance to TypeMap to make this work.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Jan 1 19:24:41 2014 +0100]"},
{"name" : "3a0e9fbb0018e15c17aea659569202c315ad59f1", "time" : 1388595990, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Constraints need to be ignored when forming lubs and glbs of constrained oarameter bounds.\n\nOtherwise we would get into situations like the following (experienced in typers.Arrays):\n\nConstraint:\n\n    B >: String\n    T >: B\n\nAdd B >: T to this constraint. You get:\n\n    B >: String | T,\n\nbut because T >: B >: String, the rhs reduces to\n\n    B >: T\n\nSimplified this gives\n\n    B = T\n\nand the String lower bound has vanished!\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Jan 1 18:06:30 2014 +0100]"},
{"name" : "a5611f867c2b9e493d5f0497ddfb813b5daf347d", "time" : 1388581820, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Reverting a change in `tpd` that would no longer be type-correct under dotty rules. (reverted from commit 50ab9f559ad36b916d24e733df3629994d239583)\n\nWe now admit `identity _` and, if the expected type is a function type, pass this type on to the function. If the expected type is not a function type, we pass on AnyFunctionProto.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Jan 1 14:10:20 2014 +0100]"},
{"name" : "a4395b48362b080dc4a896099d71ea90dc3b998c", "time" : 1388573115, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Revert \"Reverting a change in `tpd` that would no longer be type-correct under dotty rules.\"\n\nThis reverts commit 50ab9f559ad36b916d24e733df3629994d239583.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Jan 1 11:45:15 2014 +0100]"},
{"name" : "89fb0898c4a099fcc5b9db36ea45ea504d966761", "time" : 1388513720, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Better assertions and diagnostics in TypeComparers.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Dec 31 19:15:20 2013 +0100]"},
{"name" : "50ab9f559ad36b916d24e733df3629994d239583", "time" : 1388513685, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Reverting a change in `tpd` that would no longer be type-correct under dotty rules.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Dec 31 19:14:45 2013 +0100]"},
{"name" : "2623e52d088b9cdd79255097b658c064437df5e0", "time" : 1388513628, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Check that constraints are not cyclic, and avoid cycles when replacing parameters.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Dec 31 19:13:48 2013 +0100]"},
{"name" : "821fa9b9e832adfd68a55e5705dc165096a86a38", "time" : 1388513433, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Avoiding search for companion module if class in question is anonymous.\n\nThis can prevent cyclic references during implicit search.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Dec 31 19:10:33 2013 +0100]"},
{"name" : "95c5a5dc4f940d63a8b4884524d82105c9dced6f", "time" : 1388513376, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Combining AndType, OrType into common Trait.\n\nStill need to explore where we can use this (one usage will be in TypeComparers).\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Dec 31 19:09:36 2013 +0100]"},
{"name" : "e7d8c90b3817871a067f9ea7dd83f4efec83b5a1", "time" : 1388513314, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Adding dotty.Predef to root imports\n\nWe need to have a place where to put (yet to be implemented) classTag/typeTag macros, which will replace the custom search for tags in Scala2x\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Dec 31 19:08:34 2013 +0100]"},
{"name" : "a3fe0c6b63b7c2019c80546f100693b261bb2f34", "time" : 1388490666, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Adding a prototype of the right-hand side of default-getters.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Dec 31 12:51:06 2013 +0100]"},
{"name" : "e56b26b55de6459ae74ff86e2a62dd2d00436ab2", "time" : 1388490594, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixing the type of a named self reference.\n\nThis was previously\n\n    C.this.self\n\nbut it should be\n\n    C.this\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Dec 31 12:49:54 2013 +0100]"},
{"name" : "3edab6ec1444b19203381612fba3e16ca1bafc95", "time" : 1388486657, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Upgrades to handle subtyping between parameterized and higher-kinded types.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Dec 31 11:44:17 2013 +0100]"},
{"name" : "4a175b13e4fcefc7cb3cf70da254205a14dc2418", "time" : 1388343001, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Adding a new case to subtype tests.\n\nThis one handles situations like\n\n  val sym: Symbol\n  sym.type <:< Symbol { type ThisType = sym.ThisType }\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 29 19:50:01 2013 +0100]"},
{"name" : "0553f08eaeee1f9ac7ef6c28b341a92e0fb452e3", "time" : 1388338578, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Tightening of position handlng\n\n1) endPos works now even for NoPosition.\n2) On the other hand, there's an assertion in Typer.typed which requires every non-empty tree that's type checked in a globally committable context to have a defined position.\n\nSome fixes were needed to make the tests pass the new assert.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 29 18:36:18 2013 +0100]"},
{"name" : "3f39cd8e15c321cf6ac97a0137087f7c2d69ce60", "time" : 1388338468, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Avoiding an idiom which is not supported by dotty.\n\nNormally, Predef.identity cannot be used as an expression with unknown expected type. You need a trailing `_`.\nBut when used as a default argument, Scala 2x allows it. I am not sure why it is allowed. In dotty it's disallowed everywhere, hence the fix.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 29 18:34:28 2013 +0100]"},
{"name" : "4e1880c535367892b97e7a111438cb0ce49998c0", "time" : 1388263781, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixing a problem where constrictors forgot that parameters are implicit.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Dec 28 21:49:41 2013 +0100]"},
{"name" : "3c8196300d65738d6779ba8703e2a86ee3390ec7", "time" : 1388263565, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "New version of eta-expansion.\n\nThis version expands a method ref p.m to the untyped tree\n\n     p.m(_, ..., _)\n\n(after lifting impure expressions from p). Afterwards the usual application mechanisms kick in. This fixes  problems also present in Scala 2.x, where an eta-expanded function was not as flexible as an explicitly expanded one (for instance, eta expansion did not honor default parameters).\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Dec 28 21:46:05 2013 +0100]"},
{"name" : "53c0d8996c5d065bff2f860948e5c563b187d221", "time" : 1388158087, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixing off-by-one error for SourcePosition#line\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Dec 27 16:28:07 2013 +0100]"},
{"name" : "fdfe8f1d067bbc62037708d563b3686cc84fc4a7", "time" : 1388158065, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Avoiding redundant tuple formations.\n\nIn a case like\n\n     val (x, y) = if (...) (a, b) else (c, d)\n\nwe can pass the tuples directly. Previously, this would have been translated to\n\n    val (x, y) = (if (...) (a, b) else (c, d): @unchecked) match {\n      case (s, t) => (s, t)\n    }\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Dec 27 16:27:45 2013 +0100]"},
{"name" : "1cf1ee2fbe2f56cf404d157825a956aa0956405f", "time" : 1388061513, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fix to blockType for automatic widening.\n\nNeed to apply widening within types, not just at toplevel.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Dec 26 13:38:33 2013 +0100]"},
{"name" : "6c292cb1f633a429149fef227ccfe4c2af4035af", "time" : 1388059321, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Module classes are now entered into owner's scope when unpickled.\n\n... aligning with treatement of module classes elsewhere.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Dec 26 13:02:01 2013 +0100]"},
{"name" : "90eacc618057747e60be994e981c24f4229620d4", "time" : 1388057393, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixing unpickling of refinements.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Dec 26 12:29:53 2013 +0100]"},
{"name" : "30a587d46df65825dd3fd164f35aa27cc91c633e", "time" : 1388007318, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixing a bug which arose for class denotations that were absent.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Dec 25 22:35:18 2013 +0100]"},
{"name" : "657033fd8df0333c4df7c5881512e034571c2de1", "time" : 1388007280, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Avoiding auto-unit insertion.\n\n(vecause dotty can't do it).\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Dec 25 22:34:40 2013 +0100]"},
{"name" : "b5741c2eec037ba42824308705bac4dcb6a8d0cd", "time" : 1387995134, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "New test\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Dec 25 19:12:14 2013 +0100]"},
{"name" : "d85b6a22a654458e4f3b9754f77dc621b0fdbe66", "time" : 1387994932, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Small tweak to LRU-cache.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Dec 25 19:08:52 2013 +0100]"},
{"name" : "f24295a7448fc67b399f292f05d89e4b216d9749", "time" : 1387994896, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fix for caching of denotsNamed.\n\nThe problematic scenario is when a member is looked up between the point where a class is provisionally completed with Nil as parents and a class is finally completed. In that case we might miss a parent ref, which should then not entered in the cache.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Dec 25 19:08:16 2013 +0100]"},
{"name" : "586b23be5e9ef305f98016b49b7333ecf8e2e56c", "time" : 1387983612, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fix to computeNPMembersNamed.\n\nAlso, added logic for cache consistency checking for membersNamed.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Dec 25 16:00:12 2013 +0100]"},
{"name" : "a19237f7be972870ca1c7477704a724419ef793f", "time" : 1387983551, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Making the name of self visible inside a class.\n\nPreviously, it wasn't.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Dec 25 15:59:11 2013 +0100]"},
{"name" : "7260b2607a4b0249f63bb75dac6143e902b91c66", "time" : 1387981194, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fix for denotsNamed.\n\nPreviously, the filterDisjoint forced the signature computation too eagerly, which led to a stub for AnyRef.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Dec 25 15:19:54 2013 +0100]"},
{"name" : "9a474a87b86105e0b5b935e8b20dc3fc25338da4", "time" : 1387965436, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fix bug in uninstantiatedTypeParams\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Dec 25 10:57:16 2013 +0100]"},
{"name" : "d0105688105dd31260376179113ec94cdb1179a2", "time" : 1387965327, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Classdefs print their scopes under -verbose\n\nThis is a debugging measure (maybe migrate to a different setting?)\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Dec 25 10:55:27 2013 +0100]"},
{"name" : "1fbea3499b010de2daef045408f11835bddded30", "time" : 1387884863, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Dropping redundant treatment of constructors in selectionType.\n\nConstructors are handled anyway in computeNPMembersNamed\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Dec 24 12:34:23 2013 +0100]"},
{"name" : "b23bc744ce9f8275fb6b433e40f14158eefc1abf", "time" : 1387884815, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixing problems in treatment of private symbols\n\n1) Accessibility check was broken because it looked at symbol's owner, where it should have looked at context owner.\n\n2) Refined treatement if members. Previously, nonPrivate member returned a subset of member, i.e. those denotations returned by member that were not private. This is not correct. In a situation like\n\n    class A { def x: Int = 1 }\n    class B { private def x: String = \"\" } extends A\n    (new B).x\n\nthe non-private member returned should be A#x. Changed membersNamed and friends as well as checkAccessible to account for that.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Dec 24 12:33:35 2013 +0100]"},
{"name" : "336a1fc56074b58c54951a4a351d258f23999281", "time" : 1387882549, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixed desugaring of Symbol\n\nNeed to do Symbol.apply(...) instead of new Symbol(...) because symbols are hash-consed and the constructor is private. This slipped through because of the wholes in accessibility checks which will be fixed in the next commit.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Dec 24 11:55:49 2013 +0100]"},
{"name" : "15bc45cd76445d5d3e8566492fc54b7e4b8f22e3", "time" : 1387874613, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Refining checkClassTypeWithStablePrefix\n\nNeeds to unwrap parameters. While we are at it, breaking out common functionality in underlyingClassRef.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Dec 24 09:43:33 2013 +0100]"},
{"name" : "4f41454cbd1563926f4005d2ee1268538a6b22b1", "time" : 1387831391, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixing desugarings of classes.\n\n1) get Method\n\nThe idea is that if a case class has exactly one case field, then that field is returned as result of the get method. If it has more than one, it is a subtype of Product and the fields are returned by the _i methods.\n\n2) unapply: Boolean\n\nIf a class has no case fields the unapply method returns true, rather than the this.\n\n3) Self names\n\nA self clause\n\n    { self => ...\n\nif now desugared to\n\n    { self: C =>\n\nwhere C is the type of the class.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 23 21:43:11 2013 +0100]"},
{"name" : "93630a2097dd52f2b764a3a739887c2a71398578", "time" : 1387826531, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Making default getters for constructor of a case class work also for its apply method.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 23 20:22:11 2013 +0100]"},
{"name" : "b9b5e970f8c56d490101156c4fe849c1e952e490", "time" : 1387819881, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Early indexing of parameters in classes.\n\nType parameters of classes have to be entered before the class is completed.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 23 18:31:21 2013 +0100]"},
{"name" : "dbe6ad9dcd9fed37ce2ed63ac7c5403eeb056ae4", "time" : 1387794039, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Refactored Namer\n\nNamer refactorings that break out the functionality for class completing into a separate class. We need to enter type parameters early in a second step.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 23 11:20:39 2013 +0100]"},
{"name" : "6ed666c4be5bc4904c926a265d711b85f729d4b3", "time" : 1387735098, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Typing by-name parameters with ExprTypes.\n\nTo avoid duplication between by-name parameters and expr types, we treat by-name parameters as as having ExprType. A part of this is introducing ByNameTypeTree, a specific tree class for => T types.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 22 18:58:18 2013 +0100]"},
{"name" : "108be8880688653de490975f29f6ae469e9f3e6a", "time" : 1387730903, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Making showDcls return a string.\n\n... as all other show methods do.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 22 17:48:23 2013 +0100]"},
{"name" : "c986cb4546891991d418b3bee25ab233ecc31ffa", "time" : 1387730864, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fix in parsing annotations.\n\nAnnotaton and argument appeared in reversed order.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 22 17:47:44 2013 +0100]"},
{"name" : "e36fb97af629ae3fad3a1a6ee56034a850e00516", "time" : 1387730827, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fix in treatment of type parameters for default getters of primary constructors\n\nThese need to have their paramAccessor and other flags removed, leaving only Param.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 22 17:47:07 2013 +0100]"},
{"name" : "c0d48825ce445342f507abf55c422f0b28c18ba8", "time" : 1387730719, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Not counting type arguments for numArgs\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 22 17:45:19 2013 +0100]"},
{"name" : "c9d8d291687de687fa2bcdb806fc85293c3ba4dc", "time" : 1387728019, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Generalized ensure constructor logic from Java classes to all classes or traits except Java modules.\n\nWe now assume that all classes or traits (with the exception of Java statics) have a constructor.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 22 17:00:19 2013 +0100]"},
{"name" : "70e57128bb7623998f76aaf2ad8541d438b4b2b8", "time" : 1387725642, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Normalize parents to be class refs\n\nPreviously, alias type refs were also accepted. But this is the wrong assumption for computeMembersNames. So, e.g. instead of leaving an AnyRef we now expand to Object.\n\nAlso making ==, != take an Any instead of Object\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 22 16:20:42 2013 +0100]"},
{"name" : "5bf4a7188afdf336186bd200d963828e2bcc27e0", "time" : 1387725211, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Make PolyProto a true prototype.\n\nOtherwise type comparers will go wrong.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 22 16:13:31 2013 +0100]"},
{"name" : "8216688420003002449313c8a4f419b09282bf84", "time" : 1387725167, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Desugaring changes\n\n1) Desugar type bounds containing empty trees\n2) Include a productN parent for a case class, only if the case class has 2 or more parameters in its parameter section.\n\nAlso, handle type bounds appearing in AppliedTypeTrees (these represent wildcard types).\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 22 16:12:47 2013 +0100]"},
{"name" : "115e13b323e9ca845302a2c0ee0367e03cb8379b", "time" : 1387650988, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Starting to test compiling the compiler.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Dec 21 19:36:28 2013 +0100]"},
{"name" : "bdb19a8ef9cf7caf108d9326108dc51a6b76cc15", "time" : 1387650962, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Adding () insertion to normalization.\n\nWe need to take account of the possibility of inserting a () argument list in normalization. Otherwise, a type with a\n\n    def toString(): String\n\nmember would not count as a valid solution for ?{toString: String}. This would then lead to an implicit insertion, with a nice explosion of inference search because of course every implicit result has some sort\nof toString method.\n\nThe problem is solved by dereferencing nullary method types if the corresponding function type is not\ncompatible with the prototype.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Dec 21 19:36:02 2013 +0100]"},
{"name" : "edf00802ff454e6bdbe5526151cf14c68811932a", "time" : 1387650472, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Adding a subtype relationship between ()T and =>T\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Dec 21 19:27:52 2013 +0100]"},
{"name" : "c7b805f7aa5973e4e5a3644beda4162827e1b5ec", "time" : 1387650249, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Rename TyperPhase.scala -> FrontEnd.scala\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Dec 21 19:24:09 2013 +0100]"},
{"name" : "146a362bf74418feeb18e12c34178819ecb64942", "time" : 1387535919, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Handling implicit unapply arguments.\n\nChanged format of UnApply nodes to also take implicit parameters. See doc comment in class Trees.UnApply\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Dec 20 11:38:39 2013 +0100]"},
{"name" : "bac6a2081d971c7f5c87b610cfaac7cd39c06713", "time" : 1387530455, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Changing TypeMap to drop annotations\n\nThis is quite drastic. The problem is, we do not really know what to do with annotations in types. In a case demonstrated by dotc.ast.CheckTrees, a substitution of type parameter T in\n\n    class Trees[-T @uncheckedVariance]\n\ngave us Trees[Type @uncheckedVariance], which messed up type inference in implicit search afterwards. In the case above, we clearly want to lose the annotation if the underlying type is not a type variable. Even if the underlying type is a type variable, the annotation looks wrong, since it should apply only to T, not that other variable. So the safest route seems to be to just drop the annotation.\n\nThat was a specific case, how to draft a general rule? In the absense of a better idea, it seems safest to always drop type annotations if the underlying type changes in a transformation. If some map does not want that behavior it would have to implement the AnnotatedType case explicitly.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Dec 20 10:07:35 2013 +0100]"},
{"name" : "8420bbee7fa5eadeb58f0f54a7089b6f2048575e", "time" : 1387475823, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "More shadowing tweaking.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Dec 19 18:57:03 2013 +0100]"},
{"name" : "3d2c4454640f6e410b9413eac885c65f1f9763f5", "time" : 1387473643, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Refinement to shadowing checking for implicits\n\nShadowing got confused if the shadowing expression truned out to be a closure.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Dec 19 18:20:43 2013 +0100]"},
{"name" : "dacea9fd70d6de85688da75fc7fa0f7493bcc06a", "time" : 1387461487, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixed problem in adapt after infer implicit arguments.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Dec 19 14:58:07 2013 +0100]"},
{"name" : "44ddd2ec207d08faa74e43661da664975a588e84", "time" : 1387459567, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Change to computing arguments in a pattern match.\n\nPreviously, if the result of an unapply arg type is a type with isDefined and get methods, we proceed as follows:\n\n  if the get result type is a product: take the produce argument types\n  otherwise take the get result type itself\n\nThe problem is if the get result type is an empty product. We solve this by demanding that the get result type is a ProductN type, not just a subclass of product.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Dec 19 14:26:07 2013 +0100]"},
{"name" : "c0ce16a03645056016636d7cda514daed2b7ab70", "time" : 1387452606, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "3 changes to implicit search\n\n1. Shadowing tree uses adaptation funProto of prototype. Previously many shadowing tries failed with errors like \"need to follow with \"_\" to adapt to function\". These early failures hid potential shadowing conflicts.\n\n2. Shadowing conflict testing is now done using symbols instead of comparing references. Comparing references gave false negative when a shadoing tree had inferred type parameters, for instance. There were other problems as well. Generally, comparsing references seems too fragile.\n\n3. Inferred views are now re-adapted. This is necessary if the view itself takes another implicit parameter.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Dec 19 12:30:06 2013 +0100]"},
{"name" : "6be96724899f9c34db2e6c2617534dc9c4a15528", "time" : 1387438859, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Following type aliases when pattern matching.\n\nFaced with a pattern like\n\n  Apply(x, xs)\n\nwe first look for an Apply object which is an extractor. If this fails, we now\ninterprete Apply as a type. If it is a type alias which points to a class type that\nhas a companion module, we then try that companion module as an extractor.\n\nScala 2.x does ot that way, and it's used widely within dotty itself. Think tpd.Apply as the found object,\nTrees.Apply as the extractor.\n\nAlso, added a fix to normalization which made normalization go deep into a method type.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Dec 19 08:40:59 2013 +0100]"},
{"name" : "56d8347bcd606443dde576480325677a89f5c809", "time" : 1387366993, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixing a typo in mergeDenots.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Dec 18 12:43:13 2013 +0100]"},
{"name" : "766379f578ab2ae05b2a94fc9c51e8a47e25b9ff", "time" : 1387366977, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Allowing curried closures.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Dec 18 12:42:57 2013 +0100]"},
{"name" : "15d8a2e9804fe55c9261e195088da55c0eaa6803", "time" : 1387362553, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Making sure New's always end in an application.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Dec 18 11:29:13 2013 +0100]"},
{"name" : "6b106397a683b9de4bf05da7e768ebf747085c55", "time" : 1387319307, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixes to parent types.\n\nThe previous addition of checkClassTypeWithStablePrefix to Namer#classSig needs to be adjusted.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Dec 17 23:28:27 2013 +0100]"},
{"name" : "9e8d0709e9f43fbb1dc40baaab4f0891538d8e9c", "time" : 1387319263, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Special handling of implicit members.\n\nThe previous treatment would force all members, causing cyclic reference errors.\nWe fix it by filtering early in computeMemberNames itself for implicits.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Dec 17 23:27:43 2013 +0100]"},
{"name" : "9a839d706291fdd57aeb48c3f64654afbd144a83", "time" : 1387304381, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Three bugfixes to typing.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Dec 17 19:19:41 2013 +0100]"},
{"name" : "c1c933d6f936a7975ca316c69d7639145eed36e7", "time" : 1387301557, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixes for by-name arguments\n\nPreviously, we did not strip off the => when comparing against expected type.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Dec 17 18:32:37 2013 +0100]"},
{"name" : "d0b09e431ad6974c7ebc0a7734d46050ec712fa1", "time" : 1387301431, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Two fixes in Typer\n\nFixes for\n\n  var x: T = _\n  super.f(...)\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Dec 17 18:30:31 2013 +0100]"},
{"name" : "ab4ae7ada45201684c91550815f85a2cfab24e34", "time" : 1387292014, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixes to desugaring and indexing package objects\n\nPlus some small tweaks in Typer\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Dec 17 15:53:34 2013 +0100]"},
{"name" : "e3fdf97df2ce1ea7cd3a98cbdcce53789db1b3d3", "time" : 1387291978, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Bringing isFunctionType in line with isTupleType\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Dec 17 15:52:58 2013 +0100]"},
{"name" : "87628400a73f9ed033fc2a29e494407234ae6f79", "time" : 1387225379, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Eliminating StateFul\n\nWas only needed as a parameter to a continuation, so it seemed easier to just pass the components directly.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 16 21:22:59 2013 +0100]"},
{"name" : "2ede22228c09ca7c2f4ae190ec2086787238ed0a", "time" : 1387217042, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Small tweaks to typer\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 16 19:04:02 2013 +0100]"},
{"name" : "e1e372cc833e3e9d0d02c1ffa453667f50dbc784", "time" : 1387215264, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Better handling of cyclic reference errors.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 16 18:34:24 2013 +0100]"},
{"name" : "00507cf758cfafa36dc4da372a7e53028fa979a4", "time" : 1387207227, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fix in printing RefinedTypes\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 16 16:20:27 2013 +0100]"},
{"name" : "5989fddb67509266a809e2464aa9d81125f65462", "time" : 1387207187, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Negative typer tests.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 16 16:19:47 2013 +0100]"},
{"name" : "58059264842fac39a27356d052680a09c2da7571", "time" : 1387206565, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Checking for double definitions among class definitions.\n\nAlso fixes to typedReturn.\n\nAdapted tests accordingly.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 16 16:09:25 2013 +0100]"},
{"name" : "36476e46815370ca282cbb3179711125444319e9", "time" : 1387206416, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Default arguments now have a position\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 16 16:06:56 2013 +0100]"},
{"name" : "a0d9e2692f680c8ee0a93e87a5ceba93e081908b", "time" : 1387206315, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fix to prompting.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 16 16:05:15 2013 +0100]"},
{"name" : "24db65e0544d5d5076f03219464ce91f3ae99d04", "time" : 1387206292, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Setting Method flag when parsing classfiles and sources\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 16 16:04:52 2013 +0100]"},
{"name" : "15c67417a96ea5f4619c5a53f875fa5e2c1578c9", "time" : 1387206218, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Making Method a fromStartFlag\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 16 16:03:38 2013 +0100]"},
{"name" : "7bfb20545ad78b54895e754b4194f373974133f3", "time" : 1387206186, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Small cleanups to scanning and parsing.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 16 16:03:06 2013 +0100]"},
{"name" : "f4dab01c5e85897349830210df1b4e074e0b24ee", "time" : 1387193365, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Check for no double defs\n\nAdded check for double def if owner of scope is not a class. For class members we will need a more refined\ncheck. One way to do it is to immediately rule out doubly defined members with same signature.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 16 12:29:25 2013 +0100]"},
{"name" : "f3d428e6957501578c9516de2d179adf713ca95f", "time" : 1387189923, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fix to desugaring refinement types.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 16 11:32:03 2013 +0100]"},
{"name" : "4079d6d5048dbebf5aaac06be42e9b9484b3934f", "time" : 1387185018, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixes to typed return, try, match.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 16 10:10:18 2013 +0100]"},
{"name" : "99393624e3bf001a6c20c7615ac88ef4201a93f8", "time" : 1387106764, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixes related to SAM types.\n\n1. Changes to SAMType extractor\n2. Self names are no longer members of enclosing class\n3. SAM-Type closures now print with their result type.\n4. refactoring newSkolemSingleon ==> narrow\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 15 12:26:04 2013 +0100]"},
{"name" : "01db9a68e5e68f08c8236c23c905009789d51587", "time" : 1387038736, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixed several deep problems in handling of types and symbols.\n\n1. We forgot to mark declaration symbols Deferred.\n2. Types with NoPrefix and the same name got identified. Fixed by adding a new category WithNoPrefix to named types, and changing the way named types get generated.\n3. Self types lacked parameters. (Question: Do we need to also track type members?)\n4. Printers caused cyclic reference errors. Now some print operations are more careful with forcing.\n5. Namedparts accumulator has to be more careful with ThisTypes. Because self types now contain parameters, which might lead back to this, we only add the class name (or the source module, if it's a module class).\n6. toBounds in TypeApplications needs to use Co/Contra aliases for expanded name parameters, not just local ones.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Dec 14 17:32:16 2013 +0100]"},
{"name" : "d65587ae74cfe2dc7601f57e163b7e22bf89582a", "time" : 1386931754, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Modification of subtype tests of abstract types.\n\nWe ran into a flase path in a situation like this before:\n\nA <: B where\nType A: A type alias that refers to a constrainable PolyParam P.\nType B: An abstract type with bounds L..H.\n\nPreviously, we would have instantiated P to L, whereas instantiating to B would be the right choice.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Dec 13 11:49:14 2013 +0100]"},
{"name" : "c4675594fd25779641c55ccfc0392f03b5ca8207", "time" : 1386759391, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Skipping TypedSplices in TreeInfo methods.\n\nBefore, TreeInfo would mis-predict whenever trees were inserted with TypedSplice. We should make sure the rest of the compiler also takes TypedSplices into account when matching on trees. It's a systemic risk. Not sure we can avoid it with a better design.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Dec 11 11:56:31 2013 +0100]"},
{"name" : "710e0f9615772c6b64f3e511e6def6d4f1c68b3f", "time" : 1386758163, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixes to typer.\n\n1. Got rid if InSuperInit mode bit.\n2. Fixes to typing assignments\n3. Import qualifiers need to be stable\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Dec 11 11:36:03 2013 +0100]"},
{"name" : "c8f71771b648cf4482a0ee79a31dff75fd9bcf48", "time" : 1386758048, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixes to lifting in eta-expansion\n\n1. Lifted defs should not get expr or singleton types of the lifted value. Need to widen.\n2. In op-assignments we need to lift the prefix of the lhs function, not the function itself.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Dec 11 11:34:08 2013 +0100]"},
{"name" : "382e04d4b8a42c0d0c30d4faae623c9d213e5336", "time" : 1386709550, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixes and tests for typedIdent\n\nFixed a problem where an import and a definition in same scope were erroneously regarded as a conflict (L20 in typedIdents.scala)\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Dec 10 22:05:50 2013 +0100]"},
{"name" : "a2e1606a03b1ebd7553ee6f10b04227bfd69c9e1", "time" : 1386709326, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixing a problem with swallowed errors\n\nThe problem was that in FunProto#typedArg we cache typed arguments, to retrieve them later, possibly in a different context (Example: typedArg might be computed during overloading resolution, and then cached copy\nmight be inserted in resolved call. The problem is that any errors, warnings or other diagnostics might be swallowed, if typedArg is computed in a context that is not committed but then re-used in a committed context.\n\nThe fix is to cache typed arguments only if no diagnostics were issued during their computation.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Dec 10 22:02:06 2013 +0100]"},
{"name" : "eb0813b9ef437b9c89f8b67ae5b0070b300a0fc1", "time" : 1386610191, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixes to avoid stale symbols and to avoid methods as pattern constructors.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 9 18:29:51 2013 +0100]"},
{"name" : "42b169a85dacb6a5f1aff9b06bd69065d5f539f2", "time" : 1386609985, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fix of error that arose when searching for the companion object of a class with symbolic name.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 9 18:26:25 2013 +0100]"},
{"name" : "dc028e709fc36791526ff69d47280c91d1dc36d1", "time" : 1386589521, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added desugaring for & and | types.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 9 12:45:21 2013 +0100]"},
{"name" : "190f44d0c9b91df24a227878b0c9a1f3d14c20a1", "time" : 1386587309, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixes to desugaring and typing of parameterized Typedefs\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 9 12:08:29 2013 +0100]"},
{"name" : "a53101c6fc3f06fed881e22736d134f6e7893ae0", "time" : 1386584125, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixes to inherited result types in Namer.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 9 11:15:25 2013 +0100]"},
{"name" : "34993a55387b381dc9e2e754d7179f0385974abd", "time" : 1386584105, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fix to & and |\n\nPreviously Any & NoType was NoType, whereas it should be Any\n\nSimilarly for combinations of Nothing with NoType and also for |\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 9 11:15:05 2013 +0100]"},
{"name" : "6212e472f892a78ab98e7978ad043acbe942d7f2", "time" : 1386526823, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Last fixes to desugar.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 8 19:20:23 2013 +0100]"},
{"name" : "2edbc4f04325cb248b34d0b82b9c09dd591f553d", "time" : 1386526797, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Defensive programming in Applications\n\n - now handles the case where names in NamedArgs are wrong\n - assertion check that default getter is indeed present\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 8 19:19:57 2013 +0100]"},
{"name" : "a98d5a2b8788344d2027f01e94a3961179537fb4", "time" : 1386526722, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Names of created symbols need to be encoded.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 8 19:18:42 2013 +0100]"},
{"name" : "e5136e1ff3aa8a483f153f0c636e73a3ba1c7574", "time" : 1386526566, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fix to parsing infix types.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 8 19:16:06 2013 +0100]"},
{"name" : "1bbebdfa6d56bab7d14d3beef978eb9ada382191", "time" : 1386526535, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Making encode stick on <init>\n\nPrevious one was a no-op, because <init> is excluded from Name#encode\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 8 19:15:35 2013 +0100]"},
{"name" : "519a99ab7f5d6a20d985fa0b515567d43c4c802a", "time" : 1386515198, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixes to desugaring of for-expressions with embedded aliases.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 8 16:06:38 2013 +0100]"},
{"name" : "b5be3e97d5e2455966f170b7cd0baba82c8fae12", "time" : 1386515163, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fix that avoids overzealous function lifting.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 8 16:06:03 2013 +0100]"},
{"name" : "0de7871a3055e7802435edf7ddbe4532390e2f67", "time" : 1386514842, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixing toText for for expressions.\n\nFilters did not show the \"if\" before.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 8 16:00:42 2013 +0100]"},
{"name" : "41e7ff8e0a52ee40aae27b2fd5c69c0988cd4ae8", "time" : 1386514805, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixing problem in TypeComparing.\n\nHave to strip TypeVars so as to not enter them as bounds.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 8 16:00:05 2013 +0100]"},
{"name" : "2f7e4a64179c4abf246aceff39857a14c8c46f68", "time" : 1386491203, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Better reporting for pattern matching errors.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 8 09:26:43 2013 +0100]"},
{"name" : "0067358e702ba7995e534a2272c569c4e2e4e80a", "time" : 1386449147, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixes to type-checking (_: T)\n\nAlso, widening before computing an annotated type.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Dec 7 21:45:47 2013 +0100]"},
{"name" : "394c0a7439820fc18665be182fa9839b41d28164", "time" : 1386437119, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixes for translation of pattern definitions (PatDef)\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Dec 7 18:25:19 2013 +0100]"},
{"name" : "377eb3318cdacd2dfb91d56be3649431ec1155f0", "time" : 1386436469, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixes for desugarings of case classes.\n\nAlso: Standardized on selectorName; Translate $init$ to <init> when unpickling.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Dec 7 18:14:29 2013 +0100]"},
{"name" : "e74b6316b93993e3c798bd9df45d83fc0665c52e", "time" : 1386337170, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixing expansion and merge companion defs.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Dec 6 14:39:30 2013 +0100]"},
{"name" : "554ac428ede1c7a337b507a2e8b29c1671c7d2ee", "time" : 1386337142, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Dropping TRAIT_CONSTRUCTOR name.\n\nTrait constructors are now also called <init>. When expanding traits we might want to use IMPLCLASS_CONSTRUCTOR.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Dec 6 14:39:02 2013 +0100]"},
{"name" : "e3aa7d4042496a0e44f2086943ad3c29a7b8c8b8", "time" : 1386337024, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Empty type trees in desugarings need a TypeTree(), not an EmptyTree\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Dec 6 14:37:04 2013 +0100]"},
{"name" : "ad37a192feb2eb0e2ab7415b9ec744310534f39d", "time" : 1386335676, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Refined printing of module names.\n\nPreviously printing a simple name always suppressed a module class suffix, which led to sometimes confusing output. Now we are more selective where the suffix is suppressed.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Dec 6 14:14:36 2013 +0100]"},
{"name" : "3e313ac00f51d7d733955d613c554a8807fa7ec2", "time" : 1386335534, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Made New(tpt, args) work for parameterized types tpt.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Dec 6 14:12:14 2013 +0100]"},
{"name" : "78b57e3c5a2ca0c15729e6f6a3e43c718028754e", "time" : 1386266440, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixes to lifting\n\nPlus more commenting of Desugar\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Dec 5 19:00:40 2013 +0100]"},
{"name" : "cd28a05fa16b5b2cf3569f0ab0a8c9c685e41bf1", "time" : 1386258691, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixes to named and default arguments.\n\nNow come with test cases.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Dec 5 16:51:31 2013 +0100]"},
{"name" : "c2f101a33ea7f89681d6b74731bbcff948e7e6da", "time" : 1386241549, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Changes to Desugar and Namer.\n\nIn particular: Changed the scheme to represent the types of setter parameters.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Dec 5 12:05:49 2013 +0100]"},
{"name" : "8bb6ccae5c4f3ec91877fcfe032902f92aa5d2b4", "time" : 1386241302, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Overloading resolution change\n\nNarrowMostSpecific does no longer disable implicits. With implicits disabled, the system is unable\nto prefer\n\n    def + (x: Int): Int\n\nover\n\n    def + (x: Float): Float\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Dec 5 12:01:42 2013 +0100]"},
{"name" : "63fa05cf443f9a39b2b2ace1a8b68fc6fe3add70", "time" : 1386241103, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Changing some assertions on isCommittable\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Dec 5 11:58:23 2013 +0100]"},
{"name" : "deb82d52d9cc65270e92a9298ef35943afee0eba", "time" : 1386018574, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Refactoring test compatible.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 2 22:09:34 2013 +0100]"},
{"name" : "13fd9ffd6718e201ee579da332668d94dca60600", "time" : 1386008095, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Streamlining isApplicable\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 2 19:14:55 2013 +0100]"},
{"name" : "14528228331bdb588278002208c46447e164870c", "time" : 1386003845, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixes to type applications and unapply.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Dec 2 18:04:05 2013 +0100]"},
{"name" : "bddeaecb8f69032c5117e926ef67afc0deedd0dd", "time" : 1385919877, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Tweaks to applications, operator assignments, and variable definitions.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 1 18:44:37 2013 +0100]"},
{"name" : "c2127130f5b1534d49d2ec07b9bd4f83bffe9d0a", "time" : 1385905500, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Polishing EtaExpansion\n\nSome code simplification + a change where non-idempotent Selects in function prefix position are now lifted as a whole (previously, only the prefix was lifted).\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 1 14:45:00 2013 +0100]"},
{"name" : "16104754c964b49bf4bd06ea81a00f276eefae0d", "time" : 1385813383, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added divergence check for implicit searches\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Nov 30 13:09:43 2013 +0100]"},
{"name" : "eb6eb2cded84f0e0240f4b706c1ed41459946db2", "time" : 1385746515, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Tweaking Implicits\n\nStill to do: catch cycles.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Nov 29 18:35:15 2013 +0100]"},
{"name" : "0581e8bac449ac720bd666e7f7fdb010d810a3cd", "time" : 1385740762, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "SimpleMap.foreachKey -> foreachBinding\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Nov 29 16:59:22 2013 +0100]"},
{"name" : "b508185cc3fe5c740d5ff6ecfd0dc1482596018b", "time" : 1385739955, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Tweaks to Inferencing\n\nAlso: Making VarianceMap a SimpleMap for replayability\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Nov 29 16:45:55 2013 +0100]"},
{"name" : "6dabcdaabf49ecc72468c6e712d6bc5c927ec87e", "time" : 1385737010, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Adapting showClasstests to newly downloaded classpath\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Nov 29 15:56:50 2013 +0100]"},
{"name" : "b47be3e0c1eb274b4e806b7606d738837ba9b8a1", "time" : 1385676527, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "File name renaming\n\nBringing file names tpd/untpd in line with the objects they define.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Nov 28 23:08:47 2013 +0100]"},
{"name" : "e242ee2007992dfac0dbc08461b693c1608dad49", "time" : 1385675518, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Using SimpleMap instead of Map for replayability.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Nov 28 22:51:58 2013 +0100]"},
{"name" : "98160c43002907b2784d1031c476cd46b912e752", "time" : 1385672131, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Making substitutions deep type maps that also map parents and self type of a class info.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Nov 28 21:55:31 2013 +0100]"},
{"name" : "4dadbda073422eba3745866737f438aa772169df", "time" : 1385668845, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Refactorings in TypeComparers and elsewhere\n\nBroke out common functionality in two new methods: widenExpr, and commonVariance.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Nov 28 21:00:45 2013 +0100]"},
{"name" : "a9fe1a9cd4514406b54d03ef51740373429dfe05", "time" : 1385655011, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Tightening (constraint contains param) condition\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Nov 28 17:10:11 2013 +0100]"},
{"name" : "89804e38f3ee6708762609a9b0a9e52544632016", "time" : 1385654935, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Making maps configurable so that they can also go inside parents and self types of ClassInfos.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Nov 28 17:08:55 2013 +0100]"},
{"name" : "76f07f7a5e03ac685270c7af4aa736ca84a00f1f", "time" : 1385646081, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Hoisting out commonly used values into util.common\n\n... because this cuts down on object creations. Also, some polishings in Denotations.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Nov 28 14:41:21 2013 +0100]"},
{"name" : "c39c2af036e9e69fc339b805a0869126efadae0f", "time" : 1385575697, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Optimizing signatures\n\nInteresting signatures are now cached.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Nov 27 19:08:17 2013 +0100]"},
{"name" : "f8c9dc95929655a198066652cd12109329836198", "time" : 1385558232, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Changed Signatures\n\nSignatures have a different meaning before and after erasure. After erasure, the result type counts also whereas before it doesn't. The new definitions refelect this behavior.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Nov 27 14:17:12 2013 +0100]"},
{"name" : "f0b4fc58e0c5e5372c23bd817954ed3aa82b2102", "time" : 1385482138, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "More posishings of SymDenots/Denotations.\n\nIn particular\n\n - closed a loophole where we did not go through parentDenot in ClassDenotation.\n - fused some of the predenotation ops used in computeMemberNames\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Nov 26 17:08:58 2013 +0100]"},
{"name" : "537e29676b0706de1855fe763b87732b846931f4", "time" : 1385414287, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Dropping the Expanded when computing type parameter variances.\n\nDid not look like it was needed, after all; Local alone is enough.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 25 22:18:07 2013 +0100]"},
{"name" : "e88c9f2f7c7b2095a1f280d3efceee917e209e4a", "time" : 1385402879, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Tweaks to SymDenotations\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 25 19:07:59 2013 +0100]"},
{"name" : "c4e94008b972e2a5aa16fcc6ef2838b14e399d35", "time" : 1385399693, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Final set of Types tweaks\n\n - make namedParts return an ordered collection.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 25 18:14:53 2013 +0100]"},
{"name" : "42ee73f47e17f6e1c028444d3b144c9a9c8cf561", "time" : 1385397187, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "More Types polishings\n\nIn paricular, now type accumulators include the prefix of a ClassInfo type.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 25 17:33:07 2013 +0100]"},
{"name" : "510ae8bf1c6932595c1313c4b7a8027c435640be", "time" : 1385381779, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Cleanup of TermRef.withSym and TypeRef.withSym\n\nAll occurrences replaced by select, or second version of Term/TypeRef.apply\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 25 13:16:19 2013 +0100]"},
{"name" : "19d92a561b06dc257a71ba0f330fe4e594d1fd06", "time" : 1385379276, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Getting rid of UnknownSignature\n\nI believe the logic is now clearer. Good to have one magic value less.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 25 12:34:36 2013 +0100]"},
{"name" : "6d3415d23ffcb9db63452d11fd38fdcd8e8b7438", "time" : 1385378422, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "More Types polishing\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 25 12:20:22 2013 +0100]"},
{"name" : "45ea511ec8ef12e0a192e4f4925923e75ef9ae3a", "time" : 1385375644, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Types refactorings\n\n - moving out type applicaton related operations to a decorator: TypeApplications\n - converting some set operations to list operations to make them replayable.\n - moving unused operations to Types.overflow\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 25 11:34:04 2013 +0100]"},
{"name" : "92ed954f361ed08ef4821afd530357379956904a", "time" : 1385224882, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Cleanup of named type creation from SymDenotations.\n\nNew operations:\n\n - typeRef\n - termRef\n - valRef          (like termRef, but with NotAMethod signature)\n - termRefWithSig  (like termRef, but with denotation's signature)\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Nov 23 17:41:22 2013 +0100]"},
{"name" : "9e1bf7743355de040a23fbcfe9b1efb9b1db1789", "time" : 1385140362, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Renaming: typeConstructor -> typeRef\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Nov 22 18:12:42 2013 +0100]"},
{"name" : "3d98269f2db2542373f76f519fd3643b7bcf75cf", "time" : 1385139234, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "More tweaks to Types\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Nov 22 17:53:54 2013 +0100]"},
{"name" : "b8f4c0afc1a96b6daf288a4ec25e6ff6bc02da04", "time" : 1385139142, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Tweaks to SimpleMap\n\nNow uses a custom representation for sizes 4 and over. This improves on the previous representation in terms of immutable.Map because it is more efficient for smaller sizes and keeps orderedness. Being ordered is important for making things replayable.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Nov 22 17:52:22 2013 +0100]"},
{"name" : "b14291436172bf53cb40fdd2e94491e36a7da115", "time" : 1385124129, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Dropping cinsistency checking logic from typerstates.\n\nBecause of the new typerstate design, we can enforce most invariants by design, or in a purely local manner. We can therefore drop the checkConsistent checks and replace them with much more lightweight assertions that make sure that only committable states are committed and only committable states can create typevars.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Nov 22 13:42:09 2013 +0100]"},
{"name" : "e38813ac1362a1d528dfa1ee79f0f8b0d6f7ccb8", "time" : 1385073872, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Consolidation of TyperState and Constraint\n\nRemoving undetVars and instTypes as separately assignable fields. This is better for maintaining invariants by design.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Nov 21 23:44:32 2013 +0100]"},
{"name" : "ed6d9327c5efc70db59d5fd90612e4a5a58cff8c", "time" : 1384965637, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Better encapsulation for constraints.\n\nThe fact that constraints are maps from PolyTypes to Array[Type] is now hidden form the restr of the program (Or, almost; unfortunately value classes force us to expose the parameter, but we renamed it to a name which is typically used for private data).\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Nov 20 17:40:37 2013 +0100]"},
{"name" : "5240de72c9cc0beb552dc1fd77510b3d7b19a8c6", "time" : 1384956372, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Splitting constraint.appky into at, bounds, contains.\n\nMotivation: Keep usages separate, prepare for larger constraint refactoring.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Nov 20 15:06:12 2013 +0100]"},
{"name" : "db5066bbb4c281bd3b65fe6422314afee115de5e", "time" : 1384953623, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "More tweaks\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Nov 20 14:20:23 2013 +0100]"},
{"name" : "acc9d750d1776d8d1c864fb3ddaadbaec34d286e", "time" : 1384799256, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added unit testing support\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 18 19:27:36 2013 +0100]"},
{"name" : "b6d7b28403c34f61c5317c37acce1b4118a4181c", "time" : 1384797927, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Various cleanups\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 18 19:05:27 2013 +0100]"},
{"name" : "f046e7a0c26500850a51e2f60122631b2c807f65", "time" : 1384618738, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Changing some TermRef's to selects\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Nov 16 17:18:58 2013 +0100]"},
{"name" : "3d01335c750de022e87914f44e017051abac290f", "time" : 1384540398, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Converting most uses of NamedType to select.\n\nSelect reduces refinetype/typeref pairs and is therefore preferable over raw NamedType.\nStill need to do the same for TypeRefs.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Nov 15 19:33:18 2013 +0100]"},
{"name" : "6ca5d414e729a509a00ddc508f2abf3d24da56ca", "time" : 1384523597, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Formign lubs over widened types only.\n\nTo avoid noisy lubs such as Int(1) | Int(2) | Int(3), we impose the rule that A | B is valid only if A and B are non-singleton, widened types. This also maps Nil | Cons automatically to List, and maps None | Option automatically to Some.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Nov 15 14:53:17 2013 +0100]"},
{"name" : "18da7faf93ffaefa0ee7e37211c740c1f34ddfa2", "time" : 1384514713, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Tweaks to adaptation and interpolation\n\n1. Needed to interpolate aftyer implicit parameyters are added.\n2. Also needed to avoid constraining typevars if compared against selection proto.\n\nOriginal coder example now typechecks.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Nov 15 12:25:13 2013 +0100]"},
{"name" : "7a9e632c64865084e6e8559a0e6ea90e2b706a8b", "time" : 1384513802, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Tweak to Coder test\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Nov 15 12:10:02 2013 +0100]"},
{"name" : "73ee6c8ab79f13d80899beacd3f0d16814ffb2db", "time" : 1384507273, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Made stripTypeVar idempotent\n\nThe unstated assumption everywhere was that stripTypeVar would get rid of TypeVars. But it didn't if we had a TypeVar isntantiated to a TypeVar. Now it follows through chains of TypeVars.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Nov 15 10:21:13 2013 +0100]"},
{"name" : "157b9970ca99f2bbf080a96896a7c931d1c6ea1a", "time" : 1384451312, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "making all internal errors throw exceptions (for now).\n\nBetter for now, since we do not want them do be hidden when testing / debugging the compiler.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Nov 14 18:48:32 2013 +0100]"},
{"name" : "ba87f4e2c5b911112e3f415e184c657241d47ad5", "time" : 1384451101, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "derivedNamedType -> derivedSelect\n\nPerforming refined/typeref reduction everywhere\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Nov 14 18:45:01 2013 +0100]"},
{"name" : "2e1f8ab9eb96a61ec5343a79d3a1d118113d308e", "time" : 1384451057, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Providing for new match scheme.\n\nSee doc comment for Config.newMatch what this is about,\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Nov 14 18:44:17 2013 +0100]"},
{"name" : "7ca40215f51a7a008dd1856b9813eabfd8121d8d", "time" : 1384450037, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Making as seenfrom reduce types.\n\nAdding operattions select, derivedSelect which reduce combinations of typerefs over refinement types.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Nov 14 18:27:17 2013 +0100]"},
{"name" : "ffe9e2237956d167b51c9ab1e571a04163b525f7", "time" : 1384448741, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Some configuation parameters\n\nCaching, plus whether we want to match on signatures or types.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Nov 14 18:05:41 2013 +0100]"},
{"name" : "fe865cd382bb21026b79070eafa597b865fe461c", "time" : 1384447001, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "replace qualifierType by widenIfUnstable.\n\nAlso, throw an exception on internal errors rather than issuing an error (this helps debugging, should be reverted for production).\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Nov 14 17:36:41 2013 +0100]"},
{"name" : "9c85d93caca274943b2caf028e850261ade257d6", "time" : 1384446888, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Changes to dealiasing and widening\n\n1) Mappers and Accumulators now reduce typerefs over refinements but do not follow general type args\n\nFollowing type args in asSeenFrom leads into trouble because it specializes covariant aliases too early. A later as seen from might specialize the same alias with a more specific type.\n\n2) The isDependent test in method type now uses a custom accumulator, because it needs to not flag erroenously types of the form p.T where p is a method paramater and T is a type parameter if `p`'s type which is aliased to an argument type. It should consider the argument type instead. With the change to 1), this broke, and is fixed by 2).\n\n3) Unstable prefixes in member are widened.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Nov 14 17:34:48 2013 +0100]"},
{"name" : "7e46c4474d67da1472d1f0d210f123387fd1bb0f", "time" : 1384446542, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Debug measure: Report all errors when they are first issued\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Nov 14 17:29:02 2013 +0100]"},
{"name" : "74a1ebe6910f4832792cf2341954b7203d12ed8f", "time" : 1384446439, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Make undetVars a set with deterministic traversal order.\n\nNeeded for replayability.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Nov 14 17:27:19 2013 +0100]"},
{"name" : "753c534b1b2014d252e7562a39c3cd1cc16c8e76", "time" : 1384351055, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "widen if unstable prefix\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Nov 13 14:57:35 2013 +0100]"},
{"name" : "fd04d5a83356b35cdcf6e8f09c62b1a2626a7828", "time" : 1384350758, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixing a problem in <:< of named types.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Nov 13 14:52:38 2013 +0100]"},
{"name" : "c589109c4c1fc715642eb473ad07b767e559f26b", "time" : 1384159616, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Bringing underlyingIfRepeated up-to-date\n\nWas still using the old-alias scheme, which is ineffective now.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 11 09:46:56 2013 +0100]"},
{"name" : "d0d0d9faf75b9c98434a63fd8b239d02a78b628d", "time" : 1384119683, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Dealias before add to constraint.\n\nWe need to dealias any bounds before adding it to the constraint because otherwise we might have added a constraint X <: X in disguise.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 10 22:41:23 2013 +0100]"},
{"name" : "2be8e8e6c1b48597d221f6cfc11c5f3b6fc113b3", "time" : 1384119614, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Reporting max constraint\n\nInstead of throwing an exception if SImpleMap size goes over some threshold, we now report the largest constraint encountered in a run.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 10 22:40:14 2013 +0100]"},
{"name" : "a7b60116c30677eeff310b81af2fa714bf1950d6", "time" : 1384020014, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "New tests.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Nov 9 19:00:14 2013 +0100]"},
{"name" : "3bc8f5dceba014ddd0c7e5cc8080009439c5b363", "time" : 1384019993, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixing Position.contains(NoPosition)\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Nov 9 18:59:53 2013 +0100]"},
{"name" : "067ef2076cfcf7864b840ddf38c514ff67f52c64", "time" : 1383857039, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixing inference problem and block scope problem\n\n1. Typing blocks: forgot to create new scope. Now fixed.\n\n2. The decitsion whether to interpolate a type variable was made based on the type variable's position and the current tree's position. This is too imprecise, because we might have auto-generated trees where all important parts have the same position. We now check for actual tree containment: A type variable can be interpolated for the type of a tree T if T contains the tree which introduced the type variable.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Nov 7 21:43:59 2013 +0100]"},
{"name" : "514801453e240610a0ba68fff7305355a7d204e1", "time" : 1383856710, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixing NoPosition leaks\n\nPreviously, some trees could contain subtrees with NoPosition. This happended when a tree had both positioned children and other children with NoPosition. When setting the synthetic position of a tree, the NoPosition children were not visited.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Nov 7 21:38:30 2013 +0100]"},
{"name" : "44267a9abc74de11e76ecd2ae7bf1cb0d0152043", "time" : 1383759556, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Adding a size method to SimpleMap.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Nov 6 18:39:16 2013 +0100]"},
{"name" : "e401bac707d6d56d551db5556a7f58861ea3ae16", "time" : 1383759540, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixing several type checking problems.\n\n1. Being more precise what gets forced when.\n\n2. stopping repeated evaluation when inserting an implicit methods to make arguments match.\n\n  Previously the argument got re-evaluated which could lead to misleading errors (e..g missing parameter type\n  if argument was a closure), and could also lead to exponential checking blowup. We now re-use the old argument\n  but in its unadapted form. We do this with a tight coupling between an Application node and a FunProto node -\n  typedArg in the application node forwards to new caching functionality in the FunProto node. It would probably\n  be better overall to merge the two abstractions. FunProto = Application?\n\n3. Various fixes to pattern matching.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Nov 6 18:39:00 2013 +0100]"},
{"name" : "c1abb572fa3adaeef3f66c79ac8946d15c7aeca7", "time" : 1383759207, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixing a typerstate confusion in implicit search.\n\nTyperstate needed to be exploring.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Nov 6 18:33:27 2013 +0100]"},
{"name" : "eba0a5b270ab7800d04e04776985e714d3e87a23", "time" : 1383758785, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Special-casing printing of `_` Idents.\n\nThese don't have a symref in their .tpe, so we should just print `_` instead of the type of the tree.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Nov 6 18:26:25 2013 +0100]"},
{"name" : "34347410560f7c9091e12da310161066e8c64350", "time" : 1383758688, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Avoiding to record constraints of the form P <:< P.\n\nThis will become redundant once poly params and typevars are identified.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Nov 6 18:24:48 2013 +0100]"},
{"name" : "044c498b08428d16ee88aadb73588a7a3337d545", "time" : 1383758621, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Changing for-expansion for irrefutable patterns.\n\n    p <- xs\n\nfor irrefutable pattern `p` used to be expanded to `xs.withFilterIfRefutable`, now is expanded to just `xs.withFilter`.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Nov 6 18:23:41 2013 +0100]"},
{"name" : "2617235fdb1b569bc4069f51b1cc9fa2557d10c4", "time" : 1383755375, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Adding a Scala2x flag.\n\nA new flag to help us distinguish classes unpickled from Scala from classes defined in Dotty. Concrete use case: We need to use relaxed (and unsound) rules for pattern matching Scala2x case classes.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Nov 6 17:29:35 2013 +0100]"},
{"name" : "bfc7c25bda04697463a36b9eb278e00407895a53", "time" : 1383561132, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fallback to old treatement of tuples.\n\nFor interoperability we will keep for the time being the traditional treatment of tuples as instances of Tuple 2… Tuple 22. The new hlist-like treatment will be done in a future step. The flip is controlled by variable \"unboxedPairs\".\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 4 11:32:12 2013 +0100]"},
{"name" : "ab95d83444c6397f8859713dd6606602c77c8d23", "time" : 1383560940, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Upgraded handling of positions\n\nIt turned out the some trees were still carrying NoPosition in their pos fields. The new treatment avoids that and aslo adds some assertions to check for regressions.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 4 11:29:00 2013 +0100]"},
{"name" : "19b6784ef1cae9cd0af278c0c3afcee47c0a00ea", "time" : 1383560835, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added capability to print tree positions\n\nControlled by option -Yprintpos\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Nov 4 11:27:15 2013 +0100]"},
{"name" : "73166c1cf7af36389656e90b8d88f1d2a2fb5786", "time" : 1383492015, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Changing the type of pairs to be scala.Tuple2.\n\nWas dotty.Pair, but we should wait until we do this.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 3 16:20:15 2013 +0100]"},
{"name" : "81fa82742df63e498926aaf427cd0a49960818a3", "time" : 1383491968, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Generalizing the idea of lossless dealiasings to all accumulators and typemaps.\n\nThis was needed because otherwise we'd get fake dependent method types of the form\n\n  x.A\n\nwhere x is a method parameter of class C and A is C's type parameter.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 3 16:19:28 2013 +0100]"},
{"name" : "6ddd2c60a77024b82372f111c9cc2979cbde0ee4", "time" : 1383491186, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixing a problem in overloading resolution.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 3 16:06:26 2013 +0100]"},
{"name" : "81bc4d4a65d7413a040cf180f75ca39f780c72e2", "time" : 1383491157, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixing a bug in TypedTrees.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 3 16:05:57 2013 +0100]"},
{"name" : "7a283374a92891b3928038f50e941dace484de47", "time" : 1383479482, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added missing case in allOverriddenSymbols\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 3 12:51:22 2013 +0100]"},
{"name" : "6728b51613c6a3ee858ace014fb9c9097d15c35b", "time" : 1383479401, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Adding simplification and fixing a variance problem.\n\n1. Added a \"simplified\" method which gets called on type varianvle instantiation and interpolation.\n2. Fixed a problem in TypeAccumulator which did not take the variance into account for Co/Contra type aliases.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Nov 3 12:50:01 2013 +0100]"},
{"name" : "f920a3186427e9df2fbac97197f2f11331ef4ef3", "time" : 1383326762, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Changed handling of signatures in TermRefs.\n\nPreviously, plain TermRefs had signature NotAMethod. The problem is if the TermRef represents an overloaded term and one of the alternatives is NotAMethod. Then creating the alternative will overwrite (via hash-consing) the overloaded ref.\n\nSolution: Introduc new pseudo-signature \"UnknownSignature\" which is given to plain TermRefs. Also, need to be careful now that all members that denote a specific alternative of a possibly overloaded denotation are referenced by a TermRefWithSig, not a plain TermRef. Previously, implicit members did not follow that, which meant that, what worked, worked only by accident.\n\nStill to do: Clean up signatures, termref creation methods. Should TermRef.withDenot automatically set the signature?\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Nov 1 18:26:02 2013 +0100]"},
{"name" : "1c17a0f83639ddc4b0fd3ffd294a6a97c887aae3", "time" : 1383218325, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "To tweaks to derivedRefinedType for higher-kinded types.\n\n1. The calculation of type parameters was wrong, and is fixed now.\n\n2. The kind of bounds might need to be adjusted in the derived types.\n\nExample: Assume\n\ntype CC[+T]\nclass C[T]\n\nIf we start with the HK-type CC[A] this is encoded as covariant: CC { type _$hk0 += A }. But once we substitute C for CC, the refined info bounds need to become non-variant. It used to be C {  type T += A }; now it's been corrected to be C { type T = A }.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Oct 31 12:18:45 2013 +0100]"},
{"name" : "dbaf6f42da9e5eb950d1a21b1912d417536330f7", "time" : 1383218090, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixes to subtyping tests for constrained parameters.\n\n1. When testing A <:< B where A and B are both in the current constraint set, we used to do a A <:< L first, where L is the lower bound of B. But that gives the wrong upper bound to A, it should be B instead of L!. This comment corrects that.\n\n2. Again when testing A <:< B we need to record B as an upper bound of A, but also record A as a lower bound of B. That way, either instantiation of A and B will propagate correctly. If we dod not do that and just recorded B as upper bound of A, we could then minimize B to Nothing, so A would be forced to Nothing as well. This is clearly wrong. We should have minimized B to A instead.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Oct 31 12:14:50 2013 +0100]"},
{"name" : "8c6b062a4b2c6323287441e37cef01acd9a4d7ac", "time" : 1383217858, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Limit size of SImpleMap\n\nThis is a debugging measure so we are notified when maps blow up beyond some \"reasonable\" limit. (Yet to be seen what constituted \"reasonable\".)\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Oct 31 12:10:58 2013 +0100]"},
{"name" : "cfbf68f7226ee770fd2d8fb0b8b3b4ac393630fa", "time" : 1383217796, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Two fixes for implicit search\n\n1. More refined criterion when to interpolate a typevar. The problem is that when typing an application of polymorphic implicit conversion ICONV to some artument ARG, we'd get a term such as ICONV[TVAR](ARG) where the position of TVAR is the position of ARG. At first, this meant that TVAR got interpolated already for ARG, which is clearly wrong. So we changed the algorithm to require strict inclusion, i.e. ARG.pos properly contains TVAr.pos, but then varianbles were interpolated needelessly late. Now, the typeImplicit prevents interpolation but the subsequent interpolateAndAdapt allows it.\n\n2. Fresh contexts are now generated for each test in \"refMatches\" which avoids previous cross talk between constraints and constraint size blow ups.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Oct 31 12:09:56 2013 +0100]"},
{"name" : "d8c1a0d6f26b4a2d7fcba98f1b4bb7ec1310780c", "time" : 1383129302, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Made mapValues conservative\n\nmapValues is now strict on all maps and will return the map itself if the passed function causes no change in values.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Oct 30 11:35:02 2013 +0100]"},
{"name" : "4d230bb6613fc66b7b29339df637b8bf0e5f14b5", "time" : 1383059067, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixes to type inference\n\n1. Resolve overloading needs to be done with exploring typerstate\n2. Need to handle case where A <: B for type variables in a more symmetric way.\n\n(2) is not yet fully done.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Oct 29 16:04:27 2013 +0100]"},
{"name" : "52a8a0aec9da8a4eaa3faf95ec7acd3ecfbabf53", "time" : 1382895237, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixed unpickling of polymorphic constructors.\n\nConstructors of parameterized classes now get polymorphic types when unpickled, as is the case when defining them or when reading them from a Java classfile. This caused a ripple of other faults which this commit also fixes.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Oct 27 18:33:57 2013 +0100]"},
{"name" : "41e7d9d46177650d23447f99989e8347aca56e71", "time" : 1382893874, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixing `apply` insertion.\n\nPreviously we encountered failures with polymorphic applies and infinite recursion in case of errors. The commit contains fixes for both problems.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Oct 27 18:11:14 2013 +0100]"},
{"name" : "1a83f5f653c6005bd3c207e1b6ab5bd57f6a9896", "time" : 1382886307, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Forcing less when determining the class symbol(s) of a type.\n\nThe previous scheme caused a CyclicReference when reading java.annotation.Documented.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Oct 27 16:05:07 2013 +0100]"},
{"name" : "961c0569eb0a54cf95363bab79add43da310984c", "time" : 1382776190, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixed handling of varargs\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Oct 26 10:29:50 2013 +0200]"},
{"name" : "8c1cc60c7ef9c13b312fceaf6cb8c8c129753344", "time" : 1382703619, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Refinement to tree printing of refs.\n\nWhen printing the type of a non-overloaded RefTree (Ident, Select, SelectFromTypeTree), the reference itself is no longer printed.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Oct 25 14:20:19 2013 +0200]"},
{"name" : "e8a160c8c64354b12423b908067a1ba328d6248f", "time" : 1382642464, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixed problem in handing of self types.\n\nSelf types were not taken into account when doing a typedIdent. The fix in typedIdent caused as CyclicReference when\ntyping the self type itself. This in turn is fixed by distinguishing more carefully in denotNamed in Namer which context we are in.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Oct 24 21:21:04 2013 +0200]"},
{"name" : "addd4a645c0b3adb898c74cb9b1197bb04597467", "time" : 1382629524, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Flipping the logic to determine type leaks\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Oct 24 17:45:24 2013 +0200]"},
{"name" : "afa83000f39f0b10824cb11b84ab0e8b66a91241", "time" : 1382629492, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Parsing and desugaring fixes for blocks.\n\nPreviously, { () }\nwas expanded to { (); EmptyTree }, because the empty tuple is not a term tree. Now EmptyTree is inserted only after a definition.\n\nFurthermore, blocks ending in EmptyTree are now replaced by blocks that end in a unit literal.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Oct 24 17:44:52 2013 +0200]"},
{"name" : "dbd9569755f40263a783d0301b3fb07849605d17", "time" : 1382629077, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fix: Symbols and interpolated strings are term trees.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Oct 24 17:37:57 2013 +0200]"},
{"name" : "6f64b37ace364c50892638d0e8dc2d8b6aca644b", "time" : 1382629055, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fix: Missing prefixes are considered stable.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Oct 24 17:37:35 2013 +0200]"},
{"name" : "31378195515e6573a43e329036c144f4bd67cc46", "time" : 1382616940, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Cleaned up and fixed interpolation of undetermined type variables\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Oct 24 14:15:40 2013 +0200]"},
{"name" : "e7674eae7d8ea1537196df0012add4a6a124c344", "time" : 1382614198, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "New test case: map and filter now seem to work.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Oct 24 13:29:58 2013 +0200]"},
{"name" : "44f0976487792760f0dc7fc8aa3dc1ba4ac52b7f", "time" : 1382614180, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added forgfeotten withNewScope when typing value definitions.\n\nValDefs need to open a new scope for anything that's declared on the right hand side.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Oct 24 13:29:40 2013 +0200]"},
{"name" : "de336bccbbd5671f97e7889b5260e963c8317b1d", "time" : 1382614135, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Change in how type variables are printed.\n\nUninstantiated type variables are now marked with ? instead of ''. The marking with '' is ambiguous becuase it could also mean an instantiated type variable that refers to another instantiated type variable.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Oct 24 13:28:55 2013 +0200]"},
{"name" : "3f5af18620f5274fefe9683542fd4f02ec099dfd", "time" : 1382614034, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixed premature stopping of type variable instantiations.\n\nWhen type variables are instantiated (either by interpolation or forcing) the result can contain references to otrher type variables that need to be instantiated in turn.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Oct 24 13:27:14 2013 +0200]"},
{"name" : "87a079d4ac59925a1da31071b35a5ef05764700e", "time" : 1382613267, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Printing trees now honors -Xprint-types option.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Oct 24 13:14:27 2013 +0200]"},
{"name" : "935c90b1fbffb7c0b3e851a98f8b1ee441b7fb34", "time" : 1382565957, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Small cleanups, plus a new test case.\n\nmap on collections now works, including associated CanBuildFrom searches.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Oct 24 00:05:57 2013 +0200]"},
{"name" : "6f4f941d09d11e9e44e1b46e1ec84da40eb399b6", "time" : 1382565855, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "More informative printing of typed identifiers.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Oct 24 00:04:15 2013 +0200]"},
{"name" : "8a41f33a44693fa777a59fcb8b06c1fb8414fdf5", "time" : 1382559400, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added missing case matching against hk type in refinement.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Oct 23 22:16:40 2013 +0200]"},
{"name" : "6d70392b11a658bdcbc4a21898370ca58c707c44", "time" : 1382555785, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Making printing refined types more robust.\n\nRefined type printing gave {<none>} if the refined name did not have a member in the parent. We now print the refined name instead.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Oct 23 21:16:25 2013 +0200]"},
{"name" : "344f0444ac708e4ee885deeb54d070924487fa31", "time" : 1382555721, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Suppressing type error messages against prototypes.\n\nFound/expected type errors are no longer produced if the expected type is a prototype. Instead we return the tree without adaptation and wait for the error to be produced in the next step, where the error mesage tends to be better.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Oct 23 21:15:21 2013 +0200]"},
{"name" : "7cf397d00073db9af8a74495610bf124ac0689cf", "time" : 1382555291, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fix in parsing int settings\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Oct 23 21:08:11 2013 +0200]"},
{"name" : "b94874635483b2864aabd86140e51e7bdd916b40", "time" : 1382524557, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Caching asSeenFrom on denotations.\n\nThe last asSeenFrom on a SingleDenotation is cached.\nAlso, correction of effectiveOwner in SymDenotation, which needs to understand that module classes now end in a \"$\".\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Oct 23 12:35:57 2013 +0200]"},
{"name" : "70958808202aa27034961aeb3352bd8af2e45312", "time" : 1382524242, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Avoiding duplication for printing modules.\n\nNormal singleton types are printed \"underlying(value)\". For modules that would give a duplication, which is avoided by this commit.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Oct 23 12:30:42 2013 +0200]"},
{"name" : "863e27b940215b2d0f9a9bf8b09b4f5f4b83409e", "time" : 1382523871, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Making explanations available outside type comparers\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Oct 23 12:24:31 2013 +0200]"},
{"name" : "0661c2e7626adbe23216e89e221a4cda33ef0d85", "time" : 1382523697, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Refined disambiguating printing\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Oct 23 12:21:37 2013 +0200]"},
{"name" : "70dc372796aa380efafa1a59bac83e945a191fbf", "time" : 1381852492, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added forgotten cases to TypeAccumulators.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Oct 15 17:54:52 2013 +0200]"},
{"name" : "2003e7d7e3c5d2600392f0d75f1fbc92ddfc0f6d", "time" : 1381852472, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixed problem where lifted types leak into OfTypeImplicits\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Oct 15 17:54:32 2013 +0200]"},
{"name" : "4f05aa9bf0d3c29eae720115433ffe29b239d70f", "time" : 1381841709, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Changes to adaptation and local type inference.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Oct 15 14:55:09 2013 +0200]"},
{"name" : "cdafc3058566d5eede8995f0812fe57a3a1ad6ee", "time" : 1381841605, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Handles isAsGood with two polymorphic arguments.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Oct 15 14:53:25 2013 +0200]"},
{"name" : "e1e0822c75fc03aabd25a448af228012e20cb4d6", "time" : 1381839258, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Implemented refined prinitng of function prototypes\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Oct 15 14:14:18 2013 +0200]"},
{"name" : "77f62c9faa4b03b6deb6d1e95afe9d88fb4e02c7", "time" : 1381739852, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Made tracing appear even when currently in StoreReporter context\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Oct 14 10:37:32 2013 +0200]"},
{"name" : "0e88e6ffbaf4a9597793fa188e60d0e62a4af96b", "time" : 1381662879, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixes to typevar instantiation\n\n… with associatiated fixes and tightening of typestate consistency checking.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Oct 13 13:14:39 2013 +0200]"},
{"name" : "1f41bd2ff0770a3188186d38405f807dac5633b5", "time" : 1381662741, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Bug fixes in <:<\n\n1) Tightened optimization criteria for comparing refined types in last commit\n2) Handles case where ThisType and SIngleType of module class coincide.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Oct 13 13:12:21 2013 +0200]"},
{"name" : "15a63974d23511a3a879c3354552bed504061617", "time" : 1381580282, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "New invariant: refined types must have a refined info that's more specific than the previous bounds.\n\nMaking use of this to make comparisons of refined types with the same names more efficient.\nAlso, to make findMember on refined type with type refinement more efficient.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Oct 12 14:18:02 2013 +0200]"},
{"name" : "54a1bce87b4682ccfb97504e2daa7c36cbf207b2", "time" : 1381575510, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Tightening up typer state + printing refinements\n\n1) Made consistency checking water tight, so that inconsistencies are always catched wehn they arise\n2) Fixed problem in implicit search that led to inconsistencies\n3) Refined printing of type parameters and type arguments\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Oct 12 12:58:30 2013 +0200]"},
{"name" : "b4c0e4af5ef03384f24e370059724be7c1ca6fb3", "time" : 1381423121, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixed missing type comparisons for bound types.\n\nAlso, new method \"explained\" in TypeComparers.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Oct 10 18:38:41 2013 +0200]"},
{"name" : "7ebb48127be6c02578596d0b9e627af250d11863", "time" : 1381422748, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added shortcuiting for type argument aliases.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Oct 10 18:32:28 2013 +0200]"},
{"name" : "452748a5a84b767cb82cb9f8625c4b19f40cbb03", "time" : 1381422679, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Modified printing of variant aliases\n\nNow displayed with =+, =-.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Oct 10 18:31:19 2013 +0200]"},
{"name" : "13495dab10ca9db14d12198303f11207b6b2d5dc", "time" : 1381422477, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "New TypeArgs flag\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Oct 10 18:27:57 2013 +0200]"},
{"name" : "d13fa248d5c53b165ab4f927099d0e25303ef39a", "time" : 1381401119, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added disambiguation for reported messages.\n\nAdded method disambiguate which disambiguates any string-returning operation. Disambiguation is done by adding owners and qualifiers each symbol has a unique string representation.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Oct 10 12:31:59 2013 +0200]"},
{"name" : "f703e4d9c006a119250e1b0202712fe3e09521b4", "time" : 1381315337, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Partial revert of \"instance flags\" commit\n\n16c1ddd3bb86c61890418b8394d44486e7bbd9dd\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Oct 9 12:42:17 2013 +0200]"},
{"name" : "0fc19e0e1ef7b56f9ca0649fde35765892cf1a53", "time" : 1381315003, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Cleanup of new scheme for handling local type parameters and type members.\n\nIf a type parameter or local type member is co/contravariant, its instantiation is a special alias\ntype that remembers the variance. These alias types can be refined with subtypes in subclasses and\nintersection and union translate to their bounds.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Oct 9 12:36:43 2013 +0200]"},
{"name" : "16c1ddd3bb86c61890418b8394d44486e7bbd9dd", "time" : 1381132867, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "flags for instances\n\nand changes flags for type params\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Oct 7 10:01:07 2013 +0200]"},
{"name" : "9a28428f48e9a8ef8e4ef8f35260a10842736624", "time" : 1380891488, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixed problem with withMode leaking into enclosing context.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Oct 4 14:58:08 2013 +0200]"},
{"name" : "7c02b2b3c8b50725b4035658a369d015a2a3b64f", "time" : 1380886391, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "No eta-expansion, implicit parameters when Mode = Type\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Oct 4 13:33:11 2013 +0200]"},
{"name" : "ee9405e7ecfc57038bcf8a20ecdaf5afd47e4acd", "time" : 1380731887, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Prefiltering members in computeMembers ...\n\n… to drop any member that uniquely defines a symbol that's already in the predenotation. This avoids merging the same symbols repeatedly in case of diamond inheritance.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Oct 2 18:38:07 2013 +0200]"},
{"name" : "fda5cdccad52657191e756ad2d47595a9c25b0ff", "time" : 1380715425, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Introducing mapReduce for OrTypes and AndTypes\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Oct 2 14:03:45 2013 +0200]"},
{"name" : "f039fa7fa2544998426764bd05ea8f18179eb0bd", "time" : 1380630087, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added option -Yheartbeat\n\n… which shows snapshot of the callstack of tracked operations at fixed intervals.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Oct 1 14:21:27 2013 +0200]"},
{"name" : "b733e929b60fd1b5a3fc961fd23e720679ce09d3", "time" : 1380623390, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Changed &, | to distribute inside non-value types.\n\nAlso, new scheme to handle merge conflicts.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Oct 1 12:29:50 2013 +0200]"},
{"name" : "d9c99dd1a52177aef563803d82ffa3096db2e3c3", "time" : 1380619667, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Removing a triggered assertion in applications.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Oct 1 11:27:47 2013 +0200]"},
{"name" : "e28dd856f6c0ccbd4094a73311a9c820f73913c4", "time" : 1380528715, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Changed logic for merges in lub/glb\n\nNow throws an exception for merge conflicts of types joint by |, a warning for types joint by &.\nException is handled as in the case of CyclicRefernce.\n\nAlso: Added several typerState.checkConsistent for future debugging purposes.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Sep 30 10:11:55 2013 +0200]"},
{"name" : "968b608ea6f2d42d48f30e311d6008600dad27a8", "time" : 1380528174, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Made sourcePos more robust\n\nNow survives NoPosition.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Sep 30 10:02:54 2013 +0200]"},
{"name" : "631bcbf60e326f0b9f597c709a4fcfdeade50ea3", "time" : 1380528146, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixed logic in newTypeParams\n\ngave a NPE before.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Sep 30 10:02:26 2013 +0200]"},
{"name" : "a0264e09c8da9a77e44ebc834142a13c186bde0d", "time" : 1380364966, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixed problem that () was not inserted if method was overloaded.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Sep 28 12:42:46 2013 +0200]"},
{"name" : "1ffb9eb06217af4b500353f973648e73bb6a1cc1", "time" : 1380363314, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixes problem with printing summary after compilation\n\nUsed wrong context/wrong reporter before.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Sep 28 12:15:14 2013 +0200]"},
{"name" : "7f9275a90d2664317dfb6d3450a8798418c1954f", "time" : 1380362809, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixing a display bug.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Sep 28 12:06:49 2013 +0200]"},
{"name" : "0c582b883971fd89476244aa6905be95da7e79d0", "time" : 1380361423, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Several bug fixes to typer and classfile reader.\n\nIn particular, changed internal representation of Java constructors and\nchanged treatment of parent constructors in templates.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Sep 28 11:43:43 2013 +0200]"},
{"name" : "fcb68309c2760a6797b0a9ec23722808060e9aa1", "time" : 1380202422, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Direct access to symbol in TermRef\n\nIf symbol was given explicitly, return it directly rather than going through denot.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Sep 26 15:33:42 2013 +0200]"},
{"name" : "54acd26dcf377e2eb2a474399894e10cfd4322f5", "time" : 1380192235, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added isRef method to determine whether a type is a typeref that refers to a symbol.\n\nThe alternative (tpe eq sym.typeConstructor) does not work because types are not unique.\nThe alternative (tpe.typeSymbol == sym) does not work because other types than TypeRefs have typeSymbols.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Sep 26 12:43:55 2013 +0200]"},
{"name" : "b7f5aa30383730dc1d2b34f9773695d0f5669bcd", "time" : 1380114179, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Sereval more bugfixes to typer and type handling.\n\nSeveral of these avoided stackoverflows/cyclic references\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Sep 25 15:02:59 2013 +0200]"},
{"name" : "50a84e0e900fd5a67a4701fd2730a0c0bf66b834", "time" : 1380021187, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixed handling of packages in world without HasFixedSym\n\nPackages are always permanent; never reloaded.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Sep 24 13:13:07 2013 +0200]"},
{"name" : "1988a740718bc5edd28d8be358576d7033cadd6d", "time" : 1380020986, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixing problem related to overloaded symbols\n\nNow that we have no longer termrefs with fixed syms, we need to create TermRefWithSignatures. Just setting symbol/denotation is not enough because of termref caching.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Sep 24 13:09:46 2013 +0200]"},
{"name" : "cef9496583b027ec93aaa8e6852e91e8e6896c69", "time" : 1380020865, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Module classes are now entered\n\nModule classes are entered alongisde their source modules in parent scope.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Sep 24 13:07:45 2013 +0200]"},
{"name" : "8b67961c8f66348e062e6ddb4bdad732f4bb5b10", "time" : 1379968404, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Better display of list arguments in \"i\" interpolator\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Sep 23 22:33:24 2013 +0200]"},
{"name" : "918c190c91a27212caf2152f9a65533f9dff395d", "time" : 1379932193, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixed a bug related to classfile parsing\n\nParsing inner classes of generic outer classes requires a name-unexpansion.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Sep 23 12:29:53 2013 +0200]"},
{"name" : "2a8abfa8da9742e0a8b5460c6032d7ef610e44ab", "time" : 1379932137, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Avoided a cyclic reference error when dealing with hk types.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Sep 23 12:28:57 2013 +0200]"},
{"name" : "c90e09fc7bd79c3bf9c95ce87f3c11cb3dfd4405", "time" : 1379932085, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Changed Throwing reporting scheme.\n\nChanged ThrowingReporter to use an underlying reporter for issuing messages below ERROR.\nMade ThrowingReporters the default in initialContext.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Sep 23 12:28:05 2013 +0200]"},
{"name" : "625d7ad00d43fb77df55c1ace30db1e6ccdf6179", "time" : 1379931906, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Changed type comparers to compare symbols of standard types instead of types themselves\n\nTypes themselves are not unique, for instance, scala.Any would be\n\n    TypeRef(ThisType(scala), Any)\n\nor\n\n    TypeRef(TermRef(ThisType(_root_), scala), Any)\n\nEven if we pick only one internally we still risk unpickling both forms when reading scala 2 - compiled files.\nThe only way to avoid this would be to change the ThisType constructor to always return a TypeRef for a module.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Sep 23 12:25:06 2013 +0200]"},
{"name" : "283c41637ce5e50655c31e729fa4c0baf3ece185", "time" : 1379490026, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Experimental branch that drops {Term/Type}RefWithSym types\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Sep 18 09:40:26 2013 +0200]"},
{"name" : "64a312432ca2cded23ca2d9244276231c52a52c2", "time" : 1379424631, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Made TermRefs always resolve to NotAMethod signature by default.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Sep 17 15:30:31 2013 +0200]"},
{"name" : "7dc50cbfdae17633aba97f1b96014f8be3b1a005", "time" : 1379422818, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Made lub/glb fail early when trying to mix a class info with another type type.\n\nThe previous alternative of creating a TypeBounds with the TypeRef back to the class leads to infinite loops when chasing type proxies. Example was infinite loop in baseClasses in showClass test.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Sep 17 15:00:18 2013 +0200]"},
{"name" : "c091b80ba931e9f054963edf826f51341ca04036", "time" : 1379347118, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "expolaratory worksheet\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Sep 16 17:58:38 2013 +0200]"},
{"name" : "dba4f1ec3dc5f489056284aab63c771cdd32561c", "time" : 1379346977, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Bug fixes and improvements in error diagnostics.\n\nMain refactoring: lub/glb moves to type comparers.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Sep 16 17:56:17 2013 +0200]"},
{"name" : "682cf32cbe5cebeccf9ea10caf43e74c9cecc7c0", "time" : 1378997223, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added utility methods for TermRefs.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Sep 12 16:47:03 2013 +0200]"},
{"name" : "1cf91fa7b14b62b6ba67971b29046631efbecd83", "time" : 1378660847, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Implemented \"two-hop\" implicit adaptation.\n\nThat is, in a selection qual.name(args), qual can be adapted to obtain a member \"name\" that matches args. Important to make usage patterns like this one work:\n\n  1 + BigInt(x)\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Sep 8 19:20:47 2013 +0200]"},
{"name" : "115c5392b9aecc5255a6370cde4a9f7b506f47d7", "time" : 1378655599, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixed an initialization problem in implicits\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Sep 8 17:53:19 2013 +0200]"},
{"name" : "e2fbef4be07c83fde6fb18b9b3b210c4f7d21c1e", "time" : 1378547345, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Improvements to termref printing.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Sep 7 11:49:05 2013 +0200]"},
{"name" : "00302d7edcd3a59c74dbd8c360d64ab5c6790de3", "time" : 1378504933, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Made sets of TermRefs work correctly wrt =:=\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Sep 7 00:02:13 2013 +0200]"},
{"name" : "2aa0615594744a7fd92f5f4d017b47e5c42a793a", "time" : 1378498547, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Improvements in implicits error reporting\n\nPlus a few bugfixes for implicits\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Sep 6 22:15:47 2013 +0200]"},
{"name" : "f7ab848229e8b9b0de1b719725816209aa1271c8", "time" : 1378388277, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Several fixes in typer.\n\nAlso updated tests.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Sep 5 15:37:57 2013 +0200]"},
{"name" : "441613bd49f9b5629eefffdc30a52869c0732ca0", "time" : 1378388159, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "added widenSingleton method.\n\nNeeded to make normalize correct.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Sep 5 15:35:59 2013 +0200]"},
{"name" : "eeffffdb4285e26cd7dd01124a3d94664266a168", "time" : 1378388105, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Made SimpleMap non-variant in key type and added map2 method.\n\nBetter type for foreachKey that way.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Sep 5 15:35:05 2013 +0200]"},
{"name" : "15b9f3d6de17c866a1534f62c74d3d08ff5c7bf3", "time" : 1378388054, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Foleded typeConforms back into <:<\n\nReason: It's better that way for explaiing types.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Sep 5 15:34:14 2013 +0200]"},
{"name" : "8857d1d0a613491ffc833f5252107551f570c074", "time" : 1378385835, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fix that avoids constraint pollution when computing cached scope implicits.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Sep 5 14:57:15 2013 +0200]"},
{"name" : "5bd9945e41f65b93f03543dbff3a4d7f531d6c3e", "time" : 1378385778, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "File rename\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Sep 5 14:56:18 2013 +0200]"},
{"name" : "ae8cc6ff0b3c57877ae60b0b1fd30d1bcefa0518", "time" : 1378385769, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Changes in typecomparers\n\n1) Fixes for <:<\n2) Changes in context handling type comparers that allow one to make a new type comparer that \"sticks\" in nested contexts.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Sep 5 14:56:09 2013 +0200]"},
{"name" : "860fd2eb286c48d36655ad99a068a2e61bdb1381", "time" : 1377853837, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "More tests and fixes related to inference.\n\nMain blooper: TypeVars got dereferenced in all Typemaps, so disappeared too quickly from types during inference.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Aug 30 11:10:37 2013 +0200]"},
{"name" : "28f8102d1b4e8c8fd2d2f1838b49e70844245a5f", "time" : 1377780289, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Buf fixing of namer/typer interface.\n\nMake sure that only expanded trees are passed to functions that require expanded trees.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Aug 29 14:44:49 2013 +0200]"},
{"name" : "e47b840e7b3d4f77a32fe823dd2eaf703aff36b3", "time" : 1377777917, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Reverting explicit arguments for zipoped/unzip\n\n… after figuring out the root cause: conforms needs to be renamed because otherwise it shadows Predef.conforms.\n\nAlso fixing two bugs in Desugar.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Aug 29 14:05:17 2013 +0200]"},
{"name" : "3f1cad077c84c0a4bdd8fce909284734e19f3856", "time" : 1377606263, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added implicit parameters, need to find out why they are suddenly needed.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Aug 27 14:24:23 2013 +0200]"},
{"name" : "e2a05a5ac38647f9727d1e0ec8c3c14ac82b5de7", "time" : 1377605561, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixed bugs related to typechecking closures.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Aug 27 14:12:41 2013 +0200]"},
{"name" : "eab2123cd727fad2e0139e63edacfff7307d49f0", "time" : 1377427930, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added wildcard argument handling to parsing\n\nIt was forgotten in desugaring, and in any case would be difficult to do as a desugaring operation, because the transformation is non-local.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 25 12:52:10 2013 +0200]"},
{"name" : "35a4fd27c99eff1463eaf79509f0635b67ba8404", "time" : 1377427615, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Inserts AnyRef as a parent if parents of class def or module def are empty.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 25 12:46:55 2013 +0200]"},
{"name" : "42681cb085e464500d28edc5892ae1ea7aed940f", "time" : 1377427410, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Inferred singleton type instance of a type variable is widened …\n\n … if it is instantiated from below and the upper bound is not itself a singleton type\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 25 12:43:30 2013 +0200]"},
{"name" : "22eb3ca60dcc124f331f5dad1e3b4c77bf72d427", "time" : 1377427349, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Inferred type of a valdef or defdef is always widened\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 25 12:42:29 2013 +0200]"},
{"name" : "d1e00f1a6a20d3649129793e6a108f10ed1db410", "time" : 1377426220, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixed bug in adaptation that confused tree types and their widened versions.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Aug 25 12:23:40 2013 +0200]"},
{"name" : "0712c1903de8383d58a8f7f9e21c10dc32f4159f", "time" : 1377341107, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Optimized case for findMember on a type refinement.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Aug 24 12:45:07 2013 +0200]"},
{"name" : "69623da92518c591e0c4ab651cade28e94ee9a9a", "time" : 1377341080, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "When merging denotations with &, always avoid NoSymbol when you can.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Aug 24 12:44:40 2013 +0200]"},
{"name" : "f194e40eacf9c03fa362565f10e5bbb617cb9a84", "time" : 1377336099, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Review of all deompositions of NamedType\n\nAvoid using symbols that might not exist when doing that.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Aug 24 11:21:39 2013 +0200]"},
{"name" : "922717bd8a1ae60ddd48be2248f0c6d49fb44763", "time" : 1377269163, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixed two problems that lead to over-zealous lifting.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Aug 23 16:46:03 2013 +0200]"},
{"name" : "873a3bc1a273974d7d47de054e68a92c29a359e8", "time" : 1377267687, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixes in implicit handling\n\nPlus a new test file: implicits1\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Aug 23 16:21:27 2013 +0200]"},
{"name" : "a8467b0a7cddeef7110155f9853ff84feb2281fa", "time" : 1377267469, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixes bug in erasure.\n\nWrong to assume that TypeRefs/TermRefs always have an existing symbol.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Aug 23 16:17:49 2013 +0200]"},
{"name" : "7b8000914abe73883052b1d8af356f91cc133806", "time" : 1377267374, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixes expansion and general handling of pattern defs.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Aug 23 16:16:14 2013 +0200]"},
{"name" : "66a176bea94205469851fdb4fab46c2589fba407", "time" : 1377267195, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fix in printer\n\nNamedTypes need not have an existing symbol, so one should print the name in the type instead.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Aug 23 16:13:15 2013 +0200]"},
{"name" : "8d4a02f4e7d88f94d4ffddce90fcfb61af5184a5", "time" : 1377184213, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixing a cyclic reference error.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Aug 22 17:10:13 2013 +0200]"},
{"name" : "8d346b7ac3e668e9970e89ee600d263d7c1a2a44", "time" : 1377184195, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixing a buf in implicit search\n\n… which caused impicit context infos to be always empty\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Aug 22 17:09:55 2013 +0200]"},
{"name" : "749934aeafecc65c865d92056467c08540add8cc", "time" : 1377174289, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "More typer bug fixes and improvements in error messages\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Aug 22 14:24:49 2013 +0200]"},
{"name" : "cbcdbd6fb8c0bf372a61b4ddd5b6ce181964776d", "time" : 1377156454, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Various bug fixes for typer.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Aug 22 09:27:34 2013 +0200]"},
{"name" : "4d8329667a71242e56907a73760f1212a96d9376", "time" : 1377156426, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixing leak logic by turning a key predicate around.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Aug 22 09:27:06 2013 +0200]"},
{"name" : "0e55b70a1a04e2d51b819630214e876ce7c1af84", "time" : 1377156398, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Emprt package is now a member of Root package, not just owned by it.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Aug 22 09:26:38 2013 +0200]"},
{"name" : "ac377466ec1503fb6e4870c927df846e59d30762", "time" : 1377156366, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Change: MultiDenotation#symbol gives NoSymbol instead of assertion error.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Aug 22 09:26:06 2013 +0200]"},
{"name" : "cdb0b0d4f621a6e795a0ae55720ebb800efe7489", "time" : 1377156327, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Making FunProto a prototype so that we can use it in implicit search.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Aug 22 09:25:27 2013 +0200]"},
{"name" : "1acfcd150ebf91cc3609634a703c80c9628c434a", "time" : 1377155979, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added some first test files to compile\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Aug 22 09:19:39 2013 +0200]"},
{"name" : "db35ebf5519fe1c7f2f2870691139edc93c3d0a3", "time" : 1377079047, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Refactoring to prototype scheme\n\n - all prototypes now defined in Inferencing\n - there is a hook in type comparers which delegates to prototype comparison method isMatchedBy.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Aug 21 11:57:27 2013 +0200]"},
{"name" : "1128d72e9b6ccc766c53b5f4872249aedafc00be", "time" : 1377076660, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Making Main friendler as a compile target for dotty\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Aug 21 11:17:40 2013 +0200]"},
{"name" : "02394593cf6ed5c092c398cdb1908ea5b0928d6a", "time" : 1377076619, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixes to import handling and adaptation and implicits\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Aug 21 11:16:59 2013 +0200]"},
{"name" : "f19ea205446ec1d5e356097c56312829e31dfc13", "time" : 1377011602, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixing two typer bugs\n\n1) Context was messed up when issuing errors from findRef\n2) EmptyTrees should not be adapted\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Aug 20 17:13:22 2013 +0200]"},
{"name" : "7fb9cd47f3a5ce10e1001b9a9aa5672dc38bf16e", "time" : 1377002095, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixes handling of modules in namer.\n\nNow we make sure we keep mode invariants at all times.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Aug 20 14:34:55 2013 +0200]"},
{"name" : "b048b321f5f700804ce4e3e67720eb65297eaf39", "time" : 1376992799, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Refactored scheme for maintaining sourceModule, moduleClass and decls in lazy types.\n\nNew scheme is more composable.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Aug 20 11:59:59 2013 +0200]"},
{"name" : "9113c243875cd7f6c8ae6774834ea9a0a468acbc", "time" : 1376938929, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Some additions to module completion\n\n… more to come. Plus some bugfixes.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Aug 19 21:02:09 2013 +0200]"},
{"name" : "36de1429027f635fe7035cf217b944bfc67dcc2c", "time" : 1376929813, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Changed handling of selection prototypes.\n\nSeveral changes:\n\n1) Selection prototypes now get treated specially in subtype checks to account for def vs val, polymorphism, etc.\n2) Selection prototypes will never nest , so quadratic blowup of checking them is avoided.\n3) Selection prototypes are never generated for constructor names.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Aug 19 18:30:13 2013 +0200]"},
{"name" : "aa9ffac0042ed1ab95b5820dfac44a0de0df398c", "time" : 1376929682, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixed printing of self types tto prevent cyclic reference errors.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Aug 19 18:28:02 2013 +0200]"},
{"name" : "d1fd45edec3ca301cc0bda499ffb4229aae2d614", "time" : 1376921986, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added missing file for last commit.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Aug 19 16:19:46 2013 +0200]"},
{"name" : "62131749d08657a0103c922c626a0b918cf385b5", "time" : 1376921943, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Several fixes and refactorings for typechecking\n\n1) Refactoring of package loaders that ensures that a package is always loaded before new members are entered. This led to a refactoring of sourceModule in completers into its own trait\n\n2) Refactoring of optSelfType ot selfInfo. Class Infos may now have a reference to a symbol in their selfInfo field, instead of always a type, as it was before. This allows to introduce laziness for self type evaluation. Laziness is needed so that modules can be desugared and the desugared version be compiled without special tricks.\n\n3) <init> and $init members are no longer inherited.\n\n4) Refactoring of createSymbol and enterSym, so that creating symbols and entering them in a scope is decoupled.\n    Renamed the driver operation form `enterSym(s)` to `index`.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Aug 19 16:19:03 2013 +0200]"},
{"name" : "edb9facac55f61540e0f9af8d06ac9390830fcb8", "time" : 1376920583, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Made NameTransformer encode return the kind of name it is given.\n\nFixes a bug in typedIdent.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Aug 19 15:56:23 2013 +0200]"},
{"name" : "330fee9d79d2f414dcc02c494ba6d632d4ecbb8f", "time" : 1376745304, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Reverting isValid test in SymbolLoaders.\n\nWe can't exclude any classes because there can always be some tricky code that refers to runtime classes. For instance,\nscaka.reflect.ManifestFactory that refers to Nothing$.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Aug 17 15:15:04 2013 +0200]"},
{"name" : "8b2e95eaf06096b1fb4b50fc273809c687f39373", "time" : 1376744581, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Making definitions permanent\n\nNeed to ensure that specially generated symbols in definitions are valid forever; otherwise they would disappear after first run.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Aug 17 15:03:01 2013 +0200]"},
{"name" : "fd6a6774be4be37f707f509aef997e456a6b64ac", "time" : 1376727583, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Defined root context with imports\n\n… and cleaned up and simplified other context-reated features.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Aug 17 10:19:43 2013 +0200]"},
{"name" : "0575d51b898d14f818e35a19a5f9f67f280a0b04", "time" : 1376724567, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Changed desugaring of modules\n\nModule classes no longer contain an explicit self type referencing the module val (this leads to cycles). Self type is instead handled by the completer.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Aug 17 09:29:27 2013 +0200]"},
{"name" : "28464328fbbc2a7575d819dcb98be0c9f11f7cee", "time" : 1376676360, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Eliminating getter generation in namer/typer.\n\nThe idea is that getters shoul dbe generated later (probably during UnCurry). This is much better for handling modules,\nand also obviates the need to have LocalNames. Getters can be generated as soon in the compilation pipeline as methoda always get a parameter list. That way, we can distinguihs getters from fields without playing any tricks with names.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Aug 16 20:06:00 2013 +0200]"},
{"name" : "a871c91aac6c46124b0ce9d118f6ba50496d9694", "time" : 1376674715, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixed overeager classfile pruning which dropped ::.class\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Aug 16 19:38:35 2013 +0200]"},
{"name" : "502f426981105df448896f635ef559cd72787c43", "time" : 1376672468, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Various bugfixes for namer/typer/trees\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Aug 16 19:01:08 2013 +0200]"},
{"name" : "f540194f1b04c044c969772d5989d129264ea781", "time" : 1376557061, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Converted some more s\"\" to i\"\"\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Aug 15 10:57:41 2013 +0200]"},
{"name" : "ae3e18c81517db5df656caf105bc09e0aab3f4a1", "time" : 1376554581, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixes CyclicReference on enter\n\nClassCompleters need to allow access to the class decls scope before the class is completed.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Aug 15 10:16:21 2013 +0200]"},
{"name" : "a61377cc5eb7e51ca5227d4b4e788560d9caac97", "time" : 1376554547, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Better robustness in the presence of error types.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Aug 15 10:15:47 2013 +0200]"},
{"name" : "bedef0cf3217ac9066411c9e654bf18959adb763", "time" : 1376554519, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixed expansion scheme for member defs.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Aug 15 10:15:19 2013 +0200]"},
{"name" : "b90aca7ae53d27b442445b9c08c7b485211da9bc", "time" : 1376497491, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "ErrorSymbols now have TypeBounds as info when they are type symbols.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Aug 14 18:24:51 2013 +0200]"},
{"name" : "f814becef39d8d0bb54b4ef101c5f2a310664d75", "time" : 1376491827, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Converted more strings to be \"i\" interpolated.\n\nAlso fixed a couple of bugs related to message suppression and error reporting.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Aug 14 16:50:27 2013 +0200]"},
{"name" : "85ede3d39d5c894acba442382a3552e9b1e5a5b0", "time" : 1376489581, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixed a typo in previous commit.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Aug 14 16:13:01 2013 +0200]"},
{"name" : "f1601119c092d9a47795a29a83afa6ff9e5b0fda", "time" : 1376489358, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "New error reporting scheme.\n\nnew string interpolator \"i\" for info strings. Computing an info string performs some compiler specific display operations and also allows to suppress an error message entirely if it refers to something non-sensical.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Aug 14 16:09:18 2013 +0200]"},
{"name" : "f19250b1a123aa63cf8f14096bfd8e29e7e548b2", "time" : 1376489279, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Integrated parser/typer into compiler\n\nSome initial bug fixes.\nAdded -explaintypes diagnostics.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Aug 14 16:07:59 2013 +0200]"},
{"name" : "c6f0c00790c996bea57ea905a830dedcb4f2bb44", "time" : 1376489125, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Suppressing file names with $'s in them from loading\n\nFiles with $'s need not be loaded during typer.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Aug 14 16:05:25 2013 +0200]"},
{"name" : "606df6573f0d0323ba58d06e8af3c1aaf844b708", "time" : 1376380031, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixing validity checking of denotations.\n\nTo get this to work, we need to store the name of a scope netry irectly in the entry. This is arguably the right model anyway. A symbol can have different denotations with different names, and it might exist under different names in different scopes. In the previous model once a symbol's name changed in some phase, all scopes referring to that symbol from previous phases would become invalid. Now, the symbol is still visible under its original name.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Aug 13 09:47:11 2013 +0200]"},
{"name" : "401d2012f4c99b170dec99c1f7c4251dda0b20fd", "time" : 1376323823, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Refactored handling of phases to make them more robust and simpler to install.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Aug 12 18:10:23 2013 +0200]"},
{"name" : "34317c162e9d79729e57d22bb167f420e948da8f", "time" : 1376317483, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added main runner and driver.\n\nLeft dummies for Compiler and Run.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Aug 12 16:24:43 2013 +0200]"},
{"name" : "775b2a1857290f5e83036148dbbfcdc3a29a12d2", "time" : 1376169136, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Finished rest of typer.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Aug 10 23:12:16 2013 +0200]"},
{"name" : "4b32ec471bafe988b64563aaabf2d273220a8644", "time" : 1376130724, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added typing of Alternatives.\n\nAlso changed some maps to mapconserves to avoid unnecessary tree copying.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Aug 10 12:32:04 2013 +0200]"},
{"name" : "d318cafbb92518a39c84539c0387c2c93815bb7a", "time" : 1376129410, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added typing of all forms of type trees.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Aug 10 12:10:10 2013 +0200]"},
{"name" : "2fffa023502cbaffe0e282495e18aefe2bff0d22", "time" : 1376063600, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Typing of SeqLiterals\n\nAlso revised handling of SeqLiterals by replacing additional type member with split into SeqLiteral and JavaSeqLiteral.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Aug 9 17:53:20 2013 +0200]"},
{"name" : "73525ada82375ef0ff4be61a3bfbae8c74963ad0", "time" : 1376051438, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added support for pattern variables and Bind.\n\nAlso some fixes in adapt wrt patterns.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Aug 9 14:30:38 2013 +0200]"},
{"name" : "a326b06088d7eadde03bbcd56883b62fcfd21011", "time" : 1375982658, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Typing of try and throw statements.\n\nAlso issues an error on returns form methods missing a return type.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Aug 8 19:24:18 2013 +0200]"},
{"name" : "7f8ce8379296a399d29fdf9ec91210f44460f98f", "time" : 1375976339, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Typing of return statements.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Aug 8 17:38:59 2013 +0200]"},
{"name" : "db9f555e2f02ac345945cb3982b0bf872f44a880", "time" : 1375974177, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Implementation of match/case def including GADT pattern matching.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Aug 8 17:02:57 2013 +0200]"},
{"name" : "2985d1806b66d4bf59807f35a6427b81ef66961e", "time" : 1375786108, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Refined treatment of unapply\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Aug 6 12:48:28 2013 +0200]"},
{"name" : "71e59bb45db6f9f8abd8d42041583d56c88fe289", "time" : 1375717682, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Revised typed ClassDef construction.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Aug 5 17:48:02 2013 +0200]"},
{"name" : "a326e86d7d8389e8049a77b2cd75458f4573e294", "time" : 1375716056, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Type checking function trees and closures.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Aug 5 17:20:56 2013 +0200]"},
{"name" : "dbb4b3f7923427af4ba6e04f258309421d5ee1ab", "time" : 1375374083, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Handling typevars in inference.\n\nFleshed out handling of typevars for type inference. Also added some more methods to typer, for blocks, ifs and assignments. (Closures are still wip).\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Aug 1 18:21:23 2013 +0200]"},
{"name" : "413f364887d5bde7610adbbc08020e23470b4c8c", "time" : 1375007232, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Splitting creation methods out between tpd and untpd.\n\nPartial revert of previous two commits. Creation methods are no longer implemented on Instance, but separately in untpd and tpd. It turned out that tree copying should not use typed creation methods (would tie in too many things into one complex knot). So there was no generic (between typed/untyped) usage of creation methods left. In that case it seemd better to implement the methods separately in tpd and untpd. That way, we do not need to carry a useless context in untpd methods and we do not need to block unavailable methods in tpd with \"unsupported\".\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Jul 28 12:27:12 2013 +0200]"},
{"name" : "60b3469ac70052b762cc7bf0d36bf2ec37e8e6dc", "time" : 1374947310, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Redesign of trees.\n\n1) Trees are now contravariant.\n2) All creation ops, transformers, copiers are pushed into Instance.\n3) Still to do: integrate TreeMappers and tpd.TreeTransformers.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jul 27 19:48:30 2013 +0200]"},
{"name" : "cf65e84a6da2a151286a36297c057b72545960c8", "time" : 1374783762, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "More typer logic, in particular dealing with variants of applications\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 25 22:22:42 2013 +0200]"},
{"name" : "0a86c0ae8668070f62df25c7a4ba12369f23b216", "time" : 1374585512, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added scheme to disabled implicit imports (not just Predef) if an explicit one is given for the same package or object.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Jul 23 15:18:32 2013 +0200]"},
{"name" : "a2c0e29c9e2f8f06e9499c02ebd6e2c3666a0709", "time" : 1374572565, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Some refactorings and additions on error reporting.\n\nAlso, removed redundant Trees. prefixes in patterns.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Jul 23 11:42:45 2013 +0200]"},
{"name" : "9169d5ee101ef7d4f6b797e64e06e4e5df2de7e9", "time" : 1374501938, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Avoid typeArgs when baseType is involved.\n\nGoing through baseType.typeArgs does not work, as the baseType is not structurally a type application.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jul 22 16:05:38 2013 +0200]"},
{"name" : "b3d0902d2219f9680180b17ff7f0b22aa11aae90", "time" : 1374501526, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "SeqLiteral refactoring\n\nSeqLiterals no longer have an elemtpt subtree. Their type is now no longer a RepeatedParamType, but instead an instance of SeqType or ArrayType.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jul 22 15:58:46 2013 +0200]"},
{"name" : "4b265ca213d066897db3a2333a3ac1420e8a480f", "time" : 1374498339, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added eta-expansion.\n\nAlso: made RepeatedParamTypes aliases of their underlying types, in order to avoid any incompatibilities.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jul 22 15:05:39 2013 +0200]"},
{"name" : "1ed37543f0dc893ba697c212c310063541018f5c", "time" : 1374410522, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added code for adapt and more.\n\n- Pushed mode into context\n- Elimintaed scope nesting level\n- Fixed a desugar bug\n- Added constant folding\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Jul 21 14:42:02 2013 +0200]"},
{"name" : "7e1bd23bf01c6949e08785eb5afc0fcf46b72afb", "time" : 1374310502, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Made implicit results use TyperState instead of full context.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jul 20 10:55:02 2013 +0200]"},
{"name" : "a39551f990be08dc7168374e74228b9388160aec", "time" : 1374270871, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Integrated reporting into TyperState.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jul 19 23:54:31 2013 +0200]"},
{"name" : "919310a29daebabe3335d428f5f5e52ed6295cbd", "time" : 1374253722, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Made reporting framework more lightweight and uniform in preparation of future integration of reporters in typerstate.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jul 19 19:08:42 2013 +0200]"},
{"name" : "702c4fc89f3ff2abbc7457fd72ab19b5bbdbb782", "time" : 1374246316, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Handling bounded wildcard types.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jul 19 17:05:16 2013 +0200]"},
{"name" : "ea640a32264cb78efbf267d5c2be89e3e99dcccf", "time" : 1374246123, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Additions needed to support implicits.\n\nStill to do:\n - properly account for bounded wildcard types\n - set up scheme for nested diagnostics buffers.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jul 19 17:02:03 2013 +0200]"},
{"name" : "17ef71dc2b11c5d1a82307f79d50c7ed0f77fd81", "time" : 1374240072, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Some bugfixes and added functionality to support implicits.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jul 19 15:21:12 2013 +0200]"},
{"name" : "8115e097c48efd73185c97ed01995de99bec546f", "time" : 1373885453, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Freshing out some more aspects of applications.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jul 15 12:50:53 2013 +0200]"},
{"name" : "9e9eb7e126122e122118018fa6d0383156fe9ab5", "time" : 1373885434, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added provisional extractor for SAM types\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jul 15 12:50:34 2013 +0200]"},
{"name" : "e67de603b531ad268b906d77e900425e917c2a08", "time" : 1373623601, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Logic to ensure the following invariant: A class denotation's validity period is properly contained in the validty periods of all its parent classes. This is necessary to ensure that parent- and member-based caches in a ClassDenotation never become invalid.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jul 12 12:06:41 2013 +0200]"},
{"name" : "a466ae90c9ddf3d3312fb552fde106a8903383e1", "time" : 1373623491, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Adding diagnostics how many stubs were generated\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jul 12 12:04:51 2013 +0200]"},
{"name" : "62ac6eb04b32ad9795754143d8934343ed3d9a8f", "time" : 1373530085, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Avoided cycle in newCompletePackageSymbol by passing name explicity.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 11 10:08:05 2013 +0200]"},
{"name" : "c9679f6c0f3c8200e1b1f537e89488094cfc2576", "time" : 1373530052, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added functionality to deal with function applications.\n\n- Added Applications class to represent applications\n- Added Constraint class to represent type constraints\n- Added TyperState class to represent typer state\n- Added Diagnostic class to buffer errors and warnings\n- Added Inferencing class that contains some common functionality for type inferencing (this one's still rudimentary).\n\n- Added extractor for FunctionType in Definitions\n- Added desugaring of default parameters to default getters in Desugar\n- Added flags to deal with default parameters\n- Added substitutions that replace bound parameters\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jul 11 10:07:32 2013 +0200]"},
{"name" : "0af96c0f5179104fca02cf1aa144c6176bdb71eb", "time" : 1372537837, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Adding TypeVars and adapting constrints accordingly.\n\nA TypeVar is essentially a container whose contents can be \"flipped\" from a PolyParam to an instantiated type.\nAdding TypeVars avoids subtitutions of large trees and all their types which would otherwise be necessary when a type parameter is instantiated at some point.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jun 29 22:30:37 2013 +0200]"},
{"name" : "880c2c1ecf34bd18c3385f146e451ce7abcff9bb", "time" : 1371918528, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added logic for typing selections.\n\n… and got started with typing applications.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jun 22 18:28:48 2013 +0200]"},
{"name" : "1e5c480ecfe8da386c46e6f3087db36751b7b691", "time" : 1371918429, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added logic for constraint solving.\n\nRe-organized constraints and type comparers and added methods that will be needed for type inference.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jun 22 18:27:09 2013 +0200]"},
{"name" : "d65cd7007dedd762f6942cf96ece9ead423ee9d5", "time" : 1371918374, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "More utility methods in type: subst(BoundType, Type) and occursIn.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jun 22 18:26:14 2013 +0200]"},
{"name" : "676185cecc7bc92d8847dd81ba0820ea7c317819", "time" : 1371918227, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added a mapValues method to SimpleMap\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jun 22 18:23:47 2013 +0200]"},
{"name" : "691d265854f79e2a8fb26d58963c8c57d3caf499", "time" : 1371878251, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Flehsed out constraints, with more efficient maps.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jun 22 07:17:31 2013 +0200]"},
{"name" : "55503475f78d9e8bd90468d0efc01f8efae94cea", "time" : 1371877736, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Being a bit more conservative with creating new TypeBounds\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jun 22 07:08:56 2013 +0200]"},
{"name" : "f4347b9ae8d7def0e092e154150098fdb9abc65e", "time" : 1371687955, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added accessibility checks to typedIdent\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jun 20 02:25:55 2013 +0200]"},
{"name" : "e64db5defe1115427c39ffb19c3ee127d028b3cd", "time" : 1371621136, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Changed symbol selection for |\n\nWe now pick a common superclass symbol even if it is not accessible. Accessible ones take precedence over non-accessible ones. The reason for doing this is better error diagnostics.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Jun 19 07:52:16 2013 +0200]"},
{"name" : "841fa26c5bdc630191667e2b154f6276e721f475", "time" : 1371611004, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Removed the comparison with previous behavior for &.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Jun 19 05:03:24 2013 +0200]"},
{"name" : "fdf09cd6a3240645f0bd7a42d455331d148eb95d", "time" : 1371610848, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "made ClassInfo#typeConstructor work more directly.\n\nReplaced asSeenFrom by a direct copy of the underlying denotation, and added a cache for the result.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Jun 19 05:00:48 2013 +0200]"},
{"name" : "b2dcc777e5a6a1e6d1fff89c7fa794129ad5d135", "time" : 1371610091, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Taking accessibility into account for &, |\n\nChanged the algorithm for & (and also |) to take accessibility into account. Fixed various problems that opened up when doing this.\n\nUnder -debug, new and old behavior of & are checked side-by-side and any discrepancy is noted.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Jun 19 04:48:11 2013 +0200]"},
{"name" : "928a2a99288c3aa425654e63aea5ddc70359d4ac", "time" : 1371590604, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Distribute & into TypeTypes.\n\n&, | on two TypeTypes yielded AndTypes and OrTypes, which is wrong. We now turn any ClassInfoTypes into TypeBounds and distribute the operator into the bounds, creating a TypeBounds type.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Jun 18 23:23:24 2013 +0200]"},
{"name" : "f8a42a0584d855a0548c20c7434ed83a59647ed9", "time" : 1371577089, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added typedIdent method.\n\nAlso some refactorings that were caused by adding this method.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Jun 18 19:38:09 2013 +0200]"},
{"name" : "3c7936515a9aaf383b453fe5844598fd53a2e551", "time" : 1371425114, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added typer.Mode\n\nReplaces desugar.Mode. Is now a value class representing a set.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jun 17 01:25:14 2013 +0200]"},
{"name" : "c190626eb0a7c6a314429bb4f3c498da989395fc", "time" : 1371326502, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Removed ClassDef as a Tree node class.\n\nClassDefs are now TypeDefs that have a Template as rhs.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jun 15 22:01:42 2013 +0200]"},
{"name" : "658fc7f7070e8f13abd0391ff4e6045ac34e2891", "time" : 1371325478, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Forward-ported Jason's fix to setting privateWIthin from Java classfiles.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jun 15 21:44:38 2013 +0200]"},
{"name" : "a3f6a1df1bd623ee913e41f739b3f13ac9638d14", "time" : 1371151854, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Dropping type parameters from typed TypeDefs.\n\nTyped TypeDefs no longer carry tparams. Untyped ones still do, but there is a special PolyTypeDef node for them in untpd.\n\nAlso, fixed flatten and DeSugarTest to deal with new tree desugarings which are not idempotent (e.g. desugar.classDef, or desugar.valDef).\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jun 13 21:30:54 2013 +0200]"},
{"name" : "a5f576f147d5e9272629992936ed1e45c0a05020", "time" : 1371047723, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Removed dead code.\n\nParameterized are never PolyTypes anymore, so do not need to test for this.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Jun 12 16:35:23 2013 +0200]"},
{"name" : "27ca695e2726e4f6a9446b5e81b0755dc0fdba9b", "time" : 1371047449, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Made type parameters left leaning for AndTypes.\n\nWhat did not work before:\n\n  type F[T] = G[X] & Runnable\n\nWe now make this work by interpreting type parameters of the RHS to be the type parameters of G[X].\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Jun 12 16:30:49 2013 +0200]"},
{"name" : "8ad783bf633ba5f913fda84c376dcec9dabd69a9", "time" : 1371046654, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Made pos a total method on Symbols, returns NoSymbol if undefined.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Jun 12 16:17:34 2013 +0200]"},
{"name" : "4124ff23501eb8d30f0aa873bb3ea79115812f82", "time" : 1370637986, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Integrated new treatment of higher-kinded types with Unpickler.\n\nCould drop quite a bit of code in the process.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jun 7 22:46:26 2013 +0200]"},
{"name" : "27ce72f1b30a06f56782d88c6c4f96d261d4a44e", "time" : 1370614445, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added support for eliminating type parameters from TypeDefs.\n\n(1) New scheme for higher-kinded types that deals also with F-bounds.\n(2) Type parameters in type aliases are eliminated in most cases by expressing\n     as unparameterized aliases of some refinement type. We will issue an error where\n     this is not possible.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jun 7 16:14:05 2013 +0200]"},
{"name" : "c76cffe04fd690378337971c78736f920b9a479d", "time" : 1370614283, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added `pos` meethod to symbols.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jun 7 16:11:23 2013 +0200]"},
{"name" : "1571ec5f39cacac6433cce0a140ebfb18e2ac314", "time" : 1370539241, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Namer redesign.\n\nA new design that relies on DefDef local maps, instead of global maps before.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jun 6 19:20:41 2013 +0200]"},
{"name" : "5651846489834ed69cbb2dab88bc628cf6234dc9", "time" : 1370539125, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Changed meaning of typeParams\n\nType parameters are now counted only if they are not refined. I.e. previously given\nclass Map[K, V], K and V would be type parameters of Map { K = Int }, but now only V would be.\n\nAlso, added a new kind of name filter that gets all type members.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jun 6 19:18:45 2013 +0200]"},
{"name" : "898fe8a499c97fa62840e2c79755fc729015a442", "time" : 1370446022, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "wip - partial redesign of namer/typer\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Jun 5 17:27:02 2013 +0200]"},
{"name" : "b28c9ef75e274bdc54e9502e56c95b505495de5b", "time" : 1370361637, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Refactoring: breaking out desugaring into its own object.\n\nAlso, changing the maps in Namer. More commenting needs to be done. Pushing now to get off this machine and\nback to the new one, which just came back form repair.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Jun 4 18:00:37 2013 +0200]"},
{"name" : "4fc1d8501a3937547e05f14aa4f4423a2c0d6a1d", "time" : 1370252883, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Refactorings: ModDefTree renamed to MemberDef and removed EmptyFlags comparisons.\n\nEmptyFlags comparisons were eliminated and replaced bu .isEmpty tests.\nThe problem this solves is that more than one flag value can represent an empty flag set.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jun 3 11:48:03 2013 +0200]"},
{"name" : "339809ed82e14699681a5a7765c87133cd681ec0", "time" : 1370252033, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "More solid design of Namer with some Typer bits added.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jun 3 11:33:53 2013 +0200]"},
{"name" : "17d0e7008f62882c10193ea0db09c9b90736c320", "time" : 1369901388, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "wip, because I have to get off this machine.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu May 30 10:09:48 2013 +0200]"},
{"name" : "c53ac49cbe7c98c05a99fea3c8e1dcad75275a82", "time" : 1369745782, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "wip namer.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue May 28 14:56:22 2013 +0200]"},
{"name" : "41c54e9b3df245defd774cf06132880479128cb5", "time" : 1369671122, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "TempTrees -> Thicket\n\nDropped Thicket as a Seq. Plus some other smallish changes.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon May 27 18:12:02 2013 +0200]"},
{"name" : "ec76d06dc2b7360bf833532f5ca45d3b48506dcc", "time" : 1369499692, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Making use of specialized TempTrees constructors.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat May 25 18:34:52 2013 +0200]"},
{"name" : "b4c7fea9a5b8df6a4bf8b5499ba7585575c2a7c3", "time" : 1369499572, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Making EmptyTree a special case of TempTrees\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat May 25 18:32:52 2013 +0200]"},
{"name" : "d2b3a5db9047743e93351064f64aa594cb02ea52", "time" : 1369483372, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Made TempTrees array-backed.\n\nThis is a first step towards going from List[Tree] to an array-backed solution with special cases for small numbers.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat May 25 14:02:52 2013 +0200]"},
{"name" : "9d6a5299d01a3a808d060396ef1f10a693a1bdae", "time" : 1369406555, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added tests for desugaring.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri May 24 16:42:35 2013 +0200]"},
{"name" : "9b511db42e18d14318e0e85d1cdfc96fa3e42e60", "time" : 1369406539, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Improvements to printing trees.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri May 24 16:42:19 2013 +0200]"},
{"name" : "3b51d4bdcb9ca3c1f439cee7d1e09c960b3e0c6f", "time" : 1369406512, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Improvements to desugaring\n\n(1) Reorganization of Typed/Untyped trees. Untyped trees now have their own copier, transformer and accumulators.\n(2) Better treatment of functions\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri May 24 16:41:52 2013 +0200]"},
{"name" : "991860936cbbedf6087a2e13ef69a61b69b3fa86", "time" : 1369406399, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Parser tweaks to handling new and templates.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri May 24 16:39:59 2013 +0200]"},
{"name" : "acc2b198692687394c9f8f84b16a0bec9ae12ee3", "time" : 1369406346, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "NameTransformer.encode now goes from names to names.\n\nAlso, special treatment of <init>, which is not encoded.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri May 24 16:39:06 2013 +0200]"},
{"name" : "e1be722f469c45e7546388359b5870a07f4c14b8", "time" : 1369312405, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "More tweaks to desugaring\n\n(1) Made desugaring reaching a fixed point.\n(2) Systematic encoding of names.\n(3) Introduced Closure nodes which represent anonymous functions\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu May 23 14:33:25 2013 +0200]"},
{"name" : "db39f1a5f5062f00e09e20a897e8f6d26e1e4193", "time" : 1369300733, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Moved TempTrees to Trees, get automatically flattened in transforms.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu May 23 11:18:53 2013 +0200]"},
{"name" : "66fe5aaba6d5f7ae3694bcc942487cd1fe00c533", "time" : 1369243348, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Eliminating Trees.TypedTree and Trees.UntypedTree\n\nReplaced by tpd.Tree and untpd.Tree.\nAlso some cleanups in RefinedPrinters.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed May 22 19:22:28 2013 +0200]"},
{"name" : "965a62d4a165da7e5a53c9afdba3175e10fe714b", "time" : 1369241817, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Made tpd/untpd toplevel objects.\n\nMoved all other elements of TypedTrees and UntypedTrees into tpd and untpd.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed May 22 18:56:57 2013 +0200]"},
{"name" : "fd079d2f3335db7b54b0f78a4d884d9948a7beea", "time" : 1369240223, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "More tree refactorings.\n\n1) Getting rid of ugen in favor of untpd.\n2) Eliminating some unused methods\n3) Splitting out CheckTrees from TypedTrees.\n4) Moving trees and related classes into separate package dotc.ast\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed May 22 18:30:23 2013 +0200]"},
{"name" : "0ebdcc7ed2d2024d93ba7d24b88187d4c502eb4b", "time" : 1369233868, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added desugaring.\n\nWith various other small changes.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed May 22 16:44:28 2013 +0200]"},
{"name" : "62fe4b6ec456b4878a642aa7e98886b0c9d4c9dd", "time" : 1368792699, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fix to typechecking of Try nodes.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri May 17 14:11:39 2013 +0200]"},
{"name" : "94b9a2a0d083cca2ba1358582d8d6fd8143b0b31", "time" : 1368790082, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Refactored Printing architecture.\n\nSplit printers into several files. Added refined printing of trees. Changed Showable and generalized printing\nunder a precedence.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri May 17 13:28:02 2013 +0200]"},
{"name" : "d2261b37cf23ccd04e9029f3556c2dc9e2bdf077", "time" : 1368784426, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Some fixes to parsers.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri May 17 11:53:46 2013 +0200]"},
{"name" : "6746b644e94036f84d40f9a125e04cb37131f196", "time" : 1368632512, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "New version of syntax-summary, with addition of string interpolators for quasi-quotes.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed May 15 17:41:52 2013 +0200]"},
{"name" : "348dd53f384be31ec674814f9b9d97e89664b522", "time" : 1368528053, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Made precedence common between parsers and printers\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue May 14 12:40:53 2013 +0200]"},
{"name" : "fec318dedaa10bf7ffaebd7aaf4a99e05ac0312a", "time" : 1368526955, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Refactored Printers, Showable and Text into new package dotc.printing.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue May 14 12:22:35 2013 +0200]"},
{"name" : "b866c49bde62ee8ee52358dee746db64741b5891", "time" : 1368464136, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "New parser tests\n\n… which take some statistics.\n\nSo far (on a Macbook pro): code base tested = scala/src + dotty/src\n\nlines: 290'000\nnodes created: ~1'004'000\nparse times + tree building times after 10 iterations: 700-750ms, i.e. ~ 400Klines/sec\nfull transform of 1M nodes without tree copying: ~50ms\nfull transform with full copying: 150-200ms\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon May 13 18:55:36 2013 +0200]"},
{"name" : "9ba33cb09d684eb5b5ea10379e801ebc7de135ba", "time" : 1368463939, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "First tiny bit of statistics.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon May 13 18:52:19 2013 +0200]"},
{"name" : "19cce9dca34bf951787805069dc57bf177942758", "time" : 1368463762, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added conditional warning facility\n\n…for deprecation, feature, unchecked.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon May 13 18:49:22 2013 +0200]"},
{"name" : "805d116bd6d504b36db06568d0a160e41cfabfb7", "time" : 1368366256, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "new tests and worksheets\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun May 12 15:44:16 2013 +0200]"},
{"name" : "c863dd63af8e8e93582841fab4926b5899e0e285", "time" : 1368366239, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Lots of fixes to parser\n\n… and some to grammar.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun May 12 15:43:59 2013 +0200]"},
{"name" : "ebdeea989c940e9bf523f6054953dd7ceac123f7", "time" : 1368366089, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Various fixes to trees.\n\nTry now takes a tree as catch-part (instead of a sequence of CaseDefs, which has been replaced by Match(EmptyTree, cases)).\n\nTemplates now take a DefDef as constructor.\n\nAdded InterpolatedString as new untyped tree constructor.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun May 12 15:41:29 2013 +0200]"},
{"name" : "bee984365cb01ee08432097ef1cfb69bec16a3ed", "time" : 1368365932, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Various fixes to token sets.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun May 12 15:38:52 2013 +0200]"},
{"name" : "8ad635e599e5d16c80fbf36cc3dd3f6e9466e409", "time" : 1368365904, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Adding toString to Source positions.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun May 12 15:38:24 2013 +0200]"},
{"name" : "51c74d09cf8717d0ac87d4d8e12461e49f0031c7", "time" : 1368365879, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Various fixes to Scanners.\n\nIn particular: keyword handling, comments, numbers.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun May 12 15:37:59 2013 +0200]"},
{"name" : "d31407db2e99c674eb74431f327d02a41e70746f", "time" : 1368365779, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixes to tree printing\n\nNow goes inside lists. Also prints positions.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun May 12 15:36:19 2013 +0200]"},
{"name" : "dbc10c03035206fb0ca08dd50300b4828cd95e93", "time" : 1368365733, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Various fixes to Positions.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun May 12 15:35:33 2013 +0200]"},
{"name" : "e2f5f084433120b5eb6cbdbc1ca9967d8036931b", "time" : 1368365554, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Making Abstract a common flag.\n\nReason: When parsing abstract can be used for types as well as terms. For terms: in conjunction with override.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun May 12 15:32:34 2013 +0200]"},
{"name" : "558487bd61729de8ee61967f41b49fdbcaac2499", "time" : 1368365505, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Early initialization of keywords to save space.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun May 12 15:31:45 2013 +0200]"},
{"name" : "18795cad3cdd38106fc081c6573f7eafd34c68ab", "time" : 1368365480, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Cleanup printing of positions.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun May 12 15:31:20 2013 +0200]"},
{"name" : "aad2d3a71f65e1b542bbfafbf387394331a270ee", "time" : 1368197563, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Refactored and augmented source positions.\n\nAlso Implemented ConsoleReporter formatting.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri May 10 16:52:43 2013 +0200]"},
{"name" : "5ec2199c4966404d462eb866533dc0589fe7f239", "time" : 1368183612, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added locator for untyped trees.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri May 10 13:00:12 2013 +0200]"},
{"name" : "60cf06a76b55cc0e1098557b8464fbcfdd324887", "time" : 1368183596, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Two small tweaks to parser\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri May 10 12:59:56 2013 +0200]"},
{"name" : "cf4c428cc58ed330faa236bf54d06c1fad902c8a", "time" : 1368121035, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Some parser revisions\n\n(1) Added markup parsers\n(2) Syntax change relating to modifiers and annotations of primary constructor\n(3) Review of parsing with bug fixes and simplifications.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu May 9 19:37:15 2013 +0200]"},
{"name" : "bfa03db8ea8897f51316cd77a7c71b2ca25ba531", "time" : 1368027548, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Improvements in error handling of parser\n\nAlso some simplifications and eliminations of unused code.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed May 8 17:39:08 2013 +0200]"},
{"name" : "214eb8b650a86d1708b1257f89f53840a121de62", "time" : 1367923231, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added a parser.\n\nSynced parser and SyntaxSymmary.\nParser now produces untyped trees that need to be desugared further.\nAlso some tweaks to position to make it work well.\n\nThis is a first version.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue May 7 12:40:31 2013 +0200]"},
{"name" : "ab39cb9f4d6451dd6e2a45e73f08db31a3cea5b3", "time" : 1367337750, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Syntax summary for dotty, with indications what trees get generated.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Apr 30 18:02:30 2013 +0200]"},
{"name" : "ad80e82469b6fe298a5cbdb0beac736fc01ec5fb", "time" : 1367337730, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "New tree organization, with untyped trees that closely model source.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Apr 30 18:02:10 2013 +0200]"},
{"name" : "273873d09c2e0e5080612a7f8a40cab138b41daa", "time" : 1367336959, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Small fixes prompted by last week's code walkthrough.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Apr 30 17:49:19 2013 +0200]"},
{"name" : "68021907ec042d2e0404e47303c2723bde375f16", "time" : 1367336646, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Re-vamping of positions, and split into synthetic and source-derived.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Apr 30 17:44:06 2013 +0200]"},
{"name" : "fc8fc177d2dfd270e57996099deef2e4a3a975ed", "time" : 1366729474, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Modifications in prepation of parsing.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Apr 23 17:04:34 2013 +0200]"},
{"name" : "8566b093c35d5cc5b29544b5b2c3f01b0ec4c1bd", "time" : 1366726779, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Changed classSymbol so that it returns traits as well as classes.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Apr 23 16:19:39 2013 +0200]"},
{"name" : "ae816296034133b1dee25020224b9f7a334c8928", "time" : 1366720986, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Making fields in MethodType, PolyType strict to avoid context capturing.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Apr 23 14:43:06 2013 +0200]"},
{"name" : "91f71c3112a06c86aa36a9aaedf4ed159c3d8961", "time" : 1366720501, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixed build errors.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Apr 23 14:35:01 2013 +0200]"},
{"name" : "7bca39c57e31da15478033ac4d581705cbeb4bc9", "time" : 1366644140, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Some annotations and changes prompted by the code walkthrough.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Apr 22 17:22:20 2013 +0200]"},
{"name" : "4a93c8c132941ff3dae9ebf2dc27b37cd4f7cdec", "time" : 1366378613, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added symbolic XML builder\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 19 15:36:53 2013 +0200]"},
{"name" : "6b58c275293b2c2b0bf3390eaee94ec31bcbdab9", "time" : 1366375271, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added TreeBuilder and TreeInfo classes.\n\nAlso changed Untyped from Nothing to Null, because it avoids type inference problems.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 19 14:41:11 2013 +0200]"},
{"name" : "344450ffcde551af8406fa1b873a6cb9dd430eb0", "time" : 1366375223, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added some predefined methods in Definitions.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 19 14:40:23 2013 +0200]"},
{"name" : "570282cfdb1da8098036a9974198ca65b8740c66", "time" : 1366186602, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Commented out pluggable transformers.\n\nWill come back to this later.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Apr 17 10:16:42 2013 +0200]"},
{"name" : "ca8dc7ada663e44aafe470944dd17256dbde151c", "time" : 1366186582, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Scanners added.\n\nMoving Positions, Chars to new packages.\nAdded Source positions.\nAdded untyped trees module.\nFactored out behavior between typed and untyped trees.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Apr 17 10:16:22 2013 +0200]"},
{"name" : "e32fedb6844eab11a27e365a570b2033a0f6f78d", "time" : 1365607407, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Logging deep subtype recusions\n\n(noe showed up when reading scala and dotty).\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Apr 10 17:23:27 2013 +0200]"},
{"name" : "c1af57447c429f00d09de5b653aae8364e5f6150", "time" : 1365604945, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Consolidation isStatic, isStaticOwner, owner is Package\n\nwent thought all occurrences of either and checked that the right one is picked.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Apr 10 16:42:25 2013 +0200]"},
{"name" : "87ae863c3efa7ce41fed81b783855c572d541898", "time" : 1365599953, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Re-organized comparisons of types with classes.\n\nNew methods: isClassType, derivesFrom, isArray. Refactored calls to typeSymbol and <:< into these. Made sure to use dealias where needed on remaining typeSymbol calls.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Apr 10 15:19:13 2013 +0200]"},
{"name" : "1034d4e420c2b0724945486f341c53a07e6a90e0", "time" : 1365581346, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Removing automatic legal prefix checking.\n\nIt turned out this led to cycles in subtyping. We need to check for legal prefixes only for types that are declared or inferred in source. For the rest, we should assume that the type is OK.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Apr 10 10:09:06 2013 +0200]"},
{"name" : "ac8b319ed4738b2200350adb3943eb558157e1b7", "time" : 1365581270, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Turn off preloading of denotations for unpickled symbols.\n\nThe previous code was wrong for TypeRefs. Once the missing asSeenFrom(pre) was added, it led to cycles.\nThe conclusion is that we have to compute the info lazily. If the prefix is NoPrefix, this is not possible, and we use a fixedSym instead.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Apr 10 10:07:50 2013 +0200]"},
{"name" : "c9e3ea57a5ea802b7fb0772fb73da10f5fe59f3e", "time" : 1365580904, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Avoids exponential amount of testing for nested packages\n\nPreviously, each package nesting level doubled the amount of tests, because of the where doTwice was placed.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Apr 10 10:01:44 2013 +0200]"},
{"name" : "7a6bb3ccba3217bc15e3a1c038a1cce4dbd942e3", "time" : 1365513589, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Renamed creation methods of NamedTypes\n\nMethods taking a fixed symbol are now called …withSym, methods taking a signature … withSig.\nThe reason for the change is that we want to liberate the original method names to take optional denotations, thus avoiding to have to go through withDenot each time.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Apr 9 15:19:49 2013 +0200]"},
{"name" : "442c361aee87266fe6428f1d9a5da7de934c8cef", "time" : 1365512787, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added initial denotations to NamedType where feasible.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Apr 9 15:06:27 2013 +0200]"},
{"name" : "d1c2fe7ab3b2cddb224f24ce37fdc0bf4237d5a4", "time" : 1365512625, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "ShowClass tests now run both with -Ydebug and without.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Apr 9 15:03:45 2013 +0200]"},
{"name" : "29e4d716fc188694b223970a9e81767d74a70c8b", "time" : 1365501638, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Producing denotations for typeConstructors in ClassInfos early.\n\nMotovation: We have the denotation modulo asSeenFrom, so no member lookup needed\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Apr 9 12:00:38 2013 +0200]"},
{"name" : "6fe7bdc091cee3f20f579409ba08800c5a1158d8", "time" : 1365501279, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Cosmetic fix/clarification in Printers.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Apr 9 11:54:39 2013 +0200]"},
{"name" : "3ca11fbd1f86e128bc58e0e59d3c98da0a9829e8", "time" : 1365500860, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Renaming ClassCompleter -> ClassCoimpleterWithDecls\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Apr 9 11:47:40 2013 +0200]"},
{"name" : "1897d2160a508a3f3267e3ece3647d24e6e6ebf4", "time" : 1365500407, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Refining refined printers.\n\nVarious refinements to make output look more like source.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Apr 9 11:40:07 2013 +0200]"},
{"name" : "8d445b89b1bae849540cb4da200f64c92e746bbf", "time" : 1365500381, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Unpickling now removes ExprTypes nested in PolyTypes.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Apr 9 11:39:41 2013 +0200]"},
{"name" : "0820a6e44987d69c2ad297330653e49e04e84554", "time" : 1365500311, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fix to typeParamNamed.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Apr 9 11:38:31 2013 +0200]"},
{"name" : "9b42bdc7be28737be574980fea0af50e35f31a81", "time" : 1365500290, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixes to originalName and allOverrddenSymbols.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Apr 9 11:38:10 2013 +0200]"},
{"name" : "31a4611cb0a13d05068c93406d2f8c1be31d45e2", "time" : 1365500097, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Extension mechanism which allows to add more properties to contexts.\n\nLooking up these properties requires a map lookup so is slower than a context field. On the other hand,\na property in the map does not require addiitonal space in all contexts, so does not increase the price of cloning either.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Apr 9 11:34:57 2013 +0200]"},
{"name" : "e45ba8adadb26f26bd9706724bf3a0c5c182fe82", "time" : 1365421261, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "More refinements to classfile loading.\n\nCan now load and print all of scala, dotty.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Apr 8 13:41:01 2013 +0200]"},
{"name" : "19143c67d77a71bd5ef18769e222beed291fa92b", "time" : 1365368467, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Changes to pre complete decls\n\nDropped preCompleteDecls for a general refactoring that makes decls available after a class is loaded and before it is completed.\n\nAlso some other fixes to classloading problems.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Apr 7 23:01:07 2013 +0200]"},
{"name" : "34cdca9f2eb60facef679cca9c1d7cb4b2ae10dc", "time" : 1365368250, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added filter utility method to Scope…\n\n… which is more efficient than toList.filter.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Apr 7 22:57:30 2013 +0200]"},
{"name" : "de1684b2daa4e23ff825965f4956e65410917a71", "time" : 1365244005, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Renamings\n\nmodule => sourceModule in class ClassCompleter\nLazyModuleInfo => ModuleCompleter\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Apr 6 12:26:45 2013 +0200]"},
{"name" : "7ff269e8027d1aeddfec4eb0ada7a565fcd11c1f", "time" : 1365243535, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Refactored lazy class completers and module class completers.\n\nAim: simplification, fewer classes.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Apr 6 12:18:55 2013 +0200]"},
{"name" : "7696a4aa949825c3f8bbe8e5aa7ef428657aac24", "time" : 1365190966, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Weakening disambiguation from =:= to matches.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 5 21:42:46 2013 +0200]"},
{"name" : "3444dedf4c172eb506d78da0b48407b4b443934c", "time" : 1365190450, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added case for ThisType#typeSymbol.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 5 21:34:10 2013 +0200]"},
{"name" : "3eefd53095a06d40c2f841c54f8953f181287541", "time" : 1365183584, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Moved logic from setClassInfo to completer.\n\nMade sure that unpickled module classes always have a sourceModule.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 5 19:39:44 2013 +0200]"},
{"name" : "e60517ae83841a88cd1ad4c5ef24c27186adf346", "time" : 1365183537, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Adapted backlisting in test framework to new module class name scheme.\n\nPrevisouly, failed to detect backlisted package members that were module classes.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 5 19:38:57 2013 +0200]"},
{"name" : "82b37ed8ecccf8b41247d538231ed058df907d34", "time" : 1365182171, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Pre-initializing Unpickler NamedTypes with their Denotations.\n\nThis fixes a weird problem where we read an external reference to a type parameter with NoPrefix as owner.\nThe problem arises when reading reflect.io.ZipFileArchive, where the reference is to the type parameter of AbstactFile.\nIt might be a known problem for Scala. For the moment there's nothing much we can do on the dotty side to deal with it. We either use .withDenot, and accept that this cannot be reloaded in future runs, or we use a HasFixedSym and risk a stale reference. It seems better to fail than to live with stale references.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 5 19:16:11 2013 +0200]"},
{"name" : "eb781570824840e5b402a719e8b3e7c91a86a3d2", "time" : 1365178327, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixed sourceModule fallback, adapting to new module class naming scheme.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 5 18:12:07 2013 +0200]"},
{"name" : "1ff51dc830b626f2344fc40552c841a0a2020614", "time" : 1365178292, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Weakinging of AndType invariant.\n\nAndTypes over non-value types are possible, for instance ExprType is valid as an argument.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 5 18:11:32 2013 +0200]"},
{"name" : "dbff479130fbf610ba79690e2140fb644e2d045c", "time" : 1365177346, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Use NoType instead of Any as sentinel for upper bound\n\nThis avoids subtyping tests for single bounds, and with them possibles cyclic references.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 5 17:55:46 2013 +0200]"},
{"name" : "08d32abb73036acc5863ed780a369b95c187b274", "time" : 1365177039, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Made Erroneous a pre-complete flag.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 5 17:50:39 2013 +0200]"},
{"name" : "ce45711bfcadf22fee2ade9c86b43ada2db0609b", "time" : 1365174865, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Made & , | NoType-aware.\n\nFor the pruposes of & and |, NoType is now treated as top type, above Any.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 5 17:14:25 2013 +0200]"},
{"name" : "7736cfb8ff8f5fafee87eb094f15627f4f097165", "time" : 1365173734, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "More tests in worksheets.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 5 16:55:34 2013 +0200]"},
{"name" : "4ce196d8152f75163edb362fcd21fb37631b7fde", "time" : 1365173680, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Made module class names end in '$'.\n\nIf module classes have the same names as their companion classes there is the latent trap that TypeRefs refer to one or the other. To avoid cross-talk, module classes need to have a different name.\n\nAlso, some fixes to baseType, isSubClass in SymDenotations.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 5 16:54:40 2013 +0200]"},
{"name" : "859840dd0662a12fbc1ba470438eca779b08ed89", "time" : 1365172809, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fix to array erasure.\n\nNow treats arrays of value classes correctly.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 5 16:40:09 2013 +0200]"},
{"name" : "bf757cac8bce062ebf1a85309d22f60620277988", "time" : 1365172771, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fix to flag translation.\n\nNow ensures that only termFlags/typeFlags are produced.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 5 16:39:31 2013 +0200]"},
{"name" : "459a734cb51e204d114c0b7c695ad71d618bc696", "time" : 1365172715, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added new classSymbol method for Types.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 5 16:38:35 2013 +0200]"},
{"name" : "bb7507f31b892662cb502550ca38bc93011697a9", "time" : 1365172612, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Ensures ScalaValueClasses are properly initialized.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 5 16:36:52 2013 +0200]"},
{"name" : "f8d5c8401ab7e4a31c9f4430ad64e27d8cb08bac", "time" : 1365156945, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Refactored test framework\n\nMoves worksheets to test. Factored out class DottyTest and made it usable from worksheets. Added worksheet test for signatures.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 5 12:15:45 2013 +0200]"},
{"name" : "2dcae86ae6937ad2f8cd8b05734eb9feb964404e", "time" : 1365156839, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added some tracing to asSeenFrom.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 5 12:13:59 2013 +0200]"},
{"name" : "3aa3ff97f7a32dc985fa3adef0a5b9df0785b427", "time" : 1365156814, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixed hashcode computation.\n\nEmbarrassiing: Used == instead of = before.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 5 12:13:34 2013 +0200]"},
{"name" : "51ae136d9f49d1c35db8fcdfd72d9ec14fa622f2", "time" : 1365156778, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Adding debug code to disambiguation.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 5 12:12:58 2013 +0200]"},
{"name" : "3dcfcb024358627165a50ac306d7e0cbb5f97842", "time" : 1365156758, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Small change to disjointAsSeenFrom.\n\nNot sure this matters, but seems to be prudent not ot force signature here.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 5 12:12:38 2013 +0200]"},
{"name" : "4e1fd1a776f71086371f7efa0e95bcef26098bad", "time" : 1365156688, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fix to pareamSignatire for arrays.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 5 12:11:28 2013 +0200]"},
{"name" : "485444245bfaf64684067e1e8a2e14787d52b974", "time" : 1365156035, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fix to superId.\n\nBig blooper: superId was always -1.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 5 12:00:35 2013 +0200]"},
{"name" : "3ec42535daed5e876bd8d55276f1edf25e5bd41a", "time" : 1365155978, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixes to baseType; now respects linearization order.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Apr 5 11:59:38 2013 +0200]"},
{"name" : "3dfdb907759b6344b6c0544b5378847ebe252a71", "time" : 1365081518, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Consolidated tracing under -YdebugTrace.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Apr 4 15:18:38 2013 +0200]"},
{"name" : "e8b9ef29f6e0a0ba4f0e51943c80ba2974b0e27e", "time" : 1365079517, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fxing cyclic references during findMember\n\n1) Classes and alias type now take precedence over abstract types.\n2) When computing members, parents are visited right to left, which corresponds to existing taking precedence\n    over new in mergeDenot.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Apr 4 14:45:17 2013 +0200]"},
{"name" : "9cd15421432871b920d377af86e1cd1b3edb270e", "time" : 1365062235, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Trying to get at the root of cyclic reference problems.\n\nPart 1: Enabling tracing and avoiding subtype computations in margeDenot.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Apr 4 09:57:15 2013 +0200]"},
{"name" : "609aeee025eec0bfc6680bf7fe717d0083cfb15b", "time" : 1365008562, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Improvements in tracing and some Type fixes.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Apr 3 19:02:42 2013 +0200]"},
{"name" : "df79c5efc7190e7a61ce7ac526aca0aac520ea9f", "time" : 1364312647, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Getting rid of forceProperType in Unpicklers\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Mar 26 16:44:07 2013 +0100]"},
{"name" : "ebc23ad054787d87b18b713f26847ee1443d6890", "time" : 1364311253, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Some more fixes of classfile reading.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Mar 26 16:20:53 2013 +0100]"},
{"name" : "5a039031c165fd9116749f28e9d9e6a0b6d5b0e6", "time" : 1364244320, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "More fixes to classfile reading.\n\nCan now read entire contents of scala distribution.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Mar 25 21:45:20 2013 +0100]"},
{"name" : "27a508c50482f4053591ed740f09ecced5bf749b", "time" : 1364210314, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "More fixes for classfile reading.\n\nIn particular: Survive malformed type errors. Make trees cloneable. and others more.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Mar 25 12:18:34 2013 +0100]"},
{"name" : "4a17f0d1e17adecbdc4755bf719feff18d115318", "time" : 1364133747, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "More fixes to classfile loading.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Mar 24 15:02:27 2013 +0100]"},
{"name" : "b791ef8e586d86af68f1212c9abecc22bb2d4de1", "time" : 1364081190, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixes fingerprint problems.\n\nAlso reducing debug output. Can now read and display all classes and objects in scala.collection.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Mar 24 00:26:30 2013 +0100]"},
{"name" : "8ea3a4627c7dc66f65705ec9822c01a2225eacae", "time" : 1364053510, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Attempt to fix fingerprint problem (disabled for now)\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Mar 23 16:45:10 2013 +0100]"},
{"name" : "6c6f77682f95496feef72cc0ecd3ba00ccbdfa49", "time" : 1364053077, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Some more fixes for classfile loading\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Mar 23 16:37:57 2013 +0100]"},
{"name" : "f73792d9c6a41c692cc689c52e481e15120bccc4", "time" : 1364036552, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "More fixes to classfile reading.\n\nMost important one: Getting equality of NamedTypes right.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Mar 23 12:02:32 2013 +0100]"},
{"name" : "b440606b0f0d1772d8a1c3bc1c36b3aa3cb576b5", "time" : 1363971796, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "More fixes for classfile reading.\n\nIncluding a refactoring of symbol loaders and unpickler traits.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Mar 22 18:03:16 2013 +0100]"},
{"name" : "5b4f154c9e4c2c6ff48ac68b8d984e306853328f", "time" : 1363897830, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "More fixes to classfile reading.\n\nCan now read all classes in scala.collection.generic. Some failures remain for their companion objects.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Mar 21 21:30:30 2013 +0100]"},
{"name" : "5ac2104e688409e24785cfe62cdc7e8ef0bc6428", "time" : 1363797572, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Pretty-printing improvements.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Mar 20 17:39:32 2013 +0100]"},
{"name" : "53e0a8a9227820e47e33f1e0b1d91819aec917c4", "time" : 1363762888, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "First draft of pretty printing abstractions\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Mar 20 08:01:28 2013 +0100]"},
{"name" : "2fdf86e4f9a355eeb2ae7f539824270edd76764a", "time" : 1363702859, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixing problem with reading typeParams correctly in Unpickler\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Mar 19 15:20:59 2013 +0100]"},
{"name" : "b2f779aad92de0d116cdaf1aba87197695233ebb", "time" : 1363702797, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Adding missing methods for type equality\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Mar 19 15:19:57 2013 +0100]"},
{"name" : "5555d0f41e6a1f215beefbc13a8bdf8d1ecc7769", "time" : 1363702546, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Some improvements to printing\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Mar 19 15:15:46 2013 +0100]"},
{"name" : "712ac68f8630edf083447ac0a164023ea8b1a8c0", "time" : 1363688525, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Excluding empty trees from type mapping tree transforms\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Mar 19 11:22:05 2013 +0100]"},
{"name" : "eb2b6bf420b24ac0307e17fc9fec38e91012d1af", "time" : 1363640726, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "More changes for higher-kinded types emulation.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Mar 18 22:05:26 2013 +0100]"},
{"name" : "830e511b6b620716d3f550a199d0a5c52c95423a", "time" : 1363604752, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Cleanup of higher-kinded types treatment\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Mar 18 12:05:52 2013 +0100]"},
{"name" : "52d740d120cd197ee816aa0a06732ccdb5d5ab29", "time" : 1363547536, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added emulation of higher-kinded types.\n\nAlso improvements to toString.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Mar 17 20:12:16 2013 +0100]"},
{"name" : "1d029f5f8f90a909ed140f7ef5cf656fafd9fc27", "time" : 1363369700, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Various fixes to make classfile loading work.\n\nCan now read and display info of verious classfiles as listed in the showClass test. Great end of the week!\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Mar 15 18:48:20 2013 +0100]"},
{"name" : "0d2fd0fd49fb1b6d4ab344ae32da493b36c99ba7", "time" : 1363279143, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Defining standard dotty classes used in Definitions.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Mar 14 17:39:03 2013 +0100]"},
{"name" : "016a60cda879f9c326d3f732fe33ec070f998999", "time" : 1363276569, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Improvements to stub handling.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Mar 14 16:56:09 2013 +0100]"},
{"name" : "d2767983aa4aeb9caccfd56273a1ac93e576bb4a", "time" : 1363251210, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Various fixes that make loadDef largely work.\n\nOnly problem is that there are stubs for AnyRef generated.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Mar 14 09:53:30 2013 +0100]"},
{"name" : "3c7a8eada3630989b07bd3022797fd42a3b8cfcc", "time" : 1363180304, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Various fixes to get past Definitions#init.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Mar 13 14:11:44 2013 +0100]"},
{"name" : "d1794c15f5a5743763adeb8f8e248f9ca5f53869", "time" : 1363085912, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Revising of Denotation#exists\n\nexists now is only false for NoDenotation. A denotation with NoType as info counts as existing, but it is not accessible from any prefix.\n\nAlso, renamed binary exists, forall or existsPart, forallParts to avoid ambiguities.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Mar 12 11:58:32 2013 +0100]"},
{"name" : "54400119585ca41c28baae1cbfbeefb76b5c912a", "time" : 1363081880, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Checking abstractness of types by their flags.\n\nPreviously we looked at the info, but this forces too much. As a consequence we now systematically prefer concrete over abstract when computing & denotations. This could have the strange(?) effect that the symbol of a joint denotation is a class, yet its info is a TypeBounds value.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Mar 12 10:51:20 2013 +0100]"},
{"name" : "bf8e854c9f2dc2b03be5a44c84183af21510e6ef", "time" : 1363075497, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Split filterAsSeenFrom and generalized flag handling.\n\n1. filterAsSeenFrom has been split again into its constituents \"filterExcluded\" and \"asSeenFrom\", and care was taken not to force the info unless we have to. The accessible check is no longer done when collecting members, because it would have forced the symbol through requesting privateWithin.\n\n2. SymDenotation#is is tweaked to no longer force the denotation if the flags are in \"FromStartFlags\", i.e. set upon symbol creation. We can then eliminate special cases isModuleXXX, isPackageXXX.\n\n3. Other tweaks mostly having to do with weakening sym.exists checks to avoid CyclicReference errros.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Mar 12 09:04:57 2013 +0100]"},
{"name" : "f02b4183a9a3d8fb7147e1aa1c74a5f102739d97", "time" : 1363025716, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixed too hasty commit that caused build errors.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Mar 11 19:15:16 2013 +0100]"},
{"name" : "66f45ed0c1708f976346e008e1d685013c6664af", "time" : 1363025311, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "First steps to make compiler start work.\n\nStill fighting with CyclicReference errors.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Mar 11 19:08:31 2013 +0100]"},
{"name" : "995946ac9a406b018a8d62291e1f69466b962086", "time" : 1362755972, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Made SymDenotations printable.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Mar 8 16:19:32 2013 +0100]"},
{"name" : "549bc867081204e872573f0e69db5adc57ecd735", "time" : 1362755942, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added asInstanceOf args as they are inferred to be Nothing otherwise.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Mar 8 16:19:02 2013 +0100]"},
{"name" : "00578454211f8cb779018347b5964c08b292e170", "time" : 1362755913, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "A fix in settings caused by a probably Scala 2.10 bug\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Mar 8 16:18:33 2013 +0100]"},
{"name" : "0ffc6d29fe325597ab8d9cfc8708b30d5f085685", "time" : 1362755887, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "NoPhase needs to be lazy or we get a cyclic reference on startup\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Mar 8 16:18:07 2013 +0100]"},
{"name" : "c32e8062fdc6bd50c62ba100c02c8d3e21710447", "time" : 1362755757, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Some fixes in ClassfileParser\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Mar 8 16:15:57 2013 +0100]"},
{"name" : "3c23e78324e0f555a62c66f9711b245d16dc8f26", "time" : 1362755732, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Some cleanup in trees.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Mar 8 16:15:32 2013 +0100]"},
{"name" : "fbd07174011f6987aecdf7efd584d6b9fbeed39f", "time" : 1362679206, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Polishing of SymbolLoaders\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Mar 7 19:00:06 2013 +0100]"},
{"name" : "9175fecf86cd798a8f3f23cb95d0028c12d04936", "time" : 1362674707, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Some polishing of Positions and Trees.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Mar 7 17:45:07 2013 +0100]"},
{"name" : "0a6bddc34dbfc9a667c7d63c1dc4de6ae04d7343", "time" : 1362650278, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Some refinements for prining\n\nMade trees printable in plain mode (refined mode still missing).\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Mar 7 10:57:58 2013 +0100]"},
{"name" : "519942ae5bf4bc6b1ba8f6e4a52447ddb974dad1", "time" : 1362608166, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Polishing of scopes.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Mar 6 23:16:06 2013 +0100]"},
{"name" : "22fc38c4e062d299dc28fc429efdba4521db3651", "time" : 1362606135, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Finished polishing of Types and TypeOps.\n\nManjor change is that splitArgs got eliminated and replaced by an optimized version of typeArgs.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Mar 6 22:42:15 2013 +0100]"},
{"name" : "757bf2ecc0a5dc083f21f1dc6c9d22c3795f3790", "time" : 1362566919, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Streamlined implementation of asSeenFrom\n\nThe new implementation keeps symbolic references where possible\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Mar 6 11:48:39 2013 +0100]"},
{"name" : "1e70081069055630821bb6ca6c1e307e1ab074b4", "time" : 1362517190, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "More polishing of types.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Mar 5 21:59:50 2013 +0100]"},
{"name" : "3efd95c6b2f9a0347edcdc14535ff6ed6dae054c", "time" : 1362486410, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Review of TypeComparers\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Mar 5 13:26:50 2013 +0100]"},
{"name" : "c6daa22c03b6957cbea1eaae2d935e9a418d705e", "time" : 1362480985, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Collapsed some methods in PreDenotations…\n\n… that were always called together. Also, some general polishing for Types.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Mar 5 11:56:25 2013 +0100]"},
{"name" : "7bcffbd8bb29a8bfd98f3838afa041927abdae15", "time" : 1362417366, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Rewrite of isVolatile\n\nAlso, now all calls to NamedType#underlying are montored for infinite cycles.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Mar 4 18:16:06 2013 +0100]"},
{"name" : "d90e9fcf0991043a22422cae59dc507f25c77798", "time" : 1362416388, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Dropped context from altsWith/suchThat/hasAlt\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Mar 4 17:59:48 2013 +0100]"},
{"name" : "5af6ff8286614998e58f0bc5ef2fe4135d993209", "time" : 1362394426, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Renamed RefinedType#name, #info…\n\n… to refinedName, refinedInfo. Also some other polishings in Types.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Mar 4 11:53:46 2013 +0100]"},
{"name" : "a462570e3a7c5188ae5e6e4e76a16522bee10f1c", "time" : 1362389635, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added logic that retains symbol denotations from one run to the next if it is safe to do so.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Mar 4 10:33:55 2013 +0100]"},
{"name" : "c7a58aaa0a8c459f99daa23590cd343402559c42", "time" : 1362389601, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Polishing of Symbols.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Mar 4 10:33:21 2013 +0100]"},
{"name" : "f2cd8ba0f899c6da94a3dae8efc6cafa75f4aa0b", "time" : 1362336587, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Finished polishing of SymDenotations\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Mar 3 19:49:47 2013 +0100]"},
{"name" : "d61f29494d095465112d91622806e16741a5d4c4", "time" : 1362323460, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Merge remote-tracking branch 'origin/master'\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Mar 3 16:11:00 2013 +0100]"},
{"name" : "a1049e6227d412ce6bdd9065a350cb20921987e2", "time" : 1362323421, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Split scopes into immutable and mutable parts.\n\nThe goal is that symbols should be entered/deleted directly into classes instead of their scopes. This is necesaary so that invariant about fingerPrint can be maintained. We achieve it by making the info scope have immutable type, so an explicit cast is needed to get around that.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Mar 3 16:10:21 2013 +0100]"},
{"name" : "30bfa5b1be62652fc07292d36ed1261edbcdb362", "time" : 1362319998, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "New LRU Cache implementation\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Mar 3 15:13:18 2013 +0100]"},
{"name" : "775e82ce73fd4450603cacec98fb47c5fc3ef1ef", "time" : 1362318784, "y" : 4495, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "New LRU Cache implementation\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Mar 3 14:53:04 2013 +0100]"},
{"name" : "24f5a1ef4b8a49b6a2a8c684c1c98bc6a5293813", "time" : 1362219434, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Polishing of denotations\n\n1. Dropped owner from denot#asSeenFrom. Code inspection shows that one needs to take the owner of the symbol in each alternative instead.\n\n2. Changed fullName so that terms in the ownerchain leave a trace. Needed for disambiguating private symbols with expanded names. See worksheet nesting.sc for an example.\n\n3. Changed fingerPrint so that only classes with children have their fingerPrints computed. Reason: When we lookup a member of a class initially, it's likely that the member is present, so a bloom filter will not buy us much and will take up memory. For parent classes it's different. We might have found the member already in the child, or in a different parent, so it's more likely that the fingerPrint is effective.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Mar 2 11:17:14 2013 +0100]"},
{"name" : "49e6eb07bf55cf9eabb260e7b7a8fef45923e8df", "time" : 1362130892, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Bug fixes and cleanups for names.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Mar 1 10:41:32 2013 +0100]"},
{"name" : "75507c832cf281b18e3dff0cefdee315d777bec9", "time" : 1362074700, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixes Name#slice.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Feb 28 19:05:00 2013 +0100]"},
{"name" : "9c77f0ec16c8e1f6555590a531783e193d3dc7ea", "time" : 1362074687, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Polishing of Denotations and Transformers.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Feb 28 19:04:47 2013 +0100]"},
{"name" : "fe8ee1143f7aabc57212506b3bdd10d7abb63d67", "time" : 1362060225, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "more docs.\n\nPlus renamed NullSignature -> NotAMethod\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Feb 28 15:03:45 2013 +0100]"},
{"name" : "e2d8e2acf76472a2c9b60048be8260e1d73435ac", "time" : 1362060195, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Some worksheets to start testing\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Feb 28 15:03:15 2013 +0100]"},
{"name" : "b1adda5e885880d95dd675a127349c4bc8376bb9", "time" : 1362060148, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "fixes to flags\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Feb 28 15:02:28 2013 +0100]"},
{"name" : "14eff0537cb6af8047a50cc4e85149340661f8d8", "time" : 1362060126, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixes to names\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Feb 28 15:02:06 2013 +0100]"},
{"name" : "c9bfedda02c248fd08768fb8616d0fa87d299328", "time" : 1361985768, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Cleanup of flags\n\nPlus some more doc comments.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Feb 27 18:22:48 2013 +0100]"},
{"name" : "7fa17452e8241a80f1fc9b1a480b3f2db88db23b", "time" : 1361979158, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Cleanup of decorators\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Feb 27 16:32:38 2013 +0100]"},
{"name" : "62d0df5a8ef140a721e3e14d9dae34545ef9016d", "time" : 1361978846, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Cleaup of Contexts\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Feb 27 16:27:26 2013 +0100]"},
{"name" : "b1f0eaa41cdf0a6bbc37078f6580b04f85ad5079", "time" : 1361974601, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Renamed DenotationSet -> PreDenotation\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Feb 27 15:16:41 2013 +0100]"},
{"name" : "89e3da3cba740bc8eb64c9145c449e376481b377", "time" : 1361965522, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixed ModuleDefs so that they produce code that keeps invariants of tree maps.\n\nWe need to make sure that every symbol that needs to be changed in a treemap is visible in the tree. For that reason,\nModuleDefs now generate ClassDefs that are integrated in the regular tree, next to the ValDef the represents the module.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Feb 27 12:45:22 2013 +0100]"},
{"name" : "5b786065301ecab3fd1b38ac9089b5d58acc9082", "time" : 1361961723, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Refinements to signature handling.\n\nDecoupled paramSignature from erasure in the interest of efficiency.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Feb 27 11:42:03 2013 +0100]"},
{"name" : "2c8d6d37f254cfbaed8f5a87308fc25c2816d73d", "time" : 1361953025, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Rename Shared -> SharedTree\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Feb 27 09:17:05 2013 +0100]"},
{"name" : "856f084c474125117ed2166720ba4192d358fbef", "time" : 1361952873, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Filling in all ???s\n\nAdded reporters.\nAdded context for signatures.\nImplemented method signatures via erasure.\nRefined derivedNameType handling.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Feb 27 09:14:33 2013 +0100]"},
{"name" : "d29cc7978daa49f68d14eba35af20fbb8dd423c1", "time" : 1361795021, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fleshing out some ???'s\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Feb 25 13:23:41 2013 +0100]"},
{"name" : "94e2c9413def4c6545cfe38ed7b8a5b44bdd6456", "time" : 1361792977, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Completed implementation of Flags\n\nIncluding translation from Scala 2.x flags.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Feb 25 12:49:37 2013 +0100]"},
{"name" : "6e37f2e4e153109125493c6c82c0ea0eb9800422", "time" : 1361780404, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Systeamtic use of symbolicRef abbreviation.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Feb 25 09:20:04 2013 +0100]"},
{"name" : "36b9128d2214a927d642e87da3322b4ed4e76c58", "time" : 1361727737, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Refactoring and cleanup of several symbol creation related aspects.\n\n1. Went back to old completer model where completers are types.\n2. Made class denotations a simple optimzation of symbol denotatons (with more caches)\n    by moving all class-specific attributes into ClassInfo.\n3.  Now all symbol and symbol denotation creations are routed through one of 3 methods: newNakedSymbol, newNakedClassSymbol, newSymDenotation.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Feb 24 18:42:17 2013 +0100]"},
{"name" : "7cde8b6d78022aadb00d3f82fb9019da39a62b49", "time" : 1361622965, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Moving associatedFile from SymDenotation to Symbol\n\nMotivation: This is something that stays invariant over all periods. but _can_ change between compilation runs. Therefore it matches the lifetime of a Symbol.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Feb 23 13:36:05 2013 +0100]"},
{"name" : "d54fee4fcc75d5e9b58353da9daea0aa1b760aeb", "time" : 1361556375, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "UnPickler now also reads trees.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 22 19:06:15 2013 +0100]"},
{"name" : "184dcbfdb37f20a43ebe68787f6fbeab1ac4cb56", "time" : 1361556012, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added methods to substitute trees and change their owners.\n\nRequired also some better integration with TypeMaps.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 22 19:00:12 2013 +0100]"},
{"name" : "a0bbaa8f42b16274071b30a8f1d6ad23a4ee9584", "time" : 1361552738, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Changed meaning of DefTree/isDef, plus other Tree changes\n\nisDef now means: Defines a new symbol. Consequently, templates are DefTrees (because they define LocalDummy), but package clauses are not.\n\nDefTrees are now pickier about the names they accept.\n\nNew generic instances of TreeAccumulator: ShallowFolder and DeepFolder.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 22 18:05:38 2013 +0100]"},
{"name" : "49931062dfa6785bc9a7af6350812e5a7dbc546d", "time" : 1361552407, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added substSym method and dropped NoPrefix requirement.\n\nSubstituters now work on arbitrary NamedTypes, even if the prefix is different from NoPrefix.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 22 18:00:07 2013 +0100]"},
{"name" : "77c862ed65cf6f6d0593e11e91959c4d08a9187b", "time" : 1361525207, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added previously forgotten typed Try trees, modified params of typed Super trees.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 22 10:26:47 2013 +0100]"},
{"name" : "008d440d5ff36dc62e1c6a366752cfc49e87461e", "time" : 1361479481, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Misc fixes to typed trees, flags, and elsewhere.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Feb 21 21:44:41 2013 +0100]"},
{"name" : "40dbdbc148d4244ba58a9de81dc36eae0a7f853f", "time" : 1361461623, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Some cleanups in Flags\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Feb 21 16:47:03 2013 +0100]"},
{"name" : "9fab0e3edef2a100970c007f14148d68e9ae0889", "time" : 1361452808, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Changed function expansion and fleshed out checkType\n\nFunction expansion got changed so that it requires an explicit target type and that target type can be an arbitrary SAM type.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Feb 21 14:20:08 2013 +0100]"},
{"name" : "58b7b61fb8ffda09dbec4427476a47b4e3a505bc", "time" : 1361452119, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "More utility methods and split up filter\n\nMore utility methods in types. Also replaced Denotation#filter with a set of more useful operations.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Feb 21 14:08:39 2013 +0100]"},
{"name" : "3c2d0d752dcb690bd37622cf8593bc359d6b35aa", "time" : 1361452053, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Generalized ArrayValue -> SeqLiteral\n\nAlso introduced new category of pattern trees.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Feb 21 14:07:33 2013 +0100]"},
{"name" : "0b76d46d5ef9d51eefe0aa445be33d776cc1f258", "time" : 1361451969, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Some more Definitions entries\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Feb 21 14:06:09 2013 +0100]"},
{"name" : "ad3b5b7db0180611e8cbf3ed64ccbac4c6c36d65", "time" : 1361451886, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Shortcircuited all <:< and =:= calls in TypeComparers\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Feb 21 14:04:46 2013 +0100]"},
{"name" : "24bd6dcd943f27667970487afc3dbe965172177b", "time" : 1361370487, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Refined tree typing and started on checks\n\nFunction nodes are now no longre typed trees; they are represented instead as blocks: { def $anonfun(…) = …; $anonfun }.\n\nRefined block typing to autiomatically widen some types when they occur as result type of a block.\n\nStarted writing check code that enforces Scala's typesystem rules oin typed trees.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Feb 20 15:28:07 2013 +0100]"},
{"name" : "d5e54a59754959e8067687c2b0483a0d3d1204e6", "time" : 1361370239, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "New utility operations. Made typeSymbol/termSymbol apply to TypeProxies.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Feb 20 15:23:59 2013 +0100]"},
{"name" : "11fbe8b66618b153653678cf4c0b752e792bfaa1", "time" : 1361348166, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Moved TypeTrees defs into nested object tpd.\n\nReason: We need normal trees to do efficient pattern matching. So if we want to both pattern match and create trees we need to import Trees._ and TypedTrees.tpd. Then typed tree construction needs to be prefixed with tpd, e.g. tpd.Select(pre, name).\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Feb 20 09:16:06 2013 +0100]"},
{"name" : "e26c52f6a5cdb6e260bfb9f96594367a71e08d13", "time" : 1361348018, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Completed pluggability hooks for trees.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Feb 20 09:13:38 2013 +0100]"},
{"name" : "2c864fae1dd861392368de5be8488ea6842de72e", "time" : 1361287456, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Merge branch 'simplified-completers'\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Feb 19 16:24:16 2013 +0100]"},
{"name" : "51f7cf3cc33fc357881c0e413eb55b9253e2c22d", "time" : 1361287424, "y" : 4534, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Feasibility study for transformer plugins\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Feb 19 16:23:44 2013 +0100]"},
{"name" : "b72ee12e9eeffe32ffd752c5aaf9ef1713d77286", "time" : 1361287324, "y" : 4534, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Making TypedTrees a full alternative to Trees\n\nTypedTrees now has the full functionality of Trees. The idea is that a client should inherit from either Trees or TypedTrees, and the rest follows automatically.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Feb 19 16:22:04 2013 +0100]"},
{"name" : "c1ece3bd0bd67e69c13f5529b02061aaa8330b9a", "time" : 1361283737, "y" : 4534, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "File rename\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Feb 19 15:22:17 2013 +0100]"},
{"name" : "43315fe30ef8f9e8e4e5ea0ac838bd2c14923a89", "time" : 1361268725, "y" : 4534, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Refined treecopier, added transformer and accumulator classes\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Feb 19 11:12:05 2013 +0100]"},
{"name" : "4db066f10775252a0c89196f9b08ac22f1947796", "time" : 1361210682, "y" : 4534, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added TreeCopier class\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Feb 18 19:04:42 2013 +0100]"},
{"name" : "f1b00af85d2256f4a2fc549992cb6015dfa83f08", "time" : 1361204213, "y" : 4534, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Some additions to TypedTreeGen\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Feb 18 17:16:53 2013 +0100]"},
{"name" : "c0ed9aec10ba8ea3e3c0ecc22f2e9f92e550ad10", "time" : 1361203633, "y" : 4534, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Addec convenience methods for symbol creation.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Feb 18 17:07:13 2013 +0100]"},
{"name" : "3a779e24f4b93addc07170778294dcf6225ac505", "time" : 1361200088, "y" : 4534, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Changes to completers.\n\nDropped concept of pre-complete loading. Made completers functions.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Feb 18 16:08:08 2013 +0100]"},
{"name" : "5c9433161e116704730693254fdaf161c69cbcb5", "time" : 1361197778, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Improved position handling.\n\n1. All positions are range position.\n2. Improved position API\n3. renamed Offset to Coord, and made sure indices cannot be confused with positions.\n4. Trees now automatically get positions that enclose their subtree's positions.\n5. typed DefTrees contain positions that also enclose their symbol's position.\n\nTo make this work well, a symbol's coord should point to the introducing keyword (e.g. def, val, class).\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Feb 18 15:29:38 2013 +0100]"},
{"name" : "2b4a19e80a643dfdf8eea5fa40811f76edb27be3", "time" : 1361176871, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fleshed out TypeTreeGen.\n\nAll base cases now supported. Still missing: Intelligent treatment of positions.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Feb 18 09:41:11 2013 +0100]"},
{"name" : "6bd453e8f3b50e7c48b6969bd4aaf6638b0455f8", "time" : 1361020985, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fleshed out tree handling\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Feb 16 14:23:05 2013 +0100]"},
{"name" : "cf425f04b9342d15f25380e2227c6b142bd26f16", "time" : 1360946855, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added -d setting. Deleted sourcefile attribute handling in classfile parser because it is used nowhere.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 15 17:47:35 2013 +0100]"},
{"name" : "927b26d9bcf2eb0d9efc8f3a2a657d6615fe13eb", "time" : 1360943644, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Optimization: don't generate member symbols for private members in a Java classfile.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 15 16:54:04 2013 +0100]"},
{"name" : "2771341790093d5f30b9cccea98d191dd39fcb1c", "time" : 1360943414, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Creating an empty constructor if none has been read in the classfile.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 15 16:50:14 2013 +0100]"},
{"name" : "bb6536180239acc0801839d718a673750b66cef2", "time" : 1360942920, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Moved ConstantPool to end of class ClassfileParser\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 15 16:42:00 2013 +0100]"},
{"name" : "ddb301187b471f002716e5c0ced98f3d4fae1781", "time" : 1360942740, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Consolidating error handling in unpickler and classfileparser.\n\nMissingRequirement eliminated; it got replaced by new StubSymbol handling.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 15 16:39:00 2013 +0100]"},
{"name" : "5e219c1d8426da4fba6c4604e24f4bceb3573392", "time" : 1360940856, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Almost completed code for unpickling and classfile loading.\n\nStill remains: Unpicklign trees, dealing with sourcefile attributes.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 15 16:07:36 2013 +0100]"},
{"name" : "11c5251de18aab187646e3f58612b457349ebe6a", "time" : 1360940806, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "New definitions and flags\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 15 16:06:46 2013 +0100]"},
{"name" : "8928c64386fcc00d75ff6e07cfae9534d8e34632", "time" : 1360940770, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Adding method to create denotations to Contexts.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 15 16:06:10 2013 +0100]"},
{"name" : "bea808388b3d307dbad095458978bcc3e3588882", "time" : 1360940702, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Add method to show a scope.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 15 16:05:02 2013 +0100]"},
{"name" : "75fbef7e1c6ecf2d79dd36a62863875fc89127f2", "time" : 1360940676, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "PreNames as a way to unify Names and Strings.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 15 16:04:36 2013 +0100]"},
{"name" : "2cb396197f65842499e6dd759c87dbaecb658a48", "time" : 1360940619, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "A method to show denotations\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 15 16:03:39 2013 +0100]"},
{"name" : "a66bd51b7e0994fa43a34e9bff5c136fa47e12b2", "time" : 1360940443, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Add offset to Symbols.\n\nAlso refines StubCompleters.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 15 16:00:43 2013 +0100]"},
{"name" : "d60f1fd169898cc5363867dc9078f543118914d2", "time" : 1360940290, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Some new utility methods in Types.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 15 15:58:10 2013 +0100]"},
{"name" : "626f3ef1c2b1c874bab88ff8b43f7fa7a42e9e4b", "time" : 1360939867, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "More annotation constructors.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 15 15:51:07 2013 +0100]"},
{"name" : "48076bb9c287d82a1259885dccfa424df16fe912", "time" : 1360590804, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Treating all annotations as wrappers over trees.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Feb 11 14:53:24 2013 +0100]"},
{"name" : "952d4a29c3e55d44defa70ab15f0137a51320de2", "time" : 1360590279, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Avoiding an unchecked warning in a switch.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Feb 11 14:44:39 2013 +0100]"},
{"name" : "d0d9af16165a62a438d77c81f8a22488a87b87cd", "time" : 1360590250, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "A new way to make typed trees.\n\nIdea: Make typed trees in the most straightforward way from constituents. Don't insert conversions or overloading or anything. The aim is to have a way to create typed trees without setting types explicitly, and also without involving the typer.\n\nAlso, added some more tree classes which will be needed for annotations.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Feb 11 14:44:10 2013 +0100]"},
{"name" : "3ee31f952f57ba8373fa74ee6b8c41ddea238a67", "time" : 1360590073, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Small stylistic change: use object name instead of self type.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Feb 11 14:41:13 2013 +0100]"},
{"name" : "5f0a0d5a32b72232536c5acfb375ddb85efd54d2", "time" : 1360589793, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Merge remote-tracking branch 'origin/master'\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Feb 11 14:36:33 2013 +0100]"},
{"name" : "dfcaddb86cfe0b4a9396b2e37bd3e1ac7e4d3239", "time" : 1360589774, "y" : 4564, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Merge pull request #2 from retronym/topic/odds-and-ends\n\nTopic/odds and ends", "author" : "PersonIdent[odersky, odersky@gmail.com, Mon Feb 11 05:36:14 2013 -0800]"},
{"name" : "159bf9dccf1bc5c835d9af2b067b457187de7169", "time" : 1360505544, "y" : 4565, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fix apparent cut-n-pasto in Type#mapOr\n", "author" : "PersonIdent[Jason Zaugg, jzaugg@gmail.com, Sun Feb 10 15:12:24 2013 +0100]"},
{"name" : "e098f4cd0fe2dbe943ef35655f22d4d57cf233a8", "time" : 1360505431, "y" : 4565, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Break initialization cycle in Transformers.\n", "author" : "PersonIdent[Jason Zaugg, jzaugg@gmail.com, Sun Feb 10 15:10:31 2013 +0100]"},
{"name" : "0ead5e864c158800d4dd7b26d469d44ae1d272b1", "time" : 1360505431, "y" : 4565, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Make NoContext#base a def.\n\nAs it throws an unsupported error.\n", "author" : "PersonIdent[Jason Zaugg, jzaugg@gmail.com, Sun Feb 10 15:10:31 2013 +0100]"},
{"name" : "923da638435d3a660db076f23df0eeb64f75d186", "time" : 1360505431, "y" : 4565, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fix Settings#value.\n\nIt was returning the entire settings buffer, rather than a single entry.\n", "author" : "PersonIdent[Jason Zaugg, jzaugg@gmail.com, Sun Feb 10 15:10:31 2013 +0100]"},
{"name" : "4eb61cd80ff04ac24b2826193eb0b535de864cd3", "time" : 1360505431, "y" : 4565, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Add .gitattributes for CRLF avoidance\n", "author" : "PersonIdent[Jason Zaugg, jzaugg@gmail.com, Sun Feb 10 15:10:31 2013 +0100]"},
{"name" : "0280306d7fb9e78a57f5e1c4848bfbbbba3847d9", "time" : 1360505431, "y" : 4565, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Add SBT build, .gitignore.\n", "author" : "PersonIdent[Jason Zaugg, jzaugg@gmail.com, Sun Feb 10 15:10:31 2013 +0100]"},
{"name" : "3debc923154bb5beec8d08b88e8f96ae18ee3734", "time" : 1360400603, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Integration of Constants\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Feb 9 10:03:23 2013 +0100]"},
{"name" : "25e09861e097b8db659ba1fc2d103e540db86a22", "time" : 1360360150, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fleshed out printers.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 8 22:49:10 2013 +0100]"},
{"name" : "fec107cc37e4b932346de892f7a3b35f171da8f9", "time" : 1360360113, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "New stuff in Definitions.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 8 22:48:33 2013 +0100]"},
{"name" : "e8366c0fe9b5c04ba471d9f3f572d9ea0c684fbb", "time" : 1360360085, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added new utility methods to SymDenotations and refactored creation.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 8 22:48:05 2013 +0100]"},
{"name" : "dc137d37524e560e89a10e2ebd2e78c818e2205e", "time" : 1360359930, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added methods to convert between (virtual) type application and refinements.\n\nRefactored parent normalization from Unpickler to TypeOps.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 8 22:45:30 2013 +0100]"},
{"name" : "00cd39af75830fe1acab0f4b3b19646375ac2ea8", "time" : 1360241586, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Make superId management depend on TypeRefs instead of ClassSymbols.\n\nReason: Symbols may change on each run; TypeRefs do not.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Feb 7 13:53:06 2013 +0100]"},
{"name" : "5ec4e3db6e48f8c36dff67ba262a8b41647cef5c", "time" : 1360241529, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Make typeConstructors of package classes symbolic.\n\nReason (1): The previous scheme would have failed for RootClass.\n(2) Symbols of package classes do not change between compilation runs, so the new scheme is more efficient.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Feb 7 13:52:09 2013 +0100]"},
{"name" : "11a3d0d2792689d4992bef6dd0887dd5e8a08cb5", "time" : 1360240677, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Replacing Symbol forwarders by two implicits from Symbol to SymDenotation/ClassDenotation. Rearrangement of SymDenotation methods\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Feb 7 13:37:57 2013 +0100]"},
{"name" : "b9fa2c9f9f4d23ab7c9935a37496f4ac2bdc5fe9", "time" : 1360187945, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Getting rid of separate classes for TermSymbols and TypeSymbols\n\nDistinction is instead carried by type field ThisName.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Feb 6 22:59:05 2013 +0100]"},
{"name" : "d7e283216a4d6a53aa3f0c837f3412165e5bcba6", "time" : 1360186655, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Disentangled denotation types from their symbols, based on info instead.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Feb 6 22:37:35 2013 +0100]"},
{"name" : "401fae7d1ccd6bcd523dccd28f2e29090eaec1ef", "time" : 1360183021, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Some progress in printing things.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Feb 6 21:37:01 2013 +0100]"},
{"name" : "831abc1fd1bbebfdfdec1a5693cbfc0bac613c62", "time" : 1360182956, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixed Type hierarchy diagram\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Feb 6 21:35:56 2013 +0100]"},
{"name" : "5c773fb117b424a11d6e9e3a30033887b80557f6", "time" : 1360167859, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Some additions to symbols, in particular copiers.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Feb 6 17:24:19 2013 +0100]"},
{"name" : "f8e3a9bf3a5f2550a20d59c8d025f2c7247ed1fd", "time" : 1360161594, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Integration of unpicklers\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Feb 6 15:39:54 2013 +0100]"},
{"name" : "6aee0dcb43feb12984d65d198210b90f7704c3a4", "time" : 1360161581, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Various additions and improvements, in preparation for addition of unpicklers.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Feb 6 15:39:41 2013 +0100]"},
{"name" : "4608c427eb27315b9cc073677e7280ba3384f564", "time" : 1359902536, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Introduces caching for condensed contexts\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Feb 3 15:42:16 2013 +0100]"},
{"name" : "7209deef4f254dc1a2e8d7a0429771df9d58e308", "time" : 1359898891, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Refined completion protocol to account for missing toplevel symbols.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Feb 3 14:41:31 2013 +0100]"},
{"name" : "900dca87c35d74a893ab93ff2d73a72bd7fdbb78", "time" : 1359892436, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Making contexts retained in completers condensed to avoid space leaks\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Feb 3 12:53:56 2013 +0100]"},
{"name" : "8ac1b32ad3b190de82f5c4f1d1666f093ad8c20f", "time" : 1359889178, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Integration of settings, platform, pathresolver, etc.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Feb 3 11:59:38 2013 +0100]"},
{"name" : "abc8f5e1c382b1ead761976227878c4c38ebfbf5", "time" : 1359737520, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added config package with settings, platform.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 1 17:52:00 2013 +0100]"},
{"name" : "5610fe1abbb8e4cb005d644f37669f872327828b", "time" : 1359727203, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Refined completion, in particular for module symbols and made contexts explicit.\n\nMade contexts in class constructors explicit (named initctx), so that we can better track where they are used. It's important that the context is not retained in the state of the object.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Feb 1 15:00:03 2013 +0100]"},
{"name" : "4faeeceffdbc8dec9dd53bf299174a13d6bf87d0", "time" : 1359654631, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Generalized no-prefix types to types that can refer to an arbitrary fixed symbol.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jan 31 18:50:31 2013 +0100]"},
{"name" : "340477017cea9dee6dff06f976cc1a42bb858671", "time" : 1359653761, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added io infrastructure needed for SymbolLoaders\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jan 31 18:36:01 2013 +0100]"},
{"name" : "398a7a97a34b640d8e6922092db1d73836d0512c", "time" : 1359639925, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Various smallish fixes.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jan 31 14:45:25 2013 +0100]"},
{"name" : "d6b7daeb806c0bca661ac8904f85c4cb6cc6185d", "time" : 1359638363, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fleshed out definitions and class loading architecture.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jan 31 14:19:23 2013 +0100]"},
{"name" : "13d6d22aee79670de9dd8fb26eb243b2d21f58c4", "time" : 1359566353, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Swiztched to name table, added StdNames and related definitions. Introduced LocalNames.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Jan 30 18:19:13 2013 +0100]"},
{"name" : "bbc4f7a3234937e5f79e8310e6fff2f9b4af0f98", "time" : 1359449077, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "New Context architecture based on cloning\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Jan 29 09:44:37 2013 +0100]"},
{"name" : "9770566c50baff03a7e61344c203b29db8750e8f", "time" : 1359396534, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added operations and flags for package objects.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jan 28 19:08:54 2013 +0100]"},
{"name" : "0aac7396c3eda56375c15568b81f48262d47d35b", "time" : 1359384933, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Consolidation of Symbols\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jan 28 15:55:33 2013 +0100]"},
{"name" : "9a8a439d059b52d37b317059e66d04ccced1d05c", "time" : 1359297159, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Merge branch 'unary-refinements'\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Jan 27 15:32:39 2013 +0100]"},
{"name" : "a7ef4380d97a32e00d8ab23eeafa0bedfbc97838", "time" : 1359294917, "y" : 4601, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Simplified RefinedTypes, keeping only the unary variant.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Jan 27 14:55:17 2013 +0100]"},
{"name" : "d9a37eaf5d36d772d59bca81237c19b3eb11db42", "time" : 1359288806, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Merge branch 'revamp-lazydenots'\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Jan 27 13:13:26 2013 +0100]"},
{"name" : "fb647426bc48bbb9928fbc1476fc5104376da0f5", "time" : 1359288685, "y" : 4603, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Revised lazy loading, and typeParams are now computed from decls.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Jan 27 13:11:25 2013 +0100]"},
{"name" : "5f6966df2f7b738a498d3aa3d1995e560e696f34", "time" : 1359280447, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Merge branch 'no-applied-types'\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Jan 27 10:54:07 2013 +0100]"},
{"name" : "26cc006105195892c723a26ff2ee4ea703ba971a", "time" : 1359278504, "y" : 4605, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Completed elimination of AppliedType\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Jan 27 10:21:44 2013 +0100]"},
{"name" : "bdbdfe811a86b3f30542ab63fb001012589757e9", "time" : 1359274514, "y" : 4605, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Reverted tresatment of NoType in AppliedType: 6ed74c3a2f38aadfb0bf\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Jan 27 09:15:14 2013 +0100]"},
{"name" : "c215dbb2870a748ad7d3f2285c561cf452848c92", "time" : 1359274360, "y" : 4605, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "More eliminations of AppliedType\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Jan 27 09:12:40 2013 +0100]"},
{"name" : "72b91d2049c56c26322ec1dcf6890c436539faf2", "time" : 1359140399, "y" : 4605, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "File rename.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jan 25 19:59:59 2013 +0100]"},
{"name" : "f16ef75bd4cb3507c19a8b74b9cd835fa20578dc", "time" : 1359140312, "y" : 4605, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Optimized RefinedType\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Jan 25 19:58:32 2013 +0100]"},
{"name" : "8621d34646e15b14ffd7ac2a7a8ca6eb587b1426", "time" : 1359037276, "y" : 4605, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Various additions to symbols, denotations, and elsewhere\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jan 24 15:21:16 2013 +0100]"},
{"name" : "6ed74c3a2f38aadfb0bf2110cae00309b9050708", "time" : 1359037121, "y" : 4605, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Allows for NoType in AplliedType argument lists, as well as argument lists that are shorter than type parameter lists.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jan 24 15:18:41 2013 +0100]"},
{"name" : "41c884462cb017398573a19412e987991f15a232", "time" : 1358861510, "y" : 4605, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Made classOfId grow to match superId range.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Jan 22 14:31:50 2013 +0100]"},
{"name" : "5bbc8bc0bb0930b9199959e48aaf7b90ce8374f6", "time" : 1358793079, "y" : 4605, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added explanation how core classes for types, symbols, and denotations relate to each other.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jan 21 19:31:19 2013 +0100]"},
{"name" : "4822da28b769484f9dac3ec83d437149e0559a48", "time" : 1358774672, "y" : 4605, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Changed NamedType dereferencing so that we need not keep track of name validity periods. Instead, we simply retry on missing member lookup in an earlier phase. This scheme is less complicated and works as long as names that are renamed in phase A are not re-used in a phase B >= A.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jan 21 14:24:32 2013 +0100]"},
{"name" : "e59b8822f53fa6fad057ac9642d31e4026800bf5", "time" : 1358768591, "y" : 4605, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Big renaming to drop Reference(d) as a terminology and use Denotation instead. previous Denotations (which already were a subclass) are renamed to SymDenotations.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jan 21 12:43:11 2013 +0100]"},
{"name" : "a14284769027bc81e48ccfa3379c6448d1399dfc", "time" : 1358762487, "y" : 4605, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Refined lazy loading and completion, added new fields to Denotation.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jan 21 11:01:27 2013 +0100]"},
{"name" : "e0a1850cefd0fd44659325b42fa04e9bf4377044", "time" : 1358762457, "y" : 4605, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Hardened Flags.allOf and some other improvements to flags.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Mon Jan 21 11:00:57 2013 +0100]"},
{"name" : "4623fc18d51c6909c85d22627d6638c16a7d806f", "time" : 1358688117, "y" : 4605, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Polished FlagSet abstraction\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Jan 20 14:21:57 2013 +0100]"},
{"name" : "f0006cf691aab04faf79fa00ba578634a5497892", "time" : 1358678790, "y" : 4605, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fleshed out Flags architecture and started work on Symbols.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Jan 20 11:46:30 2013 +0100]"},
{"name" : "7ec55667d7d206cdf3de6d629cace47996a796bb", "time" : 1358418524, "y" : 4605, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Renamed hasFlag… operations to contains/intersects\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jan 17 11:28:44 2013 +0100]"},
{"name" : "dc90608f2646be48eaf643ae7c19604b6333189c", "time" : 1358418273, "y" : 4605, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Defined Denotation parameters.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jan 17 11:24:33 2013 +0100]"},
{"name" : "4ad6538f7d67a42747d578feaaee633c390c4cbc", "time" : 1358414631, "y" : 4605, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Renamed \"Reference\" to \"Referenced\".\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jan 17 10:23:51 2013 +0100]"},
{"name" : "b43de54be5c4d91762d8dc6a4ce7b612935639f9", "time" : 1358412845, "y" : 4605, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Completed period-tracking in named types. Made Denotation a subtype of symblic referenced and generalized denotation versioning to referenced versioning.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jan 17 09:54:05 2013 +0100]"},
{"name" : "dc2d3c7a138a30e74836928e0ad8872cdf8a00ab", "time" : 1358412668, "y" : 4605, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fleshed out transformer architecture.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jan 17 09:51:08 2013 +0100]"},
{"name" : "103a34e256c21d84b3e6b772de999ab804aeb1f3", "time" : 1358080389, "y" : 4605, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Made Period a value class.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Jan 13 13:33:09 2013 +0100]"},
{"name" : "1cf21aa86dfd419460ccb8de9c4abb05400fce72", "time" : 1358013224, "y" : 4605, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Update reference handling in NamedType\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jan 12 18:53:44 2013 +0100]"},
{"name" : "9063ebcc8ad5f403db686c780a3e16197f07a95e", "time" : 1358013196, "y" : 4605, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Introduce validFor interval for references.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jan 12 18:53:16 2013 +0100]"},
{"name" : "9638c9e7a7e5067a00c91b6431bf31fcd150332a", "time" : 1358012573, "y" : 4605, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Postulate intersection method for intervals.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jan 12 18:42:53 2013 +0100]"},
{"name" : "1fcde33fe9b96d54862a2b4905efffe3ff59d931", "time" : 1358012539, "y" : 4605, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added lastIntroPhaseId to distinguish when names can be created.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jan 12 18:42:19 2013 +0100]"},
{"name" : "2e7af7a6f52230655c60b9e15e4f2a7ed76391b0", "time" : 1358012409, "y" : 4605, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Invalidate baseType caches on new runs\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Jan 12 18:40:09 2013 +0100]"},
{"name" : "f703cd3b404a8a996b8ad100b4a43acb5cdd73a8", "time" : 1357817003, "y" : 4605, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Refactored Types to move auxiliary operations into Context. Moved per-run state into RootContext.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jan 10 12:23:23 2013 +0100]"},
{"name" : "15927bbb22e4c7d3f4ce45deca282081297a8c41", "time" : 1357816910, "y" : 4605, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fleshed out FlagSets\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Jan 10 12:21:50 2013 +0100]"},
{"name" : "e963bb4a88b9abff796e3616100d0da9b846739a", "time" : 1357502903, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fleshed out Type operations\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Jan 6 21:08:23 2013 +0100]"},
{"name" : "950ecd092b442f8e8ea2eb9e21f3eedfd3d41b80", "time" : 1357473106, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Merge remote-tracking branch 'origin/master'\n\nConflicts:\n	src/dotty/tools/dotc/core/Types.scala\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Jan 6 12:51:46 2013 +0100]"},
{"name" : "0811af43037219946d07f83c5a80aeaa2f1d4cfa", "time" : 1357471477, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fleshed out Types.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Jan 6 12:24:37 2013 +0100]"},
{"name" : "cd0ed1676ac5529b0c04995b9a26f8e165cad4cf", "time" : 1357471147, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Renamed class for SubTypers and added to Context\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Jan 6 12:19:07 2013 +0100]"},
{"name" : "01c99aa384b42e3d19bb7e8e0f7b85ea9102e199", "time" : 1356513183, "y" : 4637, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added isStatic check to asSeenFrom\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Wed Dec 26 10:13:03 2012 +0100]"},
{"name" : "a42900db82a35e612779a8d4ca685a9fa76cc92d", "time" : 1356462405, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Refactored asSeenFrom to avoid unnecessary map creations\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Dec 25 20:06:45 2012 +0100]"},
{"name" : "cda2639a5f0dc766c6520aa05015e707e17ef5d5", "time" : 1356451154, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added substThis to substituters\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Dec 25 16:59:14 2012 +0100]"},
{"name" : "a6a4be703a516d4f970b5c8c131083cd981f20c4", "time" : 1356440735, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added Substitution operations\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Dec 25 14:05:35 2012 +0100]"},
{"name" : "f1550a1a132a7a97d461afce1ea79453d78be5ea", "time" : 1356440698, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Small additions and fixes to subtyping logic\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Dec 25 14:04:58 2012 +0100]"},
{"name" : "bca5fe2d51d98fb97646c2a7217a5c60548b08ab", "time" : 1356198799, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "First implementation of SubTyper.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Dec 22 18:53:19 2012 +0100]"},
{"name" : "39ab8822039706b88373954a7e39919938d79f6f", "time" : 1356196415, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Refactored ClassInfoType content back to Denotation. Created separate ClassInfo type, which combines\na prefix with a ClassInfo denotation. That leads to better regularity elsewhere, because now taking the info of a TypeRef will not lose information: If the info is a TypeBounds, the prefix is already taken account in it, and for ClassInfo we now record it explicitly.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Dec 22 18:13:35 2012 +0100]"},
{"name" : "78f0d5a0e0ea477087385277d217d9300c018aa0", "time" : 1356195898, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Changed scheme in Trees so that immutable trees are now Tree[Nothing].\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Dec 22 18:04:58 2012 +0100]"},
{"name" : "01d8a0d90520ea60ead7b2e97cdb79f0a70d6d08", "time" : 1356195836, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "New atSignature method in References.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Dec 22 18:03:56 2012 +0100]"},
{"name" : "c88f31f494bf4aa5f8210b603d34a5c70a274186", "time" : 1356195788, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Fixes to Position.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Dec 22 18:03:08 2012 +0100]"},
{"name" : "4f9a6165d4df0970a7ced9a91f766d94c83dbec7", "time" : 1356195759, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Some more definitions in Definitions.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sat Dec 22 18:02:39 2012 +0100]"},
{"name" : "5ad4db0a737619a75fc686590541a3e6285776e7", "time" : 1355840788, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Simpler implementation of shalloCopy as clone.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Dec 18 15:26:28 2012 +0100]"},
{"name" : "2efa4cb538928fd5a4a3b0a9e87b4406a48ab3f2", "time" : 1355840035, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Renamed worksheet that deals with periods\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Dec 18 15:13:55 2012 +0100]"},
{"name" : "0b0338721ba7c040204dcb44cfb4bc750acbcc5c", "time" : 1355840014, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "First rough draft of trees. They use copy on write semantics for the tpe attribute, following Paul's suggestion.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Dec 18 15:13:34 2012 +0100]"},
{"name" : "5991fd353278dd8b4e30d080fdfb846b060ea327", "time" : 1355839967, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Started working on Subtyper object\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Dec 18 15:12:47 2012 +0100]"},
{"name" : "789d15e6d5d98880dd64c8b55b9c2456f020b46b", "time" : 1355839940, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "(1) Moved logic from ClassDenotation to ClassInfoType. (2) Tweaks to other types. (3) FlagSet is now a value class.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Dec 18 15:12:20 2012 +0100]"},
{"name" : "4481a057fb5906c002788642aaad34a6cf1124ef", "time" : 1355839719, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added rudimentary definitions for Positions\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Dec 18 15:08:39 2012 +0100]"},
{"name" : "34e361306fa62a211655a6becbc4b7dbe8b69b16", "time" : 1355839639, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Added rudimentary Definitions object\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Tue Dec 18 15:07:19 2012 +0100]"},
{"name" : "145bab8190f904c9ee2df820491043436b2fdf36", "time" : 1355675994, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Implemented baseClasses and baseTypes (2). Refactored RefinedType and ClassInfoType.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 16 17:39:54 2012 +0100]"},
{"name" : "3468813082f035fef9984d480fd01e74a65028a0", "time" : 1355675961, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Implemented baseClasses and baseTypes. Refactored RefinedType and ClassInfoType.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Sun Dec 16 17:39:21 2012 +0100]"},
{"name" : "30cafea909e3986f7cd12264a28c0d57d7741a2a", "time" : 1355484126, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Re-introducing Rereferences as an intermediate structure, separate from types.\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Fri Dec 14 12:22:06 2012 +0100]"},
{"name" : "fa113713637771e91ac9f02621bbe1d25d508821", "time" : 1354802308, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Streamlined hashing scheme for types\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Dec 6 14:58:28 2012 +0100]"},
{"name" : "807014c22792689cc1a248b12c11d493fb5482d7", "time" : 1354799283, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "removing .worksheet files\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Dec 6 14:08:03 2012 +0100]"},
{"name" : "90962407e72d88f8f3249ade0f6bd60ff15af5ce", "time" : 1354799160, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "Initial commit\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Dec 6 14:06:00 2012 +0100]"},
{"name" : "2308509d2651ee78e1122b5d61b798c984c96c4d", "time" : 1354798941, "y" : 0, "branches" : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "comment" : "readme added\n", "author" : "PersonIdent[Martin Odersky, odersky@gmail.com, Thu Dec 6 14:02:21 2012 +0100]"}];